{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageEncryption = void 0;\nconst util_1 = require(\"@radixdlt/util\");\nconst neverthrow_1 = require(\"neverthrow\");\nconst _types_1 = require(\"./_types\");\nconst key_derivation_functions_1 = require(\"../key-derivation-functions\");\nconst symmetric_encryption_1 = require(\"../symmetric-encryption\");\nconst hash_1 = require(\"../hash\");\nconst message_1 = require(\"./message\");\nconst elliptic_curve_1 = require(\"../elliptic-curve\");\nconst sealedMessage_1 = require(\"./sealedMessage\");\nconst calculateSharedSecret = input => {\n  const {\n    diffieHellmanPoint\n  } = input;\n  return diffieHellmanPoint().map(dhKey => {\n    const ephemeralPoint = input.ephemeralPublicKey.decodeToPointOnCurve();\n    const sharedSecretPoint = dhKey.add(ephemeralPoint);\n    const data = sharedSecretPoint.x.toString(16);\n    const buf = Buffer.alloc(32);\n    buf.write(data.padStart(64, '0'), 'hex');\n    return buf;\n  });\n};\nconst kdf = (secret, nonce) => {\n  const salt = (0, hash_1.sha256)(nonce);\n  return key_derivation_functions_1.Scrypt.deriveKey({\n    password: secret,\n    kdf: 'scrypt',\n    params: key_derivation_functions_1.ScryptParams.create({\n      salt\n    })\n  });\n};\nconst decryptAESSealedBox = input => {\n  const nonce = input.aesSealedBox.nonce;\n  const {\n    additionalAuthenticationData\n  } = input;\n  return kdf(input.sharedSecret, nonce).map(symmetricKey => Object.assign(Object.assign({}, input.aesSealedBox), {\n    symmetricKey,\n    additionalAuthenticationData\n  })).andThen(symmetric_encryption_1.AES_GCM.open);\n};\nconst aesSealedBoxFromSealedMessage = sealedMessage => symmetric_encryption_1.AES_GCM_SealedBox.create({\n  authTag: sealedMessage.authTag,\n  ciphertext: sealedMessage.ciphertext,\n  nonce: sealedMessage.nonce\n});\nconst decryptMessage = input => {\n  const ephemeralPublicKey = input.sealedMessage.ephemeralPublicKey;\n  const additionalAuthenticationData = ephemeralPublicKey.asData({\n    compressed: true\n  });\n  return (0, neverthrow_1.combine)([aesSealedBoxFromSealedMessage(input.sealedMessage).asyncAndThen(neverthrow_1.okAsync), calculateSharedSecret(Object.assign(Object.assign({}, input), {\n    ephemeralPublicKey\n  }))]).map(resultList => {\n    const aesSealedBox = resultList[0];\n    const sharedSecret = resultList[1];\n    return {\n      aesSealedBox,\n      sharedSecret,\n      additionalAuthenticationData\n    };\n  }).andThen(decryptAESSealedBox);\n};\nconst decryptEncryptedMessageBuffer = input => message_1.Message.fromBuffer(input.messageBuffer).andThen(message => message.kind === 'ENCRYPTED' ? (0, neverthrow_1.ok)([{\n  diffieHellmanPoint: input.diffieHellmanPoint,\n  sealedMessage: message.sealedMessage\n}]) : (0, neverthrow_1.err)(Error(`Expected an encrypted message, but got a plaintext message.`))).asyncAndThen(a => decryptMessage(...a));\nconst decrypt = input => Buffer.isBuffer(input.encryptedMessage) ? decryptEncryptedMessageBuffer(Object.assign(Object.assign({}, input), {\n  messageBuffer: input.encryptedMessage\n})) : decryptMessage(Object.assign(Object.assign({}, input), {\n  sealedMessage: input.encryptedMessage.sealedMessage\n}));\nconst encodePlaintext = plaintext => typeof plaintext === 'string' ? Buffer.from(plaintext, 'utf-8') : plaintext;\nconst __encryptDeterministic = input => {\n  const {\n    nonce,\n    ephemeralPublicKey\n  } = input;\n  const additionalAuthenticationData = ephemeralPublicKey.asData({\n    compressed: true\n  });\n  const plaintext = encodePlaintext(input.plaintext);\n  if (plaintext.length > message_1.Message.maxLengthOfCipherTextOfSealedMsg) {\n    const errMsg = `Plaintext is too long, expected max #${message_1.Message.maxLengthOfCipherTextOfSealedMsg}, but got: #${plaintext.length}`;\n    return (0, neverthrow_1.errAsync)(new Error(errMsg));\n  }\n  return calculateSharedSecret(Object.assign({}, input)).andThen(sharedSecret => kdf(sharedSecret, nonce).andThen(symmetricKey => (0, symmetric_encryption_1.aesGCMSealDeterministic)({\n    nonce,\n    plaintext,\n    additionalAuthenticationData,\n    symmetricKey\n  })).andThen(s => sealedMessage_1.SealedMessage.fromAESSealedBox(s, ephemeralPublicKey)).andThen(sealedMessage => message_1.Message.createEncrypted(_types_1.EncryptionScheme.DH_ADD_EPH_AESGCM256_SCRYPT_000, sealedMessage)));\n};\nconst encrypt = input => {\n  var _a;\n  const secureRandom = (_a = input.secureRandom) !== null && _a !== void 0 ? _a : util_1.secureRandomGenerator;\n  const nonce = Buffer.from(secureRandom.randomSecureBytes(symmetric_encryption_1.AES_GCM.nonceLength), 'hex');\n  const ephemeralKeyPair = elliptic_curve_1.KeyPair.generateNew(secureRandom);\n  const ephemeralPublicKey = ephemeralKeyPair.publicKey;\n  return __encryptDeterministic(Object.assign(Object.assign({}, input), {\n    nonce,\n    ephemeralPublicKey\n  }));\n};\nexports.MessageEncryption = {\n  __encryptDeterministic,\n  encodePlaintext,\n  encrypt,\n  decrypt\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","MessageEncryption","util_1","require","neverthrow_1","_types_1","key_derivation_functions_1","symmetric_encryption_1","hash_1","message_1","elliptic_curve_1","sealedMessage_1","calculateSharedSecret","input","diffieHellmanPoint","map","dhKey","ephemeralPoint","ephemeralPublicKey","decodeToPointOnCurve","sharedSecretPoint","add","data","x","toString","buf","Buffer","alloc","write","padStart","kdf","secret","nonce","salt","sha256","Scrypt","deriveKey","password","params","ScryptParams","create","decryptAESSealedBox","aesSealedBox","additionalAuthenticationData","sharedSecret","symmetricKey","assign","andThen","AES_GCM","open","aesSealedBoxFromSealedMessage","sealedMessage","AES_GCM_SealedBox","authTag","ciphertext","decryptMessage","asData","compressed","combine","asyncAndThen","okAsync","resultList","decryptEncryptedMessageBuffer","Message","fromBuffer","messageBuffer","message","kind","ok","err","Error","a","decrypt","isBuffer","encryptedMessage","encodePlaintext","plaintext","from","__encryptDeterministic","length","maxLengthOfCipherTextOfSealedMsg","errMsg","errAsync","aesGCMSealDeterministic","s","SealedMessage","fromAESSealedBox","createEncrypted","EncryptionScheme","DH_ADD_EPH_AESGCM256_SCRYPT_000","encrypt","_a","secureRandom","secureRandomGenerator","randomSecureBytes","nonceLength","ephemeralKeyPair","KeyPair","generateNew","publicKey"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/crypto/dist/encryption/messageEncryption.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessageEncryption = void 0;\nconst util_1 = require(\"@radixdlt/util\");\nconst neverthrow_1 = require(\"neverthrow\");\nconst _types_1 = require(\"./_types\");\nconst key_derivation_functions_1 = require(\"../key-derivation-functions\");\nconst symmetric_encryption_1 = require(\"../symmetric-encryption\");\nconst hash_1 = require(\"../hash\");\nconst message_1 = require(\"./message\");\nconst elliptic_curve_1 = require(\"../elliptic-curve\");\nconst sealedMessage_1 = require(\"./sealedMessage\");\nconst calculateSharedSecret = (input) => {\n    const { diffieHellmanPoint } = input;\n    return diffieHellmanPoint().map((dhKey) => {\n        const ephemeralPoint = input.ephemeralPublicKey.decodeToPointOnCurve();\n        const sharedSecretPoint = dhKey.add(ephemeralPoint);\n        const data = sharedSecretPoint.x.toString(16);\n        const buf = Buffer.alloc(32);\n        buf.write(data.padStart(64, '0'), 'hex');\n        return buf;\n    });\n};\nconst kdf = (secret, nonce) => {\n    const salt = (0, hash_1.sha256)(nonce);\n    return key_derivation_functions_1.Scrypt.deriveKey({\n        password: secret,\n        kdf: 'scrypt',\n        params: key_derivation_functions_1.ScryptParams.create({ salt }),\n    });\n};\nconst decryptAESSealedBox = (input) => {\n    const nonce = input.aesSealedBox.nonce;\n    const { additionalAuthenticationData } = input;\n    return kdf(input.sharedSecret, nonce)\n        .map(symmetricKey => (Object.assign(Object.assign({}, input.aesSealedBox), { symmetricKey,\n        additionalAuthenticationData })))\n        .andThen(symmetric_encryption_1.AES_GCM.open);\n};\nconst aesSealedBoxFromSealedMessage = (sealedMessage) => symmetric_encryption_1.AES_GCM_SealedBox.create({\n    authTag: sealedMessage.authTag,\n    ciphertext: sealedMessage.ciphertext,\n    nonce: sealedMessage.nonce,\n});\nconst decryptMessage = (input) => {\n    const ephemeralPublicKey = input.sealedMessage.ephemeralPublicKey;\n    const additionalAuthenticationData = ephemeralPublicKey.asData({\n        compressed: true,\n    });\n    return (0, neverthrow_1.combine)([\n        aesSealedBoxFromSealedMessage(input.sealedMessage).asyncAndThen(neverthrow_1.okAsync),\n        calculateSharedSecret(Object.assign(Object.assign({}, input), { ephemeralPublicKey })),\n    ])\n        .map(resultList => {\n        const aesSealedBox = resultList[0];\n        const sharedSecret = resultList[1];\n        return {\n            aesSealedBox,\n            sharedSecret,\n            additionalAuthenticationData,\n        };\n    })\n        .andThen(decryptAESSealedBox);\n};\nconst decryptEncryptedMessageBuffer = (input) => message_1.Message.fromBuffer(input.messageBuffer)\n    .andThen((message) => message.kind === 'ENCRYPTED'\n    ? (0, neverthrow_1.ok)([\n        {\n            diffieHellmanPoint: input.diffieHellmanPoint,\n            sealedMessage: message.sealedMessage,\n        },\n    ])\n    : (0, neverthrow_1.err)(Error(`Expected an encrypted message, but got a plaintext message.`)))\n    .asyncAndThen(a => decryptMessage(...a));\nconst decrypt = (input) => Buffer.isBuffer(input.encryptedMessage)\n    ? decryptEncryptedMessageBuffer(Object.assign(Object.assign({}, input), { messageBuffer: input.encryptedMessage }))\n    : decryptMessage(Object.assign(Object.assign({}, input), { sealedMessage: input.encryptedMessage.sealedMessage }));\nconst encodePlaintext = (plaintext) => typeof plaintext === 'string' ? Buffer.from(plaintext, 'utf-8') : plaintext;\nconst __encryptDeterministic = (input) => {\n    const { nonce, ephemeralPublicKey } = input;\n    const additionalAuthenticationData = ephemeralPublicKey.asData({\n        compressed: true,\n    });\n    const plaintext = encodePlaintext(input.plaintext);\n    if (plaintext.length > message_1.Message.maxLengthOfCipherTextOfSealedMsg) {\n        const errMsg = `Plaintext is too long, expected max #${message_1.Message.maxLengthOfCipherTextOfSealedMsg}, but got: #${plaintext.length}`;\n        return (0, neverthrow_1.errAsync)(new Error(errMsg));\n    }\n    return calculateSharedSecret(Object.assign({}, input)).andThen(sharedSecret => kdf(sharedSecret, nonce)\n        .andThen(symmetricKey => (0, symmetric_encryption_1.aesGCMSealDeterministic)({\n        nonce,\n        plaintext,\n        additionalAuthenticationData,\n        symmetricKey,\n    }))\n        .andThen(s => sealedMessage_1.SealedMessage.fromAESSealedBox(s, ephemeralPublicKey))\n        .andThen((sealedMessage) => message_1.Message.createEncrypted(_types_1.EncryptionScheme.DH_ADD_EPH_AESGCM256_SCRYPT_000, sealedMessage)));\n};\nconst encrypt = (input) => {\n    var _a;\n    const secureRandom = (_a = input.secureRandom) !== null && _a !== void 0 ? _a : util_1.secureRandomGenerator;\n    const nonce = Buffer.from(secureRandom.randomSecureBytes(symmetric_encryption_1.AES_GCM.nonceLength), 'hex');\n    const ephemeralKeyPair = elliptic_curve_1.KeyPair.generateNew(secureRandom);\n    const ephemeralPublicKey = ephemeralKeyPair.publicKey;\n    return __encryptDeterministic(Object.assign(Object.assign({}, input), { nonce,\n        ephemeralPublicKey }));\n};\nexports.MessageEncryption = {\n    __encryptDeterministic,\n    encodePlaintext,\n    encrypt,\n    decrypt,\n};\n//# sourceMappingURL=messageEncryption.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}