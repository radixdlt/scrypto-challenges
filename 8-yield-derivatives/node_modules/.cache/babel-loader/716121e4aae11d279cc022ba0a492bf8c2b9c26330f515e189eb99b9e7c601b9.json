{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar Rx_1 = require(\"rxjs/Rx\");\nvar rpc_websockets_1 = require(\"rpc-websockets\");\nvar atommodel_1 = require(\"../atommodel\");\nvar RadixLogger_1 = require(\"../common/RadixLogger\");\nvar events_1 = tslib_1.__importDefault(require(\"events\"));\nvar RadixNodeConnection = /** @class */function (_super) {\n  tslib_1.__extends(RadixNodeConnection, _super);\n  function RadixNodeConnection(node) {\n    var _this = _super.call(this) || this;\n    _this.node = node;\n    _this._subscriptions = {};\n    _this._atomUpdateSubjects = {};\n    _this._addressSubscriptions = {};\n    _this.lastSubscriberId = 1;\n    _this.ping = function () {\n      if (_this.isReady()) {\n        _this._socket.call('Ping', {\n          id: 0\n        }).then(function (response) {\n          RadixLogger_1.logger.debug(\"Ping\", response);\n        }).catch(function (error) {\n          RadixLogger_1.logger.warn(\"Error sending ping\", error);\n        });\n      }\n    };\n    _this.close = function () {\n      _this._socket.close();\n      clearInterval(_this.pingInterval);\n    };\n    _this._onClosed = function () {\n      RadixLogger_1.logger.info('Socket closed');\n      clearInterval(_this.pingInterval);\n      // Close subject\n      for (var subscriberId in _this._subscriptions) {\n        var subscription = _this._subscriptions[subscriberId];\n        if (!subscription.closed) {\n          subscription.error('Socket closed');\n        }\n      }\n      for (var subscriberId in _this._atomUpdateSubjects) {\n        var subject = _this._atomUpdateSubjects[subscriberId];\n        if (!subject.closed) {\n          subject.error('Socket closed');\n        }\n      }\n      _this.emit('closed');\n    };\n    _this._onAtomStatusNotification = function (notification) {\n      RadixLogger_1.logger.info('Atom Status notification', notification);\n      // Handle atom state update\n      var subscriberId = notification.subscriberId;\n      var value = notification.status;\n      var message = JSON.stringify(notification.data);\n      var subject = _this._atomUpdateSubjects[subscriberId];\n      switch (value) {\n        case 'STORED':\n          subject.next(value);\n          subject.complete();\n          break;\n        case 'EVICTED_CONFLICT_LOSER':\n        case 'EVICTED_FAILED_CM_VERIFICATION':\n        case 'MISSING_DEPEPENDENCY':\n        case 'CONFLICT_LOSER':\n          subject.error(value + ': ' + message);\n          break;\n      }\n    };\n    _this._onAtomSubmissionStateUpdate = function (notification) {\n      RadixLogger_1.logger.info('Atom Submission state update', notification);\n      // Handle atom state update\n      var subscriberId = notification.subscriberId;\n      var value = notification.value;\n      var message = JSON.stringify(notification.data);\n      var subject = _this._atomUpdateSubjects[subscriberId];\n      switch (value) {\n        case 'SUBMITTING':\n        case 'SUBMITTED':\n          subject.next(value);\n          break;\n        case 'STORED':\n          subject.next(value);\n          subject.complete();\n          break;\n        case 'COLLISION':\n        case 'ILLEGAL_STATE':\n        case 'UNSUITABLE_PEER':\n        case 'VALIDATION_ERROR':\n          subject.error(value + ': ' + message);\n          break;\n      }\n    };\n    _this._onAtomReceivedNotification = function (notification) {\n      var e_1, _a;\n      RadixLogger_1.logger.debug('Atoms notification', notification);\n      // Store atom for testing\n      // const jsonPath = `./atomNotification-${Math.random().toString(36).substring(6)}.json`\n      // // let jsonPath = path.join(__dirname, '..', '..', '..', '..', 'atomNotification.json')\n      // logger.info(jsonPath)\n      // fs.writeFile(jsonPath, JSON.stringify(notification), (error) => {\n      //    // Throws an error, you could also catch it here\n      //    if (error) { throw error }\n      //    // Success case, the file was saved\n      //    logger.info('Atoms saved!')\n      // })\n      var deserializedAtomEvents = atommodel_1.RadixSerializer.fromJSON(notification.atomEvents);\n      RadixLogger_1.logger.debug('Recieved atom AIDs, subscriberId: ' + notification.subscriberId, deserializedAtomEvents.map(function (event) {\n        return {\n          aid: event.atom.getAidString(),\n          type: event.type\n        };\n      }));\n      // logger.debug('AtomEvents', deserializedAtomEvents)\n      // Forward atoms to correct wallets\n      var subscription = _this._subscriptions[notification.subscriberId];\n      try {\n        for (var deserializedAtomEvents_1 = tslib_1.__values(deserializedAtomEvents), deserializedAtomEvents_1_1 = deserializedAtomEvents_1.next(); !deserializedAtomEvents_1_1.done; deserializedAtomEvents_1_1 = deserializedAtomEvents_1.next()) {\n          var event_1 = deserializedAtomEvents_1_1.value;\n          subscription.next({\n            action: event_1.type.toUpperCase(),\n            atom: event_1.atom,\n            processedData: {},\n            // Only set to head if it is the last atom of an update\n            isHead: event_1 === deserializedAtomEvents[deserializedAtomEvents.length - 1]\n          });\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (deserializedAtomEvents_1_1 && !deserializedAtomEvents_1_1.done && (_a = deserializedAtomEvents_1.return)) _a.call(deserializedAtomEvents_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    };\n    _this.node = node;\n    return _this;\n  }\n  RadixNodeConnection.prototype.getSubscriberId = function () {\n    this.lastSubscriberId++;\n    return this.lastSubscriberId + '';\n  };\n  /**\n   * Check whether the node connection is ready for requests\n   * @returns true if ready\n   */\n  RadixNodeConnection.prototype.isReady = function () {\n    return this._socket && this._socket.ready;\n  };\n  /**\n   * Opens connection\n   * @returns a promise that resolves once the connection is ready, or rejects on error or timeout\n   */\n  RadixNodeConnection.prototype.openConnection = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return tslib_1.__generator(this, function (_a) {\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n          _this.address = _this.node.wsAddress;\n          // For testing atom queueing during connection issues\n          // if (Math.random() > 0.1) {\n          //    this.address += 'garbage'\n          // }\n          RadixLogger_1.logger.info(\"Connecting to \" + _this.address);\n          _this._socket = new rpc_websockets_1.Client(_this.address, {\n            reconnect: false\n          });\n          _this._socket.on('close', _this._onClosed);\n          _this._socket.on('error', function (error) {\n            RadixLogger_1.logger.error(error);\n            reject(error);\n          });\n          setTimeout(function () {\n            if (!_this._socket.ready) {\n              RadixLogger_1.logger.debug('Socket timeout');\n              _this._socket.close();\n              _this.emit('closed');\n              reject('Timeout');\n            }\n          }, 5000);\n          _this._socket.on('open', function () {\n            RadixLogger_1.logger.info(\"Connected to \" + _this.address);\n            _this.pingInterval = setInterval(_this.ping, 10000);\n            _this.emit('open');\n            _this._socket.on('Atoms.subscribeUpdate', _this._onAtomReceivedNotification);\n            _this._socket.on('AtomSubmissionState.onNext', _this._onAtomSubmissionStateUpdate);\n            _this._socket.on('Atoms.nextStatusEvent', _this._onAtomStatusNotification);\n            resolve();\n          });\n        })];\n      });\n    });\n  };\n  /**\n   * Subscribe for all existing and future atoms for a given address\n   *\n   * @param address Base58 formatted address\n   * @returns A stream of atoms\n   */\n  RadixNodeConnection.prototype.subscribe = function (address) {\n    var _this = this;\n    var subscriberId = this.getSubscriberId();\n    this._addressSubscriptions[address] = subscriberId;\n    this._subscriptions[subscriberId] = new Rx_1.Subject();\n    this._socket.call('Atoms.subscribe', {\n      subscriberId: subscriberId,\n      query: {\n        address: address\n      },\n      debug: true\n    }).then(function (response) {\n      RadixLogger_1.logger.info(\"Subscribed for address \" + address, response);\n    }).catch(function (error) {\n      RadixLogger_1.logger.error(\"Error subscribing for address \" + address, error);\n      _this._subscriptions[subscriberId].error(error);\n    });\n    return this._subscriptions[subscriberId];\n  };\n  /**\n   * Unsubscribe for all existing and future atoms for a given address\n   *\n   * @param address - Base58 formatted address\n   * @returns A promise with the result of the unsubscription call\n   */\n  RadixNodeConnection.prototype.unsubscribe = function (address) {\n    var _this = this;\n    var subscriberId = this._addressSubscriptions[address];\n    return new Promise(function (resolve, reject) {\n      _this._socket.call('Atoms.cancel', {\n        subscriberId: subscriberId\n      }).then(function (response) {\n        RadixLogger_1.logger.info(\"Unsubscribed for address \" + address);\n        _this._subscriptions[_this._addressSubscriptions[address]].complete();\n        delete _this._addressSubscriptions[address];\n        resolve(response);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  };\n  /**\n   * Unsubscribes to all the addresses this node is subscribed to\n   *\n   * @returns An array with the result of each unsubscription\n   */\n  RadixNodeConnection.prototype.unsubscribeAll = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var unsubscriptions = new Array();\n      for (var address in _this._addressSubscriptions) {\n        unsubscriptions.push(_this.unsubscribe(address));\n      }\n      Promise.all(unsubscriptions).then(function (values) {\n        resolve(values);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  };\n  /**\n   * Submit an atom to the ledger\n   *\n   * @param atom - The atom to be submitted\n   * @returns A stream of the status of the atom submission\n   */\n  RadixNodeConnection.prototype.submitAtom = function (atom) {\n    // // Store atom for testing\n    // let jsonPath = path.join('./submitAtom.json')\n    // logger.info(jsonPath)\n    // fs.writeFile(jsonPath, JSON.stringify(atom.toJSON()), (error) => {\n    //    // Throws an error, you could also catch it here\n    //    if (error) { throw error }\n    var _this = this;\n    //    // Success case, the file was saved\n    //    logger.info('Atom saved!')\n    // })\n    var subscriberId = this.getSubscriberId();\n    var atomStateSubject = new Rx_1.BehaviorSubject('CREATED');\n    this._atomUpdateSubjects[subscriberId] = atomStateSubject;\n    var timeout = setTimeout(function () {\n      _this._socket.close();\n      atomStateSubject.error('Socket timeout');\n    }, 5000);\n    this._socket.call('Atoms.getAtomStatusNotifications', {\n      subscriberId: subscriberId,\n      aid: atom.getAidString()\n    }).then(function (response) {\n      var atomJSON = atommodel_1.RadixSerializer.toJSON(atom);\n      return _this._socket.call('Atoms.submitAtom', atomJSON);\n    }).then(function (response) {\n      if (response.aid !== atom.getAidString()) {\n        throw new Error(\"Local AID \\\"\" + atom.getAidString() + \"\\\" does not match that computed on the node \\\"\" + response.aid + \"\\\".\\nThis is a radixdlt-js issue, please report this at https://github.com/radixdlt/radixdlt-js/issues . \\nThe atom may or may not have been accepted by the node.\\n                    \");\n      }\n      clearTimeout(timeout);\n      atomStateSubject.next('SUBMITTED');\n    }).catch(function (error) {\n      clearTimeout(timeout);\n      atomStateSubject.error(error);\n    });\n    return atomStateSubject;\n  };\n  /**\n   * NOT IMPLEMENTED\n   * Query the ledger for an atom by its id\n   * @param id\n   * @returns The atom\n   */\n  RadixNodeConnection.prototype.getAtomById = function (id) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        // TODO: everything\n        return [2 /*return*/, this._socket.call('Atoms.getAtomInfo', {\n          id: id.toJSON()\n        }).then(function (response) {\n          return atommodel_1.RadixSerializer.fromJSON(response.result);\n        })];\n      });\n    });\n  };\n  return RadixNodeConnection;\n}(events_1.default.EventEmitter);\nexports.RadixNodeConnection = RadixNodeConnection;\nexports.default = RadixNodeConnection;","map":{"version":3,"names":["Rx_1","require","rpc_websockets_1","atommodel_1","RadixLogger_1","events_1","tslib_1","__importDefault","RadixNodeConnection","_super","__extends","node","_this","call","_subscriptions","_atomUpdateSubjects","_addressSubscriptions","lastSubscriberId","ping","isReady","_socket","id","then","response","logger","debug","catch","error","warn","close","clearInterval","pingInterval","_onClosed","info","subscriberId","subscription","closed","subject","emit","_onAtomStatusNotification","notification","value","status","message","JSON","stringify","data","next","complete","_onAtomSubmissionStateUpdate","_onAtomReceivedNotification","deserializedAtomEvents","RadixSerializer","fromJSON","atomEvents","map","event","aid","atom","getAidString","type","deserializedAtomEvents_1","__values","deserializedAtomEvents_1_1","done","event_1","action","toUpperCase","processedData","isHead","length","prototype","getSubscriberId","ready","openConnection","Promise","resolve","reject","address","wsAddress","Client","reconnect","on","setTimeout","setInterval","subscribe","Subject","query","unsubscribe","unsubscribeAll","unsubscriptions","Array","push","all","values","submitAtom","atomStateSubject","BehaviorSubject","timeout","atomJSON","toJSON","Error","clearTimeout","getAtomById","result","default","EventEmitter","exports"],"sources":["../../../../src/modules/universe/RadixNodeConnection.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}