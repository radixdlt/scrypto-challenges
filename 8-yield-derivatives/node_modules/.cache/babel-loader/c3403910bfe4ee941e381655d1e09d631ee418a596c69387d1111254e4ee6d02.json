{"ast":null,"code":"'use strict';\n\nmodule.exports = function generate_validate(it, $keyword, $ruleType) {\n  var out = '';\n  var $async = it.schema.$async === true,\n    $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),\n    $id = it.self._getId(it.schema);\n  if (it.opts.strictKeywords) {\n    var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);\n    if ($unknownKwd) {\n      var $keywordsMsg = 'unknown keyword: ' + $unknownKwd;\n      if (it.opts.strictKeywords === 'log') it.logger.warn($keywordsMsg);else throw new Error($keywordsMsg);\n    }\n  }\n  if (it.isTop) {\n    out += ' var validate = ';\n    if ($async) {\n      it.async = true;\n      out += 'async ';\n    }\n    out += 'function(data, dataPath, parentData, parentDataProperty, rootData) { \\'use strict\\'; ';\n    if ($id && (it.opts.sourceCode || it.opts.processCode)) {\n      out += ' ' + ('/\\*# sourceURL=' + $id + ' */') + ' ';\n    }\n  }\n  if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {\n    var $keyword = 'false schema';\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $errorKeyword;\n    var $data = 'data' + ($dataLvl || '');\n    var $valid = 'valid' + $lvl;\n    if (it.schema === false) {\n      if (it.isTop) {\n        $breakOnError = true;\n      } else {\n        out += ' var ' + $valid + ' = false; ';\n      }\n      var $$outStack = $$outStack || [];\n      $$outStack.push(out);\n      out = ''; /* istanbul ignore else */\n      if (it.createErrors !== false) {\n        out += ' { keyword: \\'' + ($errorKeyword || 'false schema') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';\n        if (it.opts.messages !== false) {\n          out += ' , message: \\'boolean schema is false\\' ';\n        }\n        if (it.opts.verbose) {\n          out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n        }\n        out += ' } ';\n      } else {\n        out += ' {} ';\n      }\n      var __err = out;\n      out = $$outStack.pop();\n      if (!it.compositeRule && $breakOnError) {\n        /* istanbul ignore if */\n        if (it.async) {\n          out += ' throw new ValidationError([' + __err + ']); ';\n        } else {\n          out += ' validate.errors = [' + __err + ']; return false; ';\n        }\n      } else {\n        out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n      }\n    } else {\n      if (it.isTop) {\n        if ($async) {\n          out += ' return data; ';\n        } else {\n          out += ' validate.errors = null; return true; ';\n        }\n      } else {\n        out += ' var ' + $valid + ' = true; ';\n      }\n    }\n    if (it.isTop) {\n      out += ' }; return validate; ';\n    }\n    return out;\n  }\n  if (it.isTop) {\n    var $top = it.isTop,\n      $lvl = it.level = 0,\n      $dataLvl = it.dataLevel = 0,\n      $data = 'data';\n    it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));\n    it.baseId = it.baseId || it.rootId;\n    delete it.isTop;\n    it.dataPathArr = [\"\"];\n    if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {\n      var $defaultMsg = 'default is ignored in the schema root';\n      if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);else throw new Error($defaultMsg);\n    }\n    out += ' var vErrors = null; ';\n    out += ' var errors = 0;     ';\n    out += ' if (rootData === undefined) rootData = data; ';\n  } else {\n    var $lvl = it.level,\n      $dataLvl = it.dataLevel,\n      $data = 'data' + ($dataLvl || '');\n    if ($id) it.baseId = it.resolve.url(it.baseId, $id);\n    if ($async && !it.async) throw new Error('async schema in sync schema');\n    out += ' var errs_' + $lvl + ' = errors;';\n  }\n  var $valid = 'valid' + $lvl,\n    $breakOnError = !it.opts.allErrors,\n    $closingBraces1 = '',\n    $closingBraces2 = '';\n  var $errorKeyword;\n  var $typeSchema = it.schema.type,\n    $typeIsArray = Array.isArray($typeSchema);\n  if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {\n    if ($typeIsArray) {\n      if ($typeSchema.indexOf('null') == -1) $typeSchema = $typeSchema.concat('null');\n    } else if ($typeSchema != 'null') {\n      $typeSchema = [$typeSchema, 'null'];\n      $typeIsArray = true;\n    }\n  }\n  if ($typeIsArray && $typeSchema.length == 1) {\n    $typeSchema = $typeSchema[0];\n    $typeIsArray = false;\n  }\n  if (it.schema.$ref && $refKeywords) {\n    if (it.opts.extendRefs == 'fail') {\n      throw new Error('$ref: validation keywords used in schema at path \"' + it.errSchemaPath + '\" (see option extendRefs)');\n    } else if (it.opts.extendRefs !== true) {\n      $refKeywords = false;\n      it.logger.warn('$ref: keywords ignored in schema at path \"' + it.errSchemaPath + '\"');\n    }\n  }\n  if (it.schema.$comment && it.opts.$comment) {\n    out += ' ' + it.RULES.all.$comment.code(it, '$comment');\n  }\n  if ($typeSchema) {\n    if (it.opts.coerceTypes) {\n      var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);\n    }\n    var $rulesGroup = it.RULES.types[$typeSchema];\n    if ($coerceToTypes || $typeIsArray || $rulesGroup === true || $rulesGroup && !$shouldUseGroup($rulesGroup)) {\n      var $schemaPath = it.schemaPath + '.type',\n        $errSchemaPath = it.errSchemaPath + '/type';\n      var $schemaPath = it.schemaPath + '.type',\n        $errSchemaPath = it.errSchemaPath + '/type',\n        $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';\n      out += ' if (' + it.util[$method]($typeSchema, $data, it.opts.strictNumbers, true) + ') { ';\n      if ($coerceToTypes) {\n        var $dataType = 'dataType' + $lvl,\n          $coerced = 'coerced' + $lvl;\n        out += ' var ' + $dataType + ' = typeof ' + $data + '; var ' + $coerced + ' = undefined; ';\n        if (it.opts.coerceTypes == 'array') {\n          out += ' if (' + $dataType + ' == \\'object\\' && Array.isArray(' + $data + ') && ' + $data + '.length == 1) { ' + $data + ' = ' + $data + '[0]; ' + $dataType + ' = typeof ' + $data + '; if (' + it.util.checkDataType(it.schema.type, $data, it.opts.strictNumbers) + ') ' + $coerced + ' = ' + $data + '; } ';\n        }\n        out += ' if (' + $coerced + ' !== undefined) ; ';\n        var arr1 = $coerceToTypes;\n        if (arr1) {\n          var $type,\n            $i = -1,\n            l1 = arr1.length - 1;\n          while ($i < l1) {\n            $type = arr1[$i += 1];\n            if ($type == 'string') {\n              out += ' else if (' + $dataType + ' == \\'number\\' || ' + $dataType + ' == \\'boolean\\') ' + $coerced + ' = \\'\\' + ' + $data + '; else if (' + $data + ' === null) ' + $coerced + ' = \\'\\'; ';\n            } else if ($type == 'number' || $type == 'integer') {\n              out += ' else if (' + $dataType + ' == \\'boolean\\' || ' + $data + ' === null || (' + $dataType + ' == \\'string\\' && ' + $data + ' && ' + $data + ' == +' + $data + ' ';\n              if ($type == 'integer') {\n                out += ' && !(' + $data + ' % 1)';\n              }\n              out += ')) ' + $coerced + ' = +' + $data + '; ';\n            } else if ($type == 'boolean') {\n              out += ' else if (' + $data + ' === \\'false\\' || ' + $data + ' === 0 || ' + $data + ' === null) ' + $coerced + ' = false; else if (' + $data + ' === \\'true\\' || ' + $data + ' === 1) ' + $coerced + ' = true; ';\n            } else if ($type == 'null') {\n              out += ' else if (' + $data + ' === \\'\\' || ' + $data + ' === 0 || ' + $data + ' === false) ' + $coerced + ' = null; ';\n            } else if (it.opts.coerceTypes == 'array' && $type == 'array') {\n              out += ' else if (' + $dataType + ' == \\'string\\' || ' + $dataType + ' == \\'number\\' || ' + $dataType + ' == \\'boolean\\' || ' + $data + ' == null) ' + $coerced + ' = [' + $data + ']; ';\n            }\n          }\n        }\n        out += ' else {   ';\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = ''; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \\'';\n          if ($typeIsArray) {\n            out += '' + $typeSchema.join(\",\");\n          } else {\n            out += '' + $typeSchema;\n          }\n          out += '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'should be ';\n            if ($typeIsArray) {\n              out += '' + $typeSchema.join(\",\");\n            } else {\n              out += '' + $typeSchema;\n            }\n            out += '\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) {\n          /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + __err + ']); ';\n          } else {\n            out += ' validate.errors = [' + __err + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n        out += ' } if (' + $coerced + ' !== undefined) {  ';\n        var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',\n          $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';\n        out += ' ' + $data + ' = ' + $coerced + '; ';\n        if (!$dataLvl) {\n          out += 'if (' + $parentData + ' !== undefined)';\n        }\n        out += ' ' + $parentData + '[' + $parentDataProperty + '] = ' + $coerced + '; } ';\n      } else {\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = ''; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \\'';\n          if ($typeIsArray) {\n            out += '' + $typeSchema.join(\",\");\n          } else {\n            out += '' + $typeSchema;\n          }\n          out += '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'should be ';\n            if ($typeIsArray) {\n              out += '' + $typeSchema.join(\",\");\n            } else {\n              out += '' + $typeSchema;\n            }\n            out += '\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) {\n          /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + __err + ']); ';\n          } else {\n            out += ' validate.errors = [' + __err + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n      }\n      out += ' } ';\n    }\n  }\n  if (it.schema.$ref && !$refKeywords) {\n    out += ' ' + it.RULES.all.$ref.code(it, '$ref') + ' ';\n    if ($breakOnError) {\n      out += ' } if (errors === ';\n      if ($top) {\n        out += '0';\n      } else {\n        out += 'errs_' + $lvl;\n      }\n      out += ') { ';\n      $closingBraces2 += '}';\n    }\n  } else {\n    var arr2 = it.RULES;\n    if (arr2) {\n      var $rulesGroup,\n        i2 = -1,\n        l2 = arr2.length - 1;\n      while (i2 < l2) {\n        $rulesGroup = arr2[i2 += 1];\n        if ($shouldUseGroup($rulesGroup)) {\n          if ($rulesGroup.type) {\n            out += ' if (' + it.util.checkDataType($rulesGroup.type, $data, it.opts.strictNumbers) + ') { ';\n          }\n          if (it.opts.useDefaults) {\n            if ($rulesGroup.type == 'object' && it.schema.properties) {\n              var $schema = it.schema.properties,\n                $schemaKeys = Object.keys($schema);\n              var arr3 = $schemaKeys;\n              if (arr3) {\n                var $propertyKey,\n                  i3 = -1,\n                  l3 = arr3.length - 1;\n                while (i3 < l3) {\n                  $propertyKey = arr3[i3 += 1];\n                  var $sch = $schema[$propertyKey];\n                  if ($sch.default !== undefined) {\n                    var $passData = $data + it.util.getProperty($propertyKey);\n                    if (it.compositeRule) {\n                      if (it.opts.strictDefaults) {\n                        var $defaultMsg = 'default is ignored for: ' + $passData;\n                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);else throw new Error($defaultMsg);\n                      }\n                    } else {\n                      out += ' if (' + $passData + ' === undefined ';\n                      if (it.opts.useDefaults == 'empty') {\n                        out += ' || ' + $passData + ' === null || ' + $passData + ' === \\'\\' ';\n                      }\n                      out += ' ) ' + $passData + ' = ';\n                      if (it.opts.useDefaults == 'shared') {\n                        out += ' ' + it.useDefault($sch.default) + ' ';\n                      } else {\n                        out += ' ' + JSON.stringify($sch.default) + ' ';\n                      }\n                      out += '; ';\n                    }\n                  }\n                }\n              }\n            } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {\n              var arr4 = it.schema.items;\n              if (arr4) {\n                var $sch,\n                  $i = -1,\n                  l4 = arr4.length - 1;\n                while ($i < l4) {\n                  $sch = arr4[$i += 1];\n                  if ($sch.default !== undefined) {\n                    var $passData = $data + '[' + $i + ']';\n                    if (it.compositeRule) {\n                      if (it.opts.strictDefaults) {\n                        var $defaultMsg = 'default is ignored for: ' + $passData;\n                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);else throw new Error($defaultMsg);\n                      }\n                    } else {\n                      out += ' if (' + $passData + ' === undefined ';\n                      if (it.opts.useDefaults == 'empty') {\n                        out += ' || ' + $passData + ' === null || ' + $passData + ' === \\'\\' ';\n                      }\n                      out += ' ) ' + $passData + ' = ';\n                      if (it.opts.useDefaults == 'shared') {\n                        out += ' ' + it.useDefault($sch.default) + ' ';\n                      } else {\n                        out += ' ' + JSON.stringify($sch.default) + ' ';\n                      }\n                      out += '; ';\n                    }\n                  }\n                }\n              }\n            }\n          }\n          var arr5 = $rulesGroup.rules;\n          if (arr5) {\n            var $rule,\n              i5 = -1,\n              l5 = arr5.length - 1;\n            while (i5 < l5) {\n              $rule = arr5[i5 += 1];\n              if ($shouldUseRule($rule)) {\n                var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);\n                if ($code) {\n                  out += ' ' + $code + ' ';\n                  if ($breakOnError) {\n                    $closingBraces1 += '}';\n                  }\n                }\n              }\n            }\n          }\n          if ($breakOnError) {\n            out += ' ' + $closingBraces1 + ' ';\n            $closingBraces1 = '';\n          }\n          if ($rulesGroup.type) {\n            out += ' } ';\n            if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {\n              out += ' else { ';\n              var $schemaPath = it.schemaPath + '.type',\n                $errSchemaPath = it.errSchemaPath + '/type';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = ''; /* istanbul ignore else */\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \\'';\n                if ($typeIsArray) {\n                  out += '' + $typeSchema.join(\",\");\n                } else {\n                  out += '' + $typeSchema;\n                }\n                out += '\\' } ';\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'should be ';\n                  if ($typeIsArray) {\n                    out += '' + $typeSchema.join(\",\");\n                  } else {\n                    out += '' + $typeSchema;\n                  }\n                  out += '\\' ';\n                }\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n                }\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n              var __err = out;\n              out = $$outStack.pop();\n              if (!it.compositeRule && $breakOnError) {\n                /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + __err + ']); ';\n                } else {\n                  out += ' validate.errors = [' + __err + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n              out += ' } ';\n            }\n          }\n          if ($breakOnError) {\n            out += ' if (errors === ';\n            if ($top) {\n              out += '0';\n            } else {\n              out += 'errs_' + $lvl;\n            }\n            out += ') { ';\n            $closingBraces2 += '}';\n          }\n        }\n      }\n    }\n  }\n  if ($breakOnError) {\n    out += ' ' + $closingBraces2 + ' ';\n  }\n  if ($top) {\n    if ($async) {\n      out += ' if (errors === 0) return data;           ';\n      out += ' else throw new ValidationError(vErrors); ';\n    } else {\n      out += ' validate.errors = vErrors; ';\n      out += ' return errors === 0;       ';\n    }\n    out += ' }; return validate;';\n  } else {\n    out += ' var ' + $valid + ' = errors === errs_' + $lvl + ';';\n  }\n  function $shouldUseGroup($rulesGroup) {\n    var rules = $rulesGroup.rules;\n    for (var i = 0; i < rules.length; i++) if ($shouldUseRule(rules[i])) return true;\n  }\n  function $shouldUseRule($rule) {\n    return it.schema[$rule.keyword] !== undefined || $rule.implements && $ruleImplementsSomeKeyword($rule);\n  }\n  function $ruleImplementsSomeKeyword($rule) {\n    var impl = $rule.implements;\n    for (var i = 0; i < impl.length; i++) if (it.schema[impl[i]] !== undefined) return true;\n  }\n  return out;\n};","map":{"version":3,"names":["module","exports","generate_validate","it","$keyword","$ruleType","out","$async","schema","$refKeywords","util","schemaHasRulesExcept","RULES","all","$id","self","_getId","opts","strictKeywords","$unknownKwd","schemaUnknownRules","keywords","$keywordsMsg","logger","warn","Error","isTop","async","sourceCode","processCode","$ref","$lvl","level","$dataLvl","dataLevel","$schema","$schemaPath","schemaPath","getProperty","$errSchemaPath","errSchemaPath","$breakOnError","allErrors","$errorKeyword","$data","$valid","$$outStack","push","createErrors","errorPath","toQuotedString","messages","verbose","__err","pop","compositeRule","$top","rootId","resolve","fullPath","root","baseId","dataPathArr","default","undefined","useDefaults","strictDefaults","$defaultMsg","url","$closingBraces1","$closingBraces2","$typeSchema","type","$typeIsArray","Array","isArray","nullable","indexOf","concat","length","extendRefs","$comment","code","coerceTypes","$coerceToTypes","coerceToTypes","$rulesGroup","types","$shouldUseGroup","$method","strictNumbers","$dataType","$coerced","checkDataType","arr1","$type","$i","l1","join","$parentData","$parentDataProperty","arr2","i2","l2","properties","$schemaKeys","Object","keys","arr3","$propertyKey","i3","l3","$sch","$passData","useDefault","JSON","stringify","items","arr4","l4","arr5","rules","$rule","i5","l5","$shouldUseRule","$code","keyword","i","implements","$ruleImplementsSomeKeyword","impl"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/ajv/lib/dotjs/validate.js"],"sourcesContent":["'use strict';\nmodule.exports = function generate_validate(it, $keyword, $ruleType) {\n  var out = '';\n  var $async = it.schema.$async === true,\n    $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),\n    $id = it.self._getId(it.schema);\n  if (it.opts.strictKeywords) {\n    var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);\n    if ($unknownKwd) {\n      var $keywordsMsg = 'unknown keyword: ' + $unknownKwd;\n      if (it.opts.strictKeywords === 'log') it.logger.warn($keywordsMsg);\n      else throw new Error($keywordsMsg);\n    }\n  }\n  if (it.isTop) {\n    out += ' var validate = ';\n    if ($async) {\n      it.async = true;\n      out += 'async ';\n    }\n    out += 'function(data, dataPath, parentData, parentDataProperty, rootData) { \\'use strict\\'; ';\n    if ($id && (it.opts.sourceCode || it.opts.processCode)) {\n      out += ' ' + ('/\\*# sourceURL=' + $id + ' */') + ' ';\n    }\n  }\n  if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {\n    var $keyword = 'false schema';\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $errorKeyword;\n    var $data = 'data' + ($dataLvl || '');\n    var $valid = 'valid' + $lvl;\n    if (it.schema === false) {\n      if (it.isTop) {\n        $breakOnError = true;\n      } else {\n        out += ' var ' + ($valid) + ' = false; ';\n      }\n      var $$outStack = $$outStack || [];\n      $$outStack.push(out);\n      out = ''; /* istanbul ignore else */\n      if (it.createErrors !== false) {\n        out += ' { keyword: \\'' + ($errorKeyword || 'false schema') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\n        if (it.opts.messages !== false) {\n          out += ' , message: \\'boolean schema is false\\' ';\n        }\n        if (it.opts.verbose) {\n          out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n        }\n        out += ' } ';\n      } else {\n        out += ' {} ';\n      }\n      var __err = out;\n      out = $$outStack.pop();\n      if (!it.compositeRule && $breakOnError) {\n        /* istanbul ignore if */\n        if (it.async) {\n          out += ' throw new ValidationError([' + (__err) + ']); ';\n        } else {\n          out += ' validate.errors = [' + (__err) + ']; return false; ';\n        }\n      } else {\n        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n      }\n    } else {\n      if (it.isTop) {\n        if ($async) {\n          out += ' return data; ';\n        } else {\n          out += ' validate.errors = null; return true; ';\n        }\n      } else {\n        out += ' var ' + ($valid) + ' = true; ';\n      }\n    }\n    if (it.isTop) {\n      out += ' }; return validate; ';\n    }\n    return out;\n  }\n  if (it.isTop) {\n    var $top = it.isTop,\n      $lvl = it.level = 0,\n      $dataLvl = it.dataLevel = 0,\n      $data = 'data';\n    it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));\n    it.baseId = it.baseId || it.rootId;\n    delete it.isTop;\n    it.dataPathArr = [\"\"];\n    if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {\n      var $defaultMsg = 'default is ignored in the schema root';\n      if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);\n      else throw new Error($defaultMsg);\n    }\n    out += ' var vErrors = null; ';\n    out += ' var errors = 0;     ';\n    out += ' if (rootData === undefined) rootData = data; ';\n  } else {\n    var $lvl = it.level,\n      $dataLvl = it.dataLevel,\n      $data = 'data' + ($dataLvl || '');\n    if ($id) it.baseId = it.resolve.url(it.baseId, $id);\n    if ($async && !it.async) throw new Error('async schema in sync schema');\n    out += ' var errs_' + ($lvl) + ' = errors;';\n  }\n  var $valid = 'valid' + $lvl,\n    $breakOnError = !it.opts.allErrors,\n    $closingBraces1 = '',\n    $closingBraces2 = '';\n  var $errorKeyword;\n  var $typeSchema = it.schema.type,\n    $typeIsArray = Array.isArray($typeSchema);\n  if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {\n    if ($typeIsArray) {\n      if ($typeSchema.indexOf('null') == -1) $typeSchema = $typeSchema.concat('null');\n    } else if ($typeSchema != 'null') {\n      $typeSchema = [$typeSchema, 'null'];\n      $typeIsArray = true;\n    }\n  }\n  if ($typeIsArray && $typeSchema.length == 1) {\n    $typeSchema = $typeSchema[0];\n    $typeIsArray = false;\n  }\n  if (it.schema.$ref && $refKeywords) {\n    if (it.opts.extendRefs == 'fail') {\n      throw new Error('$ref: validation keywords used in schema at path \"' + it.errSchemaPath + '\" (see option extendRefs)');\n    } else if (it.opts.extendRefs !== true) {\n      $refKeywords = false;\n      it.logger.warn('$ref: keywords ignored in schema at path \"' + it.errSchemaPath + '\"');\n    }\n  }\n  if (it.schema.$comment && it.opts.$comment) {\n    out += ' ' + (it.RULES.all.$comment.code(it, '$comment'));\n  }\n  if ($typeSchema) {\n    if (it.opts.coerceTypes) {\n      var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);\n    }\n    var $rulesGroup = it.RULES.types[$typeSchema];\n    if ($coerceToTypes || $typeIsArray || $rulesGroup === true || ($rulesGroup && !$shouldUseGroup($rulesGroup))) {\n      var $schemaPath = it.schemaPath + '.type',\n        $errSchemaPath = it.errSchemaPath + '/type';\n      var $schemaPath = it.schemaPath + '.type',\n        $errSchemaPath = it.errSchemaPath + '/type',\n        $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';\n      out += ' if (' + (it.util[$method]($typeSchema, $data, it.opts.strictNumbers, true)) + ') { ';\n      if ($coerceToTypes) {\n        var $dataType = 'dataType' + $lvl,\n          $coerced = 'coerced' + $lvl;\n        out += ' var ' + ($dataType) + ' = typeof ' + ($data) + '; var ' + ($coerced) + ' = undefined; ';\n        if (it.opts.coerceTypes == 'array') {\n          out += ' if (' + ($dataType) + ' == \\'object\\' && Array.isArray(' + ($data) + ') && ' + ($data) + '.length == 1) { ' + ($data) + ' = ' + ($data) + '[0]; ' + ($dataType) + ' = typeof ' + ($data) + '; if (' + (it.util.checkDataType(it.schema.type, $data, it.opts.strictNumbers)) + ') ' + ($coerced) + ' = ' + ($data) + '; } ';\n        }\n        out += ' if (' + ($coerced) + ' !== undefined) ; ';\n        var arr1 = $coerceToTypes;\n        if (arr1) {\n          var $type, $i = -1,\n            l1 = arr1.length - 1;\n          while ($i < l1) {\n            $type = arr1[$i += 1];\n            if ($type == 'string') {\n              out += ' else if (' + ($dataType) + ' == \\'number\\' || ' + ($dataType) + ' == \\'boolean\\') ' + ($coerced) + ' = \\'\\' + ' + ($data) + '; else if (' + ($data) + ' === null) ' + ($coerced) + ' = \\'\\'; ';\n            } else if ($type == 'number' || $type == 'integer') {\n              out += ' else if (' + ($dataType) + ' == \\'boolean\\' || ' + ($data) + ' === null || (' + ($dataType) + ' == \\'string\\' && ' + ($data) + ' && ' + ($data) + ' == +' + ($data) + ' ';\n              if ($type == 'integer') {\n                out += ' && !(' + ($data) + ' % 1)';\n              }\n              out += ')) ' + ($coerced) + ' = +' + ($data) + '; ';\n            } else if ($type == 'boolean') {\n              out += ' else if (' + ($data) + ' === \\'false\\' || ' + ($data) + ' === 0 || ' + ($data) + ' === null) ' + ($coerced) + ' = false; else if (' + ($data) + ' === \\'true\\' || ' + ($data) + ' === 1) ' + ($coerced) + ' = true; ';\n            } else if ($type == 'null') {\n              out += ' else if (' + ($data) + ' === \\'\\' || ' + ($data) + ' === 0 || ' + ($data) + ' === false) ' + ($coerced) + ' = null; ';\n            } else if (it.opts.coerceTypes == 'array' && $type == 'array') {\n              out += ' else if (' + ($dataType) + ' == \\'string\\' || ' + ($dataType) + ' == \\'number\\' || ' + ($dataType) + ' == \\'boolean\\' || ' + ($data) + ' == null) ' + ($coerced) + ' = [' + ($data) + ']; ';\n            }\n          }\n        }\n        out += ' else {   ';\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = ''; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\n          if ($typeIsArray) {\n            out += '' + ($typeSchema.join(\",\"));\n          } else {\n            out += '' + ($typeSchema);\n          }\n          out += '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'should be ';\n            if ($typeIsArray) {\n              out += '' + ($typeSchema.join(\",\"));\n            } else {\n              out += '' + ($typeSchema);\n            }\n            out += '\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) {\n          /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + (__err) + ']); ';\n          } else {\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n        out += ' } if (' + ($coerced) + ' !== undefined) {  ';\n        var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',\n          $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';\n        out += ' ' + ($data) + ' = ' + ($coerced) + '; ';\n        if (!$dataLvl) {\n          out += 'if (' + ($parentData) + ' !== undefined)';\n        }\n        out += ' ' + ($parentData) + '[' + ($parentDataProperty) + '] = ' + ($coerced) + '; } ';\n      } else {\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = ''; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\n          if ($typeIsArray) {\n            out += '' + ($typeSchema.join(\",\"));\n          } else {\n            out += '' + ($typeSchema);\n          }\n          out += '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'should be ';\n            if ($typeIsArray) {\n              out += '' + ($typeSchema.join(\",\"));\n            } else {\n              out += '' + ($typeSchema);\n            }\n            out += '\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) {\n          /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + (__err) + ']); ';\n          } else {\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n      }\n      out += ' } ';\n    }\n  }\n  if (it.schema.$ref && !$refKeywords) {\n    out += ' ' + (it.RULES.all.$ref.code(it, '$ref')) + ' ';\n    if ($breakOnError) {\n      out += ' } if (errors === ';\n      if ($top) {\n        out += '0';\n      } else {\n        out += 'errs_' + ($lvl);\n      }\n      out += ') { ';\n      $closingBraces2 += '}';\n    }\n  } else {\n    var arr2 = it.RULES;\n    if (arr2) {\n      var $rulesGroup, i2 = -1,\n        l2 = arr2.length - 1;\n      while (i2 < l2) {\n        $rulesGroup = arr2[i2 += 1];\n        if ($shouldUseGroup($rulesGroup)) {\n          if ($rulesGroup.type) {\n            out += ' if (' + (it.util.checkDataType($rulesGroup.type, $data, it.opts.strictNumbers)) + ') { ';\n          }\n          if (it.opts.useDefaults) {\n            if ($rulesGroup.type == 'object' && it.schema.properties) {\n              var $schema = it.schema.properties,\n                $schemaKeys = Object.keys($schema);\n              var arr3 = $schemaKeys;\n              if (arr3) {\n                var $propertyKey, i3 = -1,\n                  l3 = arr3.length - 1;\n                while (i3 < l3) {\n                  $propertyKey = arr3[i3 += 1];\n                  var $sch = $schema[$propertyKey];\n                  if ($sch.default !== undefined) {\n                    var $passData = $data + it.util.getProperty($propertyKey);\n                    if (it.compositeRule) {\n                      if (it.opts.strictDefaults) {\n                        var $defaultMsg = 'default is ignored for: ' + $passData;\n                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);\n                        else throw new Error($defaultMsg);\n                      }\n                    } else {\n                      out += ' if (' + ($passData) + ' === undefined ';\n                      if (it.opts.useDefaults == 'empty') {\n                        out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \\'\\' ';\n                      }\n                      out += ' ) ' + ($passData) + ' = ';\n                      if (it.opts.useDefaults == 'shared') {\n                        out += ' ' + (it.useDefault($sch.default)) + ' ';\n                      } else {\n                        out += ' ' + (JSON.stringify($sch.default)) + ' ';\n                      }\n                      out += '; ';\n                    }\n                  }\n                }\n              }\n            } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {\n              var arr4 = it.schema.items;\n              if (arr4) {\n                var $sch, $i = -1,\n                  l4 = arr4.length - 1;\n                while ($i < l4) {\n                  $sch = arr4[$i += 1];\n                  if ($sch.default !== undefined) {\n                    var $passData = $data + '[' + $i + ']';\n                    if (it.compositeRule) {\n                      if (it.opts.strictDefaults) {\n                        var $defaultMsg = 'default is ignored for: ' + $passData;\n                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);\n                        else throw new Error($defaultMsg);\n                      }\n                    } else {\n                      out += ' if (' + ($passData) + ' === undefined ';\n                      if (it.opts.useDefaults == 'empty') {\n                        out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \\'\\' ';\n                      }\n                      out += ' ) ' + ($passData) + ' = ';\n                      if (it.opts.useDefaults == 'shared') {\n                        out += ' ' + (it.useDefault($sch.default)) + ' ';\n                      } else {\n                        out += ' ' + (JSON.stringify($sch.default)) + ' ';\n                      }\n                      out += '; ';\n                    }\n                  }\n                }\n              }\n            }\n          }\n          var arr5 = $rulesGroup.rules;\n          if (arr5) {\n            var $rule, i5 = -1,\n              l5 = arr5.length - 1;\n            while (i5 < l5) {\n              $rule = arr5[i5 += 1];\n              if ($shouldUseRule($rule)) {\n                var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);\n                if ($code) {\n                  out += ' ' + ($code) + ' ';\n                  if ($breakOnError) {\n                    $closingBraces1 += '}';\n                  }\n                }\n              }\n            }\n          }\n          if ($breakOnError) {\n            out += ' ' + ($closingBraces1) + ' ';\n            $closingBraces1 = '';\n          }\n          if ($rulesGroup.type) {\n            out += ' } ';\n            if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {\n              out += ' else { ';\n              var $schemaPath = it.schemaPath + '.type',\n                $errSchemaPath = it.errSchemaPath + '/type';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = ''; /* istanbul ignore else */\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\n                if ($typeIsArray) {\n                  out += '' + ($typeSchema.join(\",\"));\n                } else {\n                  out += '' + ($typeSchema);\n                }\n                out += '\\' } ';\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'should be ';\n                  if ($typeIsArray) {\n                    out += '' + ($typeSchema.join(\",\"));\n                  } else {\n                    out += '' + ($typeSchema);\n                  }\n                  out += '\\' ';\n                }\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n                }\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n              var __err = out;\n              out = $$outStack.pop();\n              if (!it.compositeRule && $breakOnError) {\n                /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + (__err) + ']); ';\n                } else {\n                  out += ' validate.errors = [' + (__err) + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n              out += ' } ';\n            }\n          }\n          if ($breakOnError) {\n            out += ' if (errors === ';\n            if ($top) {\n              out += '0';\n            } else {\n              out += 'errs_' + ($lvl);\n            }\n            out += ') { ';\n            $closingBraces2 += '}';\n          }\n        }\n      }\n    }\n  }\n  if ($breakOnError) {\n    out += ' ' + ($closingBraces2) + ' ';\n  }\n  if ($top) {\n    if ($async) {\n      out += ' if (errors === 0) return data;           ';\n      out += ' else throw new ValidationError(vErrors); ';\n    } else {\n      out += ' validate.errors = vErrors; ';\n      out += ' return errors === 0;       ';\n    }\n    out += ' }; return validate;';\n  } else {\n    out += ' var ' + ($valid) + ' = errors === errs_' + ($lvl) + ';';\n  }\n\n  function $shouldUseGroup($rulesGroup) {\n    var rules = $rulesGroup.rules;\n    for (var i = 0; i < rules.length; i++)\n      if ($shouldUseRule(rules[i])) return true;\n  }\n\n  function $shouldUseRule($rule) {\n    return it.schema[$rule.keyword] !== undefined || ($rule.implements && $ruleImplementsSomeKeyword($rule));\n  }\n\n  function $ruleImplementsSomeKeyword($rule) {\n    var impl = $rule.implements;\n    for (var i = 0; i < impl.length; i++)\n      if (it.schema[impl[i]] !== undefined) return true;\n  }\n  return out;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}