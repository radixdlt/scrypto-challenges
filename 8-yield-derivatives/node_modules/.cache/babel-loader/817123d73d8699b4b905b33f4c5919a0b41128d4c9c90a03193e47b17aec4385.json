{"ast":null,"code":"var _jsxFileName = \"/Users/mdabdurrazzak/RadInsu/src/Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DataRequestBuilder, RadixDappToolkit, RadixNetwork } from '@radixdlt/radix-dapp-toolkit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const [accountAddress, setAccountAddress] = useState('');\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [error, setError] = useState('');\n  const [insuranceContract, setInsuranceContract] = useState(null);\n  const [rdt, setRdt] = useState(null);\n  useEffect(() => {\n    const dAppDefinitionAddress = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz';\n\n    // Create a dapp configuration object for the Radix Dapp Toolkit\n    const dappConfig = {\n      networkId: RadixNetwork.Stokenet,\n      applicationVersion: '1.0.0',\n      applicationName: 'Infix',\n      applicationDappDefinitionAddress: dAppDefinitionAddress,\n      dAppDefinitionAddress\n    };\n\n    // Instantiate DappToolkit to connect to the Radix wallet and network\n    const rdtInstance = RadixDappToolkit(dappConfig);\n    setRdt(rdtInstance);\n\n    // Connect a user account when wallet is connected\n    rdtInstance.walletApi.setRequestData(DataRequestBuilder.accounts().exactly(1));\n\n    // Subscribe to updates to the user's shared wallet data\n    const subscription = rdtInstance.walletApi.walletData$.subscribe({\n      next: walletData => {\n        if (walletData && walletData.accounts && walletData.accounts.length > 0) {\n          setAccountAddress(walletData.accounts[0].address);\n          setWalletConnected(true);\n        } else {\n          setError('No account data found.');\n        }\n      },\n      error: err => {\n        setError('Error connecting to wallet: ' + err.message);\n      }\n    });\n\n    // Cleanup subscription on unmount\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  // Function to create the insurance contract\n  const createInsuranceContract = async (insuredDomain, premiumAmount, payoutAmount, riskLevel) => {\n    const dAppDefinitionAddress = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz';\n    const result = await rdt.walletApi.sendTransaction({\n      transactionManifest: `\n            CALL_FUNCTION\n                Address(\"${dAppDefinitionAddress}\")\n                \"parametric_insurance::ParametricInsurance\"\n                \"new\"\n                String(\"${insuredDomain}\")\n                Decimal(\"${premiumAmount}\")\n                Decimal(\"${payoutAmount}\")\n                Decimal(\"${riskLevel}\");\n        `,\n      version: 1\n    });\n    if (result.isErr()) {\n      console.error('Error creating insurance contract:', result.error);\n      return null;\n    }\n    setInsuranceContract(result.value.global);\n    console.log('Insurance contract created:', result.value.global);\n    return result.value.global;\n  };\n\n  // Function to make a claim on the insurance contract\n  const makeClaim = async () => {\n    if (!insuranceContract) {\n      console.error('Insurance contract not created yet');\n      return;\n    }\n    const result = await insuranceContract.call({\n      method: 'make_claim',\n      args: []\n    });\n    if (result.isErr()) {\n      console.error('Error making claim:', result.error);\n      return;\n    }\n    console.log('Claim made successfully:', result.value);\n  };\n\n  // Function to check if the insurance contract has been claimed\n  const isClaimed = async () => {\n    if (!insuranceContract) {\n      console.error('Insurance contract not created yet');\n      return;\n    }\n    const result = await insuranceContract.call({\n      method: 'is_claimed',\n      args: []\n    });\n    if (result.isErr()) {\n      console.error('Error checking claim status:', result.error);\n      return;\n    }\n    console.log('Is claimed:', result.value);\n  };\n\n  // Function to cancel the insurance contract\n  const cancelContract = async () => {\n    if (!insuranceContract) {\n      console.error('Insurance contract not created yet');\n      return;\n    }\n    const result = await insuranceContract.call({\n      method: 'cancel_contract',\n      args: []\n    });\n    if (result.isErr()) {\n      console.error('Error canceling contract:', result.error);\n      return;\n    }\n    console.log('Contract canceled successfully:', result.value);\n  };\n\n  // Function to trigger insurance payout based on predefined conditions\n  const triggerPayout = async conditionMet => {\n    if (!insuranceContract) {\n      console.error('Insurance contract not created yet');\n      return;\n    }\n    const result = await insuranceContract.call({\n      method: 'trigger_payout',\n      args: [conditionMet]\n    });\n    if (result.isErr()) {\n      console.error('Error triggering payout:', result.error);\n      return;\n    }\n    console.log('Payout triggered successfully:', result.value);\n  };\n\n  // Function to monitor liquidity and trigger insurance payout if a significant drop is detected\n  const monitorLiquidity = async (liquidityDropThreshold, timeFrameHours, currentLiquidity) => {\n    if (!insuranceContract) {\n      console.error('Insurance contract not created yet');\n      return;\n    }\n    const result = await insuranceContract.call({\n      method: 'monitor_liquidity',\n      args: [liquidityDropThreshold, timeFrameHours, currentLiquidity]\n    });\n    if (result.isErr()) {\n      console.error('Error monitoring liquidity:', result.error);\n      return;\n    }\n    console.log('Liquidity monitored successfully:', result.value);\n  };\n\n  // Function to monitor market volatility and trigger insurance payout if volatility exceeds threshold\n  const monitorMarketVolatility = async (volatilityThreshold, currentVolatility) => {\n    if (!insuranceContract) {\n      console.error('Insurance contract not created yet');\n      return;\n    }\n    const result = await insuranceContract.call({\n      method: 'monitor_market_volatility',\n      args: [volatilityThreshold, currentVolatility]\n    });\n    if (result.isErr()) {\n      console.error('Error monitoring market volatility:', result.error);\n      return;\n    }\n    console.log('Market volatility monitored successfully:', result.value);\n  };\n\n  // Function to update the premium amount of the insurance contract\n  const updatePremiumAmount = async newPremiumAmount => {\n    if (!insuranceContract) {\n      console.error('Insurance contract not created yet');\n      return;\n    }\n    const result = await insuranceContract.call({\n      method: 'update_premium_amount',\n      args: [newPremiumAmount]\n    });\n    if (result.isErr()) {\n      console.error('Error updating premium amount:', result.error);\n      return;\n    }\n    console.log('Premium amount updated successfully:', result.value);\n  };\n\n  // Function to update the payout amount of the insurance contract\n  const updatePayoutAmount = async newPayoutAmount => {\n    if (!insuranceContract) {\n      console.error('Insurance contract not created yet');\n      return;\n    }\n    const result = await insuranceContract.call({\n      method: 'update_payout_amount',\n      args: [newPayoutAmount]\n    });\n    if (result.isErr()) {\n      console.error('Error updating payout amount:', result.error);\n      return;\n    }\n    console.log('Payout amount updated successfully:', result.value);\n  };\n\n  // Function to automate claim processing if conditions are met\n  const automateClaimProcessing = async autoClaimCondition => {\n    if (!insuranceContract) {\n      console.error('Insurance contract not created yet');\n      return;\n    }\n    const result = await insuranceContract.call({\n      method: 'automate_claim_processing',\n      args: [autoClaimCondition]\n    });\n    if (result.isErr()) {\n      console.error('Error automating claim processing:', result.error);\n      return;\n    }\n    console.log('Claim processing automated successfully:', result.value);\n  };\n\n  // Main function to handle all contract interactions\n  const handleContractInteractions = async () => {\n    await createInsuranceContract('example.com', 100, 1000, 2);\n    await makeClaim();\n    await isClaimed();\n    // await cancelContract();\n    // await triggerPayout(true);\n    // await monitorLiquidity(10, 24, 50000);\n    // await monitorMarketVolatility(20, 30);\n    // await updatePremiumAmount(150);\n    // await updatePayoutAmount(1200);\n    // await automateClaimProcessing(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 17\n    }, this), walletConnected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Wallet Connected Successfully\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Account Address: \", accountAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleContractInteractions,\n        children: \"Interact with Contract\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Connect to Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectToWallet,\n        children: \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 5\n  }, this);\n};\n_s(Profile, \"JBR3sfmBYeD/eRLVdWxqDoxAF7Y=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useState","useEffect","DataRequestBuilder","RadixDappToolkit","RadixNetwork","jsxDEV","_jsxDEV","Profile","_s","accountAddress","setAccountAddress","walletConnected","setWalletConnected","error","setError","insuranceContract","setInsuranceContract","rdt","setRdt","dAppDefinitionAddress","dappConfig","networkId","Stokenet","applicationVersion","applicationName","applicationDappDefinitionAddress","rdtInstance","walletApi","setRequestData","accounts","exactly","subscription","walletData$","subscribe","next","walletData","length","address","err","message","unsubscribe","createInsuranceContract","insuredDomain","premiumAmount","payoutAmount","riskLevel","result","sendTransaction","transactionManifest","version","isErr","console","value","global","log","makeClaim","call","method","args","isClaimed","cancelContract","triggerPayout","conditionMet","monitorLiquidity","liquidityDropThreshold","timeFrameHours","currentLiquidity","monitorMarketVolatility","volatilityThreshold","currentVolatility","updatePremiumAmount","newPremiumAmount","updatePayoutAmount","newPayoutAmount","automateClaimProcessing","autoClaimCondition","handleContractInteractions","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","connectToWallet","_c","$RefreshReg$"],"sources":["/Users/mdabdurrazzak/RadInsu/src/Profile.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  DataRequestBuilder,\n  RadixDappToolkit,\n  RadixNetwork,\n} from '@radixdlt/radix-dapp-toolkit';\n\nconst Profile = () => {\n  const [accountAddress, setAccountAddress] = useState('');\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [error, setError] = useState('');\n  const [insuranceContract, setInsuranceContract] = useState(null);\n  const [rdt, setRdt] = useState(null);\n\n  useEffect(() => {\n    const dAppDefinitionAddress = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz';\n    \n    // Create a dapp configuration object for the Radix Dapp Toolkit\n    const dappConfig = {\n      networkId: RadixNetwork.Stokenet,\n      applicationVersion: '1.0.0',\n      applicationName: 'Infix',\n      applicationDappDefinitionAddress: dAppDefinitionAddress,\n      dAppDefinitionAddress,\n    };\n\n    // Instantiate DappToolkit to connect to the Radix wallet and network\n    const rdtInstance = RadixDappToolkit(dappConfig);\n    setRdt(rdtInstance);\n\n    // Connect a user account when wallet is connected\n    rdtInstance.walletApi.setRequestData(DataRequestBuilder.accounts().exactly(1));\n\n    // Subscribe to updates to the user's shared wallet data\n    const subscription = rdtInstance.walletApi.walletData$.subscribe({\n      next: (walletData) => {\n        if (walletData && walletData.accounts && walletData.accounts.length > 0) {\n          setAccountAddress(walletData.accounts[0].address);\n          setWalletConnected(true);\n        } else {\n          setError('No account data found.');\n        }\n      },\n      error: (err) => {\n        setError('Error connecting to wallet: ' + err.message);\n      }\n    });\n\n    // Cleanup subscription on unmount\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n\n\n  // Function to create the insurance contract\n  const createInsuranceContract = async (insuredDomain, premiumAmount, payoutAmount, riskLevel) => {\n    const dAppDefinitionAddress = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz';\n\n    const result = await rdt.walletApi.sendTransaction({\n        transactionManifest: `\n            CALL_FUNCTION\n                Address(\"${dAppDefinitionAddress}\")\n                \"parametric_insurance::ParametricInsurance\"\n                \"new\"\n                String(\"${insuredDomain}\")\n                Decimal(\"${premiumAmount}\")\n                Decimal(\"${payoutAmount}\")\n                Decimal(\"${riskLevel}\");\n        `,\n        version: 1,\n    });\n\n    if (result.isErr()) {\n        console.error('Error creating insurance contract:', result.error);\n        return null;\n    }\n\n    setInsuranceContract(result.value.global);\n    console.log('Insurance contract created:', result.value.global);\n    return result.value.global;\n  };\n\n  // Function to make a claim on the insurance contract\n  const makeClaim = async () => {\n    if (!insuranceContract) {\n        console.error('Insurance contract not created yet');\n        return;\n    }\n\n    const result = await insuranceContract.call({\n        method: 'make_claim',\n        args: [],\n    });\n\n    if (result.isErr()) {\n        console.error('Error making claim:', result.error);\n        return;\n    }\n\n    console.log('Claim made successfully:', result.value);\n  };\n\n  // Function to check if the insurance contract has been claimed\n  const isClaimed = async () => {\n    if (!insuranceContract) {\n        console.error('Insurance contract not created yet');\n        return;\n    }\n\n    const result = await insuranceContract.call({\n        method: 'is_claimed',\n        args: [],\n    });\n\n    if (result.isErr()) {\n        console.error('Error checking claim status:', result.error);\n        return;\n    }\n\n    console.log('Is claimed:', result.value);\n  };\n\n  // Function to cancel the insurance contract\n  const cancelContract = async () => {\n    if (!insuranceContract) {\n        console.error('Insurance contract not created yet');\n        return;\n    }\n\n    const result = await insuranceContract.call({\n        method: 'cancel_contract',\n        args: [],\n    });\n\n    if (result.isErr()) {\n        console.error('Error canceling contract:', result.error);\n        return;\n    }\n\n    console.log('Contract canceled successfully:', result.value);\n  };\n\n  // Function to trigger insurance payout based on predefined conditions\n  const triggerPayout = async (conditionMet) => {\n    if (!insuranceContract) {\n        console.error('Insurance contract not created yet');\n        return;\n    }\n\n    const result = await insuranceContract.call({\n        method: 'trigger_payout',\n        args: [conditionMet],\n    });\n\n    if (result.isErr()) {\n        console.error('Error triggering payout:', result.error);\n        return;\n    }\n\n    console.log('Payout triggered successfully:', result.value);\n  };\n\n  // Function to monitor liquidity and trigger insurance payout if a significant drop is detected\n  const monitorLiquidity = async (liquidityDropThreshold, timeFrameHours, currentLiquidity) => {\n    if (!insuranceContract) {\n        console.error('Insurance contract not created yet');\n        return;\n    }\n\n    const result = await insuranceContract.call({\n        method: 'monitor_liquidity',\n        args: [liquidityDropThreshold, timeFrameHours, currentLiquidity],\n    });\n\n    if (result.isErr()) {\n        console.error('Error monitoring liquidity:', result.error);\n        return;\n    }\n\n    console.log('Liquidity monitored successfully:', result.value);\n  };\n\n  // Function to monitor market volatility and trigger insurance payout if volatility exceeds threshold\n  const monitorMarketVolatility = async (volatilityThreshold, currentVolatility) => {\n    if (!insuranceContract) {\n        console.error('Insurance contract not created yet');\n        return;\n    }\n\n    const result = await insuranceContract.call({\n        method: 'monitor_market_volatility',\n        args: [volatilityThreshold, currentVolatility],\n    });\n\n    if (result.isErr()) {\n        console.error('Error monitoring market volatility:', result.error);\n        return;\n    }\n\n    console.log('Market volatility monitored successfully:', result.value);\n  };\n\n  // Function to update the premium amount of the insurance contract\n  const updatePremiumAmount = async (newPremiumAmount) => {\n    if (!insuranceContract) {\n        console.error('Insurance contract not created yet');\n        return;\n    }\n\n    const result = await insuranceContract.call({\n        method: 'update_premium_amount',\n        args: [newPremiumAmount],\n    });\n\n    if (result.isErr()) {\n        console.error('Error updating premium amount:', result.error);\n        return;\n    }\n\n    console.log('Premium amount updated successfully:', result.value);\n  };\n\n  // Function to update the payout amount of the insurance contract\n  const updatePayoutAmount = async (newPayoutAmount) => {\n    if (!insuranceContract) {\n        console.error('Insurance contract not created yet');\n        return;\n    }\n\n    const result = await insuranceContract.call({\n        method: 'update_payout_amount',\n        args: [newPayoutAmount],\n    });\n\n    if (result.isErr()) {\n        console.error('Error updating payout amount:', result.error);\n        return;\n    }\n\n    console.log('Payout amount updated successfully:', result.value);\n  };\n\n  // Function to automate claim processing if conditions are met\n  const automateClaimProcessing = async (autoClaimCondition) => {\n    if (!insuranceContract) {\n        console.error('Insurance contract not created yet');\n        return;\n    }\n\n    const result = await insuranceContract.call({\n        method: 'automate_claim_processing',\n        args: [autoClaimCondition],\n    });\n\n    if (result.isErr()) {\n        console.error('Error automating claim processing:', result.error);\n        return;\n    }\n\n    console.log('Claim processing automated successfully:', result.value);\n  };\n\n  // Main function to handle all contract interactions\n  const handleContractInteractions = async () => {\n    await createInsuranceContract('example.com', 100, 1000, 2);\n    await makeClaim();\n    await isClaimed();\n    // await cancelContract();\n    // await triggerPayout(true);\n    // await monitorLiquidity(10, 24, 50000);\n    // await monitorMarketVolatility(20, 30);\n    // await updatePremiumAmount(150);\n    // await updatePayoutAmount(1200);\n    // await automateClaimProcessing(true);\n  };\n\n  return (\n    <div>\n      {error && <p>Error: {error}</p>}\n      {walletConnected ? (\n        <div>\n          <p>Wallet Connected Successfully</p>\n          <p>Account Address: {accountAddress}</p>\n          {/* Add additional wallet details here */}\n          <button onClick={handleContractInteractions}>Interact with Contract</button>\n        </div>\n      ) : (\n        <div>\n          <p>Connect to Wallet</p>\n          <button onClick={connectToWallet}>Connect</button>\n        </div>\n      )}\n    </div>\n  );\n  \n};\n\nexport default Profile;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,kBAAkB,EAClBC,gBAAgB,EAChBC,YAAY,QACP,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAM,CAACiB,GAAG,EAAEC,MAAM,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACd,MAAMkB,qBAAqB,GAAG,uEAAuE;;IAErG;IACA,MAAMC,UAAU,GAAG;MACjBC,SAAS,EAAEjB,YAAY,CAACkB,QAAQ;MAChCC,kBAAkB,EAAE,OAAO;MAC3BC,eAAe,EAAE,OAAO;MACxBC,gCAAgC,EAAEN,qBAAqB;MACvDA;IACF,CAAC;;IAED;IACA,MAAMO,WAAW,GAAGvB,gBAAgB,CAACiB,UAAU,CAAC;IAChDF,MAAM,CAACQ,WAAW,CAAC;;IAEnB;IACAA,WAAW,CAACC,SAAS,CAACC,cAAc,CAAC1B,kBAAkB,CAAC2B,QAAQ,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;;IAE9E;IACA,MAAMC,YAAY,GAAGL,WAAW,CAACC,SAAS,CAACK,WAAW,CAACC,SAAS,CAAC;MAC/DC,IAAI,EAAGC,UAAU,IAAK;QACpB,IAAIA,UAAU,IAAIA,UAAU,CAACN,QAAQ,IAAIM,UAAU,CAACN,QAAQ,CAACO,MAAM,GAAG,CAAC,EAAE;UACvE1B,iBAAiB,CAACyB,UAAU,CAACN,QAAQ,CAAC,CAAC,CAAC,CAACQ,OAAO,CAAC;UACjDzB,kBAAkB,CAAC,IAAI,CAAC;QAC1B,CAAC,MAAM;UACLE,QAAQ,CAAC,wBAAwB,CAAC;QACpC;MACF,CAAC;MACDD,KAAK,EAAGyB,GAAG,IAAK;QACdxB,QAAQ,CAAC,8BAA8B,GAAGwB,GAAG,CAACC,OAAO,CAAC;MACxD;IACF,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXR,YAAY,CAACS,WAAW,CAAC,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAIN;EACA,MAAMC,uBAAuB,GAAG,MAAAA,CAAOC,aAAa,EAAEC,aAAa,EAAEC,YAAY,EAAEC,SAAS,KAAK;IAC/F,MAAM1B,qBAAqB,GAAG,uEAAuE;IAErG,MAAM2B,MAAM,GAAG,MAAM7B,GAAG,CAACU,SAAS,CAACoB,eAAe,CAAC;MAC/CC,mBAAmB,EAAG;AAC9B;AACA,2BAA2B7B,qBAAsB;AACjD;AACA;AACA,0BAA0BuB,aAAc;AACxC,2BAA2BC,aAAc;AACzC,2BAA2BC,YAAa;AACxC,2BAA2BC,SAAU;AACrC,SAAS;MACDI,OAAO,EAAE;IACb,CAAC,CAAC;IAEF,IAAIH,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACtC,KAAK,CAAC,oCAAoC,EAAEiC,MAAM,CAACjC,KAAK,CAAC;MACjE,OAAO,IAAI;IACf;IAEAG,oBAAoB,CAAC8B,MAAM,CAACM,KAAK,CAACC,MAAM,CAAC;IACzCF,OAAO,CAACG,GAAG,CAAC,6BAA6B,EAAER,MAAM,CAACM,KAAK,CAACC,MAAM,CAAC;IAC/D,OAAOP,MAAM,CAACM,KAAK,CAACC,MAAM;EAC5B,CAAC;;EAED;EACA,MAAME,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI,CAACxC,iBAAiB,EAAE;MACpBoC,OAAO,CAACtC,KAAK,CAAC,oCAAoC,CAAC;MACnD;IACJ;IAEA,MAAMiC,MAAM,GAAG,MAAM/B,iBAAiB,CAACyC,IAAI,CAAC;MACxCC,MAAM,EAAE,YAAY;MACpBC,IAAI,EAAE;IACV,CAAC,CAAC;IAEF,IAAIZ,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACtC,KAAK,CAAC,qBAAqB,EAAEiC,MAAM,CAACjC,KAAK,CAAC;MAClD;IACJ;IAEAsC,OAAO,CAACG,GAAG,CAAC,0BAA0B,EAAER,MAAM,CAACM,KAAK,CAAC;EACvD,CAAC;;EAED;EACA,MAAMO,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI,CAAC5C,iBAAiB,EAAE;MACpBoC,OAAO,CAACtC,KAAK,CAAC,oCAAoC,CAAC;MACnD;IACJ;IAEA,MAAMiC,MAAM,GAAG,MAAM/B,iBAAiB,CAACyC,IAAI,CAAC;MACxCC,MAAM,EAAE,YAAY;MACpBC,IAAI,EAAE;IACV,CAAC,CAAC;IAEF,IAAIZ,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACtC,KAAK,CAAC,8BAA8B,EAAEiC,MAAM,CAACjC,KAAK,CAAC;MAC3D;IACJ;IAEAsC,OAAO,CAACG,GAAG,CAAC,aAAa,EAAER,MAAM,CAACM,KAAK,CAAC;EAC1C,CAAC;;EAED;EACA,MAAMQ,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAAC7C,iBAAiB,EAAE;MACpBoC,OAAO,CAACtC,KAAK,CAAC,oCAAoC,CAAC;MACnD;IACJ;IAEA,MAAMiC,MAAM,GAAG,MAAM/B,iBAAiB,CAACyC,IAAI,CAAC;MACxCC,MAAM,EAAE,iBAAiB;MACzBC,IAAI,EAAE;IACV,CAAC,CAAC;IAEF,IAAIZ,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACtC,KAAK,CAAC,2BAA2B,EAAEiC,MAAM,CAACjC,KAAK,CAAC;MACxD;IACJ;IAEAsC,OAAO,CAACG,GAAG,CAAC,iCAAiC,EAAER,MAAM,CAACM,KAAK,CAAC;EAC9D,CAAC;;EAED;EACA,MAAMS,aAAa,GAAG,MAAOC,YAAY,IAAK;IAC5C,IAAI,CAAC/C,iBAAiB,EAAE;MACpBoC,OAAO,CAACtC,KAAK,CAAC,oCAAoC,CAAC;MACnD;IACJ;IAEA,MAAMiC,MAAM,GAAG,MAAM/B,iBAAiB,CAACyC,IAAI,CAAC;MACxCC,MAAM,EAAE,gBAAgB;MACxBC,IAAI,EAAE,CAACI,YAAY;IACvB,CAAC,CAAC;IAEF,IAAIhB,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACtC,KAAK,CAAC,0BAA0B,EAAEiC,MAAM,CAACjC,KAAK,CAAC;MACvD;IACJ;IAEAsC,OAAO,CAACG,GAAG,CAAC,gCAAgC,EAAER,MAAM,CAACM,KAAK,CAAC;EAC7D,CAAC;;EAED;EACA,MAAMW,gBAAgB,GAAG,MAAAA,CAAOC,sBAAsB,EAAEC,cAAc,EAAEC,gBAAgB,KAAK;IAC3F,IAAI,CAACnD,iBAAiB,EAAE;MACpBoC,OAAO,CAACtC,KAAK,CAAC,oCAAoC,CAAC;MACnD;IACJ;IAEA,MAAMiC,MAAM,GAAG,MAAM/B,iBAAiB,CAACyC,IAAI,CAAC;MACxCC,MAAM,EAAE,mBAAmB;MAC3BC,IAAI,EAAE,CAACM,sBAAsB,EAAEC,cAAc,EAAEC,gBAAgB;IACnE,CAAC,CAAC;IAEF,IAAIpB,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACtC,KAAK,CAAC,6BAA6B,EAAEiC,MAAM,CAACjC,KAAK,CAAC;MAC1D;IACJ;IAEAsC,OAAO,CAACG,GAAG,CAAC,mCAAmC,EAAER,MAAM,CAACM,KAAK,CAAC;EAChE,CAAC;;EAED;EACA,MAAMe,uBAAuB,GAAG,MAAAA,CAAOC,mBAAmB,EAAEC,iBAAiB,KAAK;IAChF,IAAI,CAACtD,iBAAiB,EAAE;MACpBoC,OAAO,CAACtC,KAAK,CAAC,oCAAoC,CAAC;MACnD;IACJ;IAEA,MAAMiC,MAAM,GAAG,MAAM/B,iBAAiB,CAACyC,IAAI,CAAC;MACxCC,MAAM,EAAE,2BAA2B;MACnCC,IAAI,EAAE,CAACU,mBAAmB,EAAEC,iBAAiB;IACjD,CAAC,CAAC;IAEF,IAAIvB,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACtC,KAAK,CAAC,qCAAqC,EAAEiC,MAAM,CAACjC,KAAK,CAAC;MAClE;IACJ;IAEAsC,OAAO,CAACG,GAAG,CAAC,2CAA2C,EAAER,MAAM,CAACM,KAAK,CAAC;EACxE,CAAC;;EAED;EACA,MAAMkB,mBAAmB,GAAG,MAAOC,gBAAgB,IAAK;IACtD,IAAI,CAACxD,iBAAiB,EAAE;MACpBoC,OAAO,CAACtC,KAAK,CAAC,oCAAoC,CAAC;MACnD;IACJ;IAEA,MAAMiC,MAAM,GAAG,MAAM/B,iBAAiB,CAACyC,IAAI,CAAC;MACxCC,MAAM,EAAE,uBAAuB;MAC/BC,IAAI,EAAE,CAACa,gBAAgB;IAC3B,CAAC,CAAC;IAEF,IAAIzB,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACtC,KAAK,CAAC,gCAAgC,EAAEiC,MAAM,CAACjC,KAAK,CAAC;MAC7D;IACJ;IAEAsC,OAAO,CAACG,GAAG,CAAC,sCAAsC,EAAER,MAAM,CAACM,KAAK,CAAC;EACnE,CAAC;;EAED;EACA,MAAMoB,kBAAkB,GAAG,MAAOC,eAAe,IAAK;IACpD,IAAI,CAAC1D,iBAAiB,EAAE;MACpBoC,OAAO,CAACtC,KAAK,CAAC,oCAAoC,CAAC;MACnD;IACJ;IAEA,MAAMiC,MAAM,GAAG,MAAM/B,iBAAiB,CAACyC,IAAI,CAAC;MACxCC,MAAM,EAAE,sBAAsB;MAC9BC,IAAI,EAAE,CAACe,eAAe;IAC1B,CAAC,CAAC;IAEF,IAAI3B,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACtC,KAAK,CAAC,+BAA+B,EAAEiC,MAAM,CAACjC,KAAK,CAAC;MAC5D;IACJ;IAEAsC,OAAO,CAACG,GAAG,CAAC,qCAAqC,EAAER,MAAM,CAACM,KAAK,CAAC;EAClE,CAAC;;EAED;EACA,MAAMsB,uBAAuB,GAAG,MAAOC,kBAAkB,IAAK;IAC5D,IAAI,CAAC5D,iBAAiB,EAAE;MACpBoC,OAAO,CAACtC,KAAK,CAAC,oCAAoC,CAAC;MACnD;IACJ;IAEA,MAAMiC,MAAM,GAAG,MAAM/B,iBAAiB,CAACyC,IAAI,CAAC;MACxCC,MAAM,EAAE,2BAA2B;MACnCC,IAAI,EAAE,CAACiB,kBAAkB;IAC7B,CAAC,CAAC;IAEF,IAAI7B,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACtC,KAAK,CAAC,oCAAoC,EAAEiC,MAAM,CAACjC,KAAK,CAAC;MACjE;IACJ;IAEAsC,OAAO,CAACG,GAAG,CAAC,0CAA0C,EAAER,MAAM,CAACM,KAAK,CAAC;EACvE,CAAC;;EAED;EACA,MAAMwB,0BAA0B,GAAG,MAAAA,CAAA,KAAY;IAC7C,MAAMnC,uBAAuB,CAAC,aAAa,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;IAC1D,MAAMc,SAAS,CAAC,CAAC;IACjB,MAAMI,SAAS,CAAC,CAAC;IACjB;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC;EAED,oBACErD,OAAA;IAAAuE,QAAA,GACGhE,KAAK,iBAAIP,OAAA;MAAAuE,QAAA,GAAG,SAAO,EAAChE,KAAK;IAAA;MAAAiE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC9BtE,eAAe,gBACdL,OAAA;MAAAuE,QAAA,gBACEvE,OAAA;QAAAuE,QAAA,EAAG;MAA6B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACpC3E,OAAA;QAAAuE,QAAA,GAAG,mBAAiB,EAACpE,cAAc;MAAA;QAAAqE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAExC3E,OAAA;QAAQ4E,OAAO,EAAEN,0BAA2B;QAAAC,QAAA,EAAC;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzE,CAAC,gBAEN3E,OAAA;MAAAuE,QAAA,gBACEvE,OAAA;QAAAuE,QAAA,EAAG;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACxB3E,OAAA;QAAQ4E,OAAO,EAAEC,eAAgB;QAAAN,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAGV,CAAC;AAACzE,EAAA,CAlSID,OAAO;AAAA6E,EAAA,GAAP7E,OAAO;AAoSb,eAAeA,OAAO;AAAC,IAAA6E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}