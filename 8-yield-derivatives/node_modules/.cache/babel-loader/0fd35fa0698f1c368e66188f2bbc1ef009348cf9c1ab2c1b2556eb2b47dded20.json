{"ast":null,"code":"var _jsxFileName = \"/Users/mdabdurrazzak/RadInsu/src/Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DataRequestBuilder, RadixDappToolkit, RadixNetwork } from '@radixdlt/radix-dapp-toolkit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const [accountAddress, setAccountAddress] = useState('');\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const dAppDefinitionAddress = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz';\n\n    // Create a dapp configuration object for the Radix Dapp Toolkit\n    const dappConfig = {\n      networkId: RadixNetwork.Stokenet,\n      applicationVersion: '1.0.0',\n      applicationName: 'Infix',\n      applicationDappDefinitionAddress: dAppDefinitionAddress,\n      dAppDefinitionAddress\n    };\n\n    // Instantiate DappToolkit to connect to the Radix wallet and network\n    const rdt = RadixDappToolkit(dappConfig);\n\n    // Connect a user account when wallet is connected\n    rdt.walletApi.setRequestData(DataRequestBuilder.accounts().exactly(1));\n\n    // Subscribe to updates to the user's shared wallet data\n    const subscription = rdt.walletApi.walletData$.subscribe({\n      next: walletData => {\n        if (walletData && walletData.accounts && walletData.accounts.length > 0) {\n          setAccountAddress(walletData.accounts[0].address);\n          setWalletConnected(true);\n        } else {\n          setError('No account data found.');\n        }\n      },\n      error: err => {\n        setError('Error connecting to wallet: ' + err.message);\n      }\n    });\n\n    // Cleanup subscription on unmount\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this), walletConnected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Wallet Connected Successfully\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Account Address: \", accountAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Connecting to Wallet...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(Profile, \"IaGix2kLaWRSR8RlAnujNgh2PvA=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useState","useEffect","DataRequestBuilder","RadixDappToolkit","RadixNetwork","jsxDEV","_jsxDEV","Profile","_s","accountAddress","setAccountAddress","walletConnected","setWalletConnected","error","setError","dAppDefinitionAddress","dappConfig","networkId","Stokenet","applicationVersion","applicationName","applicationDappDefinitionAddress","rdt","walletApi","setRequestData","accounts","exactly","subscription","walletData$","subscribe","next","walletData","length","address","err","message","unsubscribe","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mdabdurrazzak/RadInsu/src/Profile.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  DataRequestBuilder,\n  RadixDappToolkit,\n  RadixNetwork,\n} from '@radixdlt/radix-dapp-toolkit';\n\nconst Profile = () => {\n  const [accountAddress, setAccountAddress] = useState('');\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const dAppDefinitionAddress = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz';\n    \n    // Create a dapp configuration object for the Radix Dapp Toolkit\n    const dappConfig = {\n      networkId: RadixNetwork.Stokenet,\n      applicationVersion: '1.0.0',\n      applicationName: 'Infix',\n      applicationDappDefinitionAddress: dAppDefinitionAddress,\n      dAppDefinitionAddress,\n    };\n\n    // Instantiate DappToolkit to connect to the Radix wallet and network\n    const rdt = RadixDappToolkit(dappConfig);\n\n    // Connect a user account when wallet is connected\n    rdt.walletApi.setRequestData(DataRequestBuilder.accounts().exactly(1));\n\n    // Subscribe to updates to the user's shared wallet data\n    const subscription = rdt.walletApi.walletData$.subscribe({\n      next: (walletData) => {\n        if (walletData && walletData.accounts && walletData.accounts.length > 0) {\n          setAccountAddress(walletData.accounts[0].address);\n          setWalletConnected(true);\n        } else {\n          setError('No account data found.');\n        }\n      },\n      error: (err) => {\n        setError('Error connecting to wallet: ' + err.message);\n      }\n    });\n\n    // Cleanup subscription on unmount\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  return (\n    <div>\n      {error && <p>Error: {error}</p>}\n      {walletConnected ? (\n        <div>\n          <p>Wallet Connected Successfully</p>\n          <p>Account Address: {accountAddress}</p>\n          {/* Add additional wallet details here */}\n        </div>\n      ) : (\n        <p>Connecting to Wallet...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Profile;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,kBAAkB,EAClBC,gBAAgB,EAChBC,YAAY,QACP,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,MAAMc,qBAAqB,GAAG,uEAAuE;;IAErG;IACA,MAAMC,UAAU,GAAG;MACjBC,SAAS,EAAEb,YAAY,CAACc,QAAQ;MAChCC,kBAAkB,EAAE,OAAO;MAC3BC,eAAe,EAAE,OAAO;MACxBC,gCAAgC,EAAEN,qBAAqB;MACvDA;IACF,CAAC;;IAED;IACA,MAAMO,GAAG,GAAGnB,gBAAgB,CAACa,UAAU,CAAC;;IAExC;IACAM,GAAG,CAACC,SAAS,CAACC,cAAc,CAACtB,kBAAkB,CAACuB,QAAQ,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;;IAEtE;IACA,MAAMC,YAAY,GAAGL,GAAG,CAACC,SAAS,CAACK,WAAW,CAACC,SAAS,CAAC;MACvDC,IAAI,EAAGC,UAAU,IAAK;QACpB,IAAIA,UAAU,IAAIA,UAAU,CAACN,QAAQ,IAAIM,UAAU,CAACN,QAAQ,CAACO,MAAM,GAAG,CAAC,EAAE;UACvEtB,iBAAiB,CAACqB,UAAU,CAACN,QAAQ,CAAC,CAAC,CAAC,CAACQ,OAAO,CAAC;UACjDrB,kBAAkB,CAAC,IAAI,CAAC;QAC1B,CAAC,MAAM;UACLE,QAAQ,CAAC,wBAAwB,CAAC;QACpC;MACF,CAAC;MACDD,KAAK,EAAGqB,GAAG,IAAK;QACdpB,QAAQ,CAAC,8BAA8B,GAAGoB,GAAG,CAACC,OAAO,CAAC;MACxD;IACF,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXR,YAAY,CAACS,WAAW,CAAC,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE9B,OAAA;IAAA+B,QAAA,GACGxB,KAAK,iBAAIP,OAAA;MAAA+B,QAAA,GAAG,SAAO,EAACxB,KAAK;IAAA;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC9B9B,eAAe,gBACdL,OAAA;MAAA+B,QAAA,gBACE/B,OAAA;QAAA+B,QAAA,EAAG;MAA6B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACpCnC,OAAA;QAAA+B,QAAA,GAAG,mBAAiB,EAAC5B,cAAc;MAAA;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAErC,CAAC,gBAENnC,OAAA;MAAA+B,QAAA,EAAG;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC9B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjC,EAAA,CA1DID,OAAO;AAAAmC,EAAA,GAAPnC,OAAO;AA4Db,eAAeA,OAAO;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}