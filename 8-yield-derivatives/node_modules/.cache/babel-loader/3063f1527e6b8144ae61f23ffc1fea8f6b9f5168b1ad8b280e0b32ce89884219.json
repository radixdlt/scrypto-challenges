{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\nexport function tap(nextOrObserver, error, complete) {\n  return function tapOperatorFunction(source) {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\nvar DoOperator = /*@__PURE__*/function () {\n  function DoOperator(nextOrObserver, error, complete) {\n    this.nextOrObserver = nextOrObserver;\n    this.error = error;\n    this.complete = complete;\n  }\n  DoOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  };\n  return DoOperator;\n}();\nvar TapSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(TapSubscriber, _super);\n  function TapSubscriber(destination, observerOrNext, error, complete) {\n    var _this = _super.call(this, destination) || this;\n    _this._tapNext = noop;\n    _this._tapError = noop;\n    _this._tapComplete = noop;\n    _this._tapError = error || noop;\n    _this._tapComplete = complete || noop;\n    if (isFunction(observerOrNext)) {\n      _this._context = _this;\n      _this._tapNext = observerOrNext;\n    } else if (observerOrNext) {\n      _this._context = observerOrNext;\n      _this._tapNext = observerOrNext.next || noop;\n      _this._tapError = observerOrNext.error || noop;\n      _this._tapComplete = observerOrNext.complete || noop;\n    }\n    return _this;\n  }\n  TapSubscriber.prototype._next = function (value) {\n    try {\n      this._tapNext.call(this._context, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(value);\n  };\n  TapSubscriber.prototype._error = function (err) {\n    try {\n      this._tapError.call(this._context, err);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.error(err);\n  };\n  TapSubscriber.prototype._complete = function () {\n    try {\n      this._tapComplete.call(this._context);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    return this.destination.complete();\n  };\n  return TapSubscriber;\n}(Subscriber);","map":{"version":3,"names":["tslib_1","Subscriber","noop","isFunction","tap","nextOrObserver","error","complete","tapOperatorFunction","source","lift","DoOperator","prototype","call","subscriber","subscribe","TapSubscriber","_super","__extends","destination","observerOrNext","_this","_tapNext","_tapError","_tapComplete","_context","next","_next","value","err","_error","_complete"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/tap.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, PartialObserver, TeardownLogic } from '../types';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\n/** @deprecated Use an observer instead of a complete callback */\nexport function tap<T>(next: null | undefined, error: null | undefined, complete: () => void): MonoTypeOperatorFunction<T>;\n/** @deprecated Use an observer instead of an error callback */\nexport function tap<T>(next: null | undefined, error: (error: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\n/** @deprecated Use an observer instead of a complete callback */\nexport function tap<T>(next: (value: T) => void, error: null | undefined, complete: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(next?: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * ![](do.png)\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `tap` is not subscribed, the side effects specified by the\n * Observer will never happen. `tap` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * ## Example\n * Map every click to the clientX position of that click, while also logging the click event\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { tap, map } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(\n *   tap(ev => console.log(ev)),\n *   map(ev => ev.clientX),\n * );\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link map}\n * @see {@link Observable#subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nclass TapSubscriber<T> extends Subscriber<T> {\n  private _context: any;\n\n  private _tapNext: ((value: T) => void) = noop;\n\n  private _tapError: ((err: any) => void) = noop;\n\n  private _tapComplete: (() => void) = noop;\n\n  constructor(destination: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n      super(destination);\n      this._tapError = error || noop;\n      this._tapComplete = complete || noop;\n      if (isFunction(observerOrNext)) {\n        this._context = this;\n        this._tapNext = observerOrNext;\n      } else if (observerOrNext) {\n        this._context = observerOrNext;\n        this._tapNext = observerOrNext.next || noop;\n        this._tapError = observerOrNext.error || noop;\n        this._tapComplete = observerOrNext.complete || noop;\n      }\n    }\n\n  _next(value: T) {\n    try {\n      this._tapNext.call(this._context, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(value);\n  }\n\n  _error(err: any) {\n    try {\n      this._tapError.call(this._context, err);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.error(err);\n  }\n\n  _complete() {\n    try {\n      this._tapComplete.call(this._context, );\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    return this.destination.complete();\n  }\n}\n"],"mappings":";AACA,OAAO,KAAEA,OAAU,MAAE,OAAM;AAG3B,SAASC,UAAM,QAAM,eAAe;AACpC,SAASC,IAAA,QAAY,cAAM;AA6D3B,SAAMC,UAAa,QAAI,oBAEA;OACrB,SAAOC,IAASC,cAAA,EAAAC,KAAoB,EAAAC,QAAqB;SACvD,SAAOC,mBAAgBA,CAAAC,MAAW;IAClC,OAAAA,MAAA,CAAAC,IAAA,KAAAC,UAAA,CAAAN,cAAA,EAAAC,KAAA,EAAAC,QAAA;EACH;AAED;IACEI,UAAA,gBAAoB,YACA;WADAA,WAAAN,cAAA,EAAAC,KAAsD,EAAAC,QAAA;IACtD,KAAAF,cAAwB,GAAAA,cAAA;IACxB,KAAAC,KAAA,GAAQA,KAAR;IACnB,KAAAC,QAAA,GAAAA,QAAA;EACD;YACE,CAAOK,SAAO,CAAAC,IAAA,GAAU,UAAIC,UAAc,EAAAL,MAAU,EAAE;IACvD,OAAAA,MAAA,CAAAM,SAAA,KAAAC,aAAA,CAAAF,UAAA,OAAAT,cAAA,OAAAC,KAAA,OAAAC,QAAA;EACH;EARA,OAQCI,UAAA;AAQD;IAA+BK,aAAA,0BAAaC,MAAA;EAS1CjB,OAAA,CAAAkB,SAAA,CAAAF,aAAY,EAAAC,MACA;WADZD,aAIIA,CAAAG,WAAM,EAAAC,cAAY,EAAAd,KAYnB,EAAAC,QAAA;IAtBK,IAAAc,KAAA,GAAAJ,MAAiC,CAAAJ,IAAK,OAAAM,WAAA;IAEtCE,KAAA,CAAAC,QAAA,GAASpB,IAAyB;IAElCmB,KAAA,CAAAE,SAAA,GAAYrB,IAAiB;IAOjCmB,KAAI,CAACG,YAAY,GAAAtB,IAAK;IACtBmB,KAAI,CAACE,SAAA,GAAYjB,KAAG,IAAAJ,IAAQ;IAC5BmB,KAAI,CAAAG,YAAW,GAAAjB,QAAc,IAAGL,IAAA;QAC9BC,UAAK,CAAAiB,cAAgB;MACrBC,KAAI,CAACI,QAAQ,GAAGJ,KAAA;MACjBA,KAAA,CAAAC,QAAA,GAAAF,cAAA;WACC,IAAIA,cAAY;MAChBC,KAAI,CAACI,QAAQ,GAAGL,cAAc;MAC9BC,KAAI,CAACC,QAAA,GAASF,cAAG,CAAcM,IAAC,IAAKxB,IAAI;MACzCmB,KAAI,CAACE,SAAA,GAAYH,cAAG,CAAAd,KAAe,IAAAJ,IAAQ;MAC5CmB,KAAA,CAAAG,YAAA,GAAAJ,cAAA,CAAAb,QAAA,IAAAL,IAAA;;IACF,OAAAmB,KAAA;EAEH;eACM,CAAAT,SAAA,CAAAe,KAAA,aAAAC,KAAA;QACF;MACD,KAAAN,QAAA,CAAAT,IAAA,MAAAY,QAAA,EAAAG,KAAA;IAAC,E,OACAC,GAAK;MACL,KAAAV,WAAO,CAAAb,KAAA,CAAAuB,GAAA;MACR;IACD;IACD,KAAAV,WAAA,CAAAO,IAAA,CAAAE,KAAA;EAED;eACM,CAAAhB,SAAA,CAAAkB,MAAA,aAAAD,GAAA;QACF;MACD,KAAAN,SAAA,CAAAV,IAAA,MAAAY,QAAA,EAAAI,GAAA;IAAC,E,OACAA,GAAK;MACL,KAAAV,WAAO,CAAAb,KAAA,CAAAuB,GAAA;MACR;IACD;IACD,KAAAV,WAAA,CAAAb,KAAA,CAAAuB,GAAA;EAED;eACM,CAAAjB,SAAA,CAAAmB,SAAA;QACF;MACD,KAAAP,YAAA,CAAAX,IAAA,MAAAY,QAAA;IAAC,E,OACAI,GAAK;MACL,KAAAV,WAAO,CAAAb,KAAA,CAAAuB,GAAA;MACR;IACD;IACD,YAAAV,WAAA,CAAAZ,QAAA;EACH;EAxD+B,OAAAS,aAwD9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}