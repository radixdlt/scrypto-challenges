{"ast":null,"code":";\n(function (globalObject) {\n  'use strict';\n\n  /*\r\n   *      bignumber.js v9.1.2\r\n   *      A JavaScript library for arbitrary-precision arithmetic.\r\n   *      https://github.com/MikeMcl/bignumber.js\r\n   *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *      MIT Licensed.\r\n   *\r\n   *      BigNumber.prototype methods     |  BigNumber methods\r\n   *                                      |\r\n   *      absoluteValue            abs    |  clone\r\n   *      comparedTo                      |  config               set\r\n   *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n   *      dividedBy                div    |      ROUNDING_MODE\r\n   *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n   *      exponentiatedBy          pow    |      RANGE\r\n   *      integerValue                    |      CRYPTO\r\n   *      isEqualTo                eq     |      MODULO_MODE\r\n   *      isFinite                        |      POW_PRECISION\r\n   *      isGreaterThan            gt     |      FORMAT\r\n   *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n   *      isInteger                       |  isBigNumber\r\n   *      isLessThan               lt     |  maximum              max\r\n   *      isLessThanOrEqualTo      lte    |  minimum              min\r\n   *      isNaN                           |  random\r\n   *      isNegative                      |  sum\r\n   *      isPositive                      |\r\n   *      isZero                          |\r\n   *      minus                           |\r\n   *      modulo                   mod    |\r\n   *      multipliedBy             times  |\r\n   *      negated                         |\r\n   *      plus                            |\r\n   *      precision                sd     |\r\n   *      shiftedBy                       |\r\n   *      squareRoot               sqrt   |\r\n   *      toExponential                   |\r\n   *      toFixed                         |\r\n   *      toFormat                        |\r\n   *      toFraction                      |\r\n   *      toJSON                          |\r\n   *      toNumber                        |\r\n   *      toPrecision                     |\r\n   *      toString                        |\r\n   *      valueOf                         |\r\n   *\r\n   */\n  var BigNumber,\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n    mathceil = Math.ceil,\n    mathfloor = Math.floor,\n    bignumberError = '[BigNumber Error] ',\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n    BASE = 1e14,\n    LOG_BASE = 14,\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,\n    // 2^53 - 1\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n    SQRT_BASE = 1e7,\n    // EDITABLE\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n    MAX = 1E9; // 0 to MAX_INT32\n\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\n  function clone(configObject) {\n    var div,\n      convertBase,\n      parseNumeric,\n      P = BigNumber.prototype = {\n        constructor: BigNumber,\n        toString: null,\n        valueOf: null\n      },\n      ONE = new BigNumber(1),\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n\n      // The default values below must be integers within the inclusive ranges stated.\n      // The values can also be changed at run-time using BigNumber.set.\n\n      // The maximum number of decimal places for operations involving division.\n      DECIMAL_PLACES = 20,\n      // 0 to MAX\n\n      // The rounding mode used when rounding to the above decimal places, and when using\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n      // UP         0 Away from zero.\n      // DOWN       1 Towards zero.\n      // CEIL       2 Towards +Infinity.\n      // FLOOR      3 Towards -Infinity.\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n      ROUNDING_MODE = 4,\n      // 0 to 8\n\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n      // The exponent value at and beneath which toString returns exponential notation.\n      // Number type: -7\n      TO_EXP_NEG = -7,\n      // 0 to -MAX\n\n      // The exponent value at and above which toString returns exponential notation.\n      // Number type: 21\n      TO_EXP_POS = 21,\n      // 0 to MAX\n\n      // RANGE : [MIN_EXP, MAX_EXP]\n\n      // The minimum exponent value, beneath which underflow to zero occurs.\n      // Number type: -324  (5e-324)\n      MIN_EXP = -1e7,\n      // -1 to -MAX\n\n      // The maximum exponent value, above which overflow to Infinity occurs.\n      // Number type:  308  (1.7976931348623157e+308)\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n      MAX_EXP = 1e7,\n      // 1 to MAX\n\n      // Whether to use cryptographically-secure random number generation, if available.\n      CRYPTO = false,\n      // true or false\n\n      // The modulo mode used when calculating the modulus: a mod n.\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n      // The remainder (r) is calculated as: r = a - n * q.\n      //\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\n      // DOWN      1 The remainder has the same sign as the dividend.\n      //             This modulo mode is commonly known as 'truncated division' and is\n      //             equivalent to (a % n) in JavaScript.\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n      //             The remainder is always positive.\n      //\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n      // modes are commonly used for the modulus operation.\n      // Although the other rounding modes can also be used, they may not give useful results.\n      MODULO_MODE = 1,\n      // 0 to 9\n\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\n      POW_PRECISION = 0,\n      // 0 to MAX\n\n      // The format specification used by the BigNumber.prototype.toFormat method.\n      FORMAT = {\n        prefix: '',\n        groupSize: 3,\n        secondaryGroupSize: 0,\n        groupSeparator: ',',\n        decimalSeparator: '.',\n        fractionGroupSize: 0,\n        fractionGroupSeparator: '\\xA0',\n        // non-breaking space\n        suffix: ''\n      },\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\n      // '-', '.', whitespace, or repeated character.\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\n      alphabetHasNormalDecimalDigits = true;\n\n    //------------------------------------------------------------------------------------------\n\n    // CONSTRUCTOR\n\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\n    function BigNumber(v, b) {\n      var alphabet,\n        c,\n        caseChanged,\n        e,\n        i,\n        isNum,\n        len,\n        str,\n        x = this;\n\n      // Enable constructor call without `new`.\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\n      if (b == null) {\n        if (v && v._isBigNumber === true) {\n          x.s = v.s;\n          if (!v.c || v.e > MAX_EXP) {\n            x.c = x.e = null;\n          } else if (v.e < MIN_EXP) {\n            x.c = [x.e = 0];\n          } else {\n            x.e = v.e;\n            x.c = v.c.slice();\n          }\n          return;\n        }\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\n          // Use `1 / n` to handle minus zero also.\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\n\n          // Fast path for integers, where n < 2147483648 (2**31).\n          if (v === ~~v) {\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\n            if (e > MAX_EXP) {\n              x.c = x.e = null;\n            } else {\n              x.e = e;\n              x.c = [v];\n            }\n            return;\n          }\n          str = String(v);\n        } else {\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n        }\n\n        // Decimal point?\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n        // Exponential form?\n        if ((i = str.search(/e/i)) > 0) {\n          // Determine exponent.\n          if (e < 0) e = i;\n          e += +str.slice(i + 1);\n          str = str.substring(0, i);\n        } else if (e < 0) {\n          // Integer.\n          e = str.length;\n        }\n      } else {\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n        intCheck(b, 2, ALPHABET.length, 'Base');\n\n        // Allow exponential notation to be used with base 10 argument, while\n        // also rounding to DECIMAL_PLACES as with other bases.\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\n          x = new BigNumber(v);\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n        }\n        str = String(v);\n        if (isNum = typeof v == 'number') {\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\n\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n            throw Error(tooManyDigits + v);\n          }\n        } else {\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n        }\n        alphabet = ALPHABET.slice(0, b);\n        e = i = 0;\n\n        // Check that str is a valid base b number.\n        // Don't use RegExp, so alphabet can contain special characters.\n        for (len = str.length; i < len; i++) {\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n            if (c == '.') {\n              // If '.' is not the first character and it has not be found before.\n              if (i > e) {\n                e = len;\n                continue;\n              }\n            } else if (!caseChanged) {\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {\n                caseChanged = true;\n                i = -1;\n                e = 0;\n                continue;\n              }\n            }\n            return parseNumeric(x, String(v), isNum, b);\n          }\n        }\n\n        // Prevent later check for length on converted number.\n        isNum = false;\n        str = convertBase(str, b, 10, x.s);\n\n        // Decimal point?\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;\n      }\n\n      // Determine leading zeros.\n      for (i = 0; str.charCodeAt(i) === 48; i++);\n\n      // Determine trailing zeros.\n      for (len = str.length; str.charCodeAt(--len) === 48;);\n      if (str = str.slice(i, ++len)) {\n        len -= i;\n\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n        if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\n          throw Error(tooManyDigits + x.s * v);\n        }\n\n        // Overflow?\n        if ((e = e - i - 1) > MAX_EXP) {\n          // Infinity.\n          x.c = x.e = null;\n\n          // Underflow?\n        } else if (e < MIN_EXP) {\n          // Zero.\n          x.c = [x.e = 0];\n        } else {\n          x.e = e;\n          x.c = [];\n\n          // Transform base\n\n          // e is the base 10 exponent.\n          // i is where to slice str to get the first element of the coefficient array.\n          i = (e + 1) % LOG_BASE;\n          if (e < 0) i += LOG_BASE; // i < 1\n\n          if (i < len) {\n            if (i) x.c.push(+str.slice(0, i));\n            for (len -= LOG_BASE; i < len;) {\n              x.c.push(+str.slice(i, i += LOG_BASE));\n            }\n            i = LOG_BASE - (str = str.slice(i)).length;\n          } else {\n            i -= len;\n          }\n          for (; i--; str += '0');\n          x.c.push(+str);\n        }\n      } else {\n        // Zero.\n        x.c = [x.e = 0];\n      }\n    }\n\n    // CONSTRUCTOR PROPERTIES\n\n    BigNumber.clone = clone;\n    BigNumber.ROUND_UP = 0;\n    BigNumber.ROUND_DOWN = 1;\n    BigNumber.ROUND_CEIL = 2;\n    BigNumber.ROUND_FLOOR = 3;\n    BigNumber.ROUND_HALF_UP = 4;\n    BigNumber.ROUND_HALF_DOWN = 5;\n    BigNumber.ROUND_HALF_EVEN = 6;\n    BigNumber.ROUND_HALF_CEIL = 7;\n    BigNumber.ROUND_HALF_FLOOR = 8;\n    BigNumber.EUCLID = 9;\n\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\n    BigNumber.config = BigNumber.set = function (obj) {\n      var p, v;\n      if (obj != null) {\n        if (typeof obj == 'object') {\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n            v = obj[p];\n            intCheck(v, 0, MAX, p);\n            DECIMAL_PLACES = v;\n          }\n\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n            v = obj[p];\n            intCheck(v, 0, 8, p);\n            ROUNDING_MODE = v;\n          }\n\n          // EXPONENTIAL_AT {number|number[]}\n          // Integer, -MAX to MAX inclusive or\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n            v = obj[p];\n            if (v && v.pop) {\n              intCheck(v[0], -MAX, 0, p);\n              intCheck(v[1], 0, MAX, p);\n              TO_EXP_NEG = v[0];\n              TO_EXP_POS = v[1];\n            } else {\n              intCheck(v, -MAX, MAX, p);\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n            }\n          }\n\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n          if (obj.hasOwnProperty(p = 'RANGE')) {\n            v = obj[p];\n            if (v && v.pop) {\n              intCheck(v[0], -MAX, -1, p);\n              intCheck(v[1], 1, MAX, p);\n              MIN_EXP = v[0];\n              MAX_EXP = v[1];\n            } else {\n              intCheck(v, -MAX, MAX, p);\n              if (v) {\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n              } else {\n                throw Error(bignumberError + p + ' cannot be zero: ' + v);\n              }\n            }\n          }\n\n          // CRYPTO {boolean} true or false.\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\n          // '[BigNumber Error] crypto unavailable'\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\n            v = obj[p];\n            if (v === !!v) {\n              if (v) {\n                if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                  CRYPTO = v;\n                } else {\n                  CRYPTO = !v;\n                  throw Error(bignumberError + 'crypto unavailable');\n                }\n              } else {\n                CRYPTO = v;\n              }\n            } else {\n              throw Error(bignumberError + p + ' not true or false: ' + v);\n            }\n          }\n\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n            v = obj[p];\n            intCheck(v, 0, 9, p);\n            MODULO_MODE = v;\n          }\n\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n            v = obj[p];\n            intCheck(v, 0, MAX, p);\n            POW_PRECISION = v;\n          }\n\n          // FORMAT {object}\n          // '[BigNumber Error] FORMAT not an object: {v}'\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\n            v = obj[p];\n            if (typeof v == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);\n          }\n\n          // ALPHABET {string}\n          // '[BigNumber Error] ALPHABET invalid: {v}'\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\n            v = obj[p];\n\n            // Disallow if less than two characters,\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\n              ALPHABET = v;\n            } else {\n              throw Error(bignumberError + p + ' invalid: ' + v);\n            }\n          }\n        } else {\n          // '[BigNumber Error] Object expected: {v}'\n          throw Error(bignumberError + 'Object expected: ' + obj);\n        }\n      }\n      return {\n        DECIMAL_PLACES: DECIMAL_PLACES,\n        ROUNDING_MODE: ROUNDING_MODE,\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n        RANGE: [MIN_EXP, MAX_EXP],\n        CRYPTO: CRYPTO,\n        MODULO_MODE: MODULO_MODE,\n        POW_PRECISION: POW_PRECISION,\n        FORMAT: FORMAT,\n        ALPHABET: ALPHABET\n      };\n    };\n\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\n    BigNumber.isBigNumber = function (v) {\n      if (!v || v._isBigNumber !== true) return false;\n      if (!BigNumber.DEBUG) return true;\n      var i,\n        n,\n        c = v.c,\n        e = v.e,\n        s = v.s;\n      out: if ({}.toString.call(c) == '[object Array]') {\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\n          // If the first element is zero, the BigNumber value must be zero.\n          if (c[0] === 0) {\n            if (e === 0 && c.length === 1) return true;\n            break out;\n          }\n\n          // Calculate number of digits that c[0] should have, based on the exponent.\n          i = (e + 1) % LOG_BASE;\n          if (i < 1) i += LOG_BASE;\n\n          // Calculate number of digits of c[0].\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\n          if (String(c[0]).length == i) {\n            for (i = 0; i < c.length; i++) {\n              n = c[i];\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\n            }\n\n            // Last element cannot be zero, unless it is the only element.\n            if (n !== 0) return true;\n          }\n        }\n\n        // Infinity/NaN\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\n        return true;\n      }\n      throw Error(bignumberError + 'Invalid BigNumber: ' + v);\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n    BigNumber.maximum = BigNumber.max = function () {\n      return maxOrMin(arguments, -1);\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n    BigNumber.minimum = BigNumber.min = function () {\n      return maxOrMin(arguments, 1);\n    };\n\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\n    BigNumber.random = function () {\n      var pow2_53 = 0x20000000000000;\n\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n      // Check if Math.random() produces more than 32 bits of randomness.\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n      var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n        return mathfloor(Math.random() * pow2_53);\n      } : function () {\n        return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n      };\n      return function (dp) {\n        var a,\n          b,\n          e,\n          k,\n          v,\n          i = 0,\n          c = [],\n          rand = new BigNumber(ONE);\n        if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);\n        k = mathceil(dp / LOG_BASE);\n        if (CRYPTO) {\n          // Browsers supporting crypto.getRandomValues.\n          if (crypto.getRandomValues) {\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\n            for (; i < k;) {\n              // 53 bits:\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n              //                                     11111 11111111 11111111\n              // 0x20000 is 2^21.\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n              // Rejection sampling:\n              // 0 <= v < 9007199254740992\n              // Probability that v >= 9e15, is\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n              if (v >= 9e15) {\n                b = crypto.getRandomValues(new Uint32Array(2));\n                a[i] = b[0];\n                a[i + 1] = b[1];\n              } else {\n                // 0 <= v <= 8999999999999999\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 2;\n              }\n            }\n            i = k / 2;\n\n            // Node.js supporting crypto.randomBytes.\n          } else if (crypto.randomBytes) {\n            // buffer\n            a = crypto.randomBytes(k *= 7);\n            for (; i < k;) {\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n              // 0 <= v < 9007199254740992\n              v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n              if (v >= 9e15) {\n                crypto.randomBytes(7).copy(a, i);\n              } else {\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 7;\n              }\n            }\n            i = k / 7;\n          } else {\n            CRYPTO = false;\n            throw Error(bignumberError + 'crypto unavailable');\n          }\n        }\n\n        // Use Math.random.\n        if (!CRYPTO) {\n          for (; i < k;) {\n            v = random53bitInt();\n            if (v < 9e15) c[i++] = v % 1e14;\n          }\n        }\n        k = c[--i];\n        dp %= LOG_BASE;\n\n        // Convert trailing digits to zeros according to dp.\n        if (k && dp) {\n          v = POWS_TEN[LOG_BASE - dp];\n          c[i] = mathfloor(k / v) * v;\n        }\n\n        // Remove trailing elements which are zero.\n        for (; c[i] === 0; c.pop(), i--);\n\n        // Zero?\n        if (i < 0) {\n          c = [e = 0];\n        } else {\n          // Remove leading elements which are zero and adjust exponent accordingly.\n          for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\n\n          // Count the digits of the first element of c to determine leading zeros, and...\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\n\n          // adjust the exponent accordingly.\n          if (i < LOG_BASE) e -= LOG_BASE - i;\n        }\n        rand.e = e;\n        rand.c = c;\n        return rand;\n      };\n    }();\n\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n    BigNumber.sum = function () {\n      var i = 1,\n        args = arguments,\n        sum = new BigNumber(args[0]);\n      for (; i < args.length;) sum = sum.plus(args[i++]);\n      return sum;\n    };\n\n    // PRIVATE FUNCTIONS\n\n    // Called by BigNumber and BigNumber.prototype.toString.\n    convertBase = function () {\n      var decimal = '0123456789';\n\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\n        var j,\n          arr = [0],\n          arrL,\n          i = 0,\n          len = str.length;\n        for (; i < len;) {\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n          arr[0] += alphabet.indexOf(str.charAt(i++));\n          for (j = 0; j < arr.length; j++) {\n            if (arr[j] > baseOut - 1) {\n              if (arr[j + 1] == null) arr[j + 1] = 0;\n              arr[j + 1] += arr[j] / baseOut | 0;\n              arr[j] %= baseOut;\n            }\n          }\n        }\n        return arr.reverse();\n      }\n\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\n      // If the caller is toString, we are converting from base 10 to baseOut.\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\n        var alphabet,\n          d,\n          e,\n          k,\n          r,\n          x,\n          xc,\n          y,\n          i = str.indexOf('.'),\n          dp = DECIMAL_PLACES,\n          rm = ROUNDING_MODE;\n\n        // Non-integer.\n        if (i >= 0) {\n          k = POW_PRECISION;\n\n          // Unlimited precision.\n          POW_PRECISION = 0;\n          str = str.replace('.', '');\n          y = new BigNumber(baseIn);\n          x = y.pow(str.length - i);\n          POW_PRECISION = k;\n\n          // Convert str as if an integer, then restore the fraction part by dividing the\n          // result by its base raised to a power.\n\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);\n          y.e = y.c.length;\n        }\n\n        // Convert the number as integer.\n\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));\n\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\n        e = k = xc.length;\n\n        // Remove trailing zeros.\n        for (; xc[--k] == 0; xc.pop());\n\n        // Zero?\n        if (!xc[0]) return alphabet.charAt(0);\n\n        // Does str represent an integer? If so, no need for the division.\n        if (i < 0) {\n          --e;\n        } else {\n          x.c = xc;\n          x.e = e;\n\n          // The sign is needed for correct rounding.\n          x.s = sign;\n          x = div(x, y, dp, rm, baseOut);\n          xc = x.c;\n          r = x.r;\n          e = x.e;\n        }\n\n        // xc now represents str converted to baseOut.\n\n        // THe index of the rounding digit.\n        d = e + dp + 1;\n\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\n        i = xc[d];\n\n        // Look at the rounding digits and mode to determine whether to round up.\n\n        k = baseOut / 2;\n        r = r || d < 0 || xc[d + 1] != null;\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));\n\n        // If the index of the rounding digit is not greater than zero, or xc represents\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\n        // such as 0.00001.\n        if (d < 1 || !xc[0]) {\n          // 1^-dp or 0\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\n        } else {\n          // Truncate xc to the required number of decimal places.\n          xc.length = d;\n\n          // Round up?\n          if (r) {\n            // Rounding up may mean the previous digit has to be rounded up and so on.\n            for (--baseOut; ++xc[--d] > baseOut;) {\n              xc[d] = 0;\n              if (!d) {\n                ++e;\n                xc = [1].concat(xc);\n              }\n            }\n          }\n\n          // Determine trailing zeros.\n          for (k = xc.length; !xc[--k];);\n\n          // E.g. [4, 11, 15] becomes 4bf.\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\n\n          // Add leading zeros, decimal point and trailing zeros as required.\n          str = toFixedPoint(str, e, alphabet.charAt(0));\n        }\n\n        // The caller will add the sign.\n        return str;\n      };\n    }();\n\n    // Perform division in the specified base. Called by div and convertBase.\n    div = function () {\n      // Assume non-zero x and k.\n      function multiply(x, k, base) {\n        var m,\n          temp,\n          xlo,\n          xhi,\n          carry = 0,\n          i = x.length,\n          klo = k % SQRT_BASE,\n          khi = k / SQRT_BASE | 0;\n        for (x = x.slice(); i--;) {\n          xlo = x[i] % SQRT_BASE;\n          xhi = x[i] / SQRT_BASE | 0;\n          m = khi * xlo + xhi * klo;\n          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n          x[i] = temp % base;\n        }\n        if (carry) x = [carry].concat(x);\n        return x;\n      }\n      function compare(a, b, aL, bL) {\n        var i, cmp;\n        if (aL != bL) {\n          cmp = aL > bL ? 1 : -1;\n        } else {\n          for (i = cmp = 0; i < aL; i++) {\n            if (a[i] != b[i]) {\n              cmp = a[i] > b[i] ? 1 : -1;\n              break;\n            }\n          }\n        }\n        return cmp;\n      }\n      function subtract(a, b, aL, base) {\n        var i = 0;\n\n        // Subtract b from a.\n        for (; aL--;) {\n          a[aL] -= i;\n          i = a[aL] < b[aL] ? 1 : 0;\n          a[aL] = i * base + a[aL] - b[aL];\n        }\n\n        // Remove leading zeros.\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\n      }\n\n      // x: dividend, y: divisor.\n      return function (x, y, dp, rm, base) {\n        var cmp,\n          e,\n          i,\n          more,\n          n,\n          prod,\n          prodL,\n          q,\n          qc,\n          rem,\n          remL,\n          rem0,\n          xi,\n          xL,\n          yc0,\n          yL,\n          yz,\n          s = x.s == y.s ? 1 : -1,\n          xc = x.c,\n          yc = y.c;\n\n        // Either NaN, Infinity or 0?\n        if (!xc || !xc[0] || !yc || !yc[0]) {\n          return new BigNumber(\n          // Return NaN if either NaN, or both Infinity or 0.\n          !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n        }\n        q = new BigNumber(s);\n        qc = q.c = [];\n        e = x.e - y.e;\n        s = dp + e + 1;\n        if (!base) {\n          base = BASE;\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n          s = s / LOG_BASE | 0;\n        }\n\n        // Result exponent may be one less then the current value of e.\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\n        if (yc[i] > (xc[i] || 0)) e--;\n        if (s < 0) {\n          qc.push(1);\n          more = true;\n        } else {\n          xL = xc.length;\n          yL = yc.length;\n          i = 0;\n          s += 2;\n\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n          n = mathfloor(base / (yc[0] + 1));\n\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n          if (n > 1) {\n            yc = multiply(yc, n, base);\n            xc = multiply(xc, n, base);\n            yL = yc.length;\n            xL = xc.length;\n          }\n          xi = yL;\n          rem = xc.slice(0, yL);\n          remL = rem.length;\n\n          // Add zeros to make remainder as long as divisor.\n          for (; remL < yL; rem[remL++] = 0);\n          yz = yc.slice();\n          yz = [0].concat(yz);\n          yc0 = yc[0];\n          if (yc[1] >= base / 2) yc0++;\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n          do {\n            n = 0;\n\n            // Compare divisor and remainder.\n            cmp = compare(yc, rem, yL, remL);\n\n            // If divisor < remainder.\n            if (cmp < 0) {\n              // Calculate trial digit, n.\n\n              rem0 = rem[0];\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n              // n is how many times the divisor goes into the current remainder.\n              n = mathfloor(rem0 / yc0);\n\n              //  Algorithm:\n              //  product = divisor multiplied by trial digit (n).\n              //  Compare product and remainder.\n              //  If product is greater than remainder:\n              //    Subtract divisor from product, decrement trial digit.\n              //  Subtract product from remainder.\n              //  If product was less than remainder at the last compare:\n              //    Compare new remainder and divisor.\n              //    If remainder is greater than divisor:\n              //      Subtract divisor from remainder, increment trial digit.\n\n              if (n > 1) {\n                // n may be > base only when base is 3.\n                if (n >= base) n = base - 1;\n\n                // product = divisor * trial digit.\n                prod = multiply(yc, n, base);\n                prodL = prod.length;\n                remL = rem.length;\n\n                // Compare product and remainder.\n                // If product > remainder then trial digit n too high.\n                // n is 1 too high about 5% of the time, and is not known to have\n                // ever been more than 1 too high.\n                while (compare(prod, rem, prodL, remL) == 1) {\n                  n--;\n\n                  // Subtract divisor from product.\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                  prodL = prod.length;\n                  cmp = 1;\n                }\n              } else {\n                // n is 0 or 1, cmp is -1.\n                // If n is 0, there is no need to compare yc and rem again below,\n                // so change cmp to 1 to avoid it.\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                if (n == 0) {\n                  // divisor < remainder, so n must be at least 1.\n                  cmp = n = 1;\n                }\n\n                // product = divisor\n                prod = yc.slice();\n                prodL = prod.length;\n              }\n              if (prodL < remL) prod = [0].concat(prod);\n\n              // Subtract product from remainder.\n              subtract(rem, prod, remL, base);\n              remL = rem.length;\n\n              // If product was < remainder.\n              if (cmp == -1) {\n                // Compare divisor and new remainder.\n                // If divisor < new remainder, subtract divisor from remainder.\n                // Trial digit n too low.\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                while (compare(yc, rem, yL, remL) < 1) {\n                  n++;\n\n                  // Subtract divisor from remainder.\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\n                  remL = rem.length;\n                }\n              }\n            } else if (cmp === 0) {\n              n++;\n              rem = [0];\n            } // else cmp === 1 and n will be 0\n\n            // Add the next digit, n, to the result array.\n            qc[i++] = n;\n\n            // Update the remainder.\n            if (rem[0]) {\n              rem[remL++] = xc[xi] || 0;\n            } else {\n              rem = [xc[xi]];\n              remL = 1;\n            }\n          } while ((xi++ < xL || rem[0] != null) && s--);\n          more = rem[0] != null;\n\n          // Leading zero?\n          if (!qc[0]) qc.splice(0, 1);\n        }\n        if (base == BASE) {\n          // To calculate q.e, first get the number of digits of qc[0].\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\n\n          // Caller is convertBase.\n        } else {\n          q.e = e;\n          q.r = +more;\n        }\n        return q;\n      };\n    }();\n\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\n    function format(n, i, rm, id) {\n      var c0, e, ne, len, str;\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      if (!n.c) return n.toString();\n      c0 = n.c[0];\n      ne = n.e;\n      if (i == null) {\n        str = coeffToString(n.c);\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, '0');\n      } else {\n        n = round(new BigNumber(n), i, rm);\n\n        // n.e may have changed if the value was rounded up.\n        e = n.e;\n        str = coeffToString(n.c);\n        len = str.length;\n\n        // toPrecision returns exponential notation if the number of significant digits\n        // specified is less than the number of digits necessary to represent the integer\n        // part of the value in fixed-point notation.\n\n        // Exponential notation.\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n          // Append zeros?\n          for (; len < i; str += '0', len++);\n          str = toExponential(str, e);\n\n          // Fixed-point notation.\n        } else {\n          i -= ne;\n          str = toFixedPoint(str, e, '0');\n\n          // Append zeros?\n          if (e + 1 > len) {\n            if (--i > 0) for (str += '.'; i--; str += '0');\n          } else {\n            i += e - len;\n            if (i > 0) {\n              if (e + 1 == len) str += '.';\n              for (; i--; str += '0');\n            }\n          }\n        }\n      }\n      return n.s < 0 && c0 ? '-' + str : str;\n    }\n\n    // Handle BigNumber.max and BigNumber.min.\n    // If any number is NaN, return NaN.\n    function maxOrMin(args, n) {\n      var k,\n        y,\n        i = 1,\n        x = new BigNumber(args[0]);\n      for (; i < args.length; i++) {\n        y = new BigNumber(args[i]);\n        if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\n          x = y;\n        }\n      }\n      return x;\n    }\n\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\n    function normalise(n, c, e) {\n      var i = 1,\n        j = c.length;\n\n      // Remove trailing zeros.\n      for (; !c[--j]; c.pop());\n\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\n      for (j = c[0]; j >= 10; j /= 10, i++);\n\n      // Overflow?\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n        // Infinity.\n        n.c = n.e = null;\n\n        // Underflow?\n      } else if (e < MIN_EXP) {\n        // Zero.\n        n.c = [n.e = 0];\n      } else {\n        n.e = e;\n        n.c = c;\n      }\n      return n;\n    }\n\n    // Handle values that fail the validity test in BigNumber.\n    parseNumeric = function () {\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n        dotAfter = /^([^.]+)\\.$/,\n        dotBefore = /^\\.([^.]+)$/,\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n      return function (x, str, isNum, b) {\n        var base,\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\n\n        // No exception on ±Infinity or NaN.\n        if (isInfinityOrNaN.test(s)) {\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n        } else {\n          if (!isNum) {\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n            s = s.replace(basePrefix, function (m, p1, p2) {\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n              return !b || b == base ? p1 : m;\n            });\n            if (b) {\n              base = b;\n\n              // E.g. '1.' to '1', '.1' to '0.1'\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n            }\n            if (str != s) return new BigNumber(s, base);\n          }\n\n          // '[BigNumber Error] Not a number: {n}'\n          // '[BigNumber Error] Not a base {b} number: {n}'\n          if (BigNumber.DEBUG) {\n            throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n          }\n\n          // NaN\n          x.s = null;\n        }\n        x.c = x.e = null;\n      };\n    }();\n\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\n    function round(x, sd, rm, r) {\n      var d,\n        i,\n        j,\n        k,\n        n,\n        ni,\n        rd,\n        xc = x.c,\n        pows10 = POWS_TEN;\n\n      // if x is not Infinity or NaN...\n      if (xc) {\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\n        // ni is the index of n within x.c.\n        // d is the number of digits of n.\n        // i is the index of rd within n including leading zeros.\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\n        out: {\n          // Get the number of digits of the first element of xc.\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n          i = sd - d;\n\n          // If the rounding digit is in the first element of xc...\n          if (i < 0) {\n            i += LOG_BASE;\n            j = sd;\n            n = xc[ni = 0];\n\n            // Get the rounding digit at index j of n.\n            rd = mathfloor(n / pows10[d - j - 1] % 10);\n          } else {\n            ni = mathceil((i + 1) / LOG_BASE);\n            if (ni >= xc.length) {\n              if (r) {\n                // Needed by sqrt.\n                for (; xc.length <= ni; xc.push(0));\n                n = rd = 0;\n                d = 1;\n                i %= LOG_BASE;\n                j = i - LOG_BASE + 1;\n              } else {\n                break out;\n              }\n            } else {\n              n = k = xc[ni];\n\n              // Get the number of digits of n.\n              for (d = 1; k >= 10; k /= 10, d++);\n\n              // Get the index of rd within n.\n              i %= LOG_BASE;\n\n              // Get the index of rd within n, adjusted for leading zeros.\n              // The number of leading zeros of n is given by LOG_BASE - d.\n              j = i - LOG_BASE + d;\n\n              // Get the rounding digit at index j of n.\n              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\n            }\n          }\n          r = r || sd < 0 ||\n          // Are there any non-zero digits after the rounding digit?\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n          r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\n          // Check whether the digit to the left of the rounding digit is odd.\n          (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n          if (sd < 1 || !xc[0]) {\n            xc.length = 0;\n            if (r) {\n              // Convert sd to decimal places.\n              sd -= x.e + 1;\n\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n              x.e = -sd || 0;\n            } else {\n              // Zero.\n              xc[0] = x.e = 0;\n            }\n            return x;\n          }\n\n          // Remove excess digits.\n          if (i == 0) {\n            xc.length = ni;\n            k = 1;\n            ni--;\n          } else {\n            xc.length = ni + 1;\n            k = pows10[LOG_BASE - i];\n\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n            // j > 0 means i > number of leading zeros of n.\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n          }\n\n          // Round up?\n          if (r) {\n            for (;;) {\n              // If the digit to be rounded up is in the first element of xc...\n              if (ni == 0) {\n                // i will be the length of xc[0] before k is added.\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n                j = xc[0] += k;\n                for (k = 1; j >= 10; j /= 10, k++);\n\n                // if i != k the length has increased.\n                if (i != k) {\n                  x.e++;\n                  if (xc[0] == BASE) xc[0] = 1;\n                }\n                break;\n              } else {\n                xc[ni] += k;\n                if (xc[ni] != BASE) break;\n                xc[ni--] = 0;\n                k = 1;\n              }\n            }\n          }\n\n          // Remove trailing zeros.\n          for (i = xc.length; xc[--i] === 0; xc.pop());\n        }\n\n        // Overflow? Infinity.\n        if (x.e > MAX_EXP) {\n          x.c = x.e = null;\n\n          // Underflow? Zero.\n        } else if (x.e < MIN_EXP) {\n          x.c = [x.e = 0];\n        }\n      }\n      return x;\n    }\n    function valueOf(n) {\n      var str,\n        e = n.e;\n      if (e === null) return n.toString();\n      str = coeffToString(n.c);\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');\n      return n.s < 0 ? '-' + str : str;\n    }\n\n    // PROTOTYPE/INSTANCE METHODS\n\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\n    P.absoluteValue = P.abs = function () {\n      var x = new BigNumber(this);\n      if (x.s < 0) x.s = 1;\n      return x;\n    };\n\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\n    P.comparedTo = function (y, b) {\n      return compare(this, new BigNumber(y, b));\n    };\n\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n    P.decimalPlaces = P.dp = function (dp, rm) {\n      var c,\n        n,\n        v,\n        x = this;\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        return round(new BigNumber(x), dp + x.e + 1, rm);\n      }\n      if (!(c = x.c)) return null;\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\n\n      // Subtract the number of trailing zeros of the last number.\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n      if (n < 0) n = 0;\n      return n;\n    };\n\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n    P.dividedBy = P.div = function (y, b) {\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\n      return div(this, new BigNumber(y, b), 0, 1);\n    };\n\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\n    P.exponentiatedBy = P.pow = function (n, m) {\n      var half,\n        isModExp,\n        i,\n        k,\n        more,\n        nIsBig,\n        nIsNeg,\n        nIsOdd,\n        y,\n        x = this;\n      n = new BigNumber(n);\n\n      // Allow NaN and ±Infinity, but not other non-integers.\n      if (n.c && !n.isInteger()) {\n        throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));\n      }\n      if (m != null) m = new BigNumber(m);\n\n      // Exponent of MAX_SAFE_INTEGER is 15.\n      nIsBig = n.e > 14;\n\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n        // The sign of the result of pow when x is negative depends on the evenness of n.\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\n        return m ? y.mod(m) : y;\n      }\n      nIsNeg = n.s < 0;\n      if (m) {\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n        if (isModExp) x = x.mod(m);\n\n        // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n        // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\n      // [1, 240000000]\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\n      // [80000000000000]  [99999750000000]\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n        // If x is negative and n is odd, k = -0, else k = 0.\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\n\n        // If x >= 1, k = ±Infinity.\n        if (x.e > -1) k = 1 / k;\n\n        // If n is negative return ±0, else return ±Infinity.\n        return new BigNumber(nIsNeg ? 1 / k : k);\n      } else if (POW_PRECISION) {\n        // Truncating each coefficient array to a length of k after each multiplication\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\n        // i.e. there will be a minimum of 28 guard digits retained.\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\n      }\n      if (nIsBig) {\n        half = new BigNumber(0.5);\n        if (nIsNeg) n.s = 1;\n        nIsOdd = isOdd(n);\n      } else {\n        i = Math.abs(+valueOf(n));\n        nIsOdd = i % 2;\n      }\n      y = new BigNumber(ONE);\n\n      // Performs 54 loop iterations for n of 9007199254740991.\n      for (;;) {\n        if (nIsOdd) {\n          y = y.times(x);\n          if (!y.c) break;\n          if (k) {\n            if (y.c.length > k) y.c.length = k;\n          } else if (isModExp) {\n            y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n          }\n        }\n        if (i) {\n          i = mathfloor(i / 2);\n          if (i === 0) break;\n          nIsOdd = i % 2;\n        } else {\n          n = n.times(half);\n          round(n, n.e + 1, 1);\n          if (n.e > 14) {\n            nIsOdd = isOdd(n);\n          } else {\n            i = +valueOf(n);\n            if (i === 0) break;\n            nIsOdd = i % 2;\n          }\n        }\n        x = x.times(x);\n        if (k) {\n          if (x.c && x.c.length > k) x.c.length = k;\n        } else if (isModExp) {\n          x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n        }\n      }\n      if (isModExp) return y;\n      if (nIsNeg) y = ONE.div(y);\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\n    P.integerValue = function (rm) {\n      var n = new BigNumber(this);\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      return round(n, n.e + 1, rm);\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n    P.isEqualTo = P.eq = function (y, b) {\n      return compare(this, new BigNumber(y, b)) === 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\n    P.isFinite = function () {\n      return !!this.c;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n    P.isGreaterThan = P.gt = function (y, b) {\n      return compare(this, new BigNumber(y, b)) > 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\n    P.isInteger = function () {\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n    P.isLessThan = P.lt = function (y, b) {\n      return compare(this, new BigNumber(y, b)) < 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\n    P.isNaN = function () {\n      return !this.s;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\n    P.isNegative = function () {\n      return this.s < 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\n    P.isPositive = function () {\n      return this.s > 0;\n    };\n\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\n    P.isZero = function () {\n      return !!this.c && this.c[0] == 0;\n    };\n\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\n    P.minus = function (y, b) {\n      var i,\n        j,\n        t,\n        xLTy,\n        x = this,\n        a = x.s;\n      y = new BigNumber(y, b);\n      b = y.s;\n\n      // Either NaN?\n      if (!a || !b) return new BigNumber(NaN);\n\n      // Signs differ?\n      if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n      }\n      var xe = x.e / LOG_BASE,\n        ye = y.e / LOG_BASE,\n        xc = x.c,\n        yc = y.c;\n      if (!xe || !ye) {\n        // Either Infinity?\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\n\n        // Either zero?\n        if (!xc[0] || !yc[0]) {\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\n          // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n          ROUNDING_MODE == 3 ? -0 : 0);\n        }\n      }\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice();\n\n      // Determine which is the bigger number.\n      if (a = xe - ye) {\n        if (xLTy = a < 0) {\n          a = -a;\n          t = xc;\n        } else {\n          ye = xe;\n          t = yc;\n        }\n        t.reverse();\n\n        // Prepend zeros to equalise exponents.\n        for (b = a; b--; t.push(0));\n        t.reverse();\n      } else {\n        // Exponents equal. Check digit by digit.\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n        for (a = b = 0; b < j; b++) {\n          if (xc[b] != yc[b]) {\n            xLTy = xc[b] < yc[b];\n            break;\n          }\n        }\n      }\n\n      // x < y? Point xc to the array of the bigger number.\n      if (xLTy) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n      }\n      b = (j = yc.length) - (i = xc.length);\n\n      // Append zeros to xc if shorter.\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n      if (b > 0) for (; b--; xc[i++] = 0);\n      b = BASE - 1;\n\n      // Subtract yc from xc.\n      for (; j > a;) {\n        if (xc[--j] < yc[j]) {\n          for (i = j; i && !xc[--i]; xc[i] = b);\n          --xc[i];\n          xc[j] += BASE;\n        }\n        xc[j] -= yc[j];\n      }\n\n      // Remove leading zeros and adjust exponent accordingly.\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\n\n      // Zero?\n      if (!xc[0]) {\n        // Following IEEE 754 (2008) 6.3,\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\n        y.c = [y.e = 0];\n        return y;\n      }\n\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n      // for finite x and y.\n      return normalise(y, xc, ye);\n    };\n\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\n    P.modulo = P.mod = function (y, b) {\n      var q,\n        s,\n        x = this;\n      y = new BigNumber(y, b);\n\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n      if (!x.c || !y.s || y.c && !y.c[0]) {\n        return new BigNumber(NaN);\n\n        // Return x if y is Infinity or x is zero.\n      } else if (!y.c || x.c && !x.c[0]) {\n        return new BigNumber(x);\n      }\n      if (MODULO_MODE == 9) {\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\n        // r = x - qy    where  0 <= r < abs(y)\n        s = y.s;\n        y.s = 1;\n        q = div(x, y, 0, 3);\n        y.s = s;\n        q.s *= s;\n      } else {\n        q = div(x, y, 0, MODULO_MODE);\n      }\n      y = x.minus(q.times(y));\n\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n      return y;\n    };\n\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\n    P.multipliedBy = P.times = function (y, b) {\n      var c,\n        e,\n        i,\n        j,\n        k,\n        m,\n        xcL,\n        xlo,\n        xhi,\n        ycL,\n        ylo,\n        yhi,\n        zc,\n        base,\n        sqrtBase,\n        x = this,\n        xc = x.c,\n        yc = (y = new BigNumber(y, b)).c;\n\n      // Either NaN, ±Infinity or ±0?\n      if (!xc || !yc || !xc[0] || !yc[0]) {\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n          y.c = y.e = y.s = null;\n        } else {\n          y.s *= x.s;\n\n          // Return ±Infinity if either is ±Infinity.\n          if (!xc || !yc) {\n            y.c = y.e = null;\n\n            // Return ±0 if either is ±0.\n          } else {\n            y.c = [0];\n            y.e = 0;\n          }\n        }\n        return y;\n      }\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n      y.s *= x.s;\n      xcL = xc.length;\n      ycL = yc.length;\n\n      // Ensure xc points to longer array and xcL to its length.\n      if (xcL < ycL) {\n        zc = xc;\n        xc = yc;\n        yc = zc;\n        i = xcL;\n        xcL = ycL;\n        ycL = i;\n      }\n\n      // Initialise the result array with zeros.\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\n      base = BASE;\n      sqrtBase = SQRT_BASE;\n      for (i = ycL; --i >= 0;) {\n        c = 0;\n        ylo = yc[i] % sqrtBase;\n        yhi = yc[i] / sqrtBase | 0;\n        for (k = xcL, j = i + k; j > i;) {\n          xlo = xc[--k] % sqrtBase;\n          xhi = xc[k] / sqrtBase | 0;\n          m = yhi * xlo + xhi * ylo;\n          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n          zc[j--] = xlo % base;\n        }\n        zc[j] = c;\n      }\n      if (c) {\n        ++e;\n      } else {\n        zc.splice(0, 1);\n      }\n      return normalise(y, zc, e);\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\n    P.negated = function () {\n      var x = new BigNumber(this);\n      x.s = -x.s || null;\n      return x;\n    };\n\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\n    P.plus = function (y, b) {\n      var t,\n        x = this,\n        a = x.s;\n      y = new BigNumber(y, b);\n      b = y.s;\n\n      // Either NaN?\n      if (!a || !b) return new BigNumber(NaN);\n\n      // Signs differ?\n      if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n      }\n      var xe = x.e / LOG_BASE,\n        ye = y.e / LOG_BASE,\n        xc = x.c,\n        yc = y.c;\n      if (!xe || !ye) {\n        // Return ±Infinity if either ±Infinity.\n        if (!xc || !yc) return new BigNumber(a / 0);\n\n        // Either zero?\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n      }\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice();\n\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n      if (a = xe - ye) {\n        if (a > 0) {\n          ye = xe;\n          t = yc;\n        } else {\n          a = -a;\n          t = xc;\n        }\n        t.reverse();\n        for (; a--; t.push(0));\n        t.reverse();\n      }\n      a = xc.length;\n      b = yc.length;\n\n      // Point xc to the longer array, and b to the shorter length.\n      if (a - b < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n        b = a;\n      }\n\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n      for (a = 0; b;) {\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n      }\n      if (a) {\n        xc = [a].concat(xc);\n        ++ye;\n      }\n\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n      // ye = MAX_EXP + 1 possible\n      return normalise(y, xc, ye);\n    };\n\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\n    P.precision = P.sd = function (sd, rm) {\n      var c,\n        n,\n        v,\n        x = this;\n      if (sd != null && sd !== !!sd) {\n        intCheck(sd, 1, MAX);\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        return round(new BigNumber(x), sd, rm);\n      }\n      if (!(c = x.c)) return null;\n      v = c.length - 1;\n      n = v * LOG_BASE + 1;\n      if (v = c[v]) {\n        // Subtract the number of trailing zeros of the last element.\n        for (; v % 10 == 0; v /= 10, n--);\n\n        // Add the number of digits of the first element.\n        for (v = c[0]; v >= 10; v /= 10, n++);\n      }\n      if (sd && x.e + 1 > n) n = x.e + 1;\n      return n;\n    };\n\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\n    P.shiftedBy = function (k) {\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n      return this.times('1e' + k);\n    };\n\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n    P.squareRoot = P.sqrt = function () {\n      var m,\n        n,\n        r,\n        rep,\n        t,\n        x = this,\n        c = x.c,\n        s = x.s,\n        e = x.e,\n        dp = DECIMAL_PLACES + 4,\n        half = new BigNumber('0.5');\n\n      // Negative/NaN/Infinity/zero?\n      if (s !== 1 || !c || !c[0]) {\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n      }\n\n      // Initial estimate.\n      s = Math.sqrt(+valueOf(x));\n\n      // Math.sqrt underflow/overflow?\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n      if (s == 0 || s == 1 / 0) {\n        n = coeffToString(c);\n        if ((n.length + e) % 2 == 0) n += '0';\n        s = Math.sqrt(+n);\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n        if (s == 1 / 0) {\n          n = '5e' + e;\n        } else {\n          n = s.toExponential();\n          n = n.slice(0, n.indexOf('e') + 1) + e;\n        }\n        r = new BigNumber(n);\n      } else {\n        r = new BigNumber(s + '');\n      }\n\n      // Check for zero.\n      // r could be zero if MIN_EXP is changed after the this value was created.\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n      // coeffToString to throw.\n      if (r.c[0]) {\n        e = r.e;\n        s = e + dp;\n        if (s < 3) s = 0;\n\n        // Newton-Raphson iteration.\n        for (;;) {\n          t = r;\n          r = half.times(t.plus(div(x, t, dp, 1)));\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n            // The exponent of r may here be one less than the final result exponent,\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n            // are indexed correctly.\n            if (r.e < e) --s;\n            n = n.slice(s - 3, s + 1);\n\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n            // iteration.\n            if (n == '9999' || !rep && n == '4999') {\n              // On the first iteration only, check to see if rounding up gives the\n              // exact result as the nines may infinitely repeat.\n              if (!rep) {\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\n                if (t.times(t).eq(x)) {\n                  r = t;\n                  break;\n                }\n              }\n              dp += 4;\n              s += 4;\n              rep = 1;\n            } else {\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n              // result. If not, then there are further digits and m will be truthy.\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n                // Truncate to the first rounding digit.\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                m = !r.times(r).eq(x);\n              }\n              break;\n            }\n          }\n        }\n      }\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n    P.toExponential = function (dp, rm) {\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        dp++;\n      }\n      return format(this, dp, rm, 1);\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n    P.toFixed = function (dp, rm) {\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        dp = dp + this.e + 1;\n      }\n      return format(this, dp, rm);\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\n    P.toFormat = function (dp, rm, format) {\n      var str,\n        x = this;\n      if (format == null) {\n        if (dp != null && rm && typeof rm == 'object') {\n          format = rm;\n          rm = null;\n        } else if (dp && typeof dp == 'object') {\n          format = dp;\n          dp = rm = null;\n        } else {\n          format = FORMAT;\n        }\n      } else if (typeof format != 'object') {\n        throw Error(bignumberError + 'Argument not an object: ' + format);\n      }\n      str = x.toFixed(dp, rm);\n      if (x.c) {\n        var i,\n          arr = str.split('.'),\n          g1 = +format.groupSize,\n          g2 = +format.secondaryGroupSize,\n          groupSeparator = format.groupSeparator || '',\n          intPart = arr[0],\n          fractionPart = arr[1],\n          isNeg = x.s < 0,\n          intDigits = isNeg ? intPart.slice(1) : intPart,\n          len = intDigits.length;\n        if (g2) {\n          i = g1;\n          g1 = g2;\n          g2 = i;\n          len -= i;\n        }\n        if (g1 > 0 && len > 0) {\n          i = len % g1 || g1;\n          intPart = intDigits.substr(0, i);\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n          if (isNeg) intPart = '-' + intPart;\n        }\n        str = fractionPart ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + (format.fractionGroupSeparator || '')) : fractionPart) : intPart;\n      }\n      return (format.prefix || '') + str + (format.suffix || '');\n    };\n\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\n    P.toFraction = function (md) {\n      var d,\n        d0,\n        d1,\n        d2,\n        e,\n        exp,\n        n,\n        n0,\n        n1,\n        q,\n        r,\n        s,\n        x = this,\n        xc = x.c;\n      if (md != null) {\n        n = new BigNumber(md);\n\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n          throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\n        }\n      }\n      if (!xc) return new BigNumber(x);\n      d = new BigNumber(ONE);\n      n1 = d0 = new BigNumber(ONE);\n      d1 = n0 = new BigNumber(ONE);\n      s = coeffToString(xc);\n\n      // Determine initial denominator.\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n      e = d.e = s.length - x.e - 1;\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n      md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;\n      exp = MAX_EXP;\n      MAX_EXP = 1 / 0;\n      n = new BigNumber(s);\n\n      // n0 = d1 = 0\n      n0.c[0] = 0;\n      for (;;) {\n        q = div(n, d, 0, 1);\n        d2 = d0.plus(q.times(d1));\n        if (d2.comparedTo(md) == 1) break;\n        d0 = d1;\n        d1 = d2;\n        n1 = n0.plus(q.times(d2 = n1));\n        n0 = d2;\n        d = n.minus(q.times(d2 = d));\n        n = d2;\n      }\n      d2 = div(md.minus(d0), d1, 0, 1);\n      n0 = n0.plus(d2.times(n1));\n      d0 = d0.plus(d2.times(d1));\n      n0.s = n1.s = x.s;\n      e = e * 2;\n\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n      MAX_EXP = exp;\n      return r;\n    };\n\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\n    P.toNumber = function () {\n      return +valueOf(this);\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\n    P.toPrecision = function (sd, rm) {\n      if (sd != null) intCheck(sd, 1, MAX);\n      return format(this, sd, rm, 2);\n    };\n\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\n    P.toString = function (b) {\n      var str,\n        n = this,\n        s = n.s,\n        e = n.e;\n\n      // Infinity or NaN?\n      if (e === null) {\n        if (s) {\n          str = 'Infinity';\n          if (s < 0) str = '-' + str;\n        } else {\n          str = 'NaN';\n        }\n      } else {\n        if (b == null) {\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, '0');\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\n        } else {\n          intCheck(b, 2, ALPHABET.length, 'Base');\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\n        }\n        if (s < 0 && n.c[0]) str = '-' + str;\n      }\n      return str;\n    };\n\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\n    P.valueOf = P.toJSON = function () {\n      return valueOf(this);\n    };\n    P._isBigNumber = true;\n    if (configObject != null) BigNumber.set(configObject);\n    return BigNumber;\n  }\n\n  // PRIVATE HELPER FUNCTIONS\n\n  // These functions don't need access to variables,\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\n\n  function bitFloor(n) {\n    var i = n | 0;\n    return n > 0 || n === i ? i : i - 1;\n  }\n\n  // Return a coefficient array as a string of base 10 digits.\n  function coeffToString(a) {\n    var s,\n      z,\n      i = 1,\n      j = a.length,\n      r = a[0] + '';\n    for (; i < j;) {\n      s = a[i++] + '';\n      z = LOG_BASE - s.length;\n      for (; z--; s = '0' + s);\n      r += s;\n    }\n\n    // Determine trailing zeros.\n    for (j = r.length; r.charCodeAt(--j) === 48;);\n    return r.slice(0, j + 1 || 1);\n  }\n\n  // Compare the value of BigNumbers x and y.\n  function compare(x, y) {\n    var a,\n      b,\n      xc = x.c,\n      yc = y.c,\n      i = x.s,\n      j = y.s,\n      k = x.e,\n      l = y.e;\n\n    // Either NaN?\n    if (!i || !j) return null;\n    a = xc && !xc[0];\n    b = yc && !yc[0];\n\n    // Either zero?\n    if (a || b) return a ? b ? 0 : -j : i;\n\n    // Signs differ?\n    if (i != j) return i;\n    a = i < 0;\n    b = k == l;\n\n    // Either Infinity?\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\n\n    // Compare exponents.\n    if (!b) return k > l ^ a ? 1 : -1;\n    j = (k = xc.length) < (l = yc.length) ? k : l;\n\n    // Compare digit by digit.\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n\n    // Compare lengths.\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\n  }\n\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\n  function intCheck(n, min, max, name) {\n    if (n < min || n > max || n !== mathfloor(n)) {\n      throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));\n    }\n  }\n\n  // Assumes finite n.\n  function isOdd(n) {\n    var k = n.c.length - 1;\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n  }\n  function toExponential(str, e) {\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n  }\n  function toFixedPoint(str, e, z) {\n    var len, zs;\n\n    // Negative exponent?\n    if (e < 0) {\n      // Prepend zeros.\n      for (zs = z + '.'; ++e; zs += z);\n      str = zs + str;\n\n      // Positive exponent\n    } else {\n      len = str.length;\n\n      // Append zeros.\n      if (++e > len) {\n        for (zs = z, e -= len; --e; zs += z);\n        str += zs;\n      } else if (e < len) {\n        str = str.slice(0, e) + '.' + str.slice(e);\n      }\n    }\n    return str;\n  }\n\n  // EXPORT\n\n  BigNumber = clone();\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\n\n  // AMD.\n  if (typeof define == 'function' && define.amd) {\n    define(function () {\n      return BigNumber;\n    });\n\n    // Node.js and other environments that support module.exports.\n  } else if (typeof module != 'undefined' && module.exports) {\n    module.exports = BigNumber;\n\n    // Browser.\n  } else {\n    if (!globalObject) {\n      globalObject = typeof self != 'undefined' && self ? self : window;\n    }\n    globalObject.BigNumber = BigNumber;\n  }\n})(this);","map":{"version":3,"names":["globalObject","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","clone","configObject","div","convertBase","parseNumeric","P","prototype","constructor","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","v","b","alphabet","c","caseChanged","e","i","isNum","len","str","x","_isBigNumber","s","slice","String","test","charCodeAt","indexOf","replace","search","substring","length","intCheck","round","DEBUG","Error","charAt","toUpperCase","toLowerCase","push","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","pop","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","n","out","call","maximum","max","maxOrMin","arguments","minimum","min","random","pow2_53","random53bitInt","dp","a","k","rand","Uint32Array","copy","splice","sum","args","plus","decimal","toBaseOut","baseIn","baseOut","j","arr","arrL","reverse","sign","callerIsToString","d","r","xc","y","rm","pow","toFixedPoint","coeffToString","concat","multiply","base","m","temp","xlo","xhi","carry","klo","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","format","id","c0","ne","toExponential","normalise","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","sd","ni","rd","pows10","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","isOdd","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","gt","isGreaterThanOrEqualTo","gte","isLessThan","lt","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","z","l","name","zs","define","amd","module","exports","self","window"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/bignumber.js/bignumber.js"],"sourcesContent":[";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.1.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, -1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    // If any number is NaN, return NaN.\r\n    function maxOrMin(args, n) {\r\n      var k, y,\r\n        i = 1,\r\n        x = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        y = new BigNumber(args[i]);\r\n        if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n          x = y;\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) {\r\n        t = xc;\r\n        xc = yc;\r\n        yc = t;\r\n        y.s = -y.s;\r\n      }\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) {\r\n        zc = xc;\r\n        xc = yc;\r\n        yc = zc;\r\n        i = xcL;\r\n        xcL = ycL;\r\n        ycL = i;\r\n      }\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) {\r\n        t = yc;\r\n        yc = xc;\r\n        xc = t;\r\n        b = a;\r\n      }\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) {\r\n          i = g1;\r\n          g1 = g2;\r\n          g2 = i;\r\n          len -= i;\r\n        }\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}