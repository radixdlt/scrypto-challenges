{"ast":null,"code":"/**\n * Password-based encryption functions.\n *\n * @author Dave Longley\n * @author Stefan Siegl <stesie@brokenpipe.de>\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n *\n * An EncryptedPrivateKeyInfo:\n *\n * EncryptedPrivateKeyInfo ::= SEQUENCE {\n *   encryptionAlgorithm  EncryptionAlgorithmIdentifier,\n *   encryptedData        EncryptedData }\n *\n * EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\n *\n * EncryptedData ::= OCTET STRING\n */\nvar forge = require('./forge');\nrequire('./aes');\nrequire('./asn1');\nrequire('./des');\nrequire('./md');\nrequire('./oids');\nrequire('./pbkdf2');\nrequire('./pem');\nrequire('./random');\nrequire('./rc2');\nrequire('./rsa');\nrequire('./util');\nif (typeof BigInteger === 'undefined') {\n  var BigInteger = forge.jsbn.BigInteger;\n}\n\n// shortcut for asn.1 API\nvar asn1 = forge.asn1;\n\n/* Password-based encryption implementation. */\nvar pki = forge.pki = forge.pki || {};\nmodule.exports = pki.pbe = forge.pbe = forge.pbe || {};\nvar oids = pki.oids;\n\n// validator for an EncryptedPrivateKeyInfo structure\n// Note: Currently only works w/algorithm params\nvar encryptedPrivateKeyValidator = {\n  name: 'EncryptedPrivateKeyInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'EncryptedPrivateKeyInfo.encryptionAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'AlgorithmIdentifier.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encryptionOid'\n    }, {\n      name: 'AlgorithmIdentifier.parameters',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: 'encryptionParams'\n    }]\n  }, {\n    // encryptedData\n    name: 'EncryptedPrivateKeyInfo.encryptedData',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'encryptedData'\n  }]\n};\n\n// validator for a PBES2Algorithms structure\n// Note: Currently only works w/PBKDF2 + AES encryption schemes\nvar PBES2AlgorithmsValidator = {\n  name: 'PBES2Algorithms',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'PBES2Algorithms.keyDerivationFunc',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'PBES2Algorithms.keyDerivationFunc.oid',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'kdfOid'\n    }, {\n      name: 'PBES2Algorithms.params',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: 'PBES2Algorithms.params.salt',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: 'kdfSalt'\n      }, {\n        name: 'PBES2Algorithms.params.iterationCount',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: 'kdfIterationCount'\n      }, {\n        name: 'PBES2Algorithms.params.keyLength',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        optional: true,\n        capture: 'keyLength'\n      }, {\n        // prf\n        name: 'PBES2Algorithms.params.prf',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        optional: true,\n        value: [{\n          name: 'PBES2Algorithms.params.prf.algorithm',\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: 'prfOid'\n        }]\n      }]\n    }]\n  }, {\n    name: 'PBES2Algorithms.encryptionScheme',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'PBES2Algorithms.encryptionScheme.oid',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encOid'\n    }, {\n      name: 'PBES2Algorithms.encryptionScheme.iv',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OCTETSTRING,\n      constructed: false,\n      capture: 'encIv'\n    }]\n  }]\n};\nvar pkcs12PbeParamsValidator = {\n  name: 'pkcs-12PbeParams',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'pkcs-12PbeParams.salt',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'salt'\n  }, {\n    name: 'pkcs-12PbeParams.iterations',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'iterations'\n  }]\n};\n\n/**\n * Encrypts a ASN.1 PrivateKeyInfo object, producing an EncryptedPrivateKeyInfo.\n *\n * PBES2Algorithms ALGORITHM-IDENTIFIER ::=\n *   { {PBES2-params IDENTIFIED BY id-PBES2}, ...}\n *\n * id-PBES2 OBJECT IDENTIFIER ::= {pkcs-5 13}\n *\n * PBES2-params ::= SEQUENCE {\n *   keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},\n *   encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}\n * }\n *\n * PBES2-KDFs ALGORITHM-IDENTIFIER ::=\n *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }\n *\n * PBES2-Encs ALGORITHM-IDENTIFIER ::= { ... }\n *\n * PBKDF2-params ::= SEQUENCE {\n *   salt CHOICE {\n *     specified OCTET STRING,\n *     otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}\n *   },\n *   iterationCount INTEGER (1..MAX),\n *   keyLength INTEGER (1..MAX) OPTIONAL,\n *   prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1\n * }\n *\n * @param obj the ASN.1 PrivateKeyInfo object.\n * @param password the password to encrypt with.\n * @param options:\n *          algorithm the encryption algorithm to use\n *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.\n *          count the iteration count to use.\n *          saltSize the salt size to use.\n *          prfAlgorithm the PRF message digest algorithm to use\n *            ('sha1', 'sha224', 'sha256', 'sha384', 'sha512')\n *\n * @return the ASN.1 EncryptedPrivateKeyInfo.\n */\npki.encryptPrivateKeyInfo = function (obj, password, options) {\n  // set default options\n  options = options || {};\n  options.saltSize = options.saltSize || 8;\n  options.count = options.count || 2048;\n  options.algorithm = options.algorithm || 'aes128';\n  options.prfAlgorithm = options.prfAlgorithm || 'sha1';\n\n  // generate PBE params\n  var salt = forge.random.getBytesSync(options.saltSize);\n  var count = options.count;\n  var countBytes = asn1.integerToDer(count);\n  var dkLen;\n  var encryptionAlgorithm;\n  var encryptedData;\n  if (options.algorithm.indexOf('aes') === 0 || options.algorithm === 'des') {\n    // do PBES2\n    var ivLen, encOid, cipherFn;\n    switch (options.algorithm) {\n      case 'aes128':\n        dkLen = 16;\n        ivLen = 16;\n        encOid = oids['aes128-CBC'];\n        cipherFn = forge.aes.createEncryptionCipher;\n        break;\n      case 'aes192':\n        dkLen = 24;\n        ivLen = 16;\n        encOid = oids['aes192-CBC'];\n        cipherFn = forge.aes.createEncryptionCipher;\n        break;\n      case 'aes256':\n        dkLen = 32;\n        ivLen = 16;\n        encOid = oids['aes256-CBC'];\n        cipherFn = forge.aes.createEncryptionCipher;\n        break;\n      case 'des':\n        dkLen = 8;\n        ivLen = 8;\n        encOid = oids['desCBC'];\n        cipherFn = forge.des.createEncryptionCipher;\n        break;\n      default:\n        var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');\n        error.algorithm = options.algorithm;\n        throw error;\n    }\n\n    // get PRF message digest\n    var prfAlgorithm = 'hmacWith' + options.prfAlgorithm.toUpperCase();\n    var md = prfAlgorithmToMessageDigest(prfAlgorithm);\n\n    // encrypt private key using pbe SHA-1 and AES/DES\n    var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\n    var iv = forge.random.getBytesSync(ivLen);\n    var cipher = cipherFn(dk);\n    cipher.start(iv);\n    cipher.update(asn1.toDer(obj));\n    cipher.finish();\n    encryptedData = cipher.output.getBytes();\n\n    // get PBKDF2-params\n    var params = createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm);\n    encryptionAlgorithm = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids['pkcs5PBES2']).getBytes()), asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // keyDerivationFunc\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids['pkcs5PBKDF2']).getBytes()),\n    // PBKDF2-params\n    params]),\n    // encryptionScheme\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(encOid).getBytes()),\n    // iv\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, iv)])])]);\n  } else if (options.algorithm === '3des') {\n    // Do PKCS12 PBE\n    dkLen = 24;\n    var saltBytes = new forge.util.ByteBuffer(salt);\n    var dk = pki.pbe.generatePkcs12Key(password, saltBytes, 1, count, dkLen);\n    var iv = pki.pbe.generatePkcs12Key(password, saltBytes, 2, count, dkLen);\n    var cipher = forge.des.createEncryptionCipher(dk);\n    cipher.start(iv);\n    cipher.update(asn1.toDer(obj));\n    cipher.finish();\n    encryptedData = cipher.output.getBytes();\n    encryptionAlgorithm = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids['pbeWithSHAAnd3-KeyTripleDES-CBC']).getBytes()),\n    // pkcs-12PbeParams\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // salt\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),\n    // iteration count\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, countBytes.getBytes())])]);\n  } else {\n    var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');\n    error.algorithm = options.algorithm;\n    throw error;\n  }\n\n  // EncryptedPrivateKeyInfo\n  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n  // encryptionAlgorithm\n  encryptionAlgorithm,\n  // encryptedData\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, encryptedData)]);\n  return rval;\n};\n\n/**\n * Decrypts a ASN.1 PrivateKeyInfo object.\n *\n * @param obj the ASN.1 EncryptedPrivateKeyInfo object.\n * @param password the password to decrypt with.\n *\n * @return the ASN.1 PrivateKeyInfo on success, null on failure.\n */\npki.decryptPrivateKeyInfo = function (obj, password) {\n  var rval = null;\n\n  // get PBE params\n  var capture = {};\n  var errors = [];\n  if (!asn1.validate(obj, encryptedPrivateKeyValidator, capture, errors)) {\n    var error = new Error('Cannot read encrypted private key. ' + 'ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // get cipher\n  var oid = asn1.derToOid(capture.encryptionOid);\n  var cipher = pki.pbe.getCipher(oid, capture.encryptionParams, password);\n\n  // get encrypted data\n  var encrypted = forge.util.createBuffer(capture.encryptedData);\n  cipher.update(encrypted);\n  if (cipher.finish()) {\n    rval = asn1.fromDer(cipher.output);\n  }\n  return rval;\n};\n\n/**\n * Converts a EncryptedPrivateKeyInfo to PEM format.\n *\n * @param epki the EncryptedPrivateKeyInfo.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted encrypted private key.\n */\npki.encryptedPrivateKeyToPem = function (epki, maxline) {\n  // convert to DER, then PEM-encode\n  var msg = {\n    type: 'ENCRYPTED PRIVATE KEY',\n    body: asn1.toDer(epki).getBytes()\n  };\n  return forge.pem.encode(msg, {\n    maxline: maxline\n  });\n};\n\n/**\n * Converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format. Decryption\n * is not performed.\n *\n * @param pem the EncryptedPrivateKeyInfo in PEM-format.\n *\n * @return the ASN.1 EncryptedPrivateKeyInfo.\n */\npki.encryptedPrivateKeyFromPem = function (pem) {\n  var msg = forge.pem.decode(pem)[0];\n  if (msg.type !== 'ENCRYPTED PRIVATE KEY') {\n    var error = new Error('Could not convert encrypted private key from PEM; ' + 'PEM header type is \"ENCRYPTED PRIVATE KEY\".');\n    error.headerType = msg.type;\n    throw error;\n  }\n  if (msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert encrypted private key from PEM; ' + 'PEM is encrypted.');\n  }\n\n  // convert DER to ASN.1 object\n  return asn1.fromDer(msg.body);\n};\n\n/**\n * Encrypts an RSA private key. By default, the key will be wrapped in\n * a PrivateKeyInfo and encrypted to produce a PKCS#8 EncryptedPrivateKeyInfo.\n * This is the standard, preferred way to encrypt a private key.\n *\n * To produce a non-standard PEM-encrypted private key that uses encapsulated\n * headers to indicate the encryption algorithm (old-style non-PKCS#8 OpenSSL\n * private key encryption), set the 'legacy' option to true. Note: Using this\n * option will cause the iteration count to be forced to 1.\n *\n * Note: The 'des' algorithm is supported, but it is not considered to be\n * secure because it only uses a single 56-bit key. If possible, it is highly\n * recommended that a different algorithm be used.\n *\n * @param rsaKey the RSA key to encrypt.\n * @param password the password to use.\n * @param options:\n *          algorithm: the encryption algorithm to use\n *            ('aes128', 'aes192', 'aes256', '3des', 'des').\n *          count: the iteration count to use.\n *          saltSize: the salt size to use.\n *          legacy: output an old non-PKCS#8 PEM-encrypted+encapsulated\n *            headers (DEK-Info) private key.\n *\n * @return the PEM-encoded ASN.1 EncryptedPrivateKeyInfo.\n */\npki.encryptRsaPrivateKey = function (rsaKey, password, options) {\n  // standard PKCS#8\n  options = options || {};\n  if (!options.legacy) {\n    // encrypt PrivateKeyInfo\n    var rval = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(rsaKey));\n    rval = pki.encryptPrivateKeyInfo(rval, password, options);\n    return pki.encryptedPrivateKeyToPem(rval);\n  }\n\n  // legacy non-PKCS#8\n  var algorithm;\n  var iv;\n  var dkLen;\n  var cipherFn;\n  switch (options.algorithm) {\n    case 'aes128':\n      algorithm = 'AES-128-CBC';\n      dkLen = 16;\n      iv = forge.random.getBytesSync(16);\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n    case 'aes192':\n      algorithm = 'AES-192-CBC';\n      dkLen = 24;\n      iv = forge.random.getBytesSync(16);\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n    case 'aes256':\n      algorithm = 'AES-256-CBC';\n      dkLen = 32;\n      iv = forge.random.getBytesSync(16);\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n    case '3des':\n      algorithm = 'DES-EDE3-CBC';\n      dkLen = 24;\n      iv = forge.random.getBytesSync(8);\n      cipherFn = forge.des.createEncryptionCipher;\n      break;\n    case 'des':\n      algorithm = 'DES-CBC';\n      dkLen = 8;\n      iv = forge.random.getBytesSync(8);\n      cipherFn = forge.des.createEncryptionCipher;\n      break;\n    default:\n      var error = new Error('Could not encrypt RSA private key; unsupported ' + 'encryption algorithm \"' + options.algorithm + '\".');\n      error.algorithm = options.algorithm;\n      throw error;\n  }\n\n  // encrypt private key using OpenSSL legacy key derivation\n  var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\n  var cipher = cipherFn(dk);\n  cipher.start(iv);\n  cipher.update(asn1.toDer(pki.privateKeyToAsn1(rsaKey)));\n  cipher.finish();\n  var msg = {\n    type: 'RSA PRIVATE KEY',\n    procType: {\n      version: '4',\n      type: 'ENCRYPTED'\n    },\n    dekInfo: {\n      algorithm: algorithm,\n      parameters: forge.util.bytesToHex(iv).toUpperCase()\n    },\n    body: cipher.output.getBytes()\n  };\n  return forge.pem.encode(msg);\n};\n\n/**\n * Decrypts an RSA private key.\n *\n * @param pem the PEM-formatted EncryptedPrivateKeyInfo to decrypt.\n * @param password the password to use.\n *\n * @return the RSA key on success, null on failure.\n */\npki.decryptRsaPrivateKey = function (pem, password) {\n  var rval = null;\n  var msg = forge.pem.decode(pem)[0];\n  if (msg.type !== 'ENCRYPTED PRIVATE KEY' && msg.type !== 'PRIVATE KEY' && msg.type !== 'RSA PRIVATE KEY') {\n    var error = new Error('Could not convert private key from PEM; PEM header type ' + 'is not \"ENCRYPTED PRIVATE KEY\", \"PRIVATE KEY\", or \"RSA PRIVATE KEY\".');\n    error.headerType = error;\n    throw error;\n  }\n  if (msg.procType && msg.procType.type === 'ENCRYPTED') {\n    var dkLen;\n    var cipherFn;\n    switch (msg.dekInfo.algorithm) {\n      case 'DES-CBC':\n        dkLen = 8;\n        cipherFn = forge.des.createDecryptionCipher;\n        break;\n      case 'DES-EDE3-CBC':\n        dkLen = 24;\n        cipherFn = forge.des.createDecryptionCipher;\n        break;\n      case 'AES-128-CBC':\n        dkLen = 16;\n        cipherFn = forge.aes.createDecryptionCipher;\n        break;\n      case 'AES-192-CBC':\n        dkLen = 24;\n        cipherFn = forge.aes.createDecryptionCipher;\n        break;\n      case 'AES-256-CBC':\n        dkLen = 32;\n        cipherFn = forge.aes.createDecryptionCipher;\n        break;\n      case 'RC2-40-CBC':\n        dkLen = 5;\n        cipherFn = function (key) {\n          return forge.rc2.createDecryptionCipher(key, 40);\n        };\n        break;\n      case 'RC2-64-CBC':\n        dkLen = 8;\n        cipherFn = function (key) {\n          return forge.rc2.createDecryptionCipher(key, 64);\n        };\n        break;\n      case 'RC2-128-CBC':\n        dkLen = 16;\n        cipherFn = function (key) {\n          return forge.rc2.createDecryptionCipher(key, 128);\n        };\n        break;\n      default:\n        var error = new Error('Could not decrypt private key; unsupported ' + 'encryption algorithm \"' + msg.dekInfo.algorithm + '\".');\n        error.algorithm = msg.dekInfo.algorithm;\n        throw error;\n    }\n\n    // use OpenSSL legacy key derivation\n    var iv = forge.util.hexToBytes(msg.dekInfo.parameters);\n    var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\n    var cipher = cipherFn(dk);\n    cipher.start(iv);\n    cipher.update(forge.util.createBuffer(msg.body));\n    if (cipher.finish()) {\n      rval = cipher.output.getBytes();\n    } else {\n      return rval;\n    }\n  } else {\n    rval = msg.body;\n  }\n  if (msg.type === 'ENCRYPTED PRIVATE KEY') {\n    rval = pki.decryptPrivateKeyInfo(asn1.fromDer(rval), password);\n  } else {\n    // decryption already performed above\n    rval = asn1.fromDer(rval);\n  }\n  if (rval !== null) {\n    rval = pki.privateKeyFromAsn1(rval);\n  }\n  return rval;\n};\n\n/**\n * Derives a PKCS#12 key.\n *\n * @param password the password to derive the key material from, null or\n *          undefined for none.\n * @param salt the salt, as a ByteBuffer, to use.\n * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).\n * @param iter the iteration count.\n * @param n the number of bytes to derive from the password.\n * @param md the message digest to use, defaults to SHA-1.\n *\n * @return a ByteBuffer with the bytes derived from the password.\n */\npki.pbe.generatePkcs12Key = function (password, salt, id, iter, n, md) {\n  var j, l;\n  if (typeof md === 'undefined' || md === null) {\n    if (!('sha1' in forge.md)) {\n      throw new Error('\"sha1\" hash algorithm unavailable.');\n    }\n    md = forge.md.sha1.create();\n  }\n  var u = md.digestLength;\n  var v = md.blockLength;\n  var result = new forge.util.ByteBuffer();\n\n  /* Convert password to Unicode byte buffer + trailing 0-byte. */\n  var passBuf = new forge.util.ByteBuffer();\n  if (password !== null && password !== undefined) {\n    for (l = 0; l < password.length; l++) {\n      passBuf.putInt16(password.charCodeAt(l));\n    }\n    passBuf.putInt16(0);\n  }\n\n  /* Length of salt and password in BYTES. */\n  var p = passBuf.length();\n  var s = salt.length();\n\n  /* 1. Construct a string, D (the \"diversifier\"), by concatenating\n        v copies of ID. */\n  var D = new forge.util.ByteBuffer();\n  D.fillWithByte(id, v);\n\n  /* 2. Concatenate copies of the salt together to create a string S of length\n        v * ceil(s / v) bytes (the final copy of the salt may be trunacted\n        to create S).\n        Note that if the salt is the empty string, then so is S. */\n  var Slen = v * Math.ceil(s / v);\n  var S = new forge.util.ByteBuffer();\n  for (l = 0; l < Slen; l++) {\n    S.putByte(salt.at(l % s));\n  }\n\n  /* 3. Concatenate copies of the password together to create a string P of\n        length v * ceil(p / v) bytes (the final copy of the password may be\n        truncated to create P).\n        Note that if the password is the empty string, then so is P. */\n  var Plen = v * Math.ceil(p / v);\n  var P = new forge.util.ByteBuffer();\n  for (l = 0; l < Plen; l++) {\n    P.putByte(passBuf.at(l % p));\n  }\n\n  /* 4. Set I=S||P to be the concatenation of S and P. */\n  var I = S;\n  I.putBuffer(P);\n\n  /* 5. Set c=ceil(n / u). */\n  var c = Math.ceil(n / u);\n\n  /* 6. For i=1, 2, ..., c, do the following: */\n  for (var i = 1; i <= c; i++) {\n    /* a) Set Ai=H^r(D||I). (l.e. the rth hash of D||I, H(H(H(...H(D||I)))) */\n    var buf = new forge.util.ByteBuffer();\n    buf.putBytes(D.bytes());\n    buf.putBytes(I.bytes());\n    for (var round = 0; round < iter; round++) {\n      md.start();\n      md.update(buf.getBytes());\n      buf = md.digest();\n    }\n\n    /* b) Concatenate copies of Ai to create a string B of length v bytes (the\n          final copy of Ai may be truncated to create B). */\n    var B = new forge.util.ByteBuffer();\n    for (l = 0; l < v; l++) {\n      B.putByte(buf.at(l % u));\n    }\n\n    /* c) Treating I as a concatenation I0, I1, ..., Ik-1 of v-byte blocks,\n          where k=ceil(s / v) + ceil(p / v), modify I by setting\n          Ij=(Ij+B+1) mod 2v for each j.  */\n    var k = Math.ceil(s / v) + Math.ceil(p / v);\n    var Inew = new forge.util.ByteBuffer();\n    for (j = 0; j < k; j++) {\n      var chunk = new forge.util.ByteBuffer(I.getBytes(v));\n      var x = 0x1ff;\n      for (l = B.length() - 1; l >= 0; l--) {\n        x = x >> 8;\n        x += B.at(l) + chunk.at(l);\n        chunk.setAt(l, x & 0xff);\n      }\n      Inew.putBuffer(chunk);\n    }\n    I = Inew;\n\n    /* Add Ai to A. */\n    result.putBuffer(buf);\n  }\n  result.truncate(result.length() - n);\n  return result;\n};\n\n/**\n * Get new Forge cipher object instance.\n *\n * @param oid the OID (in string notation).\n * @param params the ASN.1 params object.\n * @param password the password to decrypt with.\n *\n * @return new cipher object instance.\n */\npki.pbe.getCipher = function (oid, params, password) {\n  switch (oid) {\n    case pki.oids['pkcs5PBES2']:\n      return pki.pbe.getCipherForPBES2(oid, params, password);\n    case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:\n    case pki.oids['pbewithSHAAnd40BitRC2-CBC']:\n      return pki.pbe.getCipherForPKCS12PBE(oid, params, password);\n    default:\n      var error = new Error('Cannot read encrypted PBE data block. Unsupported OID.');\n      error.oid = oid;\n      error.supportedOids = ['pkcs5PBES2', 'pbeWithSHAAnd3-KeyTripleDES-CBC', 'pbewithSHAAnd40BitRC2-CBC'];\n      throw error;\n  }\n};\n\n/**\n * Get new Forge cipher object instance according to PBES2 params block.\n *\n * The returned cipher instance is already started using the IV\n * from PBES2 parameter block.\n *\n * @param oid the PKCS#5 PBKDF2 OID (in string notation).\n * @param params the ASN.1 PBES2-params object.\n * @param password the password to decrypt with.\n *\n * @return new cipher object instance.\n */\npki.pbe.getCipherForPBES2 = function (oid, params, password) {\n  // get PBE params\n  var capture = {};\n  var errors = [];\n  if (!asn1.validate(params, PBES2AlgorithmsValidator, capture, errors)) {\n    var error = new Error('Cannot read password-based-encryption algorithm ' + 'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // check oids\n  oid = asn1.derToOid(capture.kdfOid);\n  if (oid !== pki.oids['pkcs5PBKDF2']) {\n    var error = new Error('Cannot read encrypted private key. ' + 'Unsupported key derivation function OID.');\n    error.oid = oid;\n    error.supportedOids = ['pkcs5PBKDF2'];\n    throw error;\n  }\n  oid = asn1.derToOid(capture.encOid);\n  if (oid !== pki.oids['aes128-CBC'] && oid !== pki.oids['aes192-CBC'] && oid !== pki.oids['aes256-CBC'] && oid !== pki.oids['des-EDE3-CBC'] && oid !== pki.oids['desCBC']) {\n    var error = new Error('Cannot read encrypted private key. ' + 'Unsupported encryption scheme OID.');\n    error.oid = oid;\n    error.supportedOids = ['aes128-CBC', 'aes192-CBC', 'aes256-CBC', 'des-EDE3-CBC', 'desCBC'];\n    throw error;\n  }\n\n  // set PBE params\n  var salt = capture.kdfSalt;\n  var count = forge.util.createBuffer(capture.kdfIterationCount);\n  count = count.getInt(count.length() << 3);\n  var dkLen;\n  var cipherFn;\n  switch (pki.oids[oid]) {\n    case 'aes128-CBC':\n      dkLen = 16;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n    case 'aes192-CBC':\n      dkLen = 24;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n    case 'aes256-CBC':\n      dkLen = 32;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n    case 'des-EDE3-CBC':\n      dkLen = 24;\n      cipherFn = forge.des.createDecryptionCipher;\n      break;\n    case 'desCBC':\n      dkLen = 8;\n      cipherFn = forge.des.createDecryptionCipher;\n      break;\n  }\n\n  // get PRF message digest\n  var md = prfOidToMessageDigest(capture.prfOid);\n\n  // decrypt private key using pbe with chosen PRF and AES/DES\n  var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\n  var iv = capture.encIv;\n  var cipher = cipherFn(dk);\n  cipher.start(iv);\n  return cipher;\n};\n\n/**\n * Get new Forge cipher object instance for PKCS#12 PBE.\n *\n * The returned cipher instance is already started using the key & IV\n * derived from the provided password and PKCS#12 PBE salt.\n *\n * @param oid The PKCS#12 PBE OID (in string notation).\n * @param params The ASN.1 PKCS#12 PBE-params object.\n * @param password The password to decrypt with.\n *\n * @return the new cipher object instance.\n */\npki.pbe.getCipherForPKCS12PBE = function (oid, params, password) {\n  // get PBE params\n  var capture = {};\n  var errors = [];\n  if (!asn1.validate(params, pkcs12PbeParamsValidator, capture, errors)) {\n    var error = new Error('Cannot read password-based-encryption algorithm ' + 'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  }\n  var salt = forge.util.createBuffer(capture.salt);\n  var count = forge.util.createBuffer(capture.iterations);\n  count = count.getInt(count.length() << 3);\n  var dkLen, dIvLen, cipherFn;\n  switch (oid) {\n    case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:\n      dkLen = 24;\n      dIvLen = 8;\n      cipherFn = forge.des.startDecrypting;\n      break;\n    case pki.oids['pbewithSHAAnd40BitRC2-CBC']:\n      dkLen = 5;\n      dIvLen = 8;\n      cipherFn = function (key, iv) {\n        var cipher = forge.rc2.createDecryptionCipher(key, 40);\n        cipher.start(iv, null);\n        return cipher;\n      };\n      break;\n    default:\n      var error = new Error('Cannot read PKCS #12 PBE data block. Unsupported OID.');\n      error.oid = oid;\n      throw error;\n  }\n\n  // get PRF message digest\n  var md = prfOidToMessageDigest(capture.prfOid);\n  var key = pki.pbe.generatePkcs12Key(password, salt, 1, count, dkLen, md);\n  md.start();\n  var iv = pki.pbe.generatePkcs12Key(password, salt, 2, count, dIvLen, md);\n  return cipherFn(key, iv);\n};\n\n/**\n * OpenSSL's legacy key derivation function.\n *\n * See: http://www.openssl.org/docs/crypto/EVP_BytesToKey.html\n *\n * @param password the password to derive the key from.\n * @param salt the salt to use, null for none.\n * @param dkLen the number of bytes needed for the derived key.\n * @param [options] the options to use:\n *          [md] an optional message digest object to use.\n */\npki.pbe.opensslDeriveBytes = function (password, salt, dkLen, md) {\n  if (typeof md === 'undefined' || md === null) {\n    if (!('md5' in forge.md)) {\n      throw new Error('\"md5\" hash algorithm unavailable.');\n    }\n    md = forge.md.md5.create();\n  }\n  if (salt === null) {\n    salt = '';\n  }\n  var digests = [hash(md, password + salt)];\n  for (var length = 16, i = 1; length < dkLen; ++i, length += 16) {\n    digests.push(hash(md, digests[i - 1] + password + salt));\n  }\n  return digests.join('').substr(0, dkLen);\n};\nfunction hash(md, bytes) {\n  return md.start().update(bytes).digest().getBytes();\n}\nfunction prfOidToMessageDigest(prfOid) {\n  // get PRF algorithm, default to SHA-1\n  var prfAlgorithm;\n  if (!prfOid) {\n    prfAlgorithm = 'hmacWithSHA1';\n  } else {\n    prfAlgorithm = pki.oids[asn1.derToOid(prfOid)];\n    if (!prfAlgorithm) {\n      var error = new Error('Unsupported PRF OID.');\n      error.oid = prfOid;\n      error.supported = ['hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384', 'hmacWithSHA512'];\n      throw error;\n    }\n  }\n  return prfAlgorithmToMessageDigest(prfAlgorithm);\n}\nfunction prfAlgorithmToMessageDigest(prfAlgorithm) {\n  var factory = forge.md;\n  switch (prfAlgorithm) {\n    case 'hmacWithSHA224':\n      factory = forge.md.sha512;\n    case 'hmacWithSHA1':\n    case 'hmacWithSHA256':\n    case 'hmacWithSHA384':\n    case 'hmacWithSHA512':\n      prfAlgorithm = prfAlgorithm.substr(8).toLowerCase();\n      break;\n    default:\n      var error = new Error('Unsupported PRF algorithm.');\n      error.algorithm = prfAlgorithm;\n      error.supported = ['hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384', 'hmacWithSHA512'];\n      throw error;\n  }\n  if (!factory || !(prfAlgorithm in factory)) {\n    throw new Error('Unknown hash algorithm: ' + prfAlgorithm);\n  }\n  return factory[prfAlgorithm].create();\n}\nfunction createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm) {\n  var params = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n  // salt\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),\n  // iteration count\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, countBytes.getBytes())]);\n  // when PRF algorithm is not SHA-1 default, add key length and PRF algorithm\n  if (prfAlgorithm !== 'hmacWithSHA1') {\n    params.value.push(\n    // key length\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, forge.util.hexToBytes(dkLen.toString(16))),\n    // AlgorithmIdentifier\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // algorithm\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids[prfAlgorithm]).getBytes()),\n    // parameters (null)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')]));\n  }\n  return params;\n}","map":{"version":3,"names":["forge","require","BigInteger","jsbn","asn1","pki","module","exports","pbe","oids","encryptedPrivateKeyValidator","name","tagClass","Class","UNIVERSAL","type","Type","SEQUENCE","constructed","value","OID","capture","captureAsn1","OCTETSTRING","PBES2AlgorithmsValidator","INTEGER","optional","pkcs12PbeParamsValidator","encryptPrivateKeyInfo","obj","password","options","saltSize","count","algorithm","prfAlgorithm","salt","random","getBytesSync","countBytes","integerToDer","dkLen","encryptionAlgorithm","encryptedData","indexOf","ivLen","encOid","cipherFn","aes","createEncryptionCipher","des","error","Error","toUpperCase","md","prfAlgorithmToMessageDigest","dk","pkcs5","pbkdf2","iv","cipher","start","update","toDer","finish","output","getBytes","params","createPbkdf2Params","create","oidToDer","saltBytes","util","ByteBuffer","generatePkcs12Key","rval","decryptPrivateKeyInfo","errors","validate","oid","derToOid","encryptionOid","getCipher","encryptionParams","encrypted","createBuffer","fromDer","encryptedPrivateKeyToPem","epki","maxline","msg","body","pem","encode","encryptedPrivateKeyFromPem","decode","headerType","procType","encryptRsaPrivateKey","rsaKey","legacy","wrapRsaPrivateKey","privateKeyToAsn1","opensslDeriveBytes","substr","version","dekInfo","parameters","bytesToHex","decryptRsaPrivateKey","createDecryptionCipher","key","rc2","hexToBytes","privateKeyFromAsn1","id","iter","n","j","l","sha1","u","digestLength","v","blockLength","result","passBuf","undefined","length","putInt16","charCodeAt","p","s","D","fillWithByte","Slen","Math","ceil","S","putByte","at","Plen","P","I","putBuffer","c","i","buf","putBytes","bytes","round","digest","B","k","Inew","chunk","x","setAt","truncate","getCipherForPBES2","getCipherForPKCS12PBE","supportedOids","kdfOid","kdfSalt","kdfIterationCount","getInt","prfOidToMessageDigest","prfOid","encIv","iterations","dIvLen","startDecrypting","md5","digests","hash","push","join","supported","factory","sha512","toLowerCase","toString","NULL"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/node-forge/lib/pbe.js"],"sourcesContent":["/**\n * Password-based encryption functions.\n *\n * @author Dave Longley\n * @author Stefan Siegl <stesie@brokenpipe.de>\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n *\n * An EncryptedPrivateKeyInfo:\n *\n * EncryptedPrivateKeyInfo ::= SEQUENCE {\n *   encryptionAlgorithm  EncryptionAlgorithmIdentifier,\n *   encryptedData        EncryptedData }\n *\n * EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\n *\n * EncryptedData ::= OCTET STRING\n */\nvar forge = require('./forge');\nrequire('./aes');\nrequire('./asn1');\nrequire('./des');\nrequire('./md');\nrequire('./oids');\nrequire('./pbkdf2');\nrequire('./pem');\nrequire('./random');\nrequire('./rc2');\nrequire('./rsa');\nrequire('./util');\n\nif(typeof BigInteger === 'undefined') {\n  var BigInteger = forge.jsbn.BigInteger;\n}\n\n// shortcut for asn.1 API\nvar asn1 = forge.asn1;\n\n/* Password-based encryption implementation. */\nvar pki = forge.pki = forge.pki || {};\nmodule.exports = pki.pbe = forge.pbe = forge.pbe || {};\nvar oids = pki.oids;\n\n// validator for an EncryptedPrivateKeyInfo structure\n// Note: Currently only works w/algorithm params\nvar encryptedPrivateKeyValidator = {\n  name: 'EncryptedPrivateKeyInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'EncryptedPrivateKeyInfo.encryptionAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'AlgorithmIdentifier.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encryptionOid'\n    }, {\n      name: 'AlgorithmIdentifier.parameters',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: 'encryptionParams'\n    }]\n  }, {\n    // encryptedData\n    name: 'EncryptedPrivateKeyInfo.encryptedData',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'encryptedData'\n  }]\n};\n\n// validator for a PBES2Algorithms structure\n// Note: Currently only works w/PBKDF2 + AES encryption schemes\nvar PBES2AlgorithmsValidator = {\n  name: 'PBES2Algorithms',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'PBES2Algorithms.keyDerivationFunc',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'PBES2Algorithms.keyDerivationFunc.oid',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'kdfOid'\n    }, {\n      name: 'PBES2Algorithms.params',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: 'PBES2Algorithms.params.salt',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: 'kdfSalt'\n      }, {\n        name: 'PBES2Algorithms.params.iterationCount',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: 'kdfIterationCount'\n      }, {\n        name: 'PBES2Algorithms.params.keyLength',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        optional: true,\n        capture: 'keyLength'\n      }, {\n        // prf\n        name: 'PBES2Algorithms.params.prf',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        optional: true,\n        value: [{\n          name: 'PBES2Algorithms.params.prf.algorithm',\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: 'prfOid'\n        }]\n      }]\n    }]\n  }, {\n    name: 'PBES2Algorithms.encryptionScheme',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'PBES2Algorithms.encryptionScheme.oid',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encOid'\n    }, {\n      name: 'PBES2Algorithms.encryptionScheme.iv',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OCTETSTRING,\n      constructed: false,\n      capture: 'encIv'\n    }]\n  }]\n};\n\nvar pkcs12PbeParamsValidator = {\n  name: 'pkcs-12PbeParams',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'pkcs-12PbeParams.salt',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'salt'\n  }, {\n    name: 'pkcs-12PbeParams.iterations',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'iterations'\n  }]\n};\n\n/**\n * Encrypts a ASN.1 PrivateKeyInfo object, producing an EncryptedPrivateKeyInfo.\n *\n * PBES2Algorithms ALGORITHM-IDENTIFIER ::=\n *   { {PBES2-params IDENTIFIED BY id-PBES2}, ...}\n *\n * id-PBES2 OBJECT IDENTIFIER ::= {pkcs-5 13}\n *\n * PBES2-params ::= SEQUENCE {\n *   keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},\n *   encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}\n * }\n *\n * PBES2-KDFs ALGORITHM-IDENTIFIER ::=\n *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }\n *\n * PBES2-Encs ALGORITHM-IDENTIFIER ::= { ... }\n *\n * PBKDF2-params ::= SEQUENCE {\n *   salt CHOICE {\n *     specified OCTET STRING,\n *     otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}\n *   },\n *   iterationCount INTEGER (1..MAX),\n *   keyLength INTEGER (1..MAX) OPTIONAL,\n *   prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1\n * }\n *\n * @param obj the ASN.1 PrivateKeyInfo object.\n * @param password the password to encrypt with.\n * @param options:\n *          algorithm the encryption algorithm to use\n *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.\n *          count the iteration count to use.\n *          saltSize the salt size to use.\n *          prfAlgorithm the PRF message digest algorithm to use\n *            ('sha1', 'sha224', 'sha256', 'sha384', 'sha512')\n *\n * @return the ASN.1 EncryptedPrivateKeyInfo.\n */\npki.encryptPrivateKeyInfo = function(obj, password, options) {\n  // set default options\n  options = options || {};\n  options.saltSize = options.saltSize || 8;\n  options.count = options.count || 2048;\n  options.algorithm = options.algorithm || 'aes128';\n  options.prfAlgorithm = options.prfAlgorithm || 'sha1';\n\n  // generate PBE params\n  var salt = forge.random.getBytesSync(options.saltSize);\n  var count = options.count;\n  var countBytes = asn1.integerToDer(count);\n  var dkLen;\n  var encryptionAlgorithm;\n  var encryptedData;\n  if(options.algorithm.indexOf('aes') === 0 || options.algorithm === 'des') {\n    // do PBES2\n    var ivLen, encOid, cipherFn;\n    switch(options.algorithm) {\n    case 'aes128':\n      dkLen = 16;\n      ivLen = 16;\n      encOid = oids['aes128-CBC'];\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n    case 'aes192':\n      dkLen = 24;\n      ivLen = 16;\n      encOid = oids['aes192-CBC'];\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n    case 'aes256':\n      dkLen = 32;\n      ivLen = 16;\n      encOid = oids['aes256-CBC'];\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n    case 'des':\n      dkLen = 8;\n      ivLen = 8;\n      encOid = oids['desCBC'];\n      cipherFn = forge.des.createEncryptionCipher;\n      break;\n    default:\n      var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');\n      error.algorithm = options.algorithm;\n      throw error;\n    }\n\n    // get PRF message digest\n    var prfAlgorithm = 'hmacWith' + options.prfAlgorithm.toUpperCase();\n    var md = prfAlgorithmToMessageDigest(prfAlgorithm);\n\n    // encrypt private key using pbe SHA-1 and AES/DES\n    var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\n    var iv = forge.random.getBytesSync(ivLen);\n    var cipher = cipherFn(dk);\n    cipher.start(iv);\n    cipher.update(asn1.toDer(obj));\n    cipher.finish();\n    encryptedData = cipher.output.getBytes();\n\n    // get PBKDF2-params\n    var params = createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm);\n\n    encryptionAlgorithm = asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(oids['pkcs5PBES2']).getBytes()),\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // keyDerivationFunc\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n            asn1.oidToDer(oids['pkcs5PBKDF2']).getBytes()),\n          // PBKDF2-params\n          params\n        ]),\n        // encryptionScheme\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n            asn1.oidToDer(encOid).getBytes()),\n          // iv\n          asn1.create(\n            asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, iv)\n        ])\n      ])\n    ]);\n  } else if(options.algorithm === '3des') {\n    // Do PKCS12 PBE\n    dkLen = 24;\n\n    var saltBytes = new forge.util.ByteBuffer(salt);\n    var dk = pki.pbe.generatePkcs12Key(password, saltBytes, 1, count, dkLen);\n    var iv = pki.pbe.generatePkcs12Key(password, saltBytes, 2, count, dkLen);\n    var cipher = forge.des.createEncryptionCipher(dk);\n    cipher.start(iv);\n    cipher.update(asn1.toDer(obj));\n    cipher.finish();\n    encryptedData = cipher.output.getBytes();\n\n    encryptionAlgorithm = asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(oids['pbeWithSHAAnd3-KeyTripleDES-CBC']).getBytes()),\n      // pkcs-12PbeParams\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // salt\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),\n        // iteration count\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n          countBytes.getBytes())\n      ])\n    ]);\n  } else {\n    var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');\n    error.algorithm = options.algorithm;\n    throw error;\n  }\n\n  // EncryptedPrivateKeyInfo\n  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // encryptionAlgorithm\n    encryptionAlgorithm,\n    // encryptedData\n    asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, encryptedData)\n  ]);\n  return rval;\n};\n\n/**\n * Decrypts a ASN.1 PrivateKeyInfo object.\n *\n * @param obj the ASN.1 EncryptedPrivateKeyInfo object.\n * @param password the password to decrypt with.\n *\n * @return the ASN.1 PrivateKeyInfo on success, null on failure.\n */\npki.decryptPrivateKeyInfo = function(obj, password) {\n  var rval = null;\n\n  // get PBE params\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(obj, encryptedPrivateKeyValidator, capture, errors)) {\n    var error = new Error('Cannot read encrypted private key. ' +\n      'ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // get cipher\n  var oid = asn1.derToOid(capture.encryptionOid);\n  var cipher = pki.pbe.getCipher(oid, capture.encryptionParams, password);\n\n  // get encrypted data\n  var encrypted = forge.util.createBuffer(capture.encryptedData);\n\n  cipher.update(encrypted);\n  if(cipher.finish()) {\n    rval = asn1.fromDer(cipher.output);\n  }\n\n  return rval;\n};\n\n/**\n * Converts a EncryptedPrivateKeyInfo to PEM format.\n *\n * @param epki the EncryptedPrivateKeyInfo.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted encrypted private key.\n */\npki.encryptedPrivateKeyToPem = function(epki, maxline) {\n  // convert to DER, then PEM-encode\n  var msg = {\n    type: 'ENCRYPTED PRIVATE KEY',\n    body: asn1.toDer(epki).getBytes()\n  };\n  return forge.pem.encode(msg, {maxline: maxline});\n};\n\n/**\n * Converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format. Decryption\n * is not performed.\n *\n * @param pem the EncryptedPrivateKeyInfo in PEM-format.\n *\n * @return the ASN.1 EncryptedPrivateKeyInfo.\n */\npki.encryptedPrivateKeyFromPem = function(pem) {\n  var msg = forge.pem.decode(pem)[0];\n\n  if(msg.type !== 'ENCRYPTED PRIVATE KEY') {\n    var error = new Error('Could not convert encrypted private key from PEM; ' +\n      'PEM header type is \"ENCRYPTED PRIVATE KEY\".');\n    error.headerType = msg.type;\n    throw error;\n  }\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert encrypted private key from PEM; ' +\n      'PEM is encrypted.');\n  }\n\n  // convert DER to ASN.1 object\n  return asn1.fromDer(msg.body);\n};\n\n/**\n * Encrypts an RSA private key. By default, the key will be wrapped in\n * a PrivateKeyInfo and encrypted to produce a PKCS#8 EncryptedPrivateKeyInfo.\n * This is the standard, preferred way to encrypt a private key.\n *\n * To produce a non-standard PEM-encrypted private key that uses encapsulated\n * headers to indicate the encryption algorithm (old-style non-PKCS#8 OpenSSL\n * private key encryption), set the 'legacy' option to true. Note: Using this\n * option will cause the iteration count to be forced to 1.\n *\n * Note: The 'des' algorithm is supported, but it is not considered to be\n * secure because it only uses a single 56-bit key. If possible, it is highly\n * recommended that a different algorithm be used.\n *\n * @param rsaKey the RSA key to encrypt.\n * @param password the password to use.\n * @param options:\n *          algorithm: the encryption algorithm to use\n *            ('aes128', 'aes192', 'aes256', '3des', 'des').\n *          count: the iteration count to use.\n *          saltSize: the salt size to use.\n *          legacy: output an old non-PKCS#8 PEM-encrypted+encapsulated\n *            headers (DEK-Info) private key.\n *\n * @return the PEM-encoded ASN.1 EncryptedPrivateKeyInfo.\n */\npki.encryptRsaPrivateKey = function(rsaKey, password, options) {\n  // standard PKCS#8\n  options = options || {};\n  if(!options.legacy) {\n    // encrypt PrivateKeyInfo\n    var rval = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(rsaKey));\n    rval = pki.encryptPrivateKeyInfo(rval, password, options);\n    return pki.encryptedPrivateKeyToPem(rval);\n  }\n\n  // legacy non-PKCS#8\n  var algorithm;\n  var iv;\n  var dkLen;\n  var cipherFn;\n  switch(options.algorithm) {\n  case 'aes128':\n    algorithm = 'AES-128-CBC';\n    dkLen = 16;\n    iv = forge.random.getBytesSync(16);\n    cipherFn = forge.aes.createEncryptionCipher;\n    break;\n  case 'aes192':\n    algorithm = 'AES-192-CBC';\n    dkLen = 24;\n    iv = forge.random.getBytesSync(16);\n    cipherFn = forge.aes.createEncryptionCipher;\n    break;\n  case 'aes256':\n    algorithm = 'AES-256-CBC';\n    dkLen = 32;\n    iv = forge.random.getBytesSync(16);\n    cipherFn = forge.aes.createEncryptionCipher;\n    break;\n  case '3des':\n    algorithm = 'DES-EDE3-CBC';\n    dkLen = 24;\n    iv = forge.random.getBytesSync(8);\n    cipherFn = forge.des.createEncryptionCipher;\n    break;\n  case 'des':\n    algorithm = 'DES-CBC';\n    dkLen = 8;\n    iv = forge.random.getBytesSync(8);\n    cipherFn = forge.des.createEncryptionCipher;\n    break;\n  default:\n    var error = new Error('Could not encrypt RSA private key; unsupported ' +\n      'encryption algorithm \"' + options.algorithm + '\".');\n    error.algorithm = options.algorithm;\n    throw error;\n  }\n\n  // encrypt private key using OpenSSL legacy key derivation\n  var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\n  var cipher = cipherFn(dk);\n  cipher.start(iv);\n  cipher.update(asn1.toDer(pki.privateKeyToAsn1(rsaKey)));\n  cipher.finish();\n\n  var msg = {\n    type: 'RSA PRIVATE KEY',\n    procType: {\n      version: '4',\n      type: 'ENCRYPTED'\n    },\n    dekInfo: {\n      algorithm: algorithm,\n      parameters: forge.util.bytesToHex(iv).toUpperCase()\n    },\n    body: cipher.output.getBytes()\n  };\n  return forge.pem.encode(msg);\n};\n\n/**\n * Decrypts an RSA private key.\n *\n * @param pem the PEM-formatted EncryptedPrivateKeyInfo to decrypt.\n * @param password the password to use.\n *\n * @return the RSA key on success, null on failure.\n */\npki.decryptRsaPrivateKey = function(pem, password) {\n  var rval = null;\n\n  var msg = forge.pem.decode(pem)[0];\n\n  if(msg.type !== 'ENCRYPTED PRIVATE KEY' &&\n    msg.type !== 'PRIVATE KEY' &&\n    msg.type !== 'RSA PRIVATE KEY') {\n    var error = new Error('Could not convert private key from PEM; PEM header type ' +\n      'is not \"ENCRYPTED PRIVATE KEY\", \"PRIVATE KEY\", or \"RSA PRIVATE KEY\".');\n    error.headerType = error;\n    throw error;\n  }\n\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    var dkLen;\n    var cipherFn;\n    switch(msg.dekInfo.algorithm) {\n    case 'DES-CBC':\n      dkLen = 8;\n      cipherFn = forge.des.createDecryptionCipher;\n      break;\n    case 'DES-EDE3-CBC':\n      dkLen = 24;\n      cipherFn = forge.des.createDecryptionCipher;\n      break;\n    case 'AES-128-CBC':\n      dkLen = 16;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n    case 'AES-192-CBC':\n      dkLen = 24;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n    case 'AES-256-CBC':\n      dkLen = 32;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n    case 'RC2-40-CBC':\n      dkLen = 5;\n      cipherFn = function(key) {\n        return forge.rc2.createDecryptionCipher(key, 40);\n      };\n      break;\n    case 'RC2-64-CBC':\n      dkLen = 8;\n      cipherFn = function(key) {\n        return forge.rc2.createDecryptionCipher(key, 64);\n      };\n      break;\n    case 'RC2-128-CBC':\n      dkLen = 16;\n      cipherFn = function(key) {\n        return forge.rc2.createDecryptionCipher(key, 128);\n      };\n      break;\n    default:\n      var error = new Error('Could not decrypt private key; unsupported ' +\n        'encryption algorithm \"' + msg.dekInfo.algorithm + '\".');\n      error.algorithm = msg.dekInfo.algorithm;\n      throw error;\n    }\n\n    // use OpenSSL legacy key derivation\n    var iv = forge.util.hexToBytes(msg.dekInfo.parameters);\n    var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\n    var cipher = cipherFn(dk);\n    cipher.start(iv);\n    cipher.update(forge.util.createBuffer(msg.body));\n    if(cipher.finish()) {\n      rval = cipher.output.getBytes();\n    } else {\n      return rval;\n    }\n  } else {\n    rval = msg.body;\n  }\n\n  if(msg.type === 'ENCRYPTED PRIVATE KEY') {\n    rval = pki.decryptPrivateKeyInfo(asn1.fromDer(rval), password);\n  } else {\n    // decryption already performed above\n    rval = asn1.fromDer(rval);\n  }\n\n  if(rval !== null) {\n    rval = pki.privateKeyFromAsn1(rval);\n  }\n\n  return rval;\n};\n\n/**\n * Derives a PKCS#12 key.\n *\n * @param password the password to derive the key material from, null or\n *          undefined for none.\n * @param salt the salt, as a ByteBuffer, to use.\n * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).\n * @param iter the iteration count.\n * @param n the number of bytes to derive from the password.\n * @param md the message digest to use, defaults to SHA-1.\n *\n * @return a ByteBuffer with the bytes derived from the password.\n */\npki.pbe.generatePkcs12Key = function(password, salt, id, iter, n, md) {\n  var j, l;\n\n  if(typeof md === 'undefined' || md === null) {\n    if(!('sha1' in forge.md)) {\n      throw new Error('\"sha1\" hash algorithm unavailable.');\n    }\n    md = forge.md.sha1.create();\n  }\n\n  var u = md.digestLength;\n  var v = md.blockLength;\n  var result = new forge.util.ByteBuffer();\n\n  /* Convert password to Unicode byte buffer + trailing 0-byte. */\n  var passBuf = new forge.util.ByteBuffer();\n  if(password !== null && password !== undefined) {\n    for(l = 0; l < password.length; l++) {\n      passBuf.putInt16(password.charCodeAt(l));\n    }\n    passBuf.putInt16(0);\n  }\n\n  /* Length of salt and password in BYTES. */\n  var p = passBuf.length();\n  var s = salt.length();\n\n  /* 1. Construct a string, D (the \"diversifier\"), by concatenating\n        v copies of ID. */\n  var D = new forge.util.ByteBuffer();\n  D.fillWithByte(id, v);\n\n  /* 2. Concatenate copies of the salt together to create a string S of length\n        v * ceil(s / v) bytes (the final copy of the salt may be trunacted\n        to create S).\n        Note that if the salt is the empty string, then so is S. */\n  var Slen = v * Math.ceil(s / v);\n  var S = new forge.util.ByteBuffer();\n  for(l = 0; l < Slen; l++) {\n    S.putByte(salt.at(l % s));\n  }\n\n  /* 3. Concatenate copies of the password together to create a string P of\n        length v * ceil(p / v) bytes (the final copy of the password may be\n        truncated to create P).\n        Note that if the password is the empty string, then so is P. */\n  var Plen = v * Math.ceil(p / v);\n  var P = new forge.util.ByteBuffer();\n  for(l = 0; l < Plen; l++) {\n    P.putByte(passBuf.at(l % p));\n  }\n\n  /* 4. Set I=S||P to be the concatenation of S and P. */\n  var I = S;\n  I.putBuffer(P);\n\n  /* 5. Set c=ceil(n / u). */\n  var c = Math.ceil(n / u);\n\n  /* 6. For i=1, 2, ..., c, do the following: */\n  for(var i = 1; i <= c; i++) {\n    /* a) Set Ai=H^r(D||I). (l.e. the rth hash of D||I, H(H(H(...H(D||I)))) */\n    var buf = new forge.util.ByteBuffer();\n    buf.putBytes(D.bytes());\n    buf.putBytes(I.bytes());\n    for(var round = 0; round < iter; round++) {\n      md.start();\n      md.update(buf.getBytes());\n      buf = md.digest();\n    }\n\n    /* b) Concatenate copies of Ai to create a string B of length v bytes (the\n          final copy of Ai may be truncated to create B). */\n    var B = new forge.util.ByteBuffer();\n    for(l = 0; l < v; l++) {\n      B.putByte(buf.at(l % u));\n    }\n\n    /* c) Treating I as a concatenation I0, I1, ..., Ik-1 of v-byte blocks,\n          where k=ceil(s / v) + ceil(p / v), modify I by setting\n          Ij=(Ij+B+1) mod 2v for each j.  */\n    var k = Math.ceil(s / v) + Math.ceil(p / v);\n    var Inew = new forge.util.ByteBuffer();\n    for(j = 0; j < k; j++) {\n      var chunk = new forge.util.ByteBuffer(I.getBytes(v));\n      var x = 0x1ff;\n      for(l = B.length() - 1; l >= 0; l--) {\n        x = x >> 8;\n        x += B.at(l) + chunk.at(l);\n        chunk.setAt(l, x & 0xff);\n      }\n      Inew.putBuffer(chunk);\n    }\n    I = Inew;\n\n    /* Add Ai to A. */\n    result.putBuffer(buf);\n  }\n\n  result.truncate(result.length() - n);\n  return result;\n};\n\n/**\n * Get new Forge cipher object instance.\n *\n * @param oid the OID (in string notation).\n * @param params the ASN.1 params object.\n * @param password the password to decrypt with.\n *\n * @return new cipher object instance.\n */\npki.pbe.getCipher = function(oid, params, password) {\n  switch(oid) {\n  case pki.oids['pkcs5PBES2']:\n    return pki.pbe.getCipherForPBES2(oid, params, password);\n\n  case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:\n  case pki.oids['pbewithSHAAnd40BitRC2-CBC']:\n    return pki.pbe.getCipherForPKCS12PBE(oid, params, password);\n\n  default:\n    var error = new Error('Cannot read encrypted PBE data block. Unsupported OID.');\n    error.oid = oid;\n    error.supportedOids = [\n      'pkcs5PBES2',\n      'pbeWithSHAAnd3-KeyTripleDES-CBC',\n      'pbewithSHAAnd40BitRC2-CBC'\n    ];\n    throw error;\n  }\n};\n\n/**\n * Get new Forge cipher object instance according to PBES2 params block.\n *\n * The returned cipher instance is already started using the IV\n * from PBES2 parameter block.\n *\n * @param oid the PKCS#5 PBKDF2 OID (in string notation).\n * @param params the ASN.1 PBES2-params object.\n * @param password the password to decrypt with.\n *\n * @return new cipher object instance.\n */\npki.pbe.getCipherForPBES2 = function(oid, params, password) {\n  // get PBE params\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(params, PBES2AlgorithmsValidator, capture, errors)) {\n    var error = new Error('Cannot read password-based-encryption algorithm ' +\n      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // check oids\n  oid = asn1.derToOid(capture.kdfOid);\n  if(oid !== pki.oids['pkcs5PBKDF2']) {\n    var error = new Error('Cannot read encrypted private key. ' +\n      'Unsupported key derivation function OID.');\n    error.oid = oid;\n    error.supportedOids = ['pkcs5PBKDF2'];\n    throw error;\n  }\n  oid = asn1.derToOid(capture.encOid);\n  if(oid !== pki.oids['aes128-CBC'] &&\n    oid !== pki.oids['aes192-CBC'] &&\n    oid !== pki.oids['aes256-CBC'] &&\n    oid !== pki.oids['des-EDE3-CBC'] &&\n    oid !== pki.oids['desCBC']) {\n    var error = new Error('Cannot read encrypted private key. ' +\n      'Unsupported encryption scheme OID.');\n    error.oid = oid;\n    error.supportedOids = [\n      'aes128-CBC', 'aes192-CBC', 'aes256-CBC', 'des-EDE3-CBC', 'desCBC'];\n    throw error;\n  }\n\n  // set PBE params\n  var salt = capture.kdfSalt;\n  var count = forge.util.createBuffer(capture.kdfIterationCount);\n  count = count.getInt(count.length() << 3);\n  var dkLen;\n  var cipherFn;\n  switch(pki.oids[oid]) {\n  case 'aes128-CBC':\n    dkLen = 16;\n    cipherFn = forge.aes.createDecryptionCipher;\n    break;\n  case 'aes192-CBC':\n    dkLen = 24;\n    cipherFn = forge.aes.createDecryptionCipher;\n    break;\n  case 'aes256-CBC':\n    dkLen = 32;\n    cipherFn = forge.aes.createDecryptionCipher;\n    break;\n  case 'des-EDE3-CBC':\n    dkLen = 24;\n    cipherFn = forge.des.createDecryptionCipher;\n    break;\n  case 'desCBC':\n    dkLen = 8;\n    cipherFn = forge.des.createDecryptionCipher;\n    break;\n  }\n\n  // get PRF message digest\n  var md = prfOidToMessageDigest(capture.prfOid);\n\n  // decrypt private key using pbe with chosen PRF and AES/DES\n  var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\n  var iv = capture.encIv;\n  var cipher = cipherFn(dk);\n  cipher.start(iv);\n\n  return cipher;\n};\n\n/**\n * Get new Forge cipher object instance for PKCS#12 PBE.\n *\n * The returned cipher instance is already started using the key & IV\n * derived from the provided password and PKCS#12 PBE salt.\n *\n * @param oid The PKCS#12 PBE OID (in string notation).\n * @param params The ASN.1 PKCS#12 PBE-params object.\n * @param password The password to decrypt with.\n *\n * @return the new cipher object instance.\n */\npki.pbe.getCipherForPKCS12PBE = function(oid, params, password) {\n  // get PBE params\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(params, pkcs12PbeParamsValidator, capture, errors)) {\n    var error = new Error('Cannot read password-based-encryption algorithm ' +\n      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  var salt = forge.util.createBuffer(capture.salt);\n  var count = forge.util.createBuffer(capture.iterations);\n  count = count.getInt(count.length() << 3);\n\n  var dkLen, dIvLen, cipherFn;\n  switch(oid) {\n    case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:\n      dkLen = 24;\n      dIvLen = 8;\n      cipherFn = forge.des.startDecrypting;\n      break;\n\n    case pki.oids['pbewithSHAAnd40BitRC2-CBC']:\n      dkLen = 5;\n      dIvLen = 8;\n      cipherFn = function(key, iv) {\n        var cipher = forge.rc2.createDecryptionCipher(key, 40);\n        cipher.start(iv, null);\n        return cipher;\n      };\n      break;\n\n    default:\n      var error = new Error('Cannot read PKCS #12 PBE data block. Unsupported OID.');\n      error.oid = oid;\n      throw error;\n  }\n\n  // get PRF message digest\n  var md = prfOidToMessageDigest(capture.prfOid);\n  var key = pki.pbe.generatePkcs12Key(password, salt, 1, count, dkLen, md);\n  md.start();\n  var iv = pki.pbe.generatePkcs12Key(password, salt, 2, count, dIvLen, md);\n\n  return cipherFn(key, iv);\n};\n\n/**\n * OpenSSL's legacy key derivation function.\n *\n * See: http://www.openssl.org/docs/crypto/EVP_BytesToKey.html\n *\n * @param password the password to derive the key from.\n * @param salt the salt to use, null for none.\n * @param dkLen the number of bytes needed for the derived key.\n * @param [options] the options to use:\n *          [md] an optional message digest object to use.\n */\npki.pbe.opensslDeriveBytes = function(password, salt, dkLen, md) {\n  if(typeof md === 'undefined' || md === null) {\n    if(!('md5' in forge.md)) {\n      throw new Error('\"md5\" hash algorithm unavailable.');\n    }\n    md = forge.md.md5.create();\n  }\n  if(salt === null) {\n    salt = '';\n  }\n  var digests = [hash(md, password + salt)];\n  for(var length = 16, i = 1; length < dkLen; ++i, length += 16) {\n    digests.push(hash(md, digests[i - 1] + password + salt));\n  }\n  return digests.join('').substr(0, dkLen);\n};\n\nfunction hash(md, bytes) {\n  return md.start().update(bytes).digest().getBytes();\n}\n\nfunction prfOidToMessageDigest(prfOid) {\n  // get PRF algorithm, default to SHA-1\n  var prfAlgorithm;\n  if(!prfOid) {\n    prfAlgorithm = 'hmacWithSHA1';\n  } else {\n    prfAlgorithm = pki.oids[asn1.derToOid(prfOid)];\n    if(!prfAlgorithm) {\n      var error = new Error('Unsupported PRF OID.');\n      error.oid = prfOid;\n      error.supported = [\n        'hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384',\n        'hmacWithSHA512'];\n      throw error;\n    }\n  }\n  return prfAlgorithmToMessageDigest(prfAlgorithm);\n}\n\nfunction prfAlgorithmToMessageDigest(prfAlgorithm) {\n  var factory = forge.md;\n  switch(prfAlgorithm) {\n  case 'hmacWithSHA224':\n    factory = forge.md.sha512;\n  case 'hmacWithSHA1':\n  case 'hmacWithSHA256':\n  case 'hmacWithSHA384':\n  case 'hmacWithSHA512':\n    prfAlgorithm = prfAlgorithm.substr(8).toLowerCase();\n    break;\n  default:\n    var error = new Error('Unsupported PRF algorithm.');\n    error.algorithm = prfAlgorithm;\n    error.supported = [\n      'hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384',\n      'hmacWithSHA512'];\n    throw error;\n  }\n  if(!factory || !(prfAlgorithm in factory)) {\n    throw new Error('Unknown hash algorithm: ' + prfAlgorithm);\n  }\n  return factory[prfAlgorithm].create();\n}\n\nfunction createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm) {\n  var params = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // salt\n    asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),\n    // iteration count\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      countBytes.getBytes())\n  ]);\n  // when PRF algorithm is not SHA-1 default, add key length and PRF algorithm\n  if(prfAlgorithm !== 'hmacWithSHA1') {\n    params.value.push(\n      // key length\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n        forge.util.hexToBytes(dkLen.toString(16))),\n      // AlgorithmIdentifier\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // algorithm\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          asn1.oidToDer(pki.oids[prfAlgorithm]).getBytes()),\n        // parameters (null)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\n      ]));\n  }\n  return params;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}