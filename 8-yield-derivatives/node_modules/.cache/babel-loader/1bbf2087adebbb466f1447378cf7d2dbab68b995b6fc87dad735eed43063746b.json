{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { Subscription } from './Subscription';\nvar AsyncSubject = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(AsyncSubject, _super);\n  function AsyncSubject() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.value = null;\n    _this.hasNext = false;\n    _this.hasCompleted = false;\n    return _this;\n  }\n  AsyncSubject.prototype._subscribe = function (subscriber) {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return _super.prototype._subscribe.call(this, subscriber);\n  };\n  AsyncSubject.prototype.next = function (value) {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  };\n  AsyncSubject.prototype.error = function (error) {\n    if (!this.hasCompleted) {\n      _super.prototype.error.call(this, error);\n    }\n  };\n  AsyncSubject.prototype.complete = function () {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      _super.prototype.next.call(this, this.value);\n    }\n    _super.prototype.complete.call(this);\n  };\n  return AsyncSubject;\n}(Subject);\nexport { AsyncSubject };","map":{"version":3,"names":["tslib_1","Subject","Subscription","AsyncSubject","_super","__extends","_this","apply","arguments","value","hasNext","prototype","_subscribe","subscriber","hasError","error","thrownError","EMPTY","hasCompleted","next","complete","call"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/AsyncSubject.ts"],"sourcesContent":["import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * A variant of Subject that only emits a value when it completes. It will emit\n * its latest value to all its observers on completion.\n *\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n"],"mappings":";AAAA,OAAO,KAAEA,OAAS,MAAM;AAExB,SAASC,OAAA,QAAc,WAAM;AAQ7B,SAAAC,YAAA;IAAqCC,YAAA,0BAAUC,MAAA;EAA/CJ,OAAA,CAAAK,SAAA,CAAAF,YAAA,EAAAC,MAAA;WAAAD,aAAA;IACU,IAAAG,KAAA,GAAKF,MAAU,KAAC,QAAAA,MAAA,CAAAG,KAAA,OAAAC,SAAA;IAChBF,KAAA,CAAAG,KAAA,GAAO,IAAY;IACnBH,KAAA,CAAAI,OAAA,QAAwB;;IAmCjC,OAAAJ,KAAA;EAhCC;cACU,CAACK,SAAQ,CAAEC,UAAA,aAAAC,UAAA;QACjB,KAAAC,QAAW;MACXD,UAAO,CAAAE,KAAA,KAAa,CAAAC,WAAM;MAC3B,OAAAd,YAAA,CAAAe,KAAA;WACC,SAAUC,YAAW,IAAK,IAAE,CAAAR,OAAA;MAC5BG,UAAU,CAACM,IAAA,KAAQ,CAAEV,KAAC;MACtBI,UAAO,CAAAO,QAAY,CAAC;MACrB,OAAAlB,YAAA,CAAAe,KAAA;IACD;IACD,OAAAb,MAAA,CAAAO,SAAA,CAAAC,UAAA,CAAAS,IAAA,OAAAR,UAAA;EAED;cACO,CAAIF,SAAC,CAAAQ,IAAY,GAAE,UAAAV,KAAA;QACtB,KAAK,CAAAS,YAAa,EAAC;MACnB,IAAI,CAACT,KAAA,GAAOA,KAAG;MAChB,KAAAC,OAAA;IACF;EAED;cACO,CAAIC,SAAC,CAAAI,KAAc,aAAAA,KAAA;QACtB,MAAAG,YAAM;MACPd,MAAA,CAAAO,SAAA,CAAAI,KAAA,CAAAM,IAAA,OAAAN,KAAA;IACF;EAED;cACO,CAAAJ,SAAY,CAAAS,QAAQ;IACzB,IAAI,CAAAF,YAAY,GAAE;QAChB,KAAAR,OAAA;MACDN,MAAA,CAAAO,SAAA,CAAAQ,IAAA,CAAAE,IAAA,YAAAZ,KAAA;IACD;IACDL,MAAA,CAAAO,SAAA,CAAAS,QAAA,CAAAC,IAAA;EACH;EAtCqC,OAAOlB,YAsC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}