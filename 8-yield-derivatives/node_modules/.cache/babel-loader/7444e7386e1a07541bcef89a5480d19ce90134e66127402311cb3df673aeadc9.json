{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Wallet = void 0;\nconst account_1 = require(\"@radixdlt/account\");\nconst rxjs_1 = require(\"rxjs\");\nconst account_2 = require(\"./account\");\nconst operators_1 = require(\"rxjs/operators\");\nconst create = input => {\n  const {\n    network,\n    signingKeychain\n  } = input;\n  const skToAccountAddress = signingKey => account_1.AccountAddress.fromPublicKeyAndNetwork({\n    network,\n    publicKey: signingKey.publicKey\n  });\n  const skToAccount = signingKey => account_2.Account.create({\n    signingKey,\n    address: skToAccountAddress(signingKey)\n  });\n  const sksToAccounts = signingKeys => {\n    const getAccountWithHDSigningKeyByHDPath = hdPath => signingKeys.getHDSigningKeyByHDPath(hdPath).map(skToAccount);\n    const getAnyAccountByPublicKey = publicKey => signingKeys.getAnySigningKeyByPublicKey(publicKey).map(skToAccount);\n    const all = signingKeys.all.map(skToAccount);\n    return {\n      all,\n      getAccountWithHDSigningKeyByHDPath,\n      getAnyAccountByPublicKey,\n      accountsWithHDSigningKeys: () => signingKeys.hdSigningKeys().map(skToAccount),\n      accountsWithHardwareHDSigningKeys: () => signingKeys.hardwareHDSigningKeys().map(skToAccount),\n      accountsWithLocalHDSigningKeys: () => signingKeys.localHDSigningKeys().map(skToAccount),\n      accountsWithNonHDSigningKeys: () => signingKeys.nonHDSigningKeys().map(skToAccount),\n      size: () => all.length\n    };\n  };\n  const observeActiveAccount = () => signingKeychain.observeActiveSigningKey().pipe((0, operators_1.map)(skToAccount));\n  return {\n    __unsafeGetAccount: () => skToAccount(signingKeychain.__unsafeGetSigningKey()),\n    revealMnemonic: signingKeychain.revealMnemonic,\n    deriveNextLocalHDAccount: input => signingKeychain.deriveNextLocalHDSigningKey(input).pipe((0, operators_1.map)(skToAccount)),\n    deriveHWAccount: input => signingKeychain.deriveHWSigningKey(input).pipe((0, operators_1.map)(skToAccount)),\n    displayAddressForActiveHWAccountOnHWDeviceForVerification: () => signingKeychain.__unsafeGetSigningKey().getPublicKeyDisplayOnlyAddress().pipe((0, operators_1.mergeMap)(() => {\n      return (0, rxjs_1.of)(undefined);\n    })),\n    observeActiveAccount,\n    observeAccounts: () => signingKeychain.observeSigningKeys().pipe((0, operators_1.map)(sksToAccounts)),\n    addAccountFromPrivateKey: input => (0, rxjs_1.of)(skToAccount(signingKeychain.addSigningKeyFromPrivateKey(input))),\n    restoreLocalHDAccountsToIndex: index => signingKeychain.restoreLocalHDSigningKeysUpToIndex(index).pipe((0, operators_1.map)(sksToAccounts)),\n    switchAccount: input => {\n      const isSwitchToAccount = something => {\n        const inspection = input;\n        return inspection.toAccount !== undefined && (0, account_2.isAccount)(inspection.toAccount);\n      };\n      if (isSwitchToAccount(input)) {\n        return skToAccount(signingKeychain.switchSigningKey({\n          toSigningKey: input.toAccount.signingKey\n        }));\n      } else {\n        return skToAccount(signingKeychain.switchSigningKey(input));\n      }\n    }\n  };\n};\nexports.Wallet = {\n  create\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","Wallet","account_1","require","rxjs_1","account_2","operators_1","create","input","network","signingKeychain","skToAccountAddress","signingKey","AccountAddress","fromPublicKeyAndNetwork","publicKey","skToAccount","Account","address","sksToAccounts","signingKeys","getAccountWithHDSigningKeyByHDPath","hdPath","getHDSigningKeyByHDPath","map","getAnyAccountByPublicKey","getAnySigningKeyByPublicKey","all","accountsWithHDSigningKeys","hdSigningKeys","accountsWithHardwareHDSigningKeys","hardwareHDSigningKeys","accountsWithLocalHDSigningKeys","localHDSigningKeys","accountsWithNonHDSigningKeys","nonHDSigningKeys","size","length","observeActiveAccount","observeActiveSigningKey","pipe","__unsafeGetAccount","__unsafeGetSigningKey","revealMnemonic","deriveNextLocalHDAccount","deriveNextLocalHDSigningKey","deriveHWAccount","deriveHWSigningKey","displayAddressForActiveHWAccountOnHWDeviceForVerification","getPublicKeyDisplayOnlyAddress","mergeMap","of","undefined","observeAccounts","observeSigningKeys","addAccountFromPrivateKey","addSigningKeyFromPrivateKey","restoreLocalHDAccountsToIndex","index","restoreLocalHDSigningKeysUpToIndex","switchAccount","isSwitchToAccount","something","inspection","toAccount","isAccount","switchSigningKey","toSigningKey"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/application/dist/wallet.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Wallet = void 0;\nconst account_1 = require(\"@radixdlt/account\");\nconst rxjs_1 = require(\"rxjs\");\nconst account_2 = require(\"./account\");\nconst operators_1 = require(\"rxjs/operators\");\nconst create = (input) => {\n    const { network, signingKeychain } = input;\n    const skToAccountAddress = (signingKey) => account_1.AccountAddress.fromPublicKeyAndNetwork({\n        network,\n        publicKey: signingKey.publicKey,\n    });\n    const skToAccount = (signingKey) => account_2.Account.create({ signingKey, address: skToAccountAddress(signingKey) });\n    const sksToAccounts = (signingKeys) => {\n        const getAccountWithHDSigningKeyByHDPath = (hdPath) => signingKeys.getHDSigningKeyByHDPath(hdPath).map(skToAccount);\n        const getAnyAccountByPublicKey = (publicKey) => signingKeys.getAnySigningKeyByPublicKey(publicKey).map(skToAccount);\n        const all = signingKeys.all.map(skToAccount);\n        return {\n            all,\n            getAccountWithHDSigningKeyByHDPath,\n            getAnyAccountByPublicKey,\n            accountsWithHDSigningKeys: () => signingKeys.hdSigningKeys().map(skToAccount),\n            accountsWithHardwareHDSigningKeys: () => signingKeys.hardwareHDSigningKeys().map(skToAccount),\n            accountsWithLocalHDSigningKeys: () => signingKeys.localHDSigningKeys().map(skToAccount),\n            accountsWithNonHDSigningKeys: () => signingKeys.nonHDSigningKeys().map(skToAccount),\n            size: () => all.length,\n        };\n    };\n    const observeActiveAccount = () => signingKeychain.observeActiveSigningKey().pipe((0, operators_1.map)(skToAccount));\n    return {\n        __unsafeGetAccount: () => skToAccount(signingKeychain.__unsafeGetSigningKey()),\n        revealMnemonic: signingKeychain.revealMnemonic,\n        deriveNextLocalHDAccount: (input) => signingKeychain\n            .deriveNextLocalHDSigningKey(input)\n            .pipe((0, operators_1.map)(skToAccount)),\n        deriveHWAccount: (input) => signingKeychain.deriveHWSigningKey(input).pipe((0, operators_1.map)(skToAccount)),\n        displayAddressForActiveHWAccountOnHWDeviceForVerification: () => signingKeychain\n            .__unsafeGetSigningKey()\n            .getPublicKeyDisplayOnlyAddress()\n            .pipe((0, operators_1.mergeMap)(() => {\n            return (0, rxjs_1.of)(undefined);\n        })),\n        observeActiveAccount,\n        observeAccounts: () => signingKeychain.observeSigningKeys().pipe((0, operators_1.map)(sksToAccounts)),\n        addAccountFromPrivateKey: (input) => (0, rxjs_1.of)(skToAccount(signingKeychain.addSigningKeyFromPrivateKey(input))),\n        restoreLocalHDAccountsToIndex: (index) => signingKeychain\n            .restoreLocalHDSigningKeysUpToIndex(index)\n            .pipe((0, operators_1.map)(sksToAccounts)),\n        switchAccount: (input) => {\n            const isSwitchToAccount = (something) => {\n                const inspection = input;\n                return (inspection.toAccount !== undefined &&\n                    (0, account_2.isAccount)(inspection.toAccount));\n            };\n            if (isSwitchToAccount(input)) {\n                return skToAccount(signingKeychain.switchSigningKey({\n                    toSigningKey: input.toAccount.signingKey,\n                }));\n            }\n            else {\n                return skToAccount(signingKeychain.switchSigningKey(input));\n            }\n        },\n    };\n};\nexports.Wallet = {\n    create,\n};\n//# sourceMappingURL=wallet.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}