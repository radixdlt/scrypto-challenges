{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowWhen(closingSelector) {\n  return function windowWhenOperatorFunction(source) {\n    return source.lift(new WindowOperator(closingSelector));\n  };\n}\nvar WindowOperator = /*@__PURE__*/function () {\n  function WindowOperator(closingSelector) {\n    this.closingSelector = closingSelector;\n  }\n  WindowOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  };\n  return WindowOperator;\n}();\nvar WindowSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(WindowSubscriber, _super);\n  function WindowSubscriber(destination, closingSelector) {\n    var _this = _super.call(this, destination) || this;\n    _this.destination = destination;\n    _this.closingSelector = closingSelector;\n    _this.openWindow();\n    return _this;\n  }\n  WindowSubscriber.prototype.notifyNext = function (_outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {\n    this.openWindow(innerSub);\n  };\n  WindowSubscriber.prototype.notifyError = function (error) {\n    this._error(error);\n  };\n  WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.openWindow(innerSub);\n  };\n  WindowSubscriber.prototype._next = function (value) {\n    this.window.next(value);\n  };\n  WindowSubscriber.prototype._error = function (err) {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  };\n  WindowSubscriber.prototype._complete = function () {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  };\n  WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  };\n  WindowSubscriber.prototype.openWindow = function (innerSub) {\n    if (innerSub === void 0) {\n      innerSub = null;\n    }\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n    var prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    var window = this.window = new Subject();\n    this.destination.next(window);\n    var closingNotifier;\n    try {\n      var closingSelector = this.closingSelector;\n      closingNotifier = closingSelector();\n    } catch (e) {\n      this.destination.error(e);\n      this.window.error(e);\n      return;\n    }\n    this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n  };\n  return WindowSubscriber;\n}(OuterSubscriber);","map":{"version":3,"names":["tslib_1","Subject","OuterSubscriber","subscribeToResult","windowWhen","closingSelector","windowWhenOperatorFunction","source","lift","WindowOperator","prototype","call","subscriber","subscribe","WindowSubscriber","_super","__extends","destination","_this","notifyNext","_outerValue","_innerValue","_outerIndex","_innerIndex","innerSub","openWindow","notifyError","error","_error","notifyComplete","_next","value","window","next","err","unsubscribeClosingNotification","_complete","complete","closingNotification","unsubscribe","remove","prevWindow","closingNotifier","e","add"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/windowWhen.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../types';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowWhen.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * ## Example\n * Emit only the first two clicks events in every window of [1-5] random seconds\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { windowWhen, map, mergeAll, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowWhen(() => interval(1000 + Math.random() * 4000)),\n *   map(win => win.pipe(take(2))),     // each window has at most 2 emissions\n *   mergeAll()                         // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window?: Subject<T>;\n  private closingNotification?: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(_outerValue: T, _innerValue: any,\n             _outerIndex: number, _innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window!.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window!.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window!.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> | null = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    let closingNotifier;\n    try {\n      const { closingSelector } = this;\n      closingNotifier = closingSelector();\n    } catch (e) {\n      this.destination.error(e);\n      this.window.error(e);\n      return;\n    }\n    this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n  }\n}\n"],"mappings":";AAGA,OAAO,KAAEA,OAAS,MAAM;AAExB,SAASC,OAAA,QAAe,YAAQ;AAEhC,SAASC,eAAA,QAAmB,oBAAM;AAgDlC,SAAMC,iBAAoB,QAAI,2BAAsC;OAClE,SAAOC,UAASA,CAAAC,eAAA;SACd,SAAOC,0BAAkCA,CAAAC,MAAA;IACzC,OAAAA,MAAA,CAAAC,IAAA,KAAAC,cAAA,CAAAJ,eAAA;EACH;AAED;IACEI,cAAA,gBAAoB,YAAsC;WAAtCA,eAAeJ,eAAf;IACnB,KAAAA,eAAA,GAAAA,eAAA;EAED;gBACS,CAAAK,SAAO,CAAAC,IAAU,GAAI,UAAAC,UAAiB,EAAAL,MAAU,EAAE;IAC1D,OAAAA,MAAA,CAAAM,SAAA,KAAAC,gBAAA,CAAAF,UAAA,OAAAP,eAAA;EACH;EAPA,OAOCI,cAAA;AAOD;IAAkCK,gBAAA,0BAAuBC,MAAA;EAIvDf,OAAA,CAAAgB,SAAA,CAAAF,gBAAsB,EAAAC,MACF;WADpBD,gBAEEA,CAAAG,WAAM,EAAAZ,eAAY,EAEnB;IAJqB,IAAAa,KAAA,GAAAH,MAAW,CAAAJ,IAAX,OAAAM,WAAsC;IACxCC,KAAA,CAAAD,WAAA,GAAAA,WAAA;IAElBC,KAAI,CAACb,eAAa,GAAAA,eAAA;;IACnB,OAAAa,KAAA;EAED;kBAGO,CAAAR,SAAW,CAAAS,UAAU,aAAAC,WAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,QAAA;IAC3B,KAAAC,UAAA,CAAAD,QAAA;EAED;kBACc,CAAAd,SAAO,CAAAgB,WAAA,aAAAC,KAAA;IACpB,KAAAC,MAAA,CAAAD,KAAA;EAED;kBACO,CAAAjB,SAAW,CAAAmB,cAAU,aAAAL,QAAA;IAC3B,KAAAC,UAAA,CAAAD,QAAA;EAES;kBACK,CAAAd,SAAU,CAACoB,KAAC,aAAAC,KAAA;IAC1B,KAAAC,MAAA,CAAAC,IAAA,CAAAF,KAAA;EAES;kBACK,CAAArB,SAAU,CAACkB,MAAA,aAAAM,GAAA;IACxB,IAAI,CAACF,MAAA,CAAAL,KAAY,CAAAO,GAAA,CAAK;IACtB,IAAI,CAACjB,WAAA,CAAAU,KAAA,CAAAO,GAAA;IACN,KAAAC,8BAAA;EAES;kBACK,CAAAzB,SAAU,CAAC0B,SAAA;IACxB,IAAI,CAACJ,MAAA,CAAAK,QAAY;IACjB,IAAI,CAACpB,WAAA,CAAAoB,QAAA;IACN,KAAAF,8BAAA;EAEO;kBACG,CAAAzB,SAAA,CAAAyB,8BAAqB;QAC5B,IAAI,CAACG,mBAAmB,EAAC;MAC1B,KAAAA,mBAAA,CAAAC,WAAA;IACF;EAEO;kBAAW,CAAA7B,SAAA,CAAAe,UAAA,aAA+CD,QAAA;IAChE,IAAIA,QAAQ,KAAE;MACZA,QAAK,GAAM,IAAC;;QAEbA,QAAA;MAEK,KAAAgB,MAAU,CAAAhB,QAAQ;MACpBA,QAAA,CAAAe,WAAY;;QAEfE,UAAA,QAAAT,MAAA;IAED,IAAMS,UAAS;MACXA,UAAC,CAAAJ,QAAiB;IAEtB;IACA,IAAIL,MAAA,QAAAA,MAAA,OAAA/B,OAAA;QACM,CAAAgB,WAAA,CAAAgB,IAAA,CAAAD,MAAA;QACRU,eAAe;QAChB;MAAC,IAAQrC,eAAE,QAAAA,eAAA;MACVqC,eAAK,GAAYrC,eAAS;aAE1BsC,CAAA;MACD,KAAA1B,WAAA,CAAAU,KAAA,CAAAgB,CAAA;MACG,IAAI,CAACX,MAAK,CAAAL,KAAA,CAAAgB,CAAA;MACf;IACH;IAvEkC,KAAAC,GAAA,CAAe,IAuEhD,CAAAN,mBAAA,GAAAnC,iBAAA,OAAAuC,eAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}