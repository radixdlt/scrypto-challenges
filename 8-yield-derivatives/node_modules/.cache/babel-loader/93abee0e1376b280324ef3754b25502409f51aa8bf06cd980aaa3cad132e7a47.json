{"ast":null,"code":"/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n  return function multicastOperatorFunction(source) {\n    var subjectFactory;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return subjectOrSubjectFactory;\n      };\n    }\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n    var connectable = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n    return connectable;\n  };\n}\nvar MulticastOperator = /*@__PURE__*/function () {\n  function MulticastOperator(subjectFactory, selector) {\n    this.subjectFactory = subjectFactory;\n    this.selector = selector;\n  }\n  MulticastOperator.prototype.call = function (subscriber, source) {\n    var selector = this.selector;\n    var subject = this.subjectFactory();\n    var subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  };\n  return MulticastOperator;\n}();\nexport { MulticastOperator };","map":{"version":3,"names":["connectableObservableDescriptor","multicast","subjectOrSubjectFactory","selector","multicastOperatorFunction","source","subjectFactory","lift","MulticastOperator","connectable","Object","create","prototype","call","subscriber","subject","subscription","subscribe","add"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/multicast.ts"],"sourcesContent":["import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction, ObservedValueOf, ObservableInput } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subject: Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T, O extends ObservableInput<any>>(subject: Subject<T>, selector: (shared: Observable<T>) => O): UnaryFunction<Observable<T>, ConnectableObservable<ObservedValueOf<O>>>;\nexport function multicast<T>(subjectFactory: (this: Observable<T>) => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T, O extends ObservableInput<any>>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector: (shared: Observable<T>) => O): OperatorFunction<T, ObservedValueOf<O>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * ![](multicast.png)\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n"],"mappings":"AAIA;AA6BA,SAAMA,+BAA0B,6CACmD;OACjF,SAAOC,SAASA,CAAAC,uBAA0B,EAAAC,QAAqB;SAC7D,SAAIC,yBAAiCA,CAAAC,MAAA;IACrC,IAAIC,cAAO;QACT,OAAAJ,uBAAmC,eAAwB;MAC5DI,cAAA,GAAAJ,uBAAA;WACC;oBACqB,YAAAI,cAAwBA,CAAA;QAC3C,OAAAJ,uBAAA;MACH;IAED;QACE,OAAOC,QAAO,KAAK,UAAI;MACxB,OAAAE,MAAA,CAAAE,IAAA,KAAAC,iBAAA,CAAAF,cAAA,EAAAH,QAAA;IAED;IACA,IAAAM,WAAY,GAAMC,MAAG,CAAAC,MAAO,CAAAN,MAAA,EAAAL,+BAAA;IAC5BS,WAAW,CAACJ,MAAA,GAAAA,MAAc;IAE1BI,WAAkC,CAAAH,cAAY,GAAAA,cAAA;IAC9C,OAAAG,WAAA;EACH;AAED;IACED,iBAAA,gBAAoB,YACA;WADAA,kBAAAF,cAAgC,EAAAH,QAAA;IAChC,KAAAG,cAAA,GAAAA,cAAkD;IACrE,KAAAH,QAAA,GAAAA,QAAA;EACD;mBACU,CAAAS,SAAA,CAAAC,IAAQ,GAAU,UAAAC,UAAA,EAAAT,MAAA;IAC1B,IAAMF,QAAO,GAAG,IAAK,CAAAA,QAAA;IACrB,IAAMY,OAAA,OAAY,CAAGT,cAAS,EAAO;IACrC,IAAAU,YAAgB,GAACb,QAAO,CAAAY,OAAU,EAAAE,SAAU,CAAAH,UAAA;IAC5CE,YAAO,CAAAE,GAAA,CAAAb,MAAa,CAAAY,SAAA,CAAAF,OAAA;IACrB,OAAAC,YAAA;EACH;EAXA,OAWCR,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}