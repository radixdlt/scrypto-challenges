{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar _a, _b, _c, _d;\nvar _e;\n/**\n * Use this module if you want to create your own base class extending\n * {@link ReactiveElement}.\n * @packageDocumentation\n */\nimport { getCompatibleStyle, adoptStyles } from './css-tag.js';\n// In the Node build, this import will be injected by Rollup:\n// import {HTMLElement, customElements} from '@lit-labs/ssr-dom-shim';\nexport * from './css-tag.js';\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\nif (NODE_MODE) {\n  (_a = global.customElements) !== null && _a !== void 0 ? _a : global.customElements = customElements;\n}\nconst DEV_MODE = true;\nlet requestUpdateThenable;\nlet issueWarning;\nconst trustedTypes = global.trustedTypes;\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes ? trustedTypes.emptyScript : '';\nconst polyfillSupport = DEV_MODE ? global.reactiveElementPolyfillSupportDevMode : global.reactiveElementPolyfillSupport;\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings = (_b = global.litIssuedWarnings) !== null && _b !== void 0 ? _b : global.litIssuedWarnings = new Set();\n  // Issue a warning, if we haven't already.\n  issueWarning = (code, warning) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n  issueWarning('dev-mode', `Lit is in dev mode. Not recommended for production!`);\n  // Issue polyfill support warning.\n  if (((_c = global.ShadyDOM) === null || _c === void 0 ? void 0 : _c.inUse) && polyfillSupport === undefined) {\n    issueWarning('polyfill-support-missing', `Shadow DOM is being polyfilled via \\`ShadyDOM\\` but ` + `the \\`polyfill-support\\` module has not been loaded.`);\n  }\n  requestUpdateThenable = name => ({\n    then: (onfulfilled, _onrejected) => {\n      issueWarning('request-update-promise', `The \\`requestUpdate\\` method should no longer return a Promise but ` + `does so on \\`${name}\\`. Use \\`updateComplete\\` instead.`);\n      if (onfulfilled !== undefined) {\n        onfulfilled(false);\n      }\n    }\n  });\n}\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE ? event => {\n  const shouldEmit = global.emitLitDebugLogEvents;\n  if (!shouldEmit) {\n    return;\n  }\n  global.dispatchEvent(new CustomEvent('lit-debug', {\n    detail: event\n  }));\n} : undefined;\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = (prop, _obj) => prop;\nexport const defaultConverter = {\n  toAttribute(value, type) {\n    switch (type) {\n      case Boolean:\n        value = value ? emptyStringForBooleanAttribute : null;\n        break;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        value = value == null ? value : JSON.stringify(value);\n        break;\n    }\n    return value;\n  },\n  fromAttribute(value, type) {\n    let fromValue = value;\n    switch (type) {\n      case Boolean:\n        fromValue = value !== null;\n        break;\n      case Number:\n        fromValue = value === null ? null : Number(value);\n        break;\n      case Object:\n      case Array:\n        // Do *not* generate exception when invalid JSON is set as elements\n        // don't normally complain on being mis-configured.\n        // TODO(sorvell): Do generate exception in *dev mode*.\n        try {\n          // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n          fromValue = JSON.parse(value);\n        } catch (e) {\n          fromValue = null;\n        }\n        break;\n    }\n    return fromValue;\n  }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual\n};\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n * @noInheritDoc\n */\nexport class ReactiveElement\n// In the Node build, this `extends` clause will be substituted with\n// `(globalThis.HTMLElement ?? HTMLElement)`.\n//\n// This way, we will first prefer any global `HTMLElement` polyfill that the\n// user has assigned, and then fall back to the `HTMLElement` shim which has\n// been imported (see note at the top of this file about how this import is\n// generated by Rollup). Note that the `HTMLElement` variable has been\n// shadowed by this import, so it no longer refers to the global.\nextends HTMLElement {\n  constructor() {\n    super();\n    this.__instanceProperties = new Map();\n    /**\n     * True if there is a pending update as a result of calling `requestUpdate()`.\n     * Should only be read.\n     * @category updates\n     */\n    this.isUpdatePending = false;\n    /**\n     * Is set to `true` after the first update. The element code cannot assume\n     * that `renderRoot` exists before the element `hasUpdated`.\n     * @category updates\n     */\n    this.hasUpdated = false;\n    /**\n     * Name of currently reflecting property\n     */\n    this.__reflectingProperty = null;\n    this.__initialize();\n  }\n  /**\n   * Adds an initializer function to the class that is called during instance\n   * construction.\n   *\n   * This is useful for code that runs against a `ReactiveElement`\n   * subclass, such as a decorator, that needs to do work for each\n   * instance, such as setting up a `ReactiveController`.\n   *\n   * ```ts\n   * const myDecorator = (target: typeof ReactiveElement, key: string) => {\n   *   target.addInitializer((instance: ReactiveElement) => {\n   *     // This is run during construction of the element\n   *     new MyController(instance);\n   *   });\n   * }\n   * ```\n   *\n   * Decorating a field will then cause each instance to run an initializer\n   * that adds a controller:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   @myDecorator foo;\n   * }\n   * ```\n   *\n   * Initializers are stored per-constructor. Adding an initializer to a\n   * subclass does not add it to a superclass. Since initializers are run in\n   * constructors, initializers will run in order of the class hierarchy,\n   * starting with superclasses and progressing to the instance's class.\n   *\n   * @nocollapse\n   */\n  static addInitializer(initializer) {\n    var _a;\n    this.finalize();\n    ((_a = this._initializers) !== null && _a !== void 0 ? _a : this._initializers = []).push(initializer);\n  }\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   * @category attributes\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes = [];\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this.elementProperties.forEach((v, p) => {\n      const attr = this.__attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this.__attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    });\n    return attributes;\n  }\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a {@linkcode PropertyDeclaration} for the property with the\n   * given options. The property setter calls the property's `hasChanged`\n   * property option or uses a strict identity check to determine whether or not\n   * to request an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * ```ts\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static createProperty(name, options = defaultPropertyDeclaration) {\n    var _a;\n    // if this is a state property, force the attribute to false.\n    if (options.state) {\n      // Cast as any since this is readonly.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      options.attribute = false;\n    }\n    // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure finalization has been kicked off.\n    this.finalize();\n    this.elementProperties.set(name, options);\n    // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n    if (!options.noAccessor && !this.prototype.hasOwnProperty(name)) {\n      const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n      const descriptor = this.getPropertyDescriptor(name, key, options);\n      if (descriptor !== undefined) {\n        Object.defineProperty(this.prototype, name, descriptor);\n        if (DEV_MODE) {\n          // If this class doesn't have its own set, create one and initialize\n          // with the values in the set from the nearest ancestor class, if any.\n          if (!this.hasOwnProperty('__reactivePropertyKeys')) {\n            this.__reactivePropertyKeys = new Set((_a = this.__reactivePropertyKeys) !== null && _a !== void 0 ? _a : []);\n          }\n          this.__reactivePropertyKeys.add(name);\n        }\n      }\n    }\n  }\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   static getPropertyDescriptor(name, key, options) {\n   *     const defaultDescriptor =\n   *         super.getPropertyDescriptor(name, key, options);\n   *     const setter = defaultDescriptor.set;\n   *     return {\n   *       get: defaultDescriptor.get,\n   *       set(value) {\n   *         setter.call(this, value);\n   *         // custom action.\n   *       },\n   *       configurable: true,\n   *       enumerable: true\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static getPropertyDescriptor(name, key, options) {\n    return {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      get() {\n        return this[key];\n      },\n      set(value) {\n        const oldValue = this[name];\n        this[key] = value;\n        this.requestUpdate(name, oldValue, options);\n      },\n      configurable: true,\n      enumerable: true\n    };\n  }\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a `PropertyDeclaration` via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override\n   * {@linkcode createProperty}.\n   *\n   * @nocollapse\n   * @final\n   * @category properties\n   */\n  static getPropertyOptions(name) {\n    return this.elementProperties.get(name) || defaultPropertyDeclaration;\n  }\n  /**\n   * Creates property accessors for registered properties, sets up element\n   * styling, and ensures any superclasses are also finalized. Returns true if\n   * the element was finalized.\n   * @nocollapse\n   */\n  static finalize() {\n    if (this.hasOwnProperty(finalized)) {\n      return false;\n    }\n    this[finalized] = true;\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this);\n    superCtor.finalize();\n    // Create own set of initializers for this class if any exist on the\n    // superclass and copy them down. Note, for a small perf boost, avoid\n    // creating initializers unless needed.\n    if (superCtor._initializers !== undefined) {\n      this._initializers = [...superCtor._initializers];\n    }\n    this.elementProperties = new Map(superCtor.elementProperties);\n    // initialize Map populated in observedAttributes\n    this.__attributeToPropertyMap = new Map();\n    // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      // support symbols in properties (IE11 does not support this)\n      const propKeys = [...Object.getOwnPropertyNames(props), ...Object.getOwnPropertySymbols(props)];\n      // This for/of is ok because propKeys is an array\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeScript lack of support for symbol in\n        // index types\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.createProperty(p, props[p]);\n      }\n    }\n    this.elementStyles = this.finalizeStyles(this.styles);\n    // DEV mode warnings\n    if (DEV_MODE) {\n      const warnRemovedOrRenamed = (name, renamed = false) => {\n        if (this.prototype.hasOwnProperty(name)) {\n          issueWarning(renamed ? 'renamed-api' : 'removed-api', `\\`${name}\\` is implemented on class ${this.name}. It ` + `has been ${renamed ? 'renamed' : 'removed'} ` + `in this version of LitElement.`);\n        }\n      };\n      warnRemovedOrRenamed('initialize');\n      warnRemovedOrRenamed('requestUpdateInternal');\n      warnRemovedOrRenamed('_getUpdateComplete', true);\n    }\n    return true;\n  }\n  /**\n   * Takes the styles the user supplied via the `static styles` property and\n   * returns the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * Styles are deduplicated preserving the _last_ instance in the list. This\n   * is a performance optimization to avoid duplicated styles that can occur\n   * especially when composing via subclassing. The last item is kept to try\n   * to preserve the cascade order with the assumption that it's most important\n   * that last added styles override previous styles.\n   *\n   * @nocollapse\n   * @category styles\n   */\n  static finalizeStyles(styles) {\n    const elementStyles = [];\n    if (Array.isArray(styles)) {\n      // Dedupe the flattened array in reverse order to preserve the last items.\n      // Casting to Array<unknown> works around TS error that\n      // appears to come from trying to flatten a type CSSResultArray.\n      const set = new Set(styles.flat(Infinity).reverse());\n      // Then preserve original order by adding the set items in reverse order.\n      for (const s of set) {\n        elementStyles.unshift(getCompatibleStyle(s));\n      }\n    } else if (styles !== undefined) {\n      elementStyles.push(getCompatibleStyle(styles));\n    }\n    return elementStyles;\n  }\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  static __attributeNameForProperty(name, options) {\n    const attribute = options.attribute;\n    return attribute === false ? undefined : typeof attribute === 'string' ? attribute : typeof name === 'string' ? name.toLowerCase() : undefined;\n  }\n  /**\n   * Internal only override point for customizing work done when elements\n   * are constructed.\n   */\n  __initialize() {\n    var _a;\n    this.__updatePromise = new Promise(res => this.enableUpdating = res);\n    this._$changedProperties = new Map();\n    this.__saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this.requestUpdate();\n    (_a = this.constructor._initializers) === null || _a === void 0 ? void 0 : _a.forEach(i => i(this));\n  }\n  /**\n   * Registers a `ReactiveController` to participate in the element's reactive\n   * update cycle. The element automatically calls into any registered\n   * controllers during its lifecycle callbacks.\n   *\n   * If the element is connected when `addController()` is called, the\n   * controller's `hostConnected()` callback will be immediately called.\n   * @category controllers\n   */\n  addController(controller) {\n    var _a, _b;\n    ((_a = this.__controllers) !== null && _a !== void 0 ? _a : this.__controllers = []).push(controller);\n    // If a controller is added after the element has been connected,\n    // call hostConnected. Note, re-using existence of `renderRoot` here\n    // (which is set in connectedCallback) to avoid the need to track a\n    // first connected state.\n    if (this.renderRoot !== undefined && this.isConnected) {\n      (_b = controller.hostConnected) === null || _b === void 0 ? void 0 : _b.call(controller);\n    }\n  }\n  /**\n   * Removes a `ReactiveController` from the element.\n   * @category controllers\n   */\n  removeController(controller) {\n    var _a;\n    // Note, if the indexOf is -1, the >>> will flip the sign which makes the\n    // splice do nothing.\n    (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.splice(this.__controllers.indexOf(controller) >>> 0, 1);\n  }\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  __saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this.constructor.elementProperties.forEach((_v, p) => {\n      if (this.hasOwnProperty(p)) {\n        this.__instanceProperties.set(p, this[p]);\n        delete this[p];\n      }\n    });\n  }\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   *\n   * @return Returns a node into which to render.\n   * @category rendering\n   */\n  createRenderRoot() {\n    var _a;\n    const renderRoot = (_a = this.shadowRoot) !== null && _a !== void 0 ? _a : this.attachShadow(this.constructor.shadowRootOptions);\n    adoptStyles(renderRoot, this.constructor.elementStyles);\n    return renderRoot;\n  }\n  /**\n   * On first connection, creates the element's renderRoot, sets up\n   * element styling, and enables updating.\n   * @category lifecycle\n   */\n  connectedCallback() {\n    var _a;\n    // create renderRoot before first update.\n    if (this.renderRoot === undefined) {\n      this.renderRoot = this.createRenderRoot();\n    }\n    this.enableUpdating(true);\n    (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach(c => {\n      var _a;\n      return (_a = c.hostConnected) === null || _a === void 0 ? void 0 : _a.call(c);\n    });\n  }\n  /**\n   * Note, this method should be considered final and not overridden. It is\n   * overridden on the element instance with a function that triggers the first\n   * update.\n   * @category updates\n   */\n  enableUpdating(_requestedUpdate) {}\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   * @category lifecycle\n   */\n  disconnectedCallback() {\n    var _a;\n    (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach(c => {\n      var _a;\n      return (_a = c.hostDisconnected) === null || _a === void 0 ? void 0 : _a.call(c);\n    });\n  }\n  /**\n   * Synchronizes property values when attributes change.\n   *\n   * Specifically, when an attribute is set, the corresponding property is set.\n   * You should rarely need to implement this callback. If this method is\n   * overridden, `super.attributeChangedCallback(name, _old, value)` must be\n   * called.\n   *\n   * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\n   * on MDN for more information about the `attributeChangedCallback`.\n   * @category attributes\n   */\n  attributeChangedCallback(name, _old, value) {\n    this._$attributeToProperty(name, value);\n  }\n  __propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n    var _a;\n    const attr = this.constructor.__attributeNameForProperty(name, options);\n    if (attr !== undefined && options.reflect === true) {\n      const converter = ((_a = options.converter) === null || _a === void 0 ? void 0 : _a.toAttribute) !== undefined ? options.converter : defaultConverter;\n      const attrValue = converter.toAttribute(value, options.type);\n      if (DEV_MODE && this.constructor.enabledWarnings.indexOf('migration') >= 0 && attrValue === undefined) {\n        issueWarning('undefined-attribute-value', `The attribute value for the ${name} property is ` + `undefined on element ${this.localName}. The attribute will be ` + `removed, but in the previous version of \\`ReactiveElement\\`, ` + `the attribute would not have changed.`);\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this.__reflectingProperty = name;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue);\n      }\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n  /** @internal */\n  _$attributeToProperty(name, value) {\n    var _a;\n    const ctor = this.constructor;\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    const propName = ctor.__attributeToPropertyMap.get(name);\n    // Use tracking info to avoid reflecting a property value to an attribute\n    // if it was just set because the attribute changed.\n    if (propName !== undefined && this.__reflectingProperty !== propName) {\n      const options = ctor.getPropertyOptions(propName);\n      const converter = typeof options.converter === 'function' ? {\n        fromAttribute: options.converter\n      } : ((_a = options.converter) === null || _a === void 0 ? void 0 : _a.fromAttribute) !== undefined ? options.converter : defaultConverter;\n      // mark state reflecting\n      this.__reflectingProperty = propName;\n      this[propName] = converter.fromAttribute(value, options.type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      );\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n  /**\n   * Requests an update which is processed asynchronously. This should be called\n   * when an element should update based on some state not triggered by setting\n   * a reactive property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored.\n   *\n   * @param name name of requesting property\n   * @param oldValue old value of requesting property\n   * @param options property options to use instead of the previously\n   *     configured options\n   * @category updates\n   */\n  requestUpdate(name, oldValue, options) {\n    let shouldRequestUpdate = true;\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      options = options || this.constructor.getPropertyOptions(name);\n      const hasChanged = options.hasChanged || notEqual;\n      if (hasChanged(this[name], oldValue)) {\n        if (!this._$changedProperties.has(name)) {\n          this._$changedProperties.set(name, oldValue);\n        }\n        // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n        if (options.reflect === true && this.__reflectingProperty !== name) {\n          if (this.__reflectingProperties === undefined) {\n            this.__reflectingProperties = new Map();\n          }\n          this.__reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n    if (!this.isUpdatePending && shouldRequestUpdate) {\n      this.__updatePromise = this.__enqueueUpdate();\n    }\n    // Note, since this no longer returns a promise, in dev mode we return a\n    // thenable which warns if it's called.\n    return DEV_MODE ? requestUpdateThenable(this.localName) : undefined;\n  }\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  async __enqueueUpdate() {\n    this.isUpdatePending = true;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this.__updatePromise;\n    } catch (e) {\n      // Refire any previous errors async so they do not disrupt the update\n      // cycle. Errors are refired so developers have a chance to observe\n      // them, and this can be done by implementing\n      // `window.onunhandledrejection`.\n      Promise.reject(e);\n    }\n    const result = this.scheduleUpdate();\n    // If `scheduleUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this.isUpdatePending;\n  }\n  /**\n   * Schedules an element update. You can override this method to change the\n   * timing of updates by returning a Promise. The update will await the\n   * returned Promise, and you should resolve the Promise to allow the update\n   * to proceed. If this method is overridden, `super.scheduleUpdate()`\n   * must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```ts\n   * override protected async scheduleUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.scheduleUpdate();\n   * }\n   * ```\n   * @category updates\n   */\n  scheduleUpdate() {\n    return this.performUpdate();\n  }\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * Call `performUpdate()` to immediately process a pending update. This should\n   * generally not be needed, but it can be done in rare cases when you need to\n   * update synchronously.\n   *\n   * Note: To ensure `performUpdate()` synchronously completes a pending update,\n   * it should not be overridden. In LitElement 2.x it was suggested to override\n   * `performUpdate()` to also customizing update scheduling. Instead, you should now\n   * override `scheduleUpdate()`. For backwards compatibility with LitElement 2.x,\n   * scheduling updates via `performUpdate()` continues to work, but will make\n   * also calling `performUpdate()` to synchronously process updates difficult.\n   *\n   * @category updates\n   */\n  performUpdate() {\n    var _a, _b;\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this.isUpdatePending) {\n      return;\n    }\n    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({\n      kind: 'update'\n    });\n    // create renderRoot before first update.\n    if (!this.hasUpdated) {\n      // Produce warning if any class properties are shadowed by class fields\n      if (DEV_MODE) {\n        const shadowedProperties = [];\n        (_a = this.constructor.__reactivePropertyKeys) === null || _a === void 0 ? void 0 : _a.forEach(p => {\n          var _a;\n          if (this.hasOwnProperty(p) && !((_a = this.__instanceProperties) === null || _a === void 0 ? void 0 : _a.has(p))) {\n            shadowedProperties.push(p);\n          }\n        });\n        if (shadowedProperties.length) {\n          throw new Error(`The following properties on element ${this.localName} will not ` + `trigger updates as expected because they are set using class ` + `fields: ${shadowedProperties.join(', ')}. ` + `Native class fields and some compiled output will overwrite ` + `accessors used for detecting changes. See ` + `https://lit.dev/msg/class-field-shadowing ` + `for more information.`);\n        }\n      }\n    }\n    // Mixin instance properties once, if they exist.\n    if (this.__instanceProperties) {\n      // Use forEach so this works even if for/of loops are compiled to for loops\n      // expecting arrays\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.__instanceProperties.forEach((v, p) => this[p] = v);\n      this.__instanceProperties = undefined;\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._$changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.willUpdate(changedProperties);\n        (_b = this.__controllers) === null || _b === void 0 ? void 0 : _b.forEach(c => {\n          var _a;\n          return (_a = c.hostUpdate) === null || _a === void 0 ? void 0 : _a.call(c);\n        });\n        this.update(changedProperties);\n      } else {\n        this.__markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this.__markUpdated();\n      throw e;\n    }\n    // The update is no longer considered pending and further updates are now allowed.\n    if (shouldUpdate) {\n      this._$didUpdate(changedProperties);\n    }\n  }\n  /**\n   * Invoked before `update()` to compute values needed during the update.\n   *\n   * Implement `willUpdate` to compute property values that depend on other\n   * properties and are used in the rest of the update process.\n   *\n   * ```ts\n   * willUpdate(changedProperties) {\n   *   // only need to check changed properties for an expensive computation.\n   *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n   *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n   *   }\n   * }\n   *\n   * render() {\n   *   return html`SHA: ${this.sha}`;\n   * }\n   * ```\n   *\n   * @category updates\n   */\n  willUpdate(_changedProperties) {}\n  // Note, this is an override point for polyfill-support.\n  // @internal\n  _$didUpdate(changedProperties) {\n    var _a;\n    (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach(c => {\n      var _a;\n      return (_a = c.hostUpdated) === null || _a === void 0 ? void 0 : _a.call(c);\n    });\n    if (!this.hasUpdated) {\n      this.hasUpdated = true;\n      this.firstUpdated(changedProperties);\n    }\n    this.updated(changedProperties);\n    if (DEV_MODE && this.isUpdatePending && this.constructor.enabledWarnings.indexOf('change-in-update') >= 0) {\n      issueWarning('change-in-update', `Element ${this.localName} scheduled an update ` + `(generally because a property was set) ` + `after an update completed, causing a new update to be scheduled. ` + `This is inefficient and should be avoided unless the next update ` + `can only be scheduled as a side effect of the previous update.`);\n    }\n  }\n  __markUpdated() {\n    this._$changedProperties = new Map();\n    this.isUpdatePending = false;\n  }\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super.getUpdateComplete()`, then any subsequent state.\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  get updateComplete() {\n    return this.getUpdateComplete();\n  }\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   override async getUpdateComplete() {\n   *     const result = await super.getUpdateComplete();\n   *     await this._myChild.updateComplete;\n   *     return result;\n   *   }\n   * }\n   * ```\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  getUpdateComplete() {\n    return this.__updatePromise;\n  }\n  /**\n   * Controls whether or not `update()` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  shouldUpdate(_changedProperties) {\n    return true;\n  }\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  update(_changedProperties) {\n    if (this.__reflectingProperties !== undefined) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this.__reflectingProperties.forEach((v, k) => this.__propertyToAttribute(k, this[k], v));\n      this.__reflectingProperties = undefined;\n    }\n    this.__markUpdated();\n  }\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  updated(_changedProperties) {}\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * ```ts\n   * firstUpdated() {\n   *   this.renderRoot.getElementById('my-text-area').focus();\n   * }\n   * ```\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  firstUpdated(_changedProperties) {}\n}\n_e = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nReactiveElement[_e] = true;\n/**\n * Memoized list of all element properties, including any superclass properties.\n * Created lazily on user subclasses when finalizing the class.\n * @nocollapse\n * @category properties\n */\nReactiveElement.elementProperties = new Map();\n/**\n * Memoized list of all element styles.\n * Created lazily on user subclasses when finalizing the class.\n * @nocollapse\n * @category styles\n */\nReactiveElement.elementStyles = [];\n/**\n * Options used when calling `attachShadow`. Set this property to customize\n * the options for the shadowRoot; for example, to create a closed\n * shadowRoot: `{mode: 'closed'}`.\n *\n * Note, these options are used in `createRenderRoot`. If this method\n * is customized, options should be respected if possible.\n * @nocollapse\n * @category rendering\n */\nReactiveElement.shadowRootOptions = {\n  mode: 'open'\n};\n// Apply polyfills if available\npolyfillSupport === null || polyfillSupport === void 0 ? void 0 : polyfillSupport({\n  ReactiveElement\n});\n// Dev mode warnings...\nif (DEV_MODE) {\n  // Default warning set.\n  ReactiveElement.enabledWarnings = ['change-in-update'];\n  const ensureOwnWarnings = function (ctor) {\n    if (!ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))) {\n      ctor.enabledWarnings = ctor.enabledWarnings.slice();\n    }\n  };\n  ReactiveElement.enableWarning = function (warning) {\n    ensureOwnWarnings(this);\n    if (this.enabledWarnings.indexOf(warning) < 0) {\n      this.enabledWarnings.push(warning);\n    }\n  };\n  ReactiveElement.disableWarning = function (warning) {\n    ensureOwnWarnings(this);\n    const i = this.enabledWarnings.indexOf(warning);\n    if (i >= 0) {\n      this.enabledWarnings.splice(i, 1);\n    }\n  };\n}\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n((_d = global.reactiveElementVersions) !== null && _d !== void 0 ? _d : global.reactiveElementVersions = []).push('1.6.3');\nif (DEV_MODE && global.reactiveElementVersions.length > 1) {\n  issueWarning('multiple-versions', `Multiple versions of Lit loaded. Loading multiple versions ` + `is not recommended.`);\n}","map":{"version":3,"names":["getCompatibleStyle","adoptStyles","NODE_MODE","global","globalThis","window","_a","customElements","DEV_MODE","requestUpdateThenable","issueWarning","trustedTypes","emptyStringForBooleanAttribute","emptyScript","polyfillSupport","reactiveElementPolyfillSupportDevMode","reactiveElementPolyfillSupport","issuedWarnings","_b","litIssuedWarnings","Set","code","warning","has","console","warn","add","_c","ShadyDOM","inUse","undefined","name","then","onfulfilled","_onrejected","debugLogEvent","event","shouldEmit","emitLitDebugLogEvents","dispatchEvent","CustomEvent","detail","JSCompiler_renameProperty","prop","_obj","defaultConverter","toAttribute","value","type","Boolean","Object","Array","JSON","stringify","fromAttribute","fromValue","Number","parse","e","notEqual","old","defaultPropertyDeclaration","attribute","String","converter","reflect","hasChanged","finalized","ReactiveElement","HTMLElement","constructor","__instanceProperties","Map","isUpdatePending","hasUpdated","__reflectingProperty","__initialize","addInitializer","initializer","finalize","_initializers","push","observedAttributes","attributes","elementProperties","forEach","v","p","attr","__attributeNameForProperty","__attributeToPropertyMap","set","createProperty","options","state","noAccessor","prototype","hasOwnProperty","key","Symbol","descriptor","getPropertyDescriptor","defineProperty","__reactivePropertyKeys","get","oldValue","requestUpdate","configurable","enumerable","getPropertyOptions","superCtor","getPrototypeOf","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","elementStyles","finalizeStyles","styles","warnRemovedOrRenamed","renamed","isArray","flat","Infinity","reverse","s","unshift","toLowerCase","__updatePromise","Promise","res","enableUpdating","_$changedProperties","__saveInstanceProperties","i","addController","controller","__controllers","renderRoot","isConnected","hostConnected","call","removeController","splice","indexOf","_v","createRenderRoot","shadowRoot","attachShadow","shadowRootOptions","connectedCallback","c","_requestedUpdate","disconnectedCallback","hostDisconnected","attributeChangedCallback","_old","_$attributeToProperty","__propertyToAttribute","attrValue","enabledWarnings","localName","removeAttribute","setAttribute","ctor","propName","shouldRequestUpdate","__reflectingProperties","__enqueueUpdate","reject","result","scheduleUpdate","performUpdate","kind","shadowedProperties","length","Error","join","shouldUpdate","changedProperties","willUpdate","hostUpdate","update","__markUpdated","_$didUpdate","_changedProperties","hostUpdated","firstUpdated","updated","updateComplete","getUpdateComplete","k","_e","mode","ensureOwnWarnings","slice","enableWarning","disableWarning","_d","reactiveElementVersions"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@lit/reactive-element/src/reactive-element.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Use this module if you want to create your own base class extending\n * {@link ReactiveElement}.\n * @packageDocumentation\n */\n\nimport {\n  getCompatibleStyle,\n  adoptStyles,\n  CSSResultGroup,\n  CSSResultOrNative,\n} from './css-tag.js';\nimport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n// In the Node build, this import will be injected by Rollup:\n// import {HTMLElement, customElements} from '@lit-labs/ssr-dom-shim';\n\nexport * from './css-tag.js';\nexport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n\nif (NODE_MODE) {\n  global.customElements ??= customElements;\n}\n\nconst DEV_MODE = true;\n\nlet requestUpdateThenable: (name: string) => {\n  then: (\n    onfulfilled?: (value: boolean) => void,\n    _onrejected?: () => void\n  ) => void;\n};\n\nlet issueWarning: (code: string, warning: string) => void;\n\nconst trustedTypes = (global as unknown as {trustedTypes?: {emptyScript: ''}})\n  .trustedTypes;\n\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes\n  ? (trustedTypes.emptyScript as unknown as '')\n  : '';\n\nconst polyfillSupport = DEV_MODE\n  ? global.reactiveElementPolyfillSupportDevMode\n  : global.reactiveElementPolyfillSupport;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> = (global.litIssuedWarnings ??=\n    new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n\n  // Issue polyfill support warning.\n  if (global.ShadyDOM?.inUse && polyfillSupport === undefined) {\n    issueWarning(\n      'polyfill-support-missing',\n      `Shadow DOM is being polyfilled via \\`ShadyDOM\\` but ` +\n        `the \\`polyfill-support\\` module has not been loaded.`\n    );\n  }\n\n  requestUpdateThenable = (name) => ({\n    then: (\n      onfulfilled?: (value: boolean) => void,\n      _onrejected?: () => void\n    ) => {\n      issueWarning(\n        'request-update-promise',\n        `The \\`requestUpdate\\` method should no longer return a Promise but ` +\n          `does so on \\`${name}\\`. Use \\`updateComplete\\` instead.`\n      );\n      if (onfulfilled !== undefined) {\n        onfulfilled(false);\n      }\n    },\n  });\n}\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace ReactiveUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry = Update;\n    export interface Update {\n      kind: 'update';\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: ReactiveUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<ReactiveUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string | null, type?: TypeHint): Type;\n\n  /**\n   * Called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n  | ComplexAttributeConverter<Type>\n  | ((value: string | null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * When set to `true`, indicates the property is internal private state. The\n   * property should not be set by users. When using TypeScript, this property\n   * should be marked as `private` or `protected`, and it is also a common\n   * practice to use a leading `_` in the name. The property is not added to\n   * `observedAttributes`.\n   */\n  readonly state?: boolean;\n\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean | string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * A Map of property keys to values.\n *\n * Takes an optional type parameter T, which when specified as a non-any,\n * non-unknown type, will make the Map more strongly-typed, associating the map\n * keys with their corresponding value type on T.\n *\n * Use `PropertyValues<this>` when overriding ReactiveElement.update() and\n * other lifecycle methods in order to get stronger type-checking on keys\n * and values.\n */\n// This type is conditional so that if the parameter T is not specified, or\n// is `any`, the type will include `Map<PropertyKey, unknown>`. Since T is not\n// given in the uses of PropertyValues in this file, all uses here fallback to\n// meaning `Map<PropertyKey, unknown>`, but if a developer uses\n// `PropertyValues<this>` (or any other value for T) they will get a\n// strongly-typed Map type.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type PropertyValues<T = any> = T extends object\n  ? PropertyValueMap<T>\n  : Map<PropertyKey, unknown>;\n\n/**\n * Do not use, instead prefer {@linkcode PropertyValues}.\n */\n// This type must be exported such that JavaScript generated by the Google\n// Closure Compiler can import a type reference.\nexport interface PropertyValueMap<T> extends Map<PropertyKey, unknown> {\n  get<K extends keyof T>(k: K): T[K];\n  set<K extends keyof T>(key: K, value: T[K]): this;\n  has<K extends keyof T>(k: K): boolean;\n  delete<K extends keyof T>(k: K): boolean;\n}\n\nexport const defaultConverter: ComplexAttributeConverter = {\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        value = value ? emptyStringForBooleanAttribute : null;\n        break;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        value = value == null ? value : JSON.stringify(value);\n        break;\n    }\n    return value;\n  },\n\n  fromAttribute(value: string | null, type?: unknown) {\n    let fromValue: unknown = value;\n    switch (type) {\n      case Boolean:\n        fromValue = value !== null;\n        break;\n      case Number:\n        fromValue = value === null ? null : Number(value);\n        break;\n      case Object:\n      case Array:\n        // Do *not* generate exception when invalid JSON is set as elements\n        // don't normally complain on being mis-configured.\n        // TODO(sorvell): Do generate exception in *dev mode*.\n        try {\n          // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n          fromValue = JSON.parse(value!) as unknown;\n        } catch (e) {\n          fromValue = null;\n        }\n        break;\n    }\n    return fromValue;\n  },\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual,\n};\n\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n\n/**\n * A string representing one of the supported dev mode warning categories.\n */\nexport type WarningKind = 'change-in-update' | 'migration';\n\nexport type Initializer = (element: ReactiveElement) => void;\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n * @noInheritDoc\n */\nexport abstract class ReactiveElement\n  // In the Node build, this `extends` clause will be substituted with\n  // `(globalThis.HTMLElement ?? HTMLElement)`.\n  //\n  // This way, we will first prefer any global `HTMLElement` polyfill that the\n  // user has assigned, and then fall back to the `HTMLElement` shim which has\n  // been imported (see note at the top of this file about how this import is\n  // generated by Rollup). Note that the `HTMLElement` variable has been\n  // shadowed by this import, so it no longer refers to the global.\n  extends HTMLElement\n  implements ReactiveControllerHost\n{\n  // Note: these are patched in only in DEV_MODE.\n  /**\n   * Read or set all the enabled warning categories for this class.\n   *\n   * This property is only used in development builds.\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enabledWarnings?: WarningKind[];\n\n  /**\n   * Enable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Enable for all ReactiveElement subclasses\n   * ReactiveElement.enableWarning?.('migration');\n   *\n   * // Enable for only MyElement and subclasses\n   * MyElement.enableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Disable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Disable for all ReactiveElement subclasses\n   * ReactiveElement.disableWarning?.('migration');\n   *\n   * // Disable for only MyElement and subclasses\n   * MyElement.disableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static disableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Adds an initializer function to the class that is called during instance\n   * construction.\n   *\n   * This is useful for code that runs against a `ReactiveElement`\n   * subclass, such as a decorator, that needs to do work for each\n   * instance, such as setting up a `ReactiveController`.\n   *\n   * ```ts\n   * const myDecorator = (target: typeof ReactiveElement, key: string) => {\n   *   target.addInitializer((instance: ReactiveElement) => {\n   *     // This is run during construction of the element\n   *     new MyController(instance);\n   *   });\n   * }\n   * ```\n   *\n   * Decorating a field will then cause each instance to run an initializer\n   * that adds a controller:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   @myDecorator foo;\n   * }\n   * ```\n   *\n   * Initializers are stored per-constructor. Adding an initializer to a\n   * subclass does not add it to a superclass. Since initializers are run in\n   * constructors, initializers will run in order of the class hierarchy,\n   * starting with superclasses and progressing to the instance's class.\n   *\n   * @nocollapse\n   */\n  static addInitializer(initializer: Initializer) {\n    this.finalize();\n    (this._initializers ??= []).push(initializer);\n  }\n\n  static _initializers?: Initializer[];\n\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   * @nocollapse\n   */\n  private static __attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having finished creating properties.\n   */\n  protected static [finalized] = true;\n\n  /**\n   * Memoized list of all element properties, including any superclass properties.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category properties\n   */\n  static elementProperties: PropertyDeclarationMap = new Map();\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring reactive properties. When\n   * a reactive property is set the element will update and render.\n   *\n   * By default properties are public fields, and as such, they should be\n   * considered as primarily settable by element users, either via attribute or\n   * the property itself.\n   *\n   * Generally, properties that are changed by the element should be private or\n   * protected fields and should use the `state: true` option. Properties\n   * marked as `state` do not reflect from the corresponding attribute\n   *\n   * However, sometimes element code does need to set a public property. This\n   * should typically only be done in response to user interaction, and an event\n   * should be fired informing the user; for example, a checkbox sets its\n   * `checked` property when clicked and fires a `changed` event. Mutating\n   * public properties should typically not be done for non-primitive (object or\n   * array) properties. In other cases when an element needs to manage state, a\n   * private property set with the `state: true` option should be used. When\n   * needed, state properties can be initialized via public properties to\n   * facilitate complex interactions.\n   * @nocollapse\n   * @category properties\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Memoized list of all element styles.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category styles\n   */\n  static elementStyles: Array<CSSResultOrNative> = [];\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the {@linkcode css} tag function, via constructible stylesheets, or\n   * imported from native CSS module scripts.\n   *\n   * Note on Content Security Policy:\n   *\n   * Element styles are implemented with `<style>` tags when the browser doesn't\n   * support adopted StyleSheets. To use such `<style>` tags with the style-src\n   * CSP directive, the style-src value must either include 'unsafe-inline' or\n   * `nonce-<base64-value>` with `<base64-value>` replaced be a server-generated\n   * nonce.\n   *\n   * To provide a nonce to use on generated `<style>` elements, set\n   * `window.litNonce` to a server-generated nonce in your page's HTML, before\n   * loading application code:\n   *\n   * ```html\n   * <script>\n   *   // Generated and unique per request:\n   *   window.litNonce = 'a1b2c3d4';\n   * </script>\n   * ```\n   * @nocollapse\n   * @category styles\n   */\n  static styles?: CSSResultGroup;\n\n  /**\n   * The set of properties defined by this class that caused an accessor to be\n   * added during `createProperty`.\n   * @nocollapse\n   */\n  private static __reactivePropertyKeys?: Set<PropertyKey>;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   * @category attributes\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes: string[] = [];\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this.elementProperties.forEach((v, p) => {\n      const attr = this.__attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this.__attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    });\n    return attributes;\n  }\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a {@linkcode PropertyDeclaration} for the property with the\n   * given options. The property setter calls the property's `hasChanged`\n   * property option or uses a strict identity check to determine whether or not\n   * to request an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * ```ts\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static createProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    // if this is a state property, force the attribute to false.\n    if (options.state) {\n      // Cast as any since this is readonly.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (options as any).attribute = false;\n    }\n    // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure finalization has been kicked off.\n    this.finalize();\n    this.elementProperties.set(name, options);\n    // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n    if (!options.noAccessor && !this.prototype.hasOwnProperty(name)) {\n      const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n      const descriptor = this.getPropertyDescriptor(name, key, options);\n      if (descriptor !== undefined) {\n        Object.defineProperty(this.prototype, name, descriptor);\n        if (DEV_MODE) {\n          // If this class doesn't have its own set, create one and initialize\n          // with the values in the set from the nearest ancestor class, if any.\n          if (!this.hasOwnProperty('__reactivePropertyKeys')) {\n            this.__reactivePropertyKeys = new Set(\n              this.__reactivePropertyKeys ?? []\n            );\n          }\n          this.__reactivePropertyKeys!.add(name);\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   static getPropertyDescriptor(name, key, options) {\n   *     const defaultDescriptor =\n   *         super.getPropertyDescriptor(name, key, options);\n   *     const setter = defaultDescriptor.set;\n   *     return {\n   *       get: defaultDescriptor.get,\n   *       set(value) {\n   *         setter.call(this, value);\n   *         // custom action.\n   *       },\n   *       configurable: true,\n   *       enumerable: true\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  protected static getPropertyDescriptor(\n    name: PropertyKey,\n    key: string | symbol,\n    options: PropertyDeclaration\n  ): PropertyDescriptor | undefined {\n    return {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      get(): any {\n        return (this as {[key: string]: unknown})[key as string];\n      },\n      set(this: ReactiveElement, value: unknown) {\n        const oldValue = (this as {} as {[key: string]: unknown})[\n          name as string\n        ];\n        (this as {} as {[key: string]: unknown})[key as string] = value;\n        (this as unknown as ReactiveElement).requestUpdate(\n          name,\n          oldValue,\n          options\n        );\n      },\n      configurable: true,\n      enumerable: true,\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a `PropertyDeclaration` via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override\n   * {@linkcode createProperty}.\n   *\n   * @nocollapse\n   * @final\n   * @category properties\n   */\n  static getPropertyOptions(name: PropertyKey) {\n    return this.elementProperties.get(name) || defaultPropertyDeclaration;\n  }\n\n  /**\n   * Creates property accessors for registered properties, sets up element\n   * styling, and ensures any superclasses are also finalized. Returns true if\n   * the element was finalized.\n   * @nocollapse\n   */\n  protected static finalize() {\n    if (this.hasOwnProperty(finalized)) {\n      return false;\n    }\n    this[finalized] = true;\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this) as typeof ReactiveElement;\n    superCtor.finalize();\n    // Create own set of initializers for this class if any exist on the\n    // superclass and copy them down. Note, for a small perf boost, avoid\n    // creating initializers unless needed.\n    if (superCtor._initializers !== undefined) {\n      this._initializers = [...superCtor._initializers];\n    }\n    this.elementProperties = new Map(superCtor.elementProperties);\n    // initialize Map populated in observedAttributes\n    this.__attributeToPropertyMap = new Map();\n    // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      // support symbols in properties (IE11 does not support this)\n      const propKeys = [\n        ...Object.getOwnPropertyNames(props),\n        ...Object.getOwnPropertySymbols(props),\n      ];\n      // This for/of is ok because propKeys is an array\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeScript lack of support for symbol in\n        // index types\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.createProperty(p, (props as any)[p]);\n      }\n    }\n    this.elementStyles = this.finalizeStyles(this.styles);\n    // DEV mode warnings\n    if (DEV_MODE) {\n      const warnRemovedOrRenamed = (name: string, renamed = false) => {\n        if (this.prototype.hasOwnProperty(name)) {\n          issueWarning(\n            renamed ? 'renamed-api' : 'removed-api',\n            `\\`${name}\\` is implemented on class ${this.name}. It ` +\n              `has been ${renamed ? 'renamed' : 'removed'} ` +\n              `in this version of LitElement.`\n          );\n        }\n      };\n      warnRemovedOrRenamed('initialize');\n      warnRemovedOrRenamed('requestUpdateInternal');\n      warnRemovedOrRenamed('_getUpdateComplete', true);\n    }\n    return true;\n  }\n\n  /**\n   * Options used when calling `attachShadow`. Set this property to customize\n   * the options for the shadowRoot; for example, to create a closed\n   * shadowRoot: `{mode: 'closed'}`.\n   *\n   * Note, these options are used in `createRenderRoot`. If this method\n   * is customized, options should be respected if possible.\n   * @nocollapse\n   * @category rendering\n   */\n  static shadowRootOptions: ShadowRootInit = {mode: 'open'};\n\n  /**\n   * Takes the styles the user supplied via the `static styles` property and\n   * returns the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * Styles are deduplicated preserving the _last_ instance in the list. This\n   * is a performance optimization to avoid duplicated styles that can occur\n   * especially when composing via subclassing. The last item is kept to try\n   * to preserve the cascade order with the assumption that it's most important\n   * that last added styles override previous styles.\n   *\n   * @nocollapse\n   * @category styles\n   */\n  protected static finalizeStyles(\n    styles?: CSSResultGroup\n  ): Array<CSSResultOrNative> {\n    const elementStyles = [];\n    if (Array.isArray(styles)) {\n      // Dedupe the flattened array in reverse order to preserve the last items.\n      // Casting to Array<unknown> works around TS error that\n      // appears to come from trying to flatten a type CSSResultArray.\n      const set = new Set((styles as Array<unknown>).flat(Infinity).reverse());\n      // Then preserve original order by adding the set items in reverse order.\n      for (const s of set) {\n        elementStyles.unshift(getCompatibleStyle(s as CSSResultOrNative));\n      }\n    } else if (styles !== undefined) {\n      elementStyles.push(getCompatibleStyle(styles));\n    }\n    return elementStyles;\n  }\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   * @category rendering\n   */\n  readonly renderRoot!: HTMLElement | ShadowRoot;\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static __attributeNameForProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration\n  ) {\n    const attribute = options.attribute;\n    return attribute === false\n      ? undefined\n      : typeof attribute === 'string'\n      ? attribute\n      : typeof name === 'string'\n      ? name.toLowerCase()\n      : undefined;\n  }\n\n  private __instanceProperties?: PropertyValues = new Map();\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private __updatePromise!: Promise<boolean>;\n\n  /**\n   * True if there is a pending update as a result of calling `requestUpdate()`.\n   * Should only be read.\n   * @category updates\n   */\n  isUpdatePending = false;\n\n  /**\n   * Is set to `true` after the first update. The element code cannot assume\n   * that `renderRoot` exists before the element `hasUpdated`.\n   * @category updates\n   */\n  hasUpdated = false;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   *\n   * @internal\n   */\n  _$changedProperties!: PropertyValues;\n\n  /**\n   * Map with keys of properties that should be reflected when updated.\n   */\n  private __reflectingProperties?: Map<PropertyKey, PropertyDeclaration>;\n\n  /**\n   * Name of currently reflecting property\n   */\n  private __reflectingProperty: PropertyKey | null = null;\n\n  /**\n   * Set of controllers.\n   */\n  private __controllers?: ReactiveController[];\n\n  constructor() {\n    super();\n    this.__initialize();\n  }\n\n  /**\n   * Internal only override point for customizing work done when elements\n   * are constructed.\n   */\n  private __initialize() {\n    this.__updatePromise = new Promise<boolean>(\n      (res) => (this.enableUpdating = res)\n    );\n    this._$changedProperties = new Map();\n    this.__saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this.requestUpdate();\n    (this.constructor as typeof ReactiveElement)._initializers?.forEach((i) =>\n      i(this)\n    );\n  }\n\n  /**\n   * Registers a `ReactiveController` to participate in the element's reactive\n   * update cycle. The element automatically calls into any registered\n   * controllers during its lifecycle callbacks.\n   *\n   * If the element is connected when `addController()` is called, the\n   * controller's `hostConnected()` callback will be immediately called.\n   * @category controllers\n   */\n  addController(controller: ReactiveController) {\n    (this.__controllers ??= []).push(controller);\n    // If a controller is added after the element has been connected,\n    // call hostConnected. Note, re-using existence of `renderRoot` here\n    // (which is set in connectedCallback) to avoid the need to track a\n    // first connected state.\n    if (this.renderRoot !== undefined && this.isConnected) {\n      controller.hostConnected?.();\n    }\n  }\n\n  /**\n   * Removes a `ReactiveController` from the element.\n   * @category controllers\n   */\n  removeController(controller: ReactiveController) {\n    // Note, if the indexOf is -1, the >>> will flip the sign which makes the\n    // splice do nothing.\n    this.__controllers?.splice(this.__controllers.indexOf(controller) >>> 0, 1);\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private __saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    (this.constructor as typeof ReactiveElement).elementProperties.forEach(\n      (_v, p) => {\n        if (this.hasOwnProperty(p)) {\n          this.__instanceProperties!.set(p, this[p as keyof this]);\n          delete this[p as keyof this];\n        }\n      }\n    );\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   *\n   * @return Returns a node into which to render.\n   * @category rendering\n   */\n  protected createRenderRoot(): Element | ShadowRoot {\n    const renderRoot =\n      this.shadowRoot ??\n      this.attachShadow(\n        (this.constructor as typeof ReactiveElement).shadowRootOptions\n      );\n    adoptStyles(\n      renderRoot,\n      (this.constructor as typeof ReactiveElement).elementStyles\n    );\n    return renderRoot;\n  }\n\n  /**\n   * On first connection, creates the element's renderRoot, sets up\n   * element styling, and enables updating.\n   * @category lifecycle\n   */\n  connectedCallback() {\n    // create renderRoot before first update.\n    if (this.renderRoot === undefined) {\n      (\n        this as {\n          renderRoot: Element | DocumentFragment;\n        }\n      ).renderRoot = this.createRenderRoot();\n    }\n    this.enableUpdating(true);\n    this.__controllers?.forEach((c) => c.hostConnected?.());\n  }\n\n  /**\n   * Note, this method should be considered final and not overridden. It is\n   * overridden on the element instance with a function that triggers the first\n   * update.\n   * @category updates\n   */\n  protected enableUpdating(_requestedUpdate: boolean) {}\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   * @category lifecycle\n   */\n  disconnectedCallback() {\n    this.__controllers?.forEach((c) => c.hostDisconnected?.());\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   *\n   * Specifically, when an attribute is set, the corresponding property is set.\n   * You should rarely need to implement this callback. If this method is\n   * overridden, `super.attributeChangedCallback(name, _old, value)` must be\n   * called.\n   *\n   * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\n   * on MDN for more information about the `attributeChangedCallback`.\n   * @category attributes\n   */\n  attributeChangedCallback(\n    name: string,\n    _old: string | null,\n    value: string | null\n  ) {\n    this._$attributeToProperty(name, value);\n  }\n\n  private __propertyToAttribute(\n    name: PropertyKey,\n    value: unknown,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    const attr = (\n      this.constructor as typeof ReactiveElement\n    ).__attributeNameForProperty(name, options);\n    if (attr !== undefined && options.reflect === true) {\n      const converter =\n        (options.converter as ComplexAttributeConverter)?.toAttribute !==\n        undefined\n          ? (options.converter as ComplexAttributeConverter)\n          : defaultConverter;\n      const attrValue = converter.toAttribute!(value, options.type);\n      if (\n        DEV_MODE &&\n        (this.constructor as typeof ReactiveElement).enabledWarnings!.indexOf(\n          'migration'\n        ) >= 0 &&\n        attrValue === undefined\n      ) {\n        issueWarning(\n          'undefined-attribute-value',\n          `The attribute value for the ${name as string} property is ` +\n            `undefined on element ${this.localName}. The attribute will be ` +\n            `removed, but in the previous version of \\`ReactiveElement\\`, ` +\n            `the attribute would not have changed.`\n        );\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this.__reflectingProperty = name;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /** @internal */\n  _$attributeToProperty(name: string, value: string | null) {\n    const ctor = this.constructor as typeof ReactiveElement;\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    const propName = (ctor.__attributeToPropertyMap as AttributeMap).get(name);\n    // Use tracking info to avoid reflecting a property value to an attribute\n    // if it was just set because the attribute changed.\n    if (propName !== undefined && this.__reflectingProperty !== propName) {\n      const options = ctor.getPropertyOptions(propName);\n      const converter =\n        typeof options.converter === 'function'\n          ? {fromAttribute: options.converter}\n          : options.converter?.fromAttribute !== undefined\n          ? options.converter\n          : defaultConverter;\n      // mark state reflecting\n      this.__reflectingProperty = propName;\n      this[propName as keyof this] = converter.fromAttribute!(\n        value,\n        options.type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ) as any;\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should be called\n   * when an element should update based on some state not triggered by setting\n   * a reactive property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored.\n   *\n   * @param name name of requesting property\n   * @param oldValue old value of requesting property\n   * @param options property options to use instead of the previously\n   *     configured options\n   * @category updates\n   */\n  requestUpdate(\n    name?: PropertyKey,\n    oldValue?: unknown,\n    options?: PropertyDeclaration\n  ): void {\n    let shouldRequestUpdate = true;\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      options =\n        options ||\n        (this.constructor as typeof ReactiveElement).getPropertyOptions(name);\n      const hasChanged = options.hasChanged || notEqual;\n      if (hasChanged(this[name as keyof this], oldValue)) {\n        if (!this._$changedProperties.has(name)) {\n          this._$changedProperties.set(name, oldValue);\n        }\n        // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n        if (options.reflect === true && this.__reflectingProperty !== name) {\n          if (this.__reflectingProperties === undefined) {\n            this.__reflectingProperties = new Map();\n          }\n          this.__reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n    if (!this.isUpdatePending && shouldRequestUpdate) {\n      this.__updatePromise = this.__enqueueUpdate();\n    }\n    // Note, since this no longer returns a promise, in dev mode we return a\n    // thenable which warns if it's called.\n    return DEV_MODE\n      ? (requestUpdateThenable(this.localName) as unknown as void)\n      : undefined;\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async __enqueueUpdate() {\n    this.isUpdatePending = true;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this.__updatePromise;\n    } catch (e) {\n      // Refire any previous errors async so they do not disrupt the update\n      // cycle. Errors are refired so developers have a chance to observe\n      // them, and this can be done by implementing\n      // `window.onunhandledrejection`.\n      Promise.reject(e);\n    }\n    const result = this.scheduleUpdate();\n    // If `scheduleUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this.isUpdatePending;\n  }\n\n  /**\n   * Schedules an element update. You can override this method to change the\n   * timing of updates by returning a Promise. The update will await the\n   * returned Promise, and you should resolve the Promise to allow the update\n   * to proceed. If this method is overridden, `super.scheduleUpdate()`\n   * must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```ts\n   * override protected async scheduleUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.scheduleUpdate();\n   * }\n   * ```\n   * @category updates\n   */\n  protected scheduleUpdate(): void | Promise<unknown> {\n    return this.performUpdate();\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * Call `performUpdate()` to immediately process a pending update. This should\n   * generally not be needed, but it can be done in rare cases when you need to\n   * update synchronously.\n   *\n   * Note: To ensure `performUpdate()` synchronously completes a pending update,\n   * it should not be overridden. In LitElement 2.x it was suggested to override\n   * `performUpdate()` to also customizing update scheduling. Instead, you should now\n   * override `scheduleUpdate()`. For backwards compatibility with LitElement 2.x,\n   * scheduling updates via `performUpdate()` continues to work, but will make\n   * also calling `performUpdate()` to synchronously process updates difficult.\n   *\n   * @category updates\n   */\n  protected performUpdate(): void | Promise<unknown> {\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this.isUpdatePending) {\n      return;\n    }\n    debugLogEvent?.({kind: 'update'});\n    // create renderRoot before first update.\n    if (!this.hasUpdated) {\n      // Produce warning if any class properties are shadowed by class fields\n      if (DEV_MODE) {\n        const shadowedProperties: string[] = [];\n        (\n          this.constructor as typeof ReactiveElement\n        ).__reactivePropertyKeys?.forEach((p) => {\n          if (this.hasOwnProperty(p) && !this.__instanceProperties?.has(p)) {\n            shadowedProperties.push(p as string);\n          }\n        });\n        if (shadowedProperties.length) {\n          throw new Error(\n            `The following properties on element ${this.localName} will not ` +\n              `trigger updates as expected because they are set using class ` +\n              `fields: ${shadowedProperties.join(', ')}. ` +\n              `Native class fields and some compiled output will overwrite ` +\n              `accessors used for detecting changes. See ` +\n              `https://lit.dev/msg/class-field-shadowing ` +\n              `for more information.`\n          );\n        }\n      }\n    }\n    // Mixin instance properties once, if they exist.\n    if (this.__instanceProperties) {\n      // Use forEach so this works even if for/of loops are compiled to for loops\n      // expecting arrays\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.__instanceProperties!.forEach((v, p) => ((this as any)[p] = v));\n      this.__instanceProperties = undefined;\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._$changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.willUpdate(changedProperties);\n        this.__controllers?.forEach((c) => c.hostUpdate?.());\n        this.update(changedProperties);\n      } else {\n        this.__markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this.__markUpdated();\n      throw e;\n    }\n    // The update is no longer considered pending and further updates are now allowed.\n    if (shouldUpdate) {\n      this._$didUpdate(changedProperties);\n    }\n  }\n\n  /**\n   * Invoked before `update()` to compute values needed during the update.\n   *\n   * Implement `willUpdate` to compute property values that depend on other\n   * properties and are used in the rest of the update process.\n   *\n   * ```ts\n   * willUpdate(changedProperties) {\n   *   // only need to check changed properties for an expensive computation.\n   *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n   *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n   *   }\n   * }\n   *\n   * render() {\n   *   return html`SHA: ${this.sha}`;\n   * }\n   * ```\n   *\n   * @category updates\n   */\n  protected willUpdate(_changedProperties: PropertyValues): void {}\n\n  // Note, this is an override point for polyfill-support.\n  // @internal\n  _$didUpdate(changedProperties: PropertyValues) {\n    this.__controllers?.forEach((c) => c.hostUpdated?.());\n    if (!this.hasUpdated) {\n      this.hasUpdated = true;\n      this.firstUpdated(changedProperties);\n    }\n    this.updated(changedProperties);\n    if (\n      DEV_MODE &&\n      this.isUpdatePending &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.indexOf(\n        'change-in-update'\n      ) >= 0\n    ) {\n      issueWarning(\n        'change-in-update',\n        `Element ${this.localName} scheduled an update ` +\n          `(generally because a property was set) ` +\n          `after an update completed, causing a new update to be scheduled. ` +\n          `This is inefficient and should be avoided unless the next update ` +\n          `can only be scheduled as a side effect of the previous update.`\n      );\n    }\n  }\n\n  private __markUpdated() {\n    this._$changedProperties = new Map();\n    this.isUpdatePending = false;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super.getUpdateComplete()`, then any subsequent state.\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  get updateComplete(): Promise<boolean> {\n    return this.getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   override async getUpdateComplete() {\n   *     const result = await super.getUpdateComplete();\n   *     await this._myChild.updateComplete;\n   *     return result;\n   *   }\n   * }\n   * ```\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  protected getUpdateComplete(): Promise<boolean> {\n    return this.__updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update()` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected update(_changedProperties: PropertyValues) {\n    if (this.__reflectingProperties !== undefined) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this.__reflectingProperties.forEach((v, k) =>\n        this.__propertyToAttribute(k, this[k as keyof this], v)\n      );\n      this.__reflectingProperties = undefined;\n    }\n    this.__markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected updated(_changedProperties: PropertyValues) {}\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * ```ts\n   * firstUpdated() {\n   *   this.renderRoot.getElementById('my-text-area').focus();\n   * }\n   * ```\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {}\n}\n\n// Apply polyfills if available\npolyfillSupport?.({ReactiveElement});\n\n// Dev mode warnings...\nif (DEV_MODE) {\n  // Default warning set.\n  ReactiveElement.enabledWarnings = ['change-in-update'];\n  const ensureOwnWarnings = function (ctor: typeof ReactiveElement) {\n    if (\n      !ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))\n    ) {\n      ctor.enabledWarnings = ctor.enabledWarnings!.slice();\n    }\n  };\n  ReactiveElement.enableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    if (this.enabledWarnings!.indexOf(warning) < 0) {\n      this.enabledWarnings!.push(warning);\n    }\n  };\n  ReactiveElement.disableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    const i = this.enabledWarnings!.indexOf(warning);\n    if (i >= 0) {\n      this.enabledWarnings!.splice(i, 1);\n    }\n  };\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n(global.reactiveElementVersions ??= []).push('1.6.3');\nif (DEV_MODE && global.reactiveElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}