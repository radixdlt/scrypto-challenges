{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function timer(dueTime, periodOrScheduler, scheduler) {\n  if (dueTime === void 0) {\n    dueTime = 0;\n  }\n  var period = -1;\n  if (isNumeric(periodOrScheduler)) {\n    period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n  } else if (isScheduler(periodOrScheduler)) {\n    scheduler = periodOrScheduler;\n  }\n  if (!isScheduler(scheduler)) {\n    scheduler = async;\n  }\n  return new Observable(function (subscriber) {\n    var due = isNumeric(dueTime) ? dueTime : +dueTime - scheduler.now();\n    return scheduler.schedule(dispatch, due, {\n      index: 0,\n      period: period,\n      subscriber: subscriber\n    });\n  });\n}\nfunction dispatch(state) {\n  var index = state.index,\n    period = state.period,\n    subscriber = state.subscriber;\n  subscriber.next(index);\n  if (subscriber.closed) {\n    return;\n  } else if (period === -1) {\n    return subscriber.complete();\n  }\n  state.index = index + 1;\n  this.schedule(state, period);\n}","map":{"version":3,"names":["Observable","async","isNumeric","isScheduler","timer","dueTime","periodOrScheduler","scheduler","period","Number","subscriber","due","now","schedule","dispatch","index","state","next","closed","complete"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/observable/timer.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that starts emitting after an `dueTime` and\n * emits ever increasing numbers after each `period` of time thereafter.\n *\n * <span class=\"informal\">Its like {@link index/interval}, but you can specify when\n * should the emissions start.</span>\n *\n * ![](timer.png)\n *\n * `timer` returns an Observable that emits an infinite sequence of ascending\n * integers, with a constant interval of time, `period` of your choosing\n * between those emissions. The first emission happens after the specified\n * `dueTime`. The initial delay may be a `Date`. By default, this\n * operator uses the {@link asyncScheduler} {@link SchedulerLike} to provide a notion of time, but you\n * may pass any {@link SchedulerLike} to it. If `period` is not specified, the output\n * Observable emits only one value, `0`. Otherwise, it emits an infinite\n * sequence.\n *\n * ## Examples\n * ### Emits ascending numbers, one every second (1000ms), starting after 3 seconds\n * ```ts\n * import { timer } from 'rxjs';\n *\n * const numbers = timer(3000, 1000);\n * numbers.subscribe(x => console.log(x));\n * ```\n *\n * ### Emits one number after five seconds\n * ```ts\n * import { timer } from 'rxjs';\n *\n * const numbers = timer(5000);\n * numbers.subscribe(x => console.log(x));\n * ```\n * @see {@link index/interval}\n * @see {@link delay}\n *\n * @param {number|Date} [dueTime] The initial delay time specified as a Date object or as an integer denoting\n * milliseconds to wait before emitting the first value of 0`.\n * @param {number|SchedulerLike} [periodOrScheduler] The period of time between emissions of the\n * subsequent numbers.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for scheduling\n * the emission of values, and providing a notion of \"time\".\n * @return {Observable} An Observable that emits a `0` after the\n * `dueTime` and ever increasing numbers after each `period` of time\n * thereafter.\n * @static true\n * @name timer\n * @owner Observable\n */\nexport function timer(dueTime: number | Date = 0,\n                      periodOrScheduler?: number | SchedulerLike,\n                      scheduler?: SchedulerLike): Observable<number> {\n  let period = -1;\n  if (isNumeric(periodOrScheduler)) {\n    period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n  } else if (isScheduler(periodOrScheduler)) {\n    scheduler = periodOrScheduler as any;\n  }\n\n  if (!isScheduler(scheduler)) {\n    scheduler = async;\n  }\n\n  return new Observable(subscriber => {\n    const due = isNumeric(dueTime)\n      ? (dueTime as number)\n      : (+dueTime - scheduler.now());\n\n    return scheduler.schedule(dispatch, due, {\n      index: 0, period, subscriber\n    });\n  });\n}\n\ninterface TimerState {\n  index: number;\n  period: number;\n  subscriber: Subscriber<number>;\n}\n\nfunction dispatch(this: SchedulerAction<TimerState>, state: TimerState) {\n  const { index, period, subscriber } = state;\n  subscriber.next(index);\n\n  if (subscriber.closed) {\n    return;\n  } else if (period === -1) {\n    return subscriber.complete();\n  }\n\n  state.index = index + 1;\n  this.schedule(state, period);\n}\n"],"mappings":"AAAA;AAEA,SAASA,UAAO,QAAM,eAAoB;AAC1C,SAASC,KAAA,QAAW,oBAAM;AAC1B,SAASC,SAAA,QAAa,mBAAM;AAqD5B,SAAMC,WAAU,QAAM,qBAC0C;OAD1C,SAAAC,MAAAC,OAAA,EAAAC,iBAA0B,EAAAC,SAAA;EAG9C,IAAIF,OAAM,KAAM;IACZA,OAAA,GAAU;;MAEbG,MAAA;eAAU,CAAAF,iBAAY;IACrBE,MAAA,GAASC,MAAG,CAAAH,iBAAyB,cAAAG,MAAA,CAAAH,iBAAA;GACtC,MAEI,IAAAH,WAAY,CAAAG,iBAAY;IAC3BC,SAAS,GAAGD,iBAAM;;EAGpB,KAAAH,WAAW,CAAAI,SAAW;IACpBA,SAAS,GAAGN,KAAA;;aAEPD,UAAQ,CAAG,UAAUU,UAAO;IAEjC,IAAAC,GAAO,GAAAT,SAAU,CAAAG,OAAS,IACxBA,OAAQ,GACP,CAAAA,OAAA,GAAAE,SAAA,CAAAK,GAAA;IACF,OAAAL,SAAA,CAAAM,QAAA,CAAAC,QAAA,EAAAH,GAAA;MACJI,KAAA;MAAAP,MAAA,EAAAA,MAAA;MAAAE,UAAA,EAAAA;IAQD,CAAS;EACC;;SAGJI,SAAUE,KAAC,EAAM;MACnBD,KAAA,GAAOC,KAAA,CAAAD,KAAA;IAAAP,MAAA,GAAAQ,KAAA,CAAAR,MAAA;IAAAE,UAAA,GAAAM,KAAA,CAAAN,UAAA;YACR,CAAAO,IAAA,CAAAF,KAAA;gBAAU,CAAMG,MAAM,EAAC;IACtB;GACD,MAEI,IAACV,MAAQ,KAAK,EAAG,EAAE;IACpB,OAACE,UAAgB,CAAAS,QAAQ;EAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}