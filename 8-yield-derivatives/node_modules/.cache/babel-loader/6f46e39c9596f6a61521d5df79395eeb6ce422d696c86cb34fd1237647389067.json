{"ast":null,"code":"/**\n * An API for getting cryptographically-secure random bytes. The bytes are\n * generated using the Fortuna algorithm devised by Bruce Schneier and\n * Niels Ferguson.\n *\n * Getting strong random bytes is not yet easy to do in javascript. The only\n * truish random entropy that can be collected is from the mouse, keyboard, or\n * from timing with respect to page loads, etc. This generator makes a poor\n * attempt at providing random bytes when those sources haven't yet provided\n * enough entropy to initially seed or to reseed the PRNG.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2009-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./aes');\nrequire('./sha256');\nrequire('./prng');\nrequire('./util');\n(function () {\n  // forge.random already defined\n  if (forge.random && forge.random.getBytes) {\n    module.exports = forge.random;\n    return;\n  }\n  (function (jQuery) {\n    // the default prng plugin, uses AES-128\n    var prng_aes = {};\n    var _prng_aes_output = new Array(4);\n    var _prng_aes_buffer = forge.util.createBuffer();\n    prng_aes.formatKey = function (key) {\n      // convert the key into 32-bit integers\n      var tmp = forge.util.createBuffer(key);\n      key = new Array(4);\n      key[0] = tmp.getInt32();\n      key[1] = tmp.getInt32();\n      key[2] = tmp.getInt32();\n      key[3] = tmp.getInt32();\n\n      // return the expanded key\n      return forge.aes._expandKey(key, false);\n    };\n    prng_aes.formatSeed = function (seed) {\n      // convert seed into 32-bit integers\n      var tmp = forge.util.createBuffer(seed);\n      seed = new Array(4);\n      seed[0] = tmp.getInt32();\n      seed[1] = tmp.getInt32();\n      seed[2] = tmp.getInt32();\n      seed[3] = tmp.getInt32();\n      return seed;\n    };\n    prng_aes.cipher = function (key, seed) {\n      forge.aes._updateBlock(key, seed, _prng_aes_output, false);\n      _prng_aes_buffer.putInt32(_prng_aes_output[0]);\n      _prng_aes_buffer.putInt32(_prng_aes_output[1]);\n      _prng_aes_buffer.putInt32(_prng_aes_output[2]);\n      _prng_aes_buffer.putInt32(_prng_aes_output[3]);\n      return _prng_aes_buffer.getBytes();\n    };\n    prng_aes.increment = function (seed) {\n      // FIXME: do we care about carry or signed issues?\n      ++seed[3];\n      return seed;\n    };\n    prng_aes.md = forge.md.sha256;\n\n    /**\n     * Creates a new PRNG.\n     */\n    function spawnPrng() {\n      var ctx = forge.prng.create(prng_aes);\n\n      /**\n       * Gets random bytes. If a native secure crypto API is unavailable, this\n       * method tries to make the bytes more unpredictable by drawing from data that\n       * can be collected from the user of the browser, eg: mouse movement.\n       *\n       * If a callback is given, this method will be called asynchronously.\n       *\n       * @param count the number of random bytes to get.\n       * @param [callback(err, bytes)] called once the operation completes.\n       *\n       * @return the random bytes in a string.\n       */\n      ctx.getBytes = function (count, callback) {\n        return ctx.generate(count, callback);\n      };\n\n      /**\n       * Gets random bytes asynchronously. If a native secure crypto API is\n       * unavailable, this method tries to make the bytes more unpredictable by\n       * drawing from data that can be collected from the user of the browser,\n       * eg: mouse movement.\n       *\n       * @param count the number of random bytes to get.\n       *\n       * @return the random bytes in a string.\n       */\n      ctx.getBytesSync = function (count) {\n        return ctx.generate(count);\n      };\n      return ctx;\n    }\n\n    // create default prng context\n    var _ctx = spawnPrng();\n\n    // add other sources of entropy only if window.crypto.getRandomValues is not\n    // available -- otherwise this source will be automatically used by the prng\n    var getRandomValues = null;\n    var globalScope = forge.util.globalScope;\n    var _crypto = globalScope.crypto || globalScope.msCrypto;\n    if (_crypto && _crypto.getRandomValues) {\n      getRandomValues = function (arr) {\n        return _crypto.getRandomValues(arr);\n      };\n    }\n    if (forge.options.usePureJavaScript || !forge.util.isNodejs && !getRandomValues) {\n      // if this is a web worker, do not use weak entropy, instead register to\n      // receive strong entropy asynchronously from the main thread\n      if (typeof window === 'undefined' || window.document === undefined) {\n        // FIXME:\n      }\n\n      // get load time entropy\n      _ctx.collectInt(+new Date(), 32);\n\n      // add some entropy from navigator object\n      if (typeof navigator !== 'undefined') {\n        var _navBytes = '';\n        for (var key in navigator) {\n          try {\n            if (typeof navigator[key] == 'string') {\n              _navBytes += navigator[key];\n            }\n          } catch (e) {\n            /* Some navigator keys might not be accessible, e.g. the geolocation\n              attribute throws an exception if touched in Mozilla chrome://\n              context.\n               Silently ignore this and just don't use this as a source of\n              entropy. */\n          }\n        }\n        _ctx.collect(_navBytes);\n        _navBytes = null;\n      }\n\n      // add mouse and keyboard collectors if jquery is available\n      if (jQuery) {\n        // set up mouse entropy capture\n        jQuery().mousemove(function (e) {\n          // add mouse coords\n          _ctx.collectInt(e.clientX, 16);\n          _ctx.collectInt(e.clientY, 16);\n        });\n\n        // set up keyboard entropy capture\n        jQuery().keypress(function (e) {\n          _ctx.collectInt(e.charCode, 8);\n        });\n      }\n    }\n\n    /* Random API */\n    if (!forge.random) {\n      forge.random = _ctx;\n    } else {\n      // extend forge.random with _ctx\n      for (var key in _ctx) {\n        forge.random[key] = _ctx[key];\n      }\n    }\n\n    // expose spawn PRNG\n    forge.random.createInstance = spawnPrng;\n    module.exports = forge.random;\n  })(typeof jQuery !== 'undefined' ? jQuery : null);\n})();","map":{"version":3,"names":["forge","require","random","getBytes","module","exports","jQuery","prng_aes","_prng_aes_output","Array","_prng_aes_buffer","util","createBuffer","formatKey","key","tmp","getInt32","aes","_expandKey","formatSeed","seed","cipher","_updateBlock","putInt32","increment","md","sha256","spawnPrng","ctx","prng","create","count","callback","generate","getBytesSync","_ctx","getRandomValues","globalScope","_crypto","crypto","msCrypto","arr","options","usePureJavaScript","isNodejs","window","document","undefined","collectInt","Date","navigator","_navBytes","e","collect","mousemove","clientX","clientY","keypress","charCode","createInstance"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/node-forge/lib/random.js"],"sourcesContent":["/**\n * An API for getting cryptographically-secure random bytes. The bytes are\n * generated using the Fortuna algorithm devised by Bruce Schneier and\n * Niels Ferguson.\n *\n * Getting strong random bytes is not yet easy to do in javascript. The only\n * truish random entropy that can be collected is from the mouse, keyboard, or\n * from timing with respect to page loads, etc. This generator makes a poor\n * attempt at providing random bytes when those sources haven't yet provided\n * enough entropy to initially seed or to reseed the PRNG.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2009-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./aes');\nrequire('./sha256');\nrequire('./prng');\nrequire('./util');\n\n(function() {\n\n// forge.random already defined\nif(forge.random && forge.random.getBytes) {\n  module.exports = forge.random;\n  return;\n}\n\n(function(jQuery) {\n\n// the default prng plugin, uses AES-128\nvar prng_aes = {};\nvar _prng_aes_output = new Array(4);\nvar _prng_aes_buffer = forge.util.createBuffer();\nprng_aes.formatKey = function(key) {\n  // convert the key into 32-bit integers\n  var tmp = forge.util.createBuffer(key);\n  key = new Array(4);\n  key[0] = tmp.getInt32();\n  key[1] = tmp.getInt32();\n  key[2] = tmp.getInt32();\n  key[3] = tmp.getInt32();\n\n  // return the expanded key\n  return forge.aes._expandKey(key, false);\n};\nprng_aes.formatSeed = function(seed) {\n  // convert seed into 32-bit integers\n  var tmp = forge.util.createBuffer(seed);\n  seed = new Array(4);\n  seed[0] = tmp.getInt32();\n  seed[1] = tmp.getInt32();\n  seed[2] = tmp.getInt32();\n  seed[3] = tmp.getInt32();\n  return seed;\n};\nprng_aes.cipher = function(key, seed) {\n  forge.aes._updateBlock(key, seed, _prng_aes_output, false);\n  _prng_aes_buffer.putInt32(_prng_aes_output[0]);\n  _prng_aes_buffer.putInt32(_prng_aes_output[1]);\n  _prng_aes_buffer.putInt32(_prng_aes_output[2]);\n  _prng_aes_buffer.putInt32(_prng_aes_output[3]);\n  return _prng_aes_buffer.getBytes();\n};\nprng_aes.increment = function(seed) {\n  // FIXME: do we care about carry or signed issues?\n  ++seed[3];\n  return seed;\n};\nprng_aes.md = forge.md.sha256;\n\n/**\n * Creates a new PRNG.\n */\nfunction spawnPrng() {\n  var ctx = forge.prng.create(prng_aes);\n\n  /**\n   * Gets random bytes. If a native secure crypto API is unavailable, this\n   * method tries to make the bytes more unpredictable by drawing from data that\n   * can be collected from the user of the browser, eg: mouse movement.\n   *\n   * If a callback is given, this method will be called asynchronously.\n   *\n   * @param count the number of random bytes to get.\n   * @param [callback(err, bytes)] called once the operation completes.\n   *\n   * @return the random bytes in a string.\n   */\n  ctx.getBytes = function(count, callback) {\n    return ctx.generate(count, callback);\n  };\n\n  /**\n   * Gets random bytes asynchronously. If a native secure crypto API is\n   * unavailable, this method tries to make the bytes more unpredictable by\n   * drawing from data that can be collected from the user of the browser,\n   * eg: mouse movement.\n   *\n   * @param count the number of random bytes to get.\n   *\n   * @return the random bytes in a string.\n   */\n  ctx.getBytesSync = function(count) {\n    return ctx.generate(count);\n  };\n\n  return ctx;\n}\n\n// create default prng context\nvar _ctx = spawnPrng();\n\n// add other sources of entropy only if window.crypto.getRandomValues is not\n// available -- otherwise this source will be automatically used by the prng\nvar getRandomValues = null;\nvar globalScope = forge.util.globalScope;\nvar _crypto = globalScope.crypto || globalScope.msCrypto;\nif(_crypto && _crypto.getRandomValues) {\n  getRandomValues = function(arr) {\n    return _crypto.getRandomValues(arr);\n  };\n}\n\nif(forge.options.usePureJavaScript ||\n  (!forge.util.isNodejs && !getRandomValues)) {\n  // if this is a web worker, do not use weak entropy, instead register to\n  // receive strong entropy asynchronously from the main thread\n  if(typeof window === 'undefined' || window.document === undefined) {\n    // FIXME:\n  }\n\n  // get load time entropy\n  _ctx.collectInt(+new Date(), 32);\n\n  // add some entropy from navigator object\n  if(typeof(navigator) !== 'undefined') {\n    var _navBytes = '';\n    for(var key in navigator) {\n      try {\n        if(typeof(navigator[key]) == 'string') {\n          _navBytes += navigator[key];\n        }\n      } catch(e) {\n        /* Some navigator keys might not be accessible, e.g. the geolocation\n          attribute throws an exception if touched in Mozilla chrome://\n          context.\n\n          Silently ignore this and just don't use this as a source of\n          entropy. */\n      }\n    }\n    _ctx.collect(_navBytes);\n    _navBytes = null;\n  }\n\n  // add mouse and keyboard collectors if jquery is available\n  if(jQuery) {\n    // set up mouse entropy capture\n    jQuery().mousemove(function(e) {\n      // add mouse coords\n      _ctx.collectInt(e.clientX, 16);\n      _ctx.collectInt(e.clientY, 16);\n    });\n\n    // set up keyboard entropy capture\n    jQuery().keypress(function(e) {\n      _ctx.collectInt(e.charCode, 8);\n    });\n  }\n}\n\n/* Random API */\nif(!forge.random) {\n  forge.random = _ctx;\n} else {\n  // extend forge.random with _ctx\n  for(var key in _ctx) {\n    forge.random[key] = _ctx[key];\n  }\n}\n\n// expose spawn PRNG\nforge.random.createInstance = spawnPrng;\n\nmodule.exports = forge.random;\n\n})(typeof(jQuery) !== 'undefined' ? jQuery : null);\n\n})();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}