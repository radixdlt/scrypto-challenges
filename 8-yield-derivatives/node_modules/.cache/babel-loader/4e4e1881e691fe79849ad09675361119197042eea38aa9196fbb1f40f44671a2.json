{"ast":null,"code":"var isFunction = require('101/is-function');\nvar isInteger = require('101/is-integer');\nvar isObject = require('101/is-object');\nvar isString = require('101/is-string');\nvar assertType = require('./assert-type.js');\nvar isClass = require('./is-class.js');\nvar NoClass = function () {};\nvar startsWithVowel = require('./starts-with-vowel.js');\nvar classes = {\n  // primitive classes\n  string: String,\n  number: Number,\n  // extended typeof support\n  array: Array,\n  regexp: RegExp\n};\nmodule.exports = validate;\n/**\n * validate an argument\n * @param  {string} key argument name\n * @param  {*} arg  argument value\n * @param  {string|function} validator argument validator\n */\nfunction validate(key, arg, validator, _plural) {\n  if (validator === '*') {\n    return;\n  }\n  var keyStr = '\"' + key + '\"';\n  var typeStr;\n  var article;\n  var Class;\n  var errMessage;\n  var assertion;\n  if (Array.isArray(validator)) {\n    // circular require\n    return require('./multi-validate.js')(key, arg, validator);\n  } else if (isString(validator)) {\n    // validator is a string\n    typeStr = validator;\n    Class = classes[typeStr] || NoClass;\n    article = startsWithVowel(typeStr) ? 'an' : 'a';\n    errMessage = _plural ? keyStr + ' must be ' + typeStr + 's' : keyStr + ' must be ' + article + ' ' + typeStr;\n    if (typeStr === 'integer') {\n      assertion = isInteger(arg);\n    } else if (typeStr === 'object') {\n      assertion = isObject(arg);\n    } else {\n      assertion = arg instanceof Class || typeof arg === validator;\n    }\n    assertType(assertion, errMessage);\n  } else if (isClass(validator)) {\n    // validator is a class\n    typeStr = validator.name;\n    Class = validator;\n    errMessage = _plural ? keyStr + ' must be instances of \"' + typeStr + '\"' : keyStr + ' must be an instance of \"' + typeStr + '\"';\n    assertType(arg instanceof Class, errMessage);\n  } else if (isFunction(validator)) {\n    // validator is a test\n    try {\n      // test will throw an error if it fails\n      validator(arg);\n    } catch (e) {\n      e.message = keyStr += ': ' + e.message;\n      throw e;\n    }\n  } else {\n    throw new TypeError('\"validator\" must be a string, class or function');\n  }\n}","map":{"version":3,"names":["isFunction","require","isInteger","isObject","isString","assertType","isClass","NoClass","startsWithVowel","classes","string","String","number","Number","array","Array","regexp","RegExp","module","exports","validate","key","arg","validator","_plural","keyStr","typeStr","article","Class","errMessage","assertion","isArray","name","e","message","TypeError"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/assert-args/lib/validate.js"],"sourcesContent":["var isFunction = require('101/is-function')\nvar isInteger = require('101/is-integer')\nvar isObject = require('101/is-object')\nvar isString = require('101/is-string')\n\nvar assertType = require('./assert-type.js')\nvar isClass = require('./is-class.js')\nvar NoClass = function () {}\nvar startsWithVowel = require('./starts-with-vowel.js')\nvar classes = {\n  // primitive classes\n  string: String,\n  number: Number,\n  // extended typeof support\n  array: Array,\n  regexp: RegExp\n}\n\nmodule.exports = validate\n/**\n * validate an argument\n * @param  {string} key argument name\n * @param  {*} arg  argument value\n * @param  {string|function} validator argument validator\n */\nfunction validate (key, arg, validator, _plural) {\n  if (validator === '*') { return }\n\n  var keyStr = '\"' + key + '\"'\n  var typeStr\n  var article\n  var Class\n  var errMessage\n  var assertion\n\n  if (Array.isArray(validator)) {\n    // circular require\n    return require('./multi-validate.js')(key, arg, validator)\n  } else if (isString(validator)) {\n    // validator is a string\n    typeStr = validator\n    Class = classes[typeStr] || NoClass\n    article = startsWithVowel(typeStr) ? 'an' : 'a'\n    errMessage = _plural\n      ? (keyStr + ' must be ' + typeStr + 's')\n      : (keyStr + ' must be ' + article + ' ' + typeStr)\n\n    if (typeStr === 'integer') {\n      assertion = isInteger(arg)\n    } else if (typeStr === 'object') {\n      assertion = isObject(arg)\n    } else {\n      assertion = arg instanceof Class || typeof arg === validator\n    }\n\n    assertType(assertion, errMessage)\n  } else if (isClass(validator)) {\n    // validator is a class\n    typeStr = validator.name\n    Class = validator\n    errMessage = _plural\n      ? (keyStr + ' must be instances of \"' + typeStr + '\"')\n      : (keyStr + ' must be an instance of \"' + typeStr + '\"')\n    assertType(arg instanceof Class, errMessage)\n  } else if (isFunction(validator)) {\n    // validator is a test\n    try {\n      // test will throw an error if it fails\n      validator(arg)\n    } catch (e) {\n      e.message = (keyStr += ': ' + e.message)\n      throw e\n    }\n  } else {\n    throw new TypeError('\"validator\" must be a string, class or function')\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}