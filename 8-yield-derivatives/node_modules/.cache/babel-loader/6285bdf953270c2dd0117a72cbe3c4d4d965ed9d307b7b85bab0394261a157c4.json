{"ast":null,"code":"import _checkForMethod from \"./internal/_checkForMethod.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n/**\n * Creates a new list with the separator interposed between elements.\n *\n * Dispatches to the `intersperse` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} separator The element to add to the list.\n * @param {Array} list The list to be interposed.\n * @return {Array} The new list.\n * @example\n *\n *      R.intersperse('a', ['b', 'n', 'n', 's']); //=> ['b', 'a', 'n', 'a', 'n', 'a', 's']\n */\n\nvar intersperse = /*#__PURE__*/\n_curry2( /*#__PURE__*/\n_checkForMethod('intersperse', function intersperse(separator, list) {\n  var out = [];\n  var idx = 0;\n  var length = list.length;\n  while (idx < length) {\n    if (idx === length - 1) {\n      out.push(list[idx]);\n    } else {\n      out.push(list[idx], separator);\n    }\n    idx += 1;\n  }\n  return out;\n}));\nexport default intersperse;","map":{"version":3,"names":["_checkForMethod","_curry2","intersperse","separator","list","out","idx","length","push"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/ramda/es/intersperse.js"],"sourcesContent":["import _checkForMethod from \"./internal/_checkForMethod.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n/**\n * Creates a new list with the separator interposed between elements.\n *\n * Dispatches to the `intersperse` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} separator The element to add to the list.\n * @param {Array} list The list to be interposed.\n * @return {Array} The new list.\n * @example\n *\n *      R.intersperse('a', ['b', 'n', 'n', 's']); //=> ['b', 'a', 'n', 'a', 'n', 'a', 's']\n */\n\nvar intersperse =\n/*#__PURE__*/\n_curry2(\n/*#__PURE__*/\n_checkForMethod('intersperse', function intersperse(separator, list) {\n  var out = [];\n  var idx = 0;\n  var length = list.length;\n\n  while (idx < length) {\n    if (idx === length - 1) {\n      out.push(list[idx]);\n    } else {\n      out.push(list[idx], separator);\n    }\n\n    idx += 1;\n  }\n\n  return out;\n}));\n\nexport default intersperse;"],"mappings":"AAAA,OAAOA,eAAe,MAAM,+BAA+B;AAC3D,OAAOC,OAAO,MAAM,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,WAAW,GACf;AACAD,OAAO,EACP;AACAD,eAAe,CAAC,aAAa,EAAE,SAASE,WAAWA,CAACC,SAAS,EAAEC,IAAI,EAAE;EACnE,IAAIC,GAAG,GAAG,EAAE;EACZ,IAAIC,GAAG,GAAG,CAAC;EACX,IAAIC,MAAM,GAAGH,IAAI,CAACG,MAAM;EAExB,OAAOD,GAAG,GAAGC,MAAM,EAAE;IACnB,IAAID,GAAG,KAAKC,MAAM,GAAG,CAAC,EAAE;MACtBF,GAAG,CAACG,IAAI,CAACJ,IAAI,CAACE,GAAG,CAAC,CAAC;IACrB,CAAC,MAAM;MACLD,GAAG,CAACG,IAAI,CAACJ,IAAI,CAACE,GAAG,CAAC,EAAEH,SAAS,CAAC;IAChC;IAEAG,GAAG,IAAI,CAAC;EACV;EAEA,OAAOD,GAAG;AACZ,CAAC,CAAC,CAAC;AAEH,eAAeH,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}