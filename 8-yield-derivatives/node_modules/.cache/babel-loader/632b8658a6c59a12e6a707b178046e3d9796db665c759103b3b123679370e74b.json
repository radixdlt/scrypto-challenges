{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function skip(count) {\n  return function (source) {\n    return source.lift(new SkipOperator(count));\n  };\n}\nvar SkipOperator = /*@__PURE__*/function () {\n  function SkipOperator(total) {\n    this.total = total;\n  }\n  SkipOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  };\n  return SkipOperator;\n}();\nvar SkipSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SkipSubscriber, _super);\n  function SkipSubscriber(destination, total) {\n    var _this = _super.call(this, destination) || this;\n    _this.total = total;\n    _this.count = 0;\n    return _this;\n  }\n  SkipSubscriber.prototype._next = function (x) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  };\n  return SkipSubscriber;\n}(Subscriber);","map":{"version":3,"names":["tslib_1","Subscriber","skip","count","source","lift","SkipOperator","total","prototype","call","subscriber","subscribe","SkipSubscriber","_super","__extends","destination","_this","_next","x","next"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/skip.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * ![](skip.png)\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n"],"mappings":";AACA,OAAO,KAAEA,OAAU,MAAE,OAAM;AAe3B,SAAMC,UAAU,QAAqB;OACnC,SAAOC,KAACC,KAAA,EAAqB;EAC9B,iBAAAC,MAAA;IAAA,OAAAA,MAAA,CAAAC,IAAA,KAAAC,YAAA,CAAAH,KAAA;EAAA;AAED;IACEG,YAAA,gBAAiC;WAAbA,aAAKC,KAAQ;IAChC,KAAAA,KAAA,GAAAA,KAAA;EAED;cACS,CAAAC,SAAO,CAAAC,IAAS,GAAC,UAAIC,UAAe,EAAAN,MAAU,EAAE;IACxD,OAAAA,MAAA,CAAAO,SAAA,KAAAC,cAAA,CAAAF,UAAA,OAAAH,KAAA;EACH;EAPA,OAOCD,YAAA;AAOD;IAAgCM,cAAA,0BAAaC,MAAA;EAG3Cb,OAAA,CAAAc,SAAA,CAAAF,cAAY,EAAAC,MAAoC;WAAhDD,cACEA,CAAAG,WAAM,EAAAR,KAAA;IADwC,IAAAS,KAAA,GAAKH,MAAL,CAAKJ,IAAQ,OAAAM,WAAA;IAF7DC,KAAA,CAAAT,KAAK,GAAWA,KAAE;;IAIjB,OAAAS,KAAA;EAES;gBACE,CAACR,SAAQ,CAAAS,KAAK,GAAK,UAAEC,CAAA;QAC7B,MAAK,CAAAf,KAAA,OAAY,CAAAI,KAAQ;MAC1B,KAAAQ,WAAA,CAAAI,IAAA,CAAAD,CAAA;IACF;EACH;EAZgC,OAAAN,cAY/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}