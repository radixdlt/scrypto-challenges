{"ast":null,"code":"/**\n * Javascript implementation of mask generation function MGF1.\n *\n * @author Stefan Siegl\n * @author Dave Longley\n *\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n * Copyright (c) 2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\nforge.mgf = forge.mgf || {};\nvar mgf1 = module.exports = forge.mgf.mgf1 = forge.mgf1 = forge.mgf1 || {};\n\n/**\n * Creates a MGF1 mask generation function object.\n *\n * @param md the message digest API to use (eg: forge.md.sha1.create()).\n *\n * @return a mask generation function object.\n */\nmgf1.create = function (md) {\n  var mgf = {\n    /**\n     * Generate mask of specified length.\n     *\n     * @param {String} seed The seed for mask generation.\n     * @param maskLen Number of bytes to generate.\n     * @return {String} The generated mask.\n     */\n    generate: function (seed, maskLen) {\n      /* 2. Let T be the empty octet string. */\n      var t = new forge.util.ByteBuffer();\n\n      /* 3. For counter from 0 to ceil(maskLen / hLen), do the following: */\n      var len = Math.ceil(maskLen / md.digestLength);\n      for (var i = 0; i < len; i++) {\n        /* a. Convert counter to an octet string C of length 4 octets */\n        var c = new forge.util.ByteBuffer();\n        c.putInt32(i);\n\n        /* b. Concatenate the hash of the seed mgfSeed and C to the octet\n         * string T: */\n        md.start();\n        md.update(seed + c.getBytes());\n        t.putBuffer(md.digest());\n      }\n\n      /* Output the leading maskLen octets of T as the octet string mask. */\n      t.truncate(t.length() - maskLen);\n      return t.getBytes();\n    }\n  };\n  return mgf;\n};","map":{"version":3,"names":["forge","require","mgf","mgf1","module","exports","create","md","generate","seed","maskLen","t","util","ByteBuffer","len","Math","ceil","digestLength","i","c","putInt32","start","update","getBytes","putBuffer","digest","truncate","length"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/node-forge/lib/mgf1.js"],"sourcesContent":["/**\n * Javascript implementation of mask generation function MGF1.\n *\n * @author Stefan Siegl\n * @author Dave Longley\n *\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n * Copyright (c) 2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\n\nforge.mgf = forge.mgf || {};\nvar mgf1 = module.exports = forge.mgf.mgf1 = forge.mgf1 = forge.mgf1 || {};\n\n/**\n * Creates a MGF1 mask generation function object.\n *\n * @param md the message digest API to use (eg: forge.md.sha1.create()).\n *\n * @return a mask generation function object.\n */\nmgf1.create = function(md) {\n  var mgf = {\n    /**\n     * Generate mask of specified length.\n     *\n     * @param {String} seed The seed for mask generation.\n     * @param maskLen Number of bytes to generate.\n     * @return {String} The generated mask.\n     */\n    generate: function(seed, maskLen) {\n      /* 2. Let T be the empty octet string. */\n      var t = new forge.util.ByteBuffer();\n\n      /* 3. For counter from 0 to ceil(maskLen / hLen), do the following: */\n      var len = Math.ceil(maskLen / md.digestLength);\n      for(var i = 0; i < len; i++) {\n        /* a. Convert counter to an octet string C of length 4 octets */\n        var c = new forge.util.ByteBuffer();\n        c.putInt32(i);\n\n        /* b. Concatenate the hash of the seed mgfSeed and C to the octet\n         * string T: */\n        md.start();\n        md.update(seed + c.getBytes());\n        t.putBuffer(md.digest());\n      }\n\n      /* Output the leading maskLen octets of T as the octet string mask. */\n      t.truncate(t.length() - maskLen);\n      return t.getBytes();\n    }\n  };\n\n  return mgf;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC9BA,OAAO,CAAC,QAAQ,CAAC;AAEjBD,KAAK,CAACE,GAAG,GAAGF,KAAK,CAACE,GAAG,IAAI,CAAC,CAAC;AAC3B,IAAIC,IAAI,GAAGC,MAAM,CAACC,OAAO,GAAGL,KAAK,CAACE,GAAG,CAACC,IAAI,GAAGH,KAAK,CAACG,IAAI,GAAGH,KAAK,CAACG,IAAI,IAAI,CAAC,CAAC;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,IAAI,CAACG,MAAM,GAAG,UAASC,EAAE,EAAE;EACzB,IAAIL,GAAG,GAAG;IACR;AACJ;AACA;AACA;AACA;AACA;AACA;IACIM,QAAQ,EAAE,SAAAA,CAASC,IAAI,EAAEC,OAAO,EAAE;MAChC;MACA,IAAIC,CAAC,GAAG,IAAIX,KAAK,CAACY,IAAI,CAACC,UAAU,CAAC,CAAC;;MAEnC;MACA,IAAIC,GAAG,GAAGC,IAAI,CAACC,IAAI,CAACN,OAAO,GAAGH,EAAE,CAACU,YAAY,CAAC;MAC9C,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,GAAG,EAAEI,CAAC,EAAE,EAAE;QAC3B;QACA,IAAIC,CAAC,GAAG,IAAInB,KAAK,CAACY,IAAI,CAACC,UAAU,CAAC,CAAC;QACnCM,CAAC,CAACC,QAAQ,CAACF,CAAC,CAAC;;QAEb;AACR;QACQX,EAAE,CAACc,KAAK,CAAC,CAAC;QACVd,EAAE,CAACe,MAAM,CAACb,IAAI,GAAGU,CAAC,CAACI,QAAQ,CAAC,CAAC,CAAC;QAC9BZ,CAAC,CAACa,SAAS,CAACjB,EAAE,CAACkB,MAAM,CAAC,CAAC,CAAC;MAC1B;;MAEA;MACAd,CAAC,CAACe,QAAQ,CAACf,CAAC,CAACgB,MAAM,CAAC,CAAC,GAAGjB,OAAO,CAAC;MAChC,OAAOC,CAAC,CAACY,QAAQ,CAAC,CAAC;IACrB;EACF,CAAC;EAED,OAAOrB,GAAG;AACZ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}