{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SealedMessage = exports.__validateNonce = exports.__validateTag = void 0;\nconst neverthrow_1 = require(\"neverthrow\");\nconst util_1 = require(\"@radixdlt/util\");\nconst symmetric_encryption_1 = require(\"../symmetric-encryption\");\nconst utils_1 = require(\"../utils\");\nconst elliptic_curve_1 = require(\"../elliptic-curve\");\nconst create = input => (0, neverthrow_1.combine)([(0, exports.__validateNonce)(input.nonce), (0, exports.__validateTag)(input.authTag)]).map(_ => Object.assign(Object.assign({}, input), {\n  combined: () => Buffer.concat([input.ephemeralPublicKey.asData({\n    compressed: true\n  }), input.nonce, input.authTag, input.ciphertext])\n}));\nconst sealedMessageNonceLength = symmetric_encryption_1.AES_GCM.nonceLength;\nconst sealedMessageAuthTagLength = symmetric_encryption_1.AES_GCM.tagLength;\nexports.__validateTag = utils_1.validateLength.bind(null, sealedMessageAuthTagLength, 'auth tag');\nexports.__validateNonce = utils_1.validateLength.bind(null, sealedMessageNonceLength, 'nonce');\nconst sealedMessageFromBuffer = buffer => {\n  const sealedMessageLength = buffer.length;\n  const lengthOfCiphertext = sealedMessageLength - elliptic_curve_1.PublicKey.compressedByteCount - sealedMessageNonceLength - sealedMessageAuthTagLength;\n  if (lengthOfCiphertext <= 0) return (0, neverthrow_1.err)(new Error('Ciphertext cannot be empty'));\n  const readNextBuffer = util_1.readBuffer.bind(null, buffer)();\n  return (0, neverthrow_1.combine)([readNextBuffer(elliptic_curve_1.PublicKey.compressedByteCount).andThen(elliptic_curve_1.PublicKey.fromBuffer), readNextBuffer(sealedMessageNonceLength), readNextBuffer(sealedMessageAuthTagLength), readNextBuffer(lengthOfCiphertext)]).andThen(resultList => {\n    const ephemeralPublicKey = resultList[0];\n    const nonce = resultList[1];\n    const authTag = resultList[2];\n    const ciphertext = resultList[3];\n    return create({\n      ephemeralPublicKey,\n      nonce,\n      authTag,\n      ciphertext\n    });\n  });\n};\nconst sealedMsgFromAESSealedBox = (aesSealedBox, ephemeralPublicKey) => create(Object.assign(Object.assign({}, aesSealedBox), {\n  ephemeralPublicKey\n}));\nexports.SealedMessage = {\n  nonceByteCount: sealedMessageNonceLength,\n  authTagByteCount: sealedMessageAuthTagLength,\n  create,\n  fromAESSealedBox: sealedMsgFromAESSealedBox,\n  fromBuffer: sealedMessageFromBuffer\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","SealedMessage","__validateNonce","__validateTag","neverthrow_1","require","util_1","symmetric_encryption_1","utils_1","elliptic_curve_1","create","input","combine","nonce","authTag","map","_","assign","combined","Buffer","concat","ephemeralPublicKey","asData","compressed","ciphertext","sealedMessageNonceLength","AES_GCM","nonceLength","sealedMessageAuthTagLength","tagLength","validateLength","bind","sealedMessageFromBuffer","buffer","sealedMessageLength","length","lengthOfCiphertext","PublicKey","compressedByteCount","err","Error","readNextBuffer","readBuffer","andThen","fromBuffer","resultList","sealedMsgFromAESSealedBox","aesSealedBox","nonceByteCount","authTagByteCount","fromAESSealedBox"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/crypto/dist/encryption/sealedMessage.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SealedMessage = exports.__validateNonce = exports.__validateTag = void 0;\nconst neverthrow_1 = require(\"neverthrow\");\nconst util_1 = require(\"@radixdlt/util\");\nconst symmetric_encryption_1 = require(\"../symmetric-encryption\");\nconst utils_1 = require(\"../utils\");\nconst elliptic_curve_1 = require(\"../elliptic-curve\");\nconst create = (input) => (0, neverthrow_1.combine)([(0, exports.__validateNonce)(input.nonce), (0, exports.__validateTag)(input.authTag)]).map(_ => (Object.assign(Object.assign({}, input), { combined: () => Buffer.concat([\n        input.ephemeralPublicKey.asData({ compressed: true }),\n        input.nonce,\n        input.authTag,\n        input.ciphertext,\n    ]) })));\nconst sealedMessageNonceLength = symmetric_encryption_1.AES_GCM.nonceLength;\nconst sealedMessageAuthTagLength = symmetric_encryption_1.AES_GCM.tagLength;\nexports.__validateTag = utils_1.validateLength.bind(null, sealedMessageAuthTagLength, 'auth tag');\nexports.__validateNonce = utils_1.validateLength.bind(null, sealedMessageNonceLength, 'nonce');\nconst sealedMessageFromBuffer = (buffer) => {\n    const sealedMessageLength = buffer.length;\n    const lengthOfCiphertext = sealedMessageLength -\n        elliptic_curve_1.PublicKey.compressedByteCount -\n        sealedMessageNonceLength -\n        sealedMessageAuthTagLength;\n    if (lengthOfCiphertext <= 0)\n        return (0, neverthrow_1.err)(new Error('Ciphertext cannot be empty'));\n    const readNextBuffer = util_1.readBuffer.bind(null, buffer)();\n    return (0, neverthrow_1.combine)([\n        readNextBuffer(elliptic_curve_1.PublicKey.compressedByteCount).andThen(elliptic_curve_1.PublicKey.fromBuffer),\n        readNextBuffer(sealedMessageNonceLength),\n        readNextBuffer(sealedMessageAuthTagLength),\n        readNextBuffer(lengthOfCiphertext),\n    ]).andThen(resultList => {\n        const ephemeralPublicKey = resultList[0];\n        const nonce = resultList[1];\n        const authTag = resultList[2];\n        const ciphertext = resultList[3];\n        return create({\n            ephemeralPublicKey,\n            nonce,\n            authTag,\n            ciphertext,\n        });\n    });\n};\nconst sealedMsgFromAESSealedBox = (aesSealedBox, ephemeralPublicKey) => create(Object.assign(Object.assign({}, aesSealedBox), { ephemeralPublicKey }));\nexports.SealedMessage = {\n    nonceByteCount: sealedMessageNonceLength,\n    authTagByteCount: sealedMessageAuthTagLength,\n    create,\n    fromAESSealedBox: sealedMsgFromAESSealedBox,\n    fromBuffer: sealedMessageFromBuffer,\n};\n//# sourceMappingURL=sealedMessage.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}