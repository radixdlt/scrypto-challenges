{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar rxjs_1 = require(\"rxjs\");\nvar internal_compatibility_1 = require(\"rxjs/internal-compatibility\");\nvar operators_1 = require(\"rxjs/operators\");\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=asyncScheduler] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nfunction bufferTime(bufferTimeSpan) {\n  var length = arguments.length;\n  var scheduler = rxjs_1.asyncScheduler;\n  if (internal_compatibility_1.isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n  var bufferCreationInterval = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n  var maxBufferSize = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n  return operators_1.bufferTime(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this);\n}\nexports.bufferTime = bufferTime;","map":{"version":3,"names":["rxjs_1","require","internal_compatibility_1","operators_1","bufferTime","bufferTimeSpan","length","arguments","scheduler","asyncScheduler","isScheduler","bufferCreationInterval","maxBufferSize","Number","POSITIVE_INFINITY","exports"],"sources":["../src/compat/operator/bufferTime.ts"],"sourcesContent":[null],"mappings":";;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,wBAAA,GAAAD,OAAA;AACA,IAAAE,WAAA,GAAAF,OAAA;AAMA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,SAAgBG,UAAUA,CAAyBC,cAAsB;EACvE,IAAIC,MAAM,GAAWC,SAAS,CAACD,MAAM;EAErC,IAAIE,SAAS,GAAkBR,MAAA,CAAAS,cAAc;EAC7C,IAAIP,wBAAA,CAAAQ,WAAW,CAACH,SAAS,CAACA,SAAS,CAACD,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;IAChDE,SAAS,GAAGD,SAAS,CAACA,SAAS,CAACD,MAAM,GAAG,CAAC,CAAC;IAC3CA,MAAM,EAAE;;EAGV,IAAIK,sBAAsB,GAAW,IAAI;EACzC,IAAIL,MAAM,IAAI,CAAC,EAAE;IACfK,sBAAsB,GAAGJ,SAAS,CAAC,CAAC,CAAC;;EAGvC,IAAIK,aAAa,GAAWC,MAAM,CAACC,iBAAiB;EACpD,IAAIR,MAAM,IAAI,CAAC,EAAE;IACfM,aAAa,GAAGL,SAAS,CAAC,CAAC,CAAC;;EAG9B,OAAOJ,WAAA,CAAAC,UAAW,CAACC,cAAc,EAAEM,sBAAsB,EAAEC,aAAa,EAAEJ,SAAS,CAAC,CAAC,IAAI,CAAoB;AAC/G;AApBAO,OAAA,CAAAX,UAAA,GAAAA,UAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}