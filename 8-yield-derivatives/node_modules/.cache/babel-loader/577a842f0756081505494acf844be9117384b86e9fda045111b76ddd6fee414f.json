{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar operators_1 = require(\"rxjs/operators\");\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nfunction retryWhen(notifier) {\n  return operators_1.retryWhen(notifier)(this);\n}\nexports.retryWhen = retryWhen;","map":{"version":3,"names":["operators_1","require","retryWhen","notifier","exports"],"sources":["../src/compat/operator/retryWhen.ts"],"sourcesContent":[null],"mappings":";;;;;AACA,IAAAA,WAAA,GAAAC,OAAA;AACA;;;;;;;;;;;;;;AAcA,SAAgBC,SAASA,CAAyBC,QAAsD;EACtG,OAAOH,WAAA,CAAAE,SAAW,CAACC,QAAQ,CAAC,CAAC,IAAI,CAAkB;AACrD;AAFAC,OAAA,CAAAF,SAAA,GAAAA,SAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}