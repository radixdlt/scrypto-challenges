{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function expand(project, concurrent, scheduler) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n  return function (source) {\n    return source.lift(new ExpandOperator(project, concurrent, scheduler));\n  };\n}\nvar ExpandOperator = /*@__PURE__*/function () {\n  function ExpandOperator(project, concurrent, scheduler) {\n    this.project = project;\n    this.concurrent = concurrent;\n    this.scheduler = scheduler;\n  }\n  ExpandOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  };\n  return ExpandOperator;\n}();\nexport { ExpandOperator };\nvar ExpandSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ExpandSubscriber, _super);\n  function ExpandSubscriber(destination, project, concurrent, scheduler) {\n    var _this = _super.call(this, destination) || this;\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.scheduler = scheduler;\n    _this.index = 0;\n    _this.active = 0;\n    _this.hasCompleted = false;\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      _this.buffer = [];\n    }\n    return _this;\n  }\n  ExpandSubscriber.dispatch = function (arg) {\n    var subscriber = arg.subscriber,\n      result = arg.result,\n      value = arg.value,\n      index = arg.index;\n    subscriber.subscribeToProjection(result, value, index);\n  };\n  ExpandSubscriber.prototype._next = function (value) {\n    var destination = this.destination;\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n    var index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      try {\n        var project = this.project;\n        var result = project(value, index);\n        if (!this.scheduler) {\n          this.subscribeToProjection(result, value, index);\n        } else {\n          var state = {\n            subscriber: this,\n            result: result,\n            value: value,\n            index: index\n          };\n          var destination_1 = this.destination;\n          destination_1.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n        }\n      } catch (e) {\n        destination.error(e);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  };\n  ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n    this.active++;\n    var destination = this.destination;\n    destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));\n  };\n  ExpandSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  };\n  ExpandSubscriber.prototype.notifyNext = function (innerValue) {\n    this._next(innerValue);\n  };\n  ExpandSubscriber.prototype.notifyComplete = function () {\n    var buffer = this.buffer;\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  };\n  return ExpandSubscriber;\n}(SimpleOuterSubscriber);\nexport { ExpandSubscriber };","map":{"version":3,"names":["tslib_1","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","expand","project","concurrent","scheduler","Number","POSITIVE_INFINITY","source","lift","ExpandOperator","prototype","call","subscriber","subscribe","ExpandSubscriber","_super","__extends","destination","_this","index","active","hasCompleted","buffer","dispatch","arg","result","value","subscribeToProjection","_next","closed","_complete","next","state","destination_1","add","schedule","e","error","push","complete","unsubscribe","notifyNext","innerValue","notifyComplete","length","shift"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/expand.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, OperatorFunction, ObservableInput, SchedulerLike } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/* tslint:disable:max-line-length */\nexport function expand<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, R>;\nexport function expand<T>(project: (value: T, index: number) => ObservableInput<T>, concurrent?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * ![](expand.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * ## Example\n * Start emitting the powers of two on every click, at most 10 of them\n * ```ts\n * import { fromEvent, of } from 'rxjs';\n * import { expand, mapTo, delay, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const powersOfTwo = clicks.pipe(\n *   mapTo(1),\n *   expand(x => of(2 * x).pipe(delay(1000))),\n *   take(10),\n * );\n * powersOfTwo.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => ObservableInput<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler?: SchedulerLike): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number,\n              private scheduler?: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: ObservableInput<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer?: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number,\n              private scheduler?: SchedulerLike) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next!(value);\n      try {\n        const { project } = this;\n        const result = project(value, index);\n        if (!this.scheduler) {\n          this.subscribeToProjection(result, value, index);\n        } else {\n          const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n          const destination = this.destination as Subscription;\n          destination.add(this.scheduler.schedule<DispatchArg<T, R>>(ExpandSubscriber.dispatch as any, 0, state));\n        }\n      } catch (e) {\n        destination.error!(e);\n      }\n    } else {\n      this.buffer!.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete!();\n    }\n    this.unsubscribe();\n  }\n\n  notifyNext(innerValue: R): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(): void {\n    const buffer = this.buffer;\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete!();\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}