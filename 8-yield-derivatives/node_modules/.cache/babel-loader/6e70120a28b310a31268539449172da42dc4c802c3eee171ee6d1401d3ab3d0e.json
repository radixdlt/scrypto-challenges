{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function mapTo(value) {\n  return function (source) {\n    return source.lift(new MapToOperator(value));\n  };\n}\nvar MapToOperator = /*@__PURE__*/function () {\n  function MapToOperator(value) {\n    this.value = value;\n  }\n  MapToOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  };\n  return MapToOperator;\n}();\nvar MapToSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(MapToSubscriber, _super);\n  function MapToSubscriber(destination, value) {\n    var _this = _super.call(this, destination) || this;\n    _this.value = value;\n    return _this;\n  }\n  MapToSubscriber.prototype._next = function (x) {\n    this.destination.next(this.value);\n  };\n  return MapToSubscriber;\n}(Subscriber);","map":{"version":3,"names":["tslib_1","Subscriber","mapTo","value","source","lift","MapToOperator","prototype","call","subscriber","subscribe","MapToSubscriber","_super","__extends","destination","_this","_next","x","next"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/mapTo.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * ![](mapTo.png)\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * ## Example\n * Map every click to the string 'Hi'\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { mapTo } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const greetings = clicks.pipe(mapTo('Hi'));\n * greetings.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n"],"mappings":";AACA,OAAO,KAAEA,OAAU,MAAE,OAAM;AAoC3B,SAAMC,UAAU,QAAoB;OAClC,SAAOC,KAACA,CAAAC,KAAqB;EAC9B,iBAAAC,MAAA;IAAA,OAAAA,MAAA,CAAAC,IAAA,KAAAC,aAAA,CAAAH,KAAA;EAAA;AAED;IAIEG,aAAA,gBAAoB;WACbA,aAAaA,CAACH,KAAA;IACpB,KAAAA,KAAA,GAAAA,KAAA;EAED;eACS,CAAAI,SAAO,CAAAC,IAAU,aAAIC,UAAgB,EAAAL,MAAU,EAAE;IACzD,OAAAA,MAAA,CAAAM,SAAA,KAAAC,eAAA,CAAAF,UAAA,OAAAN,KAAA;EACH;EAXA,OAWCG,aAAA;AAOD;IAAoCK,eAAA,0BAAaC,MAAA;EAI/CZ,OAAA,CAAAa,SAAA,CAAAF,eAAY,EAAAC,MAA4B;WAAxCD,eACEA,CAAAG,WAAM,EAAAX,KAAA,EAAW;IACjB,IAAAY,KAAK,GAAKH,MAAG,CAAKJ,IAAC,OAAAM,WAAA;;IACpB,OAAAC,KAAA;EAES;iBACH,CAAAR,SAAgB,CAACS,KAAK,aAAOC,CAAA;IACnC,KAAAH,WAAA,CAAAI,IAAA,MAAAf,KAAA;EACH;EAZoC,OAAAQ,eAYnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}