{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nvar AsapAction = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(AsapAction, _super);\n  function AsapAction(scheduler, work) {\n    var _this = _super.call(this, scheduler, work) || this;\n    _this.scheduler = scheduler;\n    _this.work = work;\n    return _this;\n  }\n  AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    if (delay !== null && delay > 0) {\n      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n    }\n    scheduler.actions.push(this);\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n  };\n  AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    if (delay !== null && delay > 0 || delay === null && this.delay > 0) {\n      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n    }\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    return undefined;\n  };\n  return AsapAction;\n}(AsyncAction);\nexport { AsapAction };","map":{"version":3,"names":["tslib_1","Immediate","AsyncAction","AsapAction","_super","__extends","scheduler","work","_this","call","prototype","requestAsyncId","id","delay","actions","push","scheduled","setImmediate","flush","bind","recycleAsyncId","length","clearImmediate","undefined"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/scheduler/AsapAction.ts"],"sourcesContent":["import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\nimport { SchedulerAction } from '../types';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n"],"mappings":";AAAA,OAAO,KAAEA,OAAS,MAAE,OAAM;AAC1B,SAASC,SAAA,QAAa,mBAAsB;AAQ5C,SAAAC,WAAA;IAAmCC,UAAA,0BAAcC,MAAA;EAE/CJ,OAAA,CAAAK,SAAA,CAAAF,UAAsB,EAAwBC,MAC2B;WADzED,UAEEA,CAAAG,SAAA,EAAAC,IAAM;IAFc,IAAAC,KAAA,GAAAJ,MAAA,CAAAK,IAAA,KAAwB,EAAAH,SAAA,EAAAC,IAAA;IACxBC,KAAA,CAAAF,SAAA,GAAmDA,SAAA;;IAExE,OAAAE,KAAA;EAES;YAAmD,CAAAE,SAAA,CAAAC,cAAA,GAAiB,UAAAL,SAAA,EAAAM,EAAA,EAAAC,KAAA;IAE5E,IAAIA,KAAK,KAAK,KAAI,GAAI;MACpBA,KAAA,GAAO;;IAGT,IAAAA,KAAS,KAAC,IAAQ,IAAIA,KAAK,GAAE;MAI7B,OAAOT,MAAU,CAAAM,SAAS,CAAAC,cAAe,CAAAF,IAAA,KAAS,EAAGH,SAAU,EAAAM,EAAA,EAAAC,KAAA,CAAY;IAG5E;IACSP,SAAA,CAAAQ,OAAA,CAAAC,IAAA;IAAmD,OAAAT,SAAA,CAAAU,SAAA,KAAAV,SAAiB,CAAAU,SAAA,GAAAf,SAAA,CAAAgB,YAAA,CAAAX,SAAA,CAAAY,KAAA,CAAAC,IAAA,CAAAb,SAAA;;YAK1E,CAAAI,SAAO,CAAAU,cAAM,aAAcd,SAAA,EAACM,EAAA,EAAAC,KAAS,EAAE;QACxCA,KAAA;MAIGA,KAAA,IAAS;;QAEXA,KAAA,KAAU,QAASA,KAAG,QAAUA,KAAA,kBAAAA,KAAA;MACjC,OAAAT,MAAA,CAAAM,SAAA,CAAAU,cAAA,CAAAX,IAAA,OAAAH,SAAA,EAAAM,EAAA,EAAAC,KAAA;IAED;IACD,IAAAP,SAAA,CAAAQ,OAAA,CAAAO,MAAA;MACHpB,SAAC,CAAAqB,cAAA,CAAAV,EAAA;MAtCkCN,SAsClC,CAAAU,SAAA,GAAAO,SAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}