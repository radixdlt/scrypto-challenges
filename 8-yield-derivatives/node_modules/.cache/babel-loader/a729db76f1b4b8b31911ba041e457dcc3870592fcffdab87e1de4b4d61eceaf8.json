{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Secp256k1 = exports.CurveForm = void 0;\nconst uint256_1 = require(\"@radixdlt/uint256\");\nconst ecPointOnCurve_1 = require(\"./ecPointOnCurve\");\nconst generator = ecPointOnCurve_1.ECPointOnCurve.fromXY({\n  x: new uint256_1.UInt256('79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', 16),\n  y: new uint256_1.UInt256('483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', 16)\n})._unsafeUnwrap();\nconst order = new uint256_1.UInt256('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141', 16);\nconst fieldSize = new uint256_1.UInt256('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F', 16);\nvar CurveForm;\n(function (CurveForm) {\n  /// Short Weierstrass (Weierstra√ü) form (`ùëÜ`), commonly used by `secp256k1`\n  CurveForm[\"SHORT_WEIERSTRASS\"] = \"ShortWeierstrass\";\n})(CurveForm = exports.CurveForm || (exports.CurveForm = {}));\n/// The curve E: `y¬≤ = x¬≥ + ax + b` over Fp\n/// `secp256k1` Also known as the `Bitcoin curve` (though used by us at Radix, Ethereum, Zilliqa)\nexports.Secp256k1 = {\n  name: 'secp256k1',\n  form: CurveForm.SHORT_WEIERSTRASS,\n  order: order,\n  fieldSize: fieldSize,\n  generator: generator\n};","map":{"version":3,"names":["uint256_1","require","ecPointOnCurve_1","generator","ECPointOnCurve","fromXY","x","UInt256","y","_unsafeUnwrap","order","fieldSize","CurveForm","exports","Secp256k1","name","form","SHORT_WEIERSTRASS"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/crypto/src/elliptic-curve/secp256k1.ts"],"sourcesContent":["import { UInt256 } from '@radixdlt/uint256'\nimport { ECPointOnCurve } from './ecPointOnCurve'\nimport { ECPointOnCurveT } from './_types'\n\nconst generator = ECPointOnCurve.fromXY({\n\tx: new UInt256(\n\t\t'79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',\n\t\t16,\n\t),\n\ty: new UInt256(\n\t\t'483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',\n\t\t16,\n\t),\n})._unsafeUnwrap()\n\nconst order = new UInt256(\n\t'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141',\n\t16,\n)\n\nconst fieldSize = new UInt256(\n\t'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F',\n\t16,\n)\n\nexport enum CurveForm {\n\t/// Short Weierstrass (Weierstra√ü) form (`ùëÜ`), commonly used by `secp256k1`\n\tSHORT_WEIERSTRASS = 'ShortWeierstrass',\n}\n\nexport type Curve = Readonly<{\n\tname: string\n\t/// Form, ShortWeierstrass, Edwards, TwistedEdwards or Hessian.\n\tform: CurveForm\n\t/// a.k.a. `n`\n\torder: UInt256\n\t/// a.k.a. `P` or `mod`\n\tfieldSize: UInt256\n\t/// a.k.a. `G`\n\tgenerator: ECPointOnCurveT\n}>\n\n/// The curve E: `y¬≤ = x¬≥ + ax + b` over Fp\n/// `secp256k1` Also known as the `Bitcoin curve` (though used by us at Radix, Ethereum, Zilliqa)\nexport const Secp256k1: Curve = {\n\tname: 'secp256k1',\n\tform: CurveForm.SHORT_WEIERSTRASS,\n\torder: order,\n\tfieldSize: fieldSize,\n\tgenerator: generator,\n}\n"],"mappings":";;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AACA,MAAAC,gBAAA,GAAAD,OAAA;AAGA,MAAME,SAAS,GAAGD,gBAAA,CAAAE,cAAc,CAACC,MAAM,CAAC;EACvCC,CAAC,EAAE,IAAIN,SAAA,CAAAO,OAAO,CACb,kEAAkE,EAClE,EAAE,CACF;EACDC,CAAC,EAAE,IAAIR,SAAA,CAAAO,OAAO,CACb,kEAAkE,EAClE,EAAE;CAEH,CAAC,CAACE,aAAa,EAAE;AAElB,MAAMC,KAAK,GAAG,IAAIV,SAAA,CAAAO,OAAO,CACxB,kEAAkE,EAClE,EAAE,CACF;AAED,MAAMI,SAAS,GAAG,IAAIX,SAAA,CAAAO,OAAO,CAC5B,kEAAkE,EAClE,EAAE,CACF;AAED,IAAYK,SAGX;AAHD,WAAYA,SAAS;EACpB;EACAA,SAAA,0CAAsC;AACvC,CAAC,EAHWA,SAAS,GAATC,OAAA,CAAAD,SAAS,KAATC,OAAA,CAAAD,SAAS;AAiBrB;AACA;AACaC,OAAA,CAAAC,SAAS,GAAU;EAC/BC,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAEJ,SAAS,CAACK,iBAAiB;EACjCP,KAAK,EAAEA,KAAK;EACZC,SAAS,EAAEA,SAAS;EACpBR,SAAS,EAAEA;CACX","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}