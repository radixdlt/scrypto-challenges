{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toPrivateKeyHex = exports.validateLength = exports.validateMinLength = exports.validateMaxLength = void 0;\nconst neverthrow_1 = require(\"neverthrow\");\nconst util_1 = require(\"@radixdlt/util\");\nconst ensureNum = num => {\n  if (!num || Number.isNaN(num)) {\n    util_1.log.error(\"Expected number but got none or got NaN: \".concat(num));\n    throw new Error('Incorrect implementation, must get a number');\n  }\n};\nconst validateMaxLength = (expectedMaxLength, name, buffer) => {\n  ensureNum(expectedMaxLength);\n  return buffer.length > expectedMaxLength ? (0, neverthrow_1.err)(new Error(\"Incorrect length of \".concat(name, \", expected max: #\").concat(expectedMaxLength, \" bytes, but got: #\").concat(buffer.length, \".\"))) : (0, neverthrow_1.ok)(buffer);\n};\nexports.validateMaxLength = validateMaxLength;\nconst validateMinLength = (expectedMinLength, name, buffer) => {\n  ensureNum(expectedMinLength);\n  return buffer.length < expectedMinLength ? (0, neverthrow_1.err)(new Error(\"Incorrect length of \".concat(name, \", expected min: #\").concat(expectedMinLength, \" bytes, but got: #\").concat(buffer.length, \".\"))) : (0, neverthrow_1.ok)(buffer);\n};\nexports.validateMinLength = validateMinLength;\nconst validateLength = (expectedLength, name, buffer) => {\n  ensureNum(expectedLength);\n  return buffer.length !== expectedLength ? (0, neverthrow_1.err)(new Error(\"Incorrect length of \".concat(name, \", expected: #\").concat(expectedLength, \" bytes, but got: #\").concat(buffer.length, \".\"))) : (0, neverthrow_1.ok)(buffer);\n};\nexports.validateLength = validateLength;\nconst toPrivateKeyHex = function (scalar) {\n  return [...new Uint8Array(scalar.buffer)].reverse().map(x => x.toString(16).padStart(2, '0')).join('');\n};\nexports.toPrivateKeyHex = toPrivateKeyHex;","map":{"version":3,"names":["neverthrow_1","require","util_1","ensureNum","num","Number","isNaN","log","error","concat","Error","validateMaxLength","expectedMaxLength","name","buffer","length","err","ok","exports","validateMinLength","expectedMinLength","validateLength","expectedLength","toPrivateKeyHex","scalar","Uint8Array","reverse","map","x","toString","padStart","join"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/crypto/src/utils.ts"],"sourcesContent":["import { err, ok, Result } from 'neverthrow'\nimport { log } from '@radixdlt/util'\nimport { UInt256 } from '@radixdlt/uint256'\n\nconst ensureNum = (num: number): void => {\n\tif (!num || Number.isNaN(num)) {\n\t\tlog.error(`Expected number but got none or got NaN: ${num}`)\n\t\tthrow new Error('Incorrect implementation, must get a number')\n\t}\n}\n\nexport const validateMaxLength = (\n\texpectedMaxLength: number,\n\tname: string,\n\tbuffer: Buffer,\n): Result<Buffer, Error> => {\n\tensureNum(expectedMaxLength)\n\n\treturn buffer.length > expectedMaxLength\n\t\t? err(\n\t\t\tnew Error(\n\t\t\t\t`Incorrect length of ${name}, expected max: #${expectedMaxLength} bytes, but got: #${buffer.length}.`,\n\t\t\t),\n\t\t)\n\t\t: ok(buffer)\n}\n\nexport const validateMinLength = (\n\texpectedMinLength: number,\n\tname: string,\n\tbuffer: Buffer,\n): Result<Buffer, Error> => {\n\tensureNum(expectedMinLength)\n\treturn buffer.length < expectedMinLength\n\t\t? err(\n\t\t\tnew Error(\n\t\t\t\t`Incorrect length of ${name}, expected min: #${expectedMinLength} bytes, but got: #${buffer.length}.`,\n\t\t\t),\n\t\t)\n\t\t: ok(buffer)\n}\n\nexport const validateLength = (\n\texpectedLength: number,\n\tname: string,\n\tbuffer: Buffer,\n): Result<Buffer, Error> => {\n\tensureNum(expectedLength)\n\treturn buffer.length !== expectedLength\n\t\t? err(\n\t\t\tnew Error(\n\t\t\t\t`Incorrect length of ${name}, expected: #${expectedLength} bytes, but got: #${buffer.length}.`,\n\t\t\t),\n\t\t)\n\t\t: ok(buffer)\n}\n\nexport const toPrivateKeyHex = function (scalar: UInt256) {\n\treturn [...new Uint8Array(scalar.buffer!)]\n\t\t.reverse()\n\t\t.map(x => x.toString(16).padStart(2, '0'))\n\t\t.join('');\n}\n"],"mappings":";;;;;;AAAA,MAAAA,YAAA,GAAAC,OAAA;AACA,MAAAC,MAAA,GAAAD,OAAA;AAGA,MAAME,SAAS,GAAIC,GAAW,IAAU;EACvC,IAAI,CAACA,GAAG,IAAIC,MAAM,CAACC,KAAK,CAACF,GAAG,CAAC,EAAE;IAC9BF,MAAA,CAAAK,GAAG,CAACC,KAAK,6CAAAC,MAAA,CAA6CL,GAAG,CAAE,CAAC;IAC5D,MAAM,IAAIM,KAAK,CAAC,6CAA6C,CAAC;;AAEhE,CAAC;AAEM,MAAMC,iBAAiB,GAAGA,CAChCC,iBAAyB,EACzBC,IAAY,EACZC,MAAc,KACY;EAC1BX,SAAS,CAACS,iBAAiB,CAAC;EAE5B,OAAOE,MAAM,CAACC,MAAM,GAAGH,iBAAiB,GACrC,IAAAZ,YAAA,CAAAgB,GAAG,EACJ,IAAIN,KAAK,wBAAAD,MAAA,CACeI,IAAI,uBAAAJ,MAAA,CAAoBG,iBAAiB,wBAAAH,MAAA,CAAqBK,MAAM,CAACC,MAAM,MAAG,CACrG,CACD,GACC,IAAAf,YAAA,CAAAiB,EAAE,EAACH,MAAM,CAAC;AACd,CAAC;AAdYI,OAAA,CAAAP,iBAAiB,GAAAA,iBAAA;AAgBvB,MAAMQ,iBAAiB,GAAGA,CAChCC,iBAAyB,EACzBP,IAAY,EACZC,MAAc,KACY;EAC1BX,SAAS,CAACiB,iBAAiB,CAAC;EAC5B,OAAON,MAAM,CAACC,MAAM,GAAGK,iBAAiB,GACrC,IAAApB,YAAA,CAAAgB,GAAG,EACJ,IAAIN,KAAK,wBAAAD,MAAA,CACeI,IAAI,uBAAAJ,MAAA,CAAoBW,iBAAiB,wBAAAX,MAAA,CAAqBK,MAAM,CAACC,MAAM,MAAG,CACrG,CACD,GACC,IAAAf,YAAA,CAAAiB,EAAE,EAACH,MAAM,CAAC;AACd,CAAC;AAbYI,OAAA,CAAAC,iBAAiB,GAAAA,iBAAA;AAevB,MAAME,cAAc,GAAGA,CAC7BC,cAAsB,EACtBT,IAAY,EACZC,MAAc,KACY;EAC1BX,SAAS,CAACmB,cAAc,CAAC;EACzB,OAAOR,MAAM,CAACC,MAAM,KAAKO,cAAc,GACpC,IAAAtB,YAAA,CAAAgB,GAAG,EACJ,IAAIN,KAAK,wBAAAD,MAAA,CACeI,IAAI,mBAAAJ,MAAA,CAAgBa,cAAc,wBAAAb,MAAA,CAAqBK,MAAM,CAACC,MAAM,MAAG,CAC9F,CACD,GACC,IAAAf,YAAA,CAAAiB,EAAE,EAACH,MAAM,CAAC;AACd,CAAC;AAbYI,OAAA,CAAAG,cAAc,GAAAA,cAAA;AAepB,MAAME,eAAe,GAAG,SAAAA,CAAUC,MAAe;EACvD,OAAO,CAAC,GAAG,IAAIC,UAAU,CAACD,MAAM,CAACV,MAAO,CAAC,CAAC,CACxCY,OAAO,EAAE,CACTC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CACzCC,IAAI,CAAC,EAAE,CAAC;AACX,CAAC;AALYb,OAAA,CAAAK,eAAe,GAAAA,eAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}