{"ast":null,"code":"import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function observeOn(scheduler, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n  return operate(function (source, subscriber) {\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      return subscriber.add(scheduler.schedule(function () {\n        return subscriber.next(value);\n      }, delay));\n    }, function () {\n      return subscriber.add(scheduler.schedule(function () {\n        return subscriber.complete();\n      }, delay));\n    }, function (err) {\n      return subscriber.add(scheduler.schedule(function () {\n        return subscriber.error(err);\n      }, delay));\n    }));\n  });\n}","map":{"version":3,"names":["operate","OperatorSubscriber","observeOn","scheduler","delay","source","subscriber","subscribe","value","add","schedule","next","complete","err","error"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/rxjs/src/internal/operators/observeOn.ts"],"sourcesContent":["import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n *\n * Ensure values in subscribe are called just before browser repaint.\n *\n * ```ts\n * import { interval, animationFrameScheduler } from 'rxjs';\n * import { observeOn } from 'rxjs/operators';\n *\n * const someDiv = document.querySelector(\"#someDiv\");\n * const intervals = interval(10);                // Intervals are scheduled\n *                                                // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler),          // ...but we will observe on animationFrame\n * )                                              // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return A function that returns an Observable that emits the same\n * notifications as the source Observable, but with provided scheduler.\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => subscriber.add(scheduler.schedule(() => subscriber.next(value), delay)),\n        () => subscriber.add(scheduler.schedule(() => subscriber.complete(), delay)),\n        (err) => subscriber.add(scheduler.schedule(() => subscriber.error(err), delay))\n      )\n    );\n  });\n}\n"],"mappings":"AACA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,kBAAkB,QAAQ,sBAAsB;AAsDzD,OAAM,SAAUC,SAASA,CAAIC,SAAwB,EAAEC,KAAiB;EAAjB,IAAAA,KAAA;IAAAA,KAAA,IAAiB;EAAA;EACtE,OAAOJ,OAAO,CAAC,UAACK,MAAM,EAAEC,UAAU;IAChCD,MAAM,CAACE,SAAS,CACd,IAAIN,kBAAkB,CACpBK,UAAU,EACV,UAACE,KAAK;MAAK,OAAAF,UAAU,CAACG,GAAG,CAACN,SAAS,CAACO,QAAQ,CAAC;QAAM,OAAAJ,UAAU,CAACK,IAAI,CAACH,KAAK,CAAC;MAAtB,CAAsB,EAAEJ,KAAK,CAAC,CAAC;IAAvE,CAAuE,EAClF;MAAM,OAAAE,UAAU,CAACG,GAAG,CAACN,SAAS,CAACO,QAAQ,CAAC;QAAM,OAAAJ,UAAU,CAACM,QAAQ,EAAE;MAArB,CAAqB,EAAER,KAAK,CAAC,CAAC;IAAtE,CAAsE,EAC5E,UAACS,GAAG;MAAK,OAAAP,UAAU,CAACG,GAAG,CAACN,SAAS,CAACO,QAAQ,CAAC;QAAM,OAAAJ,UAAU,CAACQ,KAAK,CAACD,GAAG,CAAC;MAArB,CAAqB,EAAET,KAAK,CAAC,CAAC;IAAtE,CAAsE,CAChF,CACF;EACH,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}