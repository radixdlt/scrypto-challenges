{"ast":null,"code":"import { async } from '../scheduler/async';\nimport { scan } from './scan';\nimport { defer } from '../observable/defer';\nimport { map } from './map';\nexport function timeInterval(scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async;\n  }\n  return function (source) {\n    return defer(function () {\n      return source.pipe(scan(function (_a, value) {\n        var current = _a.current;\n        return {\n          value: value,\n          current: scheduler.now(),\n          last: current\n        };\n      }, {\n        current: scheduler.now(),\n        value: undefined,\n        last: undefined\n      }), map(function (_a) {\n        var current = _a.current,\n          last = _a.last,\n          value = _a.value;\n        return new TimeInterval(value, current - last);\n      }));\n    });\n  };\n}\nvar TimeInterval = function () {\n  function TimeInterval(value, interval) {\n    this.value = value;\n    this.interval = interval;\n  }\n  return TimeInterval;\n}();\nexport { TimeInterval };","map":{"version":3,"names":["async","scan","defer","map","timeInterval","scheduler","source","pipe","_a","value","current","now","last","undefined","TimeInterval","interval"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/rxjs/src/internal/operators/timeInterval.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { SchedulerLike, OperatorFunction } from '../types';\nimport { scan } from './scan';\nimport { defer } from '../observable/defer';\nimport { map } from './map';\n\n/**\n *\n * Emits an object containing the current value, and the time that has\n * passed between emitting the current value and the previous value, which is\n * calculated by using the provided `scheduler`'s `now()` method to retrieve\n * the current time at each emission, then calculating the difference. The `scheduler`\n * defaults to {@link asyncScheduler}, so by default, the `interval` will be in\n * milliseconds.\n *\n * <span class=\"informal\">Convert an Observable that emits items into one that\n * emits indications of the amount of time elapsed between those emissions.</span>\n *\n * ![](timeInterval.png)\n *\n * ## Examples\n * Emit interval between current value with the last value\n *\n * ```ts\n * const seconds = interval(1000);\n *\n * seconds.pipe(timeInterval())\n * .subscribe(\n *     value => console.log(value),\n *     err => console.log(err),\n * );\n *\n * seconds.pipe(timeout(900))\n * .subscribe(\n *     value => console.log(value),\n *     err => console.log(err),\n * );\n *\n * // NOTE: The values will never be this precise,\n * // intervals created with `interval` or `setInterval`\n * // are non-deterministic.\n *\n * // {value: 0, interval: 1000}\n * // {value: 1, interval: 1000}\n * // {value: 2, interval: 1000}\n * ```\n *\n * @param {SchedulerLike} [scheduler] Scheduler used to get the current time.\n * @return A function that returns an Observable that emits information about\n * value and interval.\n */\nexport function timeInterval<T>(scheduler: SchedulerLike = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) =>\n    defer(() => {\n      return source.pipe(\n        // TODO(benlesh): correct these typings.\n        scan(({ current }, value) => ({ value, current: scheduler.now(), last: current }), {\n          current: scheduler.now(),\n          value: undefined,\n          last: undefined,\n        } as any) as OperatorFunction<T, any>,\n        map<any, TimeInterval<T>>(({ current, last, value }) => new TimeInterval(value, current - last))\n      );\n    });\n}\n\n// TODO(benlesh): make this an interface, export the interface, but not the implemented class,\n// there's no reason users should be manually creating this type.\n\nexport class TimeInterval<T> {\n  /**\n   * @deprecated Internal implementation detail, do not construct directly. Will be made an interface in v8.\n   */\n  constructor(public value: T, public interval: number) {}\n}\n"],"mappings":"AACA,SAASA,KAAK,QAAQ,oBAAoB;AAE1C,SAASC,IAAI,QAAQ,QAAQ;AAC7B,SAASC,KAAK,QAAQ,qBAAqB;AAC3C,SAASC,GAAG,QAAQ,OAAO;AA+C3B,OAAM,SAAUC,YAAYA,CAAIC,SAAgC;EAAhC,IAAAA,SAAA;IAAAA,SAAA,GAAAL,KAAgC;EAAA;EAC9D,OAAO,UAACM,MAAqB;IAC3B,OAAAJ,KAAK,CAAC;MACJ,OAAOI,MAAM,CAACC,IAAI,CAEhBN,IAAI,CAAC,UAACO,EAAW,EAAEC,KAAK;YAAhBC,OAAO,GAAAF,EAAA,CAAAE,OAAA;QAAc,OAAC;UAAED,KAAK,EAAAA,KAAA;UAAEC,OAAO,EAAEL,SAAS,CAACM,GAAG,EAAE;UAAEC,IAAI,EAAEF;QAAO,CAAE;MAAnD,CAAoD,EAAE;QACjFA,OAAO,EAAEL,SAAS,CAACM,GAAG,EAAE;QACxBF,KAAK,EAAEI,SAAS;QAChBD,IAAI,EAAEC;OACA,CAA6B,EACrCV,GAAG,CAAuB,UAACK,EAAwB;YAAtBE,OAAO,GAAAF,EAAA,CAAAE,OAAA;UAAEE,IAAI,GAAAJ,EAAA,CAAAI,IAAA;UAAEH,KAAK,GAAAD,EAAA,CAAAC,KAAA;QAAO,WAAIK,YAAY,CAACL,KAAK,EAAEC,OAAO,GAAGE,IAAI,CAAC;MAAvC,CAAuC,CAAC,CACjG;IACH,CAAC,CAAC;EAVF,CAUE;AACN;AAKA,IAAAE,YAAA;EAIE,SAAAA,aAAmBL,KAAQ,EAASM,QAAgB;IAAjC,KAAAN,KAAK,GAALA,KAAK;IAAY,KAAAM,QAAQ,GAARA,QAAQ;EAAW;EACzD,OAAAD,YAAC;AAAD,CAAC,CALD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}