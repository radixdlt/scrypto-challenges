{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar rxjs_1 = require(\"rxjs\");\nvar typescript_map_1 = require(\"typescript-map\");\nvar decimal_js_1 = tslib_1.__importDefault(require(\"decimal.js\"));\nvar bn_js_1 = tslib_1.__importDefault(require(\"bn.js\"));\nvar __1 = require(\"../..\");\nvar atommodel_1 = require(\"../atommodel\");\nvar RadixLogger_1 = require(\"../common/RadixLogger\");\nvar RadixTokenDefinition_1 = require(\"../token/RadixTokenDefinition\");\nvar RadixTransactionBuilder = /** @class */function () {\n  function RadixTransactionBuilder() {\n    this.BNZERO = new bn_js_1.default(0);\n    this.DCZERO = new decimal_js_1.default(0);\n    this.participants = new typescript_map_1.TSMap();\n    this.particleGroups = [];\n  }\n  RadixTransactionBuilder.prototype.getSubUnitsQuantity = function (decimalQuantity) {\n    if (typeof decimalQuantity !== 'number' && typeof decimalQuantity !== 'string' && !decimal_js_1.default.isDecimal(decimalQuantity)) {\n      throw new Error('quantity is not a valid number');\n    }\n    var unitsQuantity = new decimal_js_1.default(decimalQuantity);\n    var subunitsQuantity = RadixTokenDefinition_1.RadixTokenDefinition.fromDecimalToSubunits(unitsQuantity);\n    return subunitsQuantity;\n  };\n  /**\n   * Creates transfer atom\n   * @param from Sender account, needs to have RadixAccountTransferSystem\n   * @param to Receiver account\n   * @param tokenReference TokenClassReference string\n   * @param decimalQuantity\n   * @param [message] Optional reference message\n   */\n  RadixTransactionBuilder.createTransferAtom = function (from, to, tokenReference, decimalQuantity, message) {\n    return new RadixTransactionBuilder().addTransfer(from, to, tokenReference, decimalQuantity, message);\n  };\n  /**\n   * Creates transfer atom\n   * @param from Sender account, needs to have RadixAccountTransferSystem\n   * @param to Receiver account\n   * @param tokenReferenceURI TokenClassReference string\n   * @param decimalQuantity\n   * @param [message] Optional reference message\n   */\n  RadixTransactionBuilder.prototype.addTransfer = function (from, to, tokenReference, decimalQuantity, message) {\n    var e_1, _a;\n    tokenReference = tokenReference instanceof atommodel_1.RRI ? tokenReference : atommodel_1.RRI.fromString(tokenReference);\n    var subunitsQuantity = this.getSubUnitsQuantity(decimalQuantity);\n    if (subunitsQuantity.lt(this.BNZERO)) {\n      throw new Error('Negative quantity is not allowed');\n    } else if (subunitsQuantity.eq(this.BNZERO)) {\n      throw new Error(\"Quantity 0 is not valid\");\n    }\n    var transferSytem = from.transferSystem;\n    if (subunitsQuantity.gt(transferSytem.balance[tokenReference.toString()])) {\n      throw new Error('Insufficient funds');\n    }\n    var unspentConsumables = transferSytem.getUnspentConsumables();\n    var createTransferAtomParticleGroup = new __1.RadixParticleGroup();\n    var consumerQuantity = new bn_js_1.default(0);\n    var granularity = new bn_js_1.default(1);\n    var tokenPermissions;\n    try {\n      for (var unspentConsumables_1 = tslib_1.__values(unspentConsumables), unspentConsumables_1_1 = unspentConsumables_1.next(); !unspentConsumables_1_1.done; unspentConsumables_1_1 = unspentConsumables_1.next()) {\n        var consumable = unspentConsumables_1_1.value;\n        if (!consumable.getTokenDefinitionReference().equals(tokenReference)) {\n          continue;\n        }\n        // Assumes all consumables of a token have the same granularity and permissions(enforced by core)\n        granularity = consumable.getGranularity();\n        tokenPermissions = consumable.getTokenPermissions();\n        createTransferAtomParticleGroup.particles.push(atommodel_1.RadixSpunParticle.down(consumable));\n        consumerQuantity.iadd(consumable.getAmount());\n        if (consumerQuantity.gte(subunitsQuantity)) {\n          break;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (unspentConsumables_1_1 && !unspentConsumables_1_1.done && (_a = unspentConsumables_1.return)) _a.call(unspentConsumables_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    createTransferAtomParticleGroup.particles.push(atommodel_1.RadixSpunParticle.up(new atommodel_1.RadixTransferrableTokensParticle(subunitsQuantity, granularity, to.address, Date.now(), tokenReference, tokenPermissions)));\n    // Remainder to myself\n    if (consumerQuantity.sub(subunitsQuantity).gtn(0)) {\n      createTransferAtomParticleGroup.particles.push(atommodel_1.RadixSpunParticle.up(new atommodel_1.RadixTransferrableTokensParticle(consumerQuantity.sub(subunitsQuantity), granularity, from.address, Date.now(), tokenReference, tokenPermissions)));\n    }\n    if (!subunitsQuantity.mod(granularity).eq(this.BNZERO)) {\n      throw new Error(\"This token requires that any tranferred amount is a multiple of it's granularity = \\n                \" + RadixTokenDefinition_1.RadixTokenDefinition.fromSubunitsToDecimal(granularity));\n    }\n    this.participants.set(from.getAddress(), from);\n    this.participants.set(to.getAddress(), to);\n    if (message) {\n      this.addEncryptedMessage(from, 'transfer', message, [to, from]);\n    }\n    this.particleGroups.push(createTransferAtomParticleGroup);\n    return this;\n  };\n  /**\n   * Create an atom to burn a specified amount of tokens\n   * ownerAccount must be the owner and the holder of the tokens to be burned\n   *\n   * @param  {RadixAccount} ownerAccount\n   * @param  {string|RRI} tokenReference\n   * @param  {string|number|Decimal} decimalQuantity\n   */\n  RadixTransactionBuilder.createBurnAtom = function (ownerAccount, tokenReference, decimalQuantity) {\n    return new this().burnTokens(ownerAccount, tokenReference, decimalQuantity);\n  };\n  /**\n   * Create an atom to burn a specified amount of tokens\n   * The token must be multi-issuance\n   *\n   * @param  {RadixAccount} ownerAccount must be the owner and the holder of the tokens to be burned\n   * @param  {string|RRI} tokenReference\n   * @param  {string|number|Decimal} decimalQuantity\n   */\n  RadixTransactionBuilder.prototype.burnTokens = function (ownerAccount, tokenReference, decimalQuantity) {\n    var e_2, _a;\n    tokenReference = tokenReference instanceof atommodel_1.RRI ? tokenReference : atommodel_1.RRI.fromString(tokenReference);\n    var tokenClass = ownerAccount.tokenDefinitionSystem.getTokenDefinition(tokenReference.getName());\n    var subunitsQuantity = this.getSubUnitsQuantity(decimalQuantity);\n    if (subunitsQuantity.lt(this.BNZERO)) {\n      throw new Error('Negative quantity is not allowed');\n    } else if (subunitsQuantity.eq(this.BNZERO)) {\n      throw new Error(\"Quantity 0 is not valid\");\n    }\n    var transferSytem = ownerAccount.transferSystem;\n    if (tokenClass.tokenSupplyType !== RadixTokenDefinition_1.RadixTokenSupplyType.MUTABLE) {\n      throw new Error('This token is fixed supply');\n    }\n    if (subunitsQuantity.gt(transferSytem.balance[tokenReference.toString()])) {\n      throw new Error('Insufficient funds');\n    }\n    if (!subunitsQuantity.mod(tokenClass.getGranularity()).eq(this.BNZERO)) {\n      throw new Error(\"This token requires that any tranferred amount is a multiple of it's granularity = \\n                \" + RadixTokenDefinition_1.RadixTokenDefinition.fromSubunitsToDecimal(tokenClass.getGranularity()));\n    }\n    var unspentConsumables = transferSytem.getUnspentConsumables();\n    var burnParticleGroup = new __1.RadixParticleGroup();\n    var consumerQuantity = new bn_js_1.default(0);\n    var tokenPermissions;\n    try {\n      for (var unspentConsumables_2 = tslib_1.__values(unspentConsumables), unspentConsumables_2_1 = unspentConsumables_2.next(); !unspentConsumables_2_1.done; unspentConsumables_2_1 = unspentConsumables_2.next()) {\n        var consumable = unspentConsumables_2_1.value;\n        if (!consumable.getTokenDefinitionReference().equals(tokenReference)) {\n          continue;\n        }\n        burnParticleGroup.particles.push(atommodel_1.RadixSpunParticle.down(consumable));\n        tokenPermissions = consumable.getTokenPermissions();\n        consumerQuantity.iadd(consumable.getAmount());\n        if (consumerQuantity.gte(subunitsQuantity)) {\n          break;\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (unspentConsumables_2_1 && !unspentConsumables_2_1.done && (_a = unspentConsumables_2.return)) _a.call(unspentConsumables_2);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    burnParticleGroup.particles.push(atommodel_1.RadixSpunParticle.up(new atommodel_1.RadixUnallocatedTokensParticle(subunitsQuantity, tokenClass.getGranularity(), Date.now(), tokenReference, tokenPermissions)));\n    // Remainder to myself\n    if (consumerQuantity.sub(subunitsQuantity).gtn(0)) {\n      burnParticleGroup.particles.push(atommodel_1.RadixSpunParticle.up(new atommodel_1.RadixTransferrableTokensParticle(consumerQuantity.sub(subunitsQuantity), tokenClass.getGranularity(), ownerAccount.address, Date.now(), tokenReference, tokenPermissions)));\n    }\n    this.particleGroups.push(burnParticleGroup);\n    this.participants.set(ownerAccount.getAddress(), ownerAccount);\n    return this;\n  };\n  /**\n   * Create an atom to mint a specified amount of tokens\n   * The token must be multi-issuance\n   *\n   * @param  {RadixAccount} ownerAccount must be the owner of the token\n   * @param  {string|RRI} tokenReference\n   * @param  {string|number|Decimal} decimalQuantity\n   */\n  RadixTransactionBuilder.createMintAtom = function (ownerAccount, tokenReference, decimalQuantity) {\n    return new this().mintTokens(ownerAccount, tokenReference, decimalQuantity);\n  };\n  /**\n   * Create an atom to mint a specified amount of tokens\n   * The token must be multi-issuance\n   *\n   * @param  {RadixAccount} ownerAccount must be the owner of the token\n   * @param  {string|RRI} tokenReference\n   * @param  {string|number|Decimal} decimalQuantity\n   */\n  RadixTransactionBuilder.prototype.mintTokens = function (ownerAccount, tokenReference, decimalQuantity) {\n    var e_3, _a;\n    tokenReference = tokenReference instanceof atommodel_1.RRI ? tokenReference : atommodel_1.RRI.fromString(tokenReference);\n    var tokenClass = ownerAccount.tokenDefinitionSystem.getTokenDefinition(tokenReference.getName());\n    var subunitsQuantity = this.getSubUnitsQuantity(decimalQuantity);\n    if (subunitsQuantity.lt(this.BNZERO)) {\n      throw new Error('Negative quantity is not allowed');\n    } else if (subunitsQuantity.eq(this.BNZERO)) {\n      throw new Error(\"Quantity 0 is not valid\");\n    }\n    if (tokenClass.tokenSupplyType !== RadixTokenDefinition_1.RadixTokenSupplyType.MUTABLE) {\n      throw new Error('This token is fixed supply');\n    }\n    if (subunitsQuantity.gte(tokenClass.getUnallocatedSupply())) {\n      throw new Error('Total supply would exceed 2^256');\n    }\n    if (!subunitsQuantity.mod(tokenClass.getGranularity()).eq(this.BNZERO)) {\n      throw new Error(\"This token requires that any tranferred amount is a multiple of it's granularity = \\n                \" + RadixTokenDefinition_1.RadixTokenDefinition.fromSubunitsToDecimal(tokenClass.getGranularity()));\n    }\n    this.participants.set(ownerAccount.getAddress(), ownerAccount);\n    var unallocatedTokens = tokenClass.getUnallocatedTokens();\n    var tokenPermissions = unallocatedTokens[0].getTokenPermissions();\n    var particleGroup = new __1.RadixParticleGroup();\n    var consumerQuantity = new bn_js_1.default(0);\n    try {\n      for (var unallocatedTokens_1 = tslib_1.__values(unallocatedTokens), unallocatedTokens_1_1 = unallocatedTokens_1.next(); !unallocatedTokens_1_1.done; unallocatedTokens_1_1 = unallocatedTokens_1.next()) {\n        var consumable = unallocatedTokens_1_1.value;\n        particleGroup.particles.push(atommodel_1.RadixSpunParticle.down(consumable));\n        consumerQuantity.iadd(consumable.getAmount());\n        if (consumerQuantity.gte(subunitsQuantity)) {\n          break;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (unallocatedTokens_1_1 && !unallocatedTokens_1_1.done && (_a = unallocatedTokens_1.return)) _a.call(unallocatedTokens_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n    // Remainder\n    if (consumerQuantity.sub(subunitsQuantity).gtn(0)) {\n      particleGroup.particles.push(atommodel_1.RadixSpunParticle.up(new atommodel_1.RadixUnallocatedTokensParticle(consumerQuantity.sub(subunitsQuantity), tokenClass.getGranularity(), Date.now(), tokenReference, tokenPermissions)));\n    }\n    var particle = new atommodel_1.RadixTransferrableTokensParticle(subunitsQuantity, tokenClass.getGranularity(), ownerAccount.address, Date.now(), tokenReference, tokenPermissions);\n    particleGroup.particles.push(atommodel_1.RadixSpunParticle.up(particle));\n    this.particleGroups.push(particleGroup);\n    return this;\n  };\n  RadixTransactionBuilder.prototype.createToken = function (owner, name, symbol, description, granularity, decimalQuantity, iconUrl, permissions) {\n    var tokenAmount = this.getSubUnitsQuantity(decimalQuantity);\n    var tokenGranularity = this.getSubUnitsQuantity(granularity);\n    if (tokenAmount.lt(this.BNZERO)) {\n      throw new Error('Negative quantity is not allowed');\n    }\n    this.participants.set(owner.getAddress(), owner);\n    var tokenClassParticle = new atommodel_1.RadixTokenDefinitionParticle(owner.address, name, symbol, description, tokenGranularity, iconUrl, permissions);\n    var rriParticle = new atommodel_1.RadixRRIParticle(tokenClassParticle.getRRI());\n    var initialSupplyParticle = new atommodel_1.RadixUnallocatedTokensParticle(new bn_js_1.default(2).pow(new bn_js_1.default(256)).subn(1), tokenGranularity, Date.now(), tokenClassParticle.getTokenDefinitionReference(), permissions);\n    var createTokenParticleGroup = new __1.RadixParticleGroup([atommodel_1.RadixSpunParticle.down(rriParticle), atommodel_1.RadixSpunParticle.up(tokenClassParticle), atommodel_1.RadixSpunParticle.up(initialSupplyParticle)]);\n    this.particleGroups.push(createTokenParticleGroup);\n    if (tokenAmount.gtn(0)) {\n      var mintParticle = new atommodel_1.RadixTransferrableTokensParticle(tokenAmount, tokenGranularity, owner.address, Date.now(), tokenClassParticle.getTokenDefinitionReference(), permissions);\n      var mintParticleGroup = new __1.RadixParticleGroup([atommodel_1.RadixSpunParticle.down(initialSupplyParticle), atommodel_1.RadixSpunParticle.up(mintParticle)]);\n      var remainder = initialSupplyParticle.getAmount().sub(mintParticle.getAmount());\n      if (remainder.gten(0)) {\n        // Remainder\n        var remainingSupplyParticle = new atommodel_1.RadixUnallocatedTokensParticle(remainder, tokenGranularity, Date.now(), tokenClassParticle.getTokenDefinitionReference(), permissions);\n        mintParticleGroup.particles.push(atommodel_1.RadixSpunParticle.up(remainingSupplyParticle));\n      }\n      this.particleGroups.push(mintParticleGroup);\n    }\n    return this;\n  };\n  RadixTransactionBuilder.prototype.createTokenSingleIssuance = function (owner, name, symbol, description, granularity, amount, iconUrl) {\n    if (granularity === void 0) {\n      granularity = new decimal_js_1.default('1e-18');\n    }\n    var permissions = {\n      mint: atommodel_1.RadixTokenPermissionsValues.TOKEN_CREATION_ONLY,\n      burn: atommodel_1.RadixTokenPermissionsValues.TOKEN_CREATION_ONLY\n    };\n    if (new decimal_js_1.default(amount).eq(0)) {\n      throw new Error('Single-issuance tokens cannot have an amount of 0');\n    }\n    return this.createToken(owner, name, symbol, description, granularity, amount, iconUrl, permissions);\n  };\n  RadixTransactionBuilder.prototype.createTokenMultiIssuance = function (owner, name, symbol, description, granularity, amount, iconUrl) {\n    if (granularity === void 0) {\n      granularity = new decimal_js_1.default('1e-18');\n    }\n    var permissions = {\n      mint: atommodel_1.RadixTokenPermissionsValues.TOKEN_OWNER_ONLY,\n      burn: atommodel_1.RadixTokenPermissionsValues.TOKEN_OWNER_ONLY\n    };\n    return this.createToken(owner, name, symbol, description, granularity, amount, iconUrl, permissions);\n  };\n  /**\n   * Creates payload atom\n   * @param from\n   * @param recipients Everyone who will receive and be able to decrypt the message\n   * @param applicationId\n   * @param payload\n   * @param [encrypted] Sets if the message should be encrypted using ECIES\n   */\n  RadixTransactionBuilder.createPayloadAtom = function (from, recipients, applicationId, payload, encrypted) {\n    if (encrypted === void 0) {\n      encrypted = true;\n    }\n    if (encrypted) {\n      return new RadixTransactionBuilder().addEncryptedMessage(from, applicationId, payload, recipients);\n    } else {\n      return new RadixTransactionBuilder().addUnencryptedMessage(from, applicationId, payload, recipients);\n    }\n  };\n  /**\n   * Creates radix messaging application payload atom\n   * @param from\n   * @param to\n   * @param message\n   */\n  RadixTransactionBuilder.createRadixMessageAtom = function (from, to, message) {\n    return new RadixTransactionBuilder().addEncryptedMessage(from, 'message', message, [from, to]);\n  };\n  RadixTransactionBuilder.prototype.addEncryptedMessage = function (from, applicationId, message, recipients) {\n    var recipientPubKeys = recipients.map(function (r) {\n      return r.address.getPublic();\n    });\n    var _a = __1.RadixECIES.encryptForMultiple(recipientPubKeys, Buffer.from(message)),\n      protectors = _a.protectors,\n      ciphertext = _a.ciphertext;\n    this.addMessageParticle(from, ciphertext, {\n      application: applicationId\n    }, recipients);\n    this.addMessageParticle(from, JSON.stringify(protectors.map(function (p) {\n      return p.toString('base64');\n    })), {\n      application: 'encryptor',\n      contentType: 'application/json'\n    }, recipients);\n    return this;\n  };\n  RadixTransactionBuilder.prototype.addUnencryptedMessage = function (from, applicationId, message, recipients) {\n    this.addMessageParticle(from, message, {\n      application: applicationId\n    }, recipients);\n    return this;\n  };\n  RadixTransactionBuilder.prototype.addMessageParticle = function (from, data, metadata, recipients) {\n    var e_4, _a;\n    try {\n      for (var recipients_1 = tslib_1.__values(recipients), recipients_1_1 = recipients_1.next(); !recipients_1_1.done; recipients_1_1 = recipients_1.next()) {\n        var recipient = recipients_1_1.value;\n        this.participants.set(recipient.getAddress(), recipient);\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (recipients_1_1 && !recipients_1_1.done && (_a = recipients_1.return)) _a.call(recipients_1);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n    var particle = new atommodel_1.RadixMessageParticle(from.address, recipients.length === 1 ? recipients[0].address : recipients[1].address, data, metadata);\n    var particleParticleGroup = new __1.RadixParticleGroup([atommodel_1.RadixSpunParticle.up(particle)]);\n    this.particleGroups.push(particleParticleGroup);\n    return this;\n  };\n  /**\n   * Add a particle which enforces that only one such particle can exists per account,\n   * enforced on the ledger level\n   *\n   * @param  {RadixAccount} account Scope of the uniqueness constraint\n   * @param  {string} unique The unique id\n   */\n  RadixTransactionBuilder.prototype.addUniqueParticle = function (account, unique) {\n    var uniqueParticle = new atommodel_1.RadixUniqueParticle(account.address, unique);\n    var rriParticle = new atommodel_1.RadixRRIParticle(uniqueParticle.getRRI());\n    var uniqueParticleGroup = new __1.RadixParticleGroup([atommodel_1.RadixSpunParticle.down(rriParticle), atommodel_1.RadixSpunParticle.up(uniqueParticle)]);\n    this.particleGroups.push(uniqueParticleGroup);\n    return this;\n  };\n  /**\n   * Builds the atom, finds a node to submit to, adds network fee, signs the atom and submits\n   * @param signer\n   * @returns a BehaviourSubject that streams the atom status updates\n   */\n  RadixTransactionBuilder.prototype.signAndSubmit = function (signer) {\n    var _this = this;\n    var atom = this.buildAtom();\n    var stateSubject = new rxjs_1.BehaviorSubject('FINDING_NODE');\n    // Find a shard, any of the participant shards is ok\n    var shard = atom.getShards()[0];\n    // Get node from universe\n    __1.radixUniverse.getNodeConnection(shard).then(function (connection) {\n      RadixTransactionBuilder.signAndSubmitAtom(atom, connection, signer, _this.participants.values()).subscribe(stateSubject);\n    });\n    return stateSubject;\n  };\n  RadixTransactionBuilder.prototype.buildAtom = function () {\n    if (this.particleGroups.length === 0) {\n      throw new Error('No particle groups specified');\n    }\n    var atom = new atommodel_1.RadixAtom();\n    atom.particleGroups = this.particleGroups;\n    // Add timestamp\n    atom.setTimestamp(Date.now());\n    return atom;\n  };\n  RadixTransactionBuilder.signAndSubmitAtom = function (atom, connection, signer, participants) {\n    var signedAtom = null;\n    // Add POW fee\n    var stateSubject = new rxjs_1.BehaviorSubject('GENERATING_POW');\n    atom.clearPowNonce();\n    __1.RadixFeeProvider.generatePOWFee(__1.radixUniverse.universeConfig.getMagic(), atom).then(function (pow) {\n      atom.setPowNonce(pow.nonce);\n      // Sign atom\n      stateSubject.next('SIGNING');\n      return signer.signAtom(atom);\n    }).then(function (_signedAtom) {\n      var e_5, _a;\n      signedAtom = _signedAtom;\n      try {\n        // Push atom into participant accounts to minimize delay\n        for (var participants_1 = tslib_1.__values(participants), participants_1_1 = participants_1.next(); !participants_1_1.done; participants_1_1 = participants_1.next()) {\n          var participant = participants_1_1.value;\n          participant._onAtomReceived({\n            action: 'STORE',\n            atom: signedAtom,\n            processedData: {},\n            isHead: true\n          });\n        }\n      } catch (e_5_1) {\n        e_5 = {\n          error: e_5_1\n        };\n      } finally {\n        try {\n          if (participants_1_1 && !participants_1_1.done && (_a = participants_1.return)) _a.call(participants_1);\n        } finally {\n          if (e_5) throw e_5.error;\n        }\n      }\n      var submissionSubject = connection.submitAtom(signedAtom);\n      submissionSubject.subscribe(stateSubject);\n      submissionSubject.subscribe({\n        error: function (error) {\n          var e_6, _a;\n          RadixLogger_1.logger.info('Problem submitting atom, deleting', error);\n          try {\n            // Delete atom from participant accounts\n            for (var participants_2 = tslib_1.__values(participants), participants_2_1 = participants_2.next(); !participants_2_1.done; participants_2_1 = participants_2.next()) {\n              var participant = participants_2_1.value;\n              participant._onAtomReceived({\n                action: 'DELETE',\n                atom: signedAtom,\n                processedData: {},\n                isHead: true\n              });\n            }\n          } catch (e_6_1) {\n            e_6 = {\n              error: e_6_1\n            };\n          } finally {\n            try {\n              if (participants_2_1 && !participants_2_1.done && (_a = participants_2.return)) _a.call(participants_2);\n            } finally {\n              if (e_6) throw e_6.error;\n            }\n          }\n        }\n      });\n    }).catch(function (error) {\n      stateSubject.error(error);\n    });\n    return stateSubject;\n  };\n  return RadixTransactionBuilder;\n}();\nexports.default = RadixTransactionBuilder;","map":{"version":3,"names":["rxjs_1","require","typescript_map_1","decimal_js_1","tslib_1","__importDefault","bn_js_1","__1","atommodel_1","RadixLogger_1","RadixTokenDefinition_1","RadixTransactionBuilder","BNZERO","default","DCZERO","participants","TSMap","particleGroups","prototype","getSubUnitsQuantity","decimalQuantity","isDecimal","Error","unitsQuantity","subunitsQuantity","RadixTokenDefinition","fromDecimalToSubunits","createTransferAtom","from","to","tokenReference","message","addTransfer","RRI","fromString","lt","eq","transferSytem","transferSystem","gt","balance","toString","unspentConsumables","getUnspentConsumables","createTransferAtomParticleGroup","RadixParticleGroup","consumerQuantity","granularity","tokenPermissions","unspentConsumables_1","__values","unspentConsumables_1_1","next","done","consumable","value","getTokenDefinitionReference","equals","getGranularity","getTokenPermissions","particles","push","RadixSpunParticle","down","iadd","getAmount","gte","up","RadixTransferrableTokensParticle","address","Date","now","sub","gtn","mod","fromSubunitsToDecimal","set","getAddress","addEncryptedMessage","createBurnAtom","ownerAccount","burnTokens","tokenClass","tokenDefinitionSystem","getTokenDefinition","getName","tokenSupplyType","RadixTokenSupplyType","MUTABLE","burnParticleGroup","unspentConsumables_2","unspentConsumables_2_1","RadixUnallocatedTokensParticle","createMintAtom","mintTokens","getUnallocatedSupply","unallocatedTokens","getUnallocatedTokens","particleGroup","unallocatedTokens_1","unallocatedTokens_1_1","particle","createToken","owner","name","symbol","description","iconUrl","permissions","tokenAmount","tokenGranularity","tokenClassParticle","RadixTokenDefinitionParticle","rriParticle","RadixRRIParticle","getRRI","initialSupplyParticle","pow","subn","createTokenParticleGroup","mintParticle","mintParticleGroup","remainder","gten","remainingSupplyParticle","createTokenSingleIssuance","amount","mint","RadixTokenPermissionsValues","TOKEN_CREATION_ONLY","burn","createTokenMultiIssuance","TOKEN_OWNER_ONLY","createPayloadAtom","recipients","applicationId","payload","encrypted","addUnencryptedMessage","createRadixMessageAtom","recipientPubKeys","map","r","getPublic","_a","RadixECIES","encryptForMultiple","Buffer","protectors","ciphertext","addMessageParticle","application","JSON","stringify","p","contentType","data","metadata","recipients_1","recipients_1_1","recipient","RadixMessageParticle","length","particleParticleGroup","addUniqueParticle","account","unique","uniqueParticle","RadixUniqueParticle","uniqueParticleGroup","signAndSubmit","signer","_this","atom","buildAtom","stateSubject","BehaviorSubject","shard","getShards","radixUniverse","getNodeConnection","then","connection","signAndSubmitAtom","values","subscribe","RadixAtom","setTimestamp","signedAtom","clearPowNonce","RadixFeeProvider","generatePOWFee","universeConfig","getMagic","setPowNonce","nonce","signAtom","_signedAtom","participants_1","participants_1_1","participant","_onAtomReceived","action","processedData","isHead","submissionSubject","submitAtom","error","logger","info","participants_2","participants_2_1","catch"],"sources":["../../../../src/modules/txbuilder/RadixTransactionBuilder.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}