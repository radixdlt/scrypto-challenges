{"ast":null,"code":";\n(function (globalScope) {\n  'use strict';\n\n  /*!\r\n   *  decimal.js v10.4.3\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\n\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\n\n  // The maximum exponent magnitude.\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\n  var EXP_LIMIT = 9e15,\n    // 0 to 9e15\n\n    // The limit on the value of `precision`, and on the value of the first argument to\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\n    MAX_DIGITS = 1e9,\n    // 0 to 1e9\n\n    // Base conversion alphabet.\n    NUMERALS = '0123456789abcdef',\n    // The natural logarithm of 10 (1025 digits).\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\n    // Pi (1025 digits).\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\n    // The initial configuration properties of the Decimal constructor.\n    DEFAULTS = {\n      // These values must be integers within the stated ranges (inclusive).\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\n\n      // The maximum number of significant digits of the result of a calculation or base conversion.\n      // E.g. `Decimal.config({ precision: 20 });`\n      precision: 20,\n      // 1 to MAX_DIGITS\n\n      // The rounding mode used when rounding to `precision`.\n      //\n      // ROUND_UP         0 Away from zero.\n      // ROUND_DOWN       1 Towards zero.\n      // ROUND_CEIL       2 Towards +Infinity.\n      // ROUND_FLOOR      3 Towards -Infinity.\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n      //\n      // E.g.\n      // `Decimal.rounding = 4;`\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\n      rounding: 4,\n      // 0 to 8\n\n      // The modulo mode used when calculating the modulus: a mod n.\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n      // The remainder (r) is calculated as: r = a - n * q.\n      //\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\n      // HALF_EVEN  6 The IEEE 754 remainder function.\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\n      //\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\n      // be used, but they may not give useful results.\n      modulo: 1,\n      // 0 to 9\n\n      // The exponent value at and beneath which `toString` returns exponential notation.\n      // JavaScript numbers: -7\n      toExpNeg: -7,\n      // 0 to -EXP_LIMIT\n\n      // The exponent value at and above which `toString` returns exponential notation.\n      // JavaScript numbers: 21\n      toExpPos: 21,\n      // 0 to EXP_LIMIT\n\n      // The minimum exponent value, beneath which underflow to zero occurs.\n      // JavaScript numbers: -324  (5e-324)\n      minE: -EXP_LIMIT,\n      // -1 to -EXP_LIMIT\n\n      // The maximum exponent value, above which overflow to Infinity occurs.\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\n      maxE: EXP_LIMIT,\n      // 1 to EXP_LIMIT\n\n      // Whether to use cryptographically-secure random number generation, if available.\n      crypto: false // true/false\n    },\n    // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\n\n    Decimal,\n    inexact,\n    noConflict,\n    quadrant,\n    external = true,\n    decimalError = '[DecimalError] ',\n    invalidArgument = decimalError + 'Invalid argument: ',\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\n    cryptoUnavailable = decimalError + 'crypto unavailable',\n    tag = '[object Decimal]',\n    mathfloor = Math.floor,\n    mathpow = Math.pow,\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n    BASE = 1e7,\n    LOG_BASE = 7,\n    MAX_SAFE_INTEGER = 9007199254740991,\n    LN10_PRECISION = LN10.length - 1,\n    PI_PRECISION = PI.length - 1,\n    // Decimal.prototype object\n    P = {\n      toStringTag: tag\n    };\n\n  // Decimal prototype methods\n\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  clampedTo                 clamp\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\n\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\n  P.absoluteValue = P.abs = function () {\n    var x = new this.constructor(this);\n    if (x.s < 0) x.s = 1;\n    return finalise(x);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\n  P.ceil = function () {\n    return finalise(new this.constructor(this), this.e + 1, 2);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n   * delineated by `min` and `max`.\r\n   *\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */\n  P.clampedTo = P.clamp = function (min, max) {\n    var k,\n      x = this,\n      Ctor = x.constructor;\n    min = new Ctor(min);\n    max = new Ctor(max);\n    if (!min.s || !max.s) return new Ctor(NaN);\n    if (min.gt(max)) throw Error(invalidArgument + max);\n    k = x.cmp(min);\n    return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\n  };\n\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\n  P.comparedTo = P.cmp = function (y) {\n    var i,\n      j,\n      xdL,\n      ydL,\n      x = this,\n      xd = x.d,\n      yd = (y = new x.constructor(y)).d,\n      xs = x.s,\n      ys = y.s;\n\n    // Either NaN or ±Infinity?\n    if (!xd || !yd) {\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\n    }\n\n    // Either zero?\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\n\n    // Signs differ?\n    if (xs !== ys) return xs;\n\n    // Compare exponents.\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\n    xdL = xd.length;\n    ydL = yd.length;\n\n    // Compare digit by digit.\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\n    }\n\n    // Compare lengths.\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\n  P.cosine = P.cos = function () {\n    var pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n    if (!x.d) return new Ctor(NaN);\n\n    // cos(0) = cos(-0) = 1\n    if (!x.d[0]) return new Ctor(1);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n    Ctor.rounding = 1;\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\n  };\n\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\n  P.cubeRoot = P.cbrt = function () {\n    var e,\n      m,\n      n,\n      r,\n      rep,\n      s,\n      sd,\n      t,\n      t3,\n      t3plusx,\n      x = this,\n      Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    external = false;\n\n    // Initial estimate.\n    s = x.s * mathpow(x.s * x, 1 / 3);\n\n    // Math.cbrt underflow/overflow?\n    // Pass x to Math.pow as integer, then adjust the exponent of the result.\n    if (!s || Math.abs(s) == 1 / 0) {\n      n = digitsToString(x.d);\n      e = x.e;\n\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\n      if (s = (e - n.length + 1) % 3) n += s == 1 || s == -2 ? '0' : '00';\n      s = mathpow(n, 1 / 3);\n\n      // Rarely, e may be one less than the result exponent value.\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\n      if (s == 1 / 0) {\n        n = '5e' + e;\n      } else {\n        n = s.toExponential();\n        n = n.slice(0, n.indexOf('e') + 1) + e;\n      }\n      r = new Ctor(n);\n      r.s = x.s;\n    } else {\n      r = new Ctor(s.toString());\n    }\n    sd = (e = Ctor.precision) + 3;\n\n    // Halley's method.\n    // TODO? Compare Newton's method.\n    for (;;) {\n      t = r;\n      t3 = t.times(t).times(t);\n      t3plusx = t3.plus(x);\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\n\n      // TODO? Replace with for-loop and checkRoundingDigits.\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n        n = n.slice(sd - 3, sd + 1);\n\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\n        // , i.e. approaching a rounding boundary, continue the iteration.\n        if (n == '9999' || !rep && n == '4999') {\n          // On the first iteration only, check to see if rounding up gives the exact result as the\n          // nines may infinitely repeat.\n          if (!rep) {\n            finalise(t, e + 1, 0);\n            if (t.times(t).times(t).eq(x)) {\n              r = t;\n              break;\n            }\n          }\n          sd += 4;\n          rep = 1;\n        } else {\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n          // If not, then there are further digits and m will be truthy.\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n            // Truncate to the first rounding digit.\n            finalise(r, e + 1, 1);\n            m = !r.times(r).times(r).eq(x);\n          }\n          break;\n        }\n      }\n    }\n    external = true;\n    return finalise(r, e, Ctor.rounding, m);\n  };\n\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\n  P.decimalPlaces = P.dp = function () {\n    var w,\n      d = this.d,\n      n = NaN;\n    if (d) {\n      w = d.length - 1;\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\n\n      // Subtract the number of trailing zeros of the last word.\n      w = d[w];\n      if (w) for (; w % 10 == 0; w /= 10) n--;\n      if (n < 0) n = 0;\n    }\n    return n;\n  };\n\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n  P.dividedBy = P.div = function (y) {\n    return divide(this, new this.constructor(y));\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n  P.dividedToIntegerBy = P.divToInt = function (y) {\n    var x = this,\n      Ctor = x.constructor;\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\n  P.equals = P.eq = function (y) {\n    return this.cmp(y) === 0;\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\n  P.floor = function () {\n    return finalise(new this.constructor(this), this.e + 1, 3);\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\n  P.greaterThan = P.gt = function (y) {\n    return this.cmp(y) > 0;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\n  P.greaterThanOrEqualTo = P.gte = function (y) {\n    var k = this.cmp(y);\n    return k == 1 || k === 0;\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\n  P.hyperbolicCosine = P.cosh = function () {\n    var k,\n      n,\n      pr,\n      rm,\n      len,\n      x = this,\n      Ctor = x.constructor,\n      one = new Ctor(1);\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\n    if (x.isZero()) return one;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n    Ctor.rounding = 1;\n    len = x.d.length;\n\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\n\n    // Estimate the optimum number of times to use the argument reduction.\n    // TODO? Estimation reused from cosine() and may not be optimal here.\n    if (len < 32) {\n      k = Math.ceil(len / 3);\n      n = (1 / tinyPow(4, k)).toString();\n    } else {\n      k = 16;\n      n = '2.3283064365386962890625e-10';\n    }\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\n\n    // Reverse argument reduction\n    var cosh2_x,\n      i = k,\n      d8 = new Ctor(8);\n    for (; i--;) {\n      cosh2_x = x.times(x);\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\n    }\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\n  P.hyperbolicSine = P.sinh = function () {\n    var k,\n      pr,\n      rm,\n      len,\n      x = this,\n      Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n    Ctor.rounding = 1;\n    len = x.d.length;\n    if (len < 3) {\n      x = taylorSeries(Ctor, 2, x, x, true);\n    } else {\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\n      // 3 multiplications and 1 addition\n\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\n      // 4 multiplications and 2 additions\n\n      // Estimate the optimum number of times to use the argument reduction.\n      k = 1.4 * Math.sqrt(len);\n      k = k > 16 ? 16 : k | 0;\n      x = x.times(1 / tinyPow(5, k));\n      x = taylorSeries(Ctor, 2, x, x, true);\n\n      // Reverse argument reduction\n      var sinh2_x,\n        d5 = new Ctor(5),\n        d16 = new Ctor(16),\n        d20 = new Ctor(20);\n      for (; k--;) {\n        sinh2_x = x.times(x);\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\n      }\n    }\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(x, pr, rm, true);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\n  P.hyperbolicTangent = P.tanh = function () {\n    var pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(x.s);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 7;\n    Ctor.rounding = 1;\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\n  P.inverseCosine = P.acos = function () {\n    var halfPi,\n      x = this,\n      Ctor = x.constructor,\n      k = x.abs().cmp(1),\n      pr = Ctor.precision,\n      rm = Ctor.rounding;\n    if (k !== -1) {\n      return k === 0\n      // |x| is 1\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\n      // |x| > 1 or x is NaN\n      : new Ctor(NaN);\n    }\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\n\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\n\n    Ctor.precision = pr + 6;\n    Ctor.rounding = 1;\n    x = x.asin();\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return halfPi.minus(x);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\n  P.inverseHyperbolicCosine = P.acosh = function () {\n    var pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\n    if (!x.isFinite()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\n    Ctor.rounding = 1;\n    external = false;\n    x = x.times(x).minus(1).sqrt().plus(x);\n    external = true;\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.ln();\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\n  P.inverseHyperbolicSine = P.asinh = function () {\n    var pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\n    Ctor.rounding = 1;\n    external = false;\n    x = x.times(x).plus(1).sqrt().plus(x);\n    external = true;\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.ln();\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\n  P.inverseHyperbolicTangent = P.atanh = function () {\n    var pr,\n      rm,\n      wpr,\n      xsd,\n      x = this,\n      Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    xsd = x.sd();\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\n    Ctor.precision = wpr = xsd - x.e;\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\n    Ctor.precision = pr + 4;\n    Ctor.rounding = 1;\n    x = x.ln();\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.times(0.5);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\n  P.inverseSine = P.asin = function () {\n    var halfPi,\n      k,\n      pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n    if (x.isZero()) return new Ctor(x);\n    k = x.abs().cmp(1);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    if (k !== -1) {\n      // |x| is 1\n      if (k === 0) {\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n        halfPi.s = x.s;\n        return halfPi;\n      }\n\n      // |x| > 1 or x is NaN\n      return new Ctor(NaN);\n    }\n\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\n\n    Ctor.precision = pr + 6;\n    Ctor.rounding = 1;\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return x.times(2);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\n  P.inverseTangent = P.atan = function () {\n    var i,\n      j,\n      k,\n      n,\n      px,\n      t,\n      r,\n      wpr,\n      x2,\n      x = this,\n      Ctor = x.constructor,\n      pr = Ctor.precision,\n      rm = Ctor.rounding;\n    if (!x.isFinite()) {\n      if (!x.s) return new Ctor(NaN);\n      if (pr + 4 <= PI_PRECISION) {\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\n        r.s = x.s;\n        return r;\n      }\n    } else if (x.isZero()) {\n      return new Ctor(x);\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\n      r.s = x.s;\n      return r;\n    }\n    Ctor.precision = wpr = pr + 10;\n    Ctor.rounding = 1;\n\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\n\n    // Argument reduction\n    // Ensure |x| < 0.42\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\n\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\n    external = false;\n    j = Math.ceil(wpr / LOG_BASE);\n    n = 1;\n    x2 = x.times(x);\n    r = new Ctor(x);\n    px = x;\n\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\n    for (; i !== -1;) {\n      px = px.times(x2);\n      t = r.minus(px.div(n += 2));\n      px = px.times(x2);\n      r = t.plus(px.div(n += 2));\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\n    }\n    if (k) r = r.times(2 << k - 1);\n    external = true;\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\n  P.isFinite = function () {\n    return !!this.d;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\n  P.isInteger = P.isInt = function () {\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\n  P.isNaN = function () {\n    return !this.s;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\n  P.isNegative = P.isNeg = function () {\n    return this.s < 0;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\n  P.isPositive = P.isPos = function () {\n    return this.s > 0;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\n  P.isZero = function () {\n    return !!this.d && this.d[0] === 0;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\n  P.lessThan = P.lt = function (y) {\n    return this.cmp(y) < 0;\n  };\n\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\n  P.lessThanOrEqualTo = P.lte = function (y) {\n    return this.cmp(y) < 1;\n  };\n\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\n  P.logarithm = P.log = function (base) {\n    var isBase10,\n      d,\n      denominator,\n      k,\n      inf,\n      num,\n      sd,\n      r,\n      arg = this,\n      Ctor = arg.constructor,\n      pr = Ctor.precision,\n      rm = Ctor.rounding,\n      guard = 5;\n\n    // Default base is 10.\n    if (base == null) {\n      base = new Ctor(10);\n      isBase10 = true;\n    } else {\n      base = new Ctor(base);\n      d = base.d;\n\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\n      isBase10 = base.eq(10);\n    }\n    d = arg.d;\n\n    // Is arg negative, non-finite, 0 or 1?\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\n    }\n\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\n    // integer power of 10.\n    if (isBase10) {\n      if (d.length > 1) {\n        inf = true;\n      } else {\n        for (k = d[0]; k % 10 === 0;) k /= 10;\n        inf = k !== 1;\n      }\n    }\n    external = false;\n    sd = pr + guard;\n    num = naturalLogarithm(arg, sd);\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n\n    // The result will have 5 rounding digits.\n    r = divide(num, denominator, sd, 1);\n\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\n    // calculate 10 further digits.\n    //\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\n    // further digits, the last 14 are nines, round up and assume the result is exact.\n    // Also assume the result is exact if the last 14 are zero.\n    //\n    // Example of a result that will be incorrectly rounded:\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\n    // place is still 2.6.\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\n      do {\n        sd += 10;\n        num = naturalLogarithm(arg, sd);\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n        r = divide(num, denominator, sd, 1);\n        if (!inf) {\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\n            r = finalise(r, pr + 1, 0);\n          }\n          break;\n        }\n      } while (checkRoundingDigits(r.d, k += 10, rm));\n    }\n    external = true;\n    return finalise(r, pr, rm);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'lt');\r\n  };\r\n   */\n\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'gt');\r\n  };\r\n   */\n\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n  P.minus = P.sub = function (y) {\n    var d,\n      e,\n      i,\n      j,\n      k,\n      len,\n      pr,\n      rm,\n      xd,\n      xe,\n      xLTy,\n      yd,\n      x = this,\n      Ctor = x.constructor;\n    y = new Ctor(y);\n\n    // If either is not finite...\n    if (!x.d || !y.d) {\n      // Return NaN if either is NaN.\n      if (!x.s || !y.s) y = new Ctor(NaN);\n\n      // Return y negated if x is finite and y is ±Infinity.\n      else if (x.d) y.s = -y.s;\n\n      // Return x if y is finite and x is ±Infinity.\n      // Return x if both are ±Infinity with different signs.\n      // Return NaN if both are ±Infinity with the same sign.\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\n      return y;\n    }\n\n    // If signs differ...\n    if (x.s != y.s) {\n      y.s = -y.s;\n      return x.plus(y);\n    }\n    xd = x.d;\n    yd = y.d;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n\n    // If either is zero...\n    if (!xd[0] || !yd[0]) {\n      // Return y negated if x is zero and y is non-zero.\n      if (yd[0]) y.s = -y.s;\n\n      // Return x if y is zero and x is non-zero.\n      else if (xd[0]) y = new Ctor(x);\n\n      // Return zero if both are zero.\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\n      else return new Ctor(rm === 3 ? -0 : 0);\n      return external ? finalise(y, pr, rm) : y;\n    }\n\n    // x and y are finite, non-zero numbers with the same sign.\n\n    // Calculate base 1e7 exponents.\n    e = mathfloor(y.e / LOG_BASE);\n    xe = mathfloor(x.e / LOG_BASE);\n    xd = xd.slice();\n    k = xe - e;\n\n    // If base 1e7 exponents differ...\n    if (k) {\n      xLTy = k < 0;\n      if (xLTy) {\n        d = xd;\n        k = -k;\n        len = yd.length;\n      } else {\n        d = yd;\n        e = xe;\n        len = xd.length;\n      }\n\n      // Numbers with massively different exponents would result in a very high number of\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\n      if (k > i) {\n        k = i;\n        d.length = 1;\n      }\n\n      // Prepend zeros to equalise exponents.\n      d.reverse();\n      for (i = k; i--;) d.push(0);\n      d.reverse();\n\n      // Base 1e7 exponents equal.\n    } else {\n      // Check digits to determine which is the bigger number.\n\n      i = xd.length;\n      len = yd.length;\n      xLTy = i < len;\n      if (xLTy) len = i;\n      for (i = 0; i < len; i++) {\n        if (xd[i] != yd[i]) {\n          xLTy = xd[i] < yd[i];\n          break;\n        }\n      }\n      k = 0;\n    }\n    if (xLTy) {\n      d = xd;\n      xd = yd;\n      yd = d;\n      y.s = -y.s;\n    }\n    len = xd.length;\n\n    // Append zeros to `xd` if shorter.\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\n\n    // Subtract yd from xd.\n    for (i = yd.length; i > k;) {\n      if (xd[--i] < yd[i]) {\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\n        --xd[j];\n        xd[i] += BASE;\n      }\n      xd[i] -= yd[i];\n    }\n\n    // Remove trailing zeros.\n    for (; xd[--len] === 0;) xd.pop();\n\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xd[0] === 0; xd.shift()) --e;\n\n    // Zero?\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\n    y.d = xd;\n    y.e = getBase10Exponent(xd, e);\n    return external ? finalise(y, pr, rm) : y;\n  };\n\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\n  P.modulo = P.mod = function (y) {\n    var q,\n      x = this,\n      Ctor = x.constructor;\n    y = new Ctor(y);\n\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\n\n    // Return x if y is ±Infinity or x is ±0.\n    if (!y.d || x.d && !x.d[0]) {\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\n    }\n\n    // Prevent rounding of intermediate calculations.\n    external = false;\n    if (Ctor.modulo == 9) {\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\n      // result = x - q * y    where  0 <= result < abs(y)\n      q = divide(x, y.abs(), 0, 3, 1);\n      q.s *= y.s;\n    } else {\n      q = divide(x, y, 0, Ctor.modulo, 1);\n    }\n    q = q.times(y);\n    external = true;\n    return x.minus(q);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n  P.naturalExponential = P.exp = function () {\n    return naturalExponential(this);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n  P.naturalLogarithm = P.ln = function () {\n    return naturalLogarithm(this);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\n  P.negated = P.neg = function () {\n    var x = new this.constructor(this);\n    x.s = -x.s;\n    return finalise(x);\n  };\n\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\n  P.plus = P.add = function (y) {\n    var carry,\n      d,\n      e,\n      i,\n      k,\n      len,\n      pr,\n      rm,\n      xd,\n      yd,\n      x = this,\n      Ctor = x.constructor;\n    y = new Ctor(y);\n\n    // If either is not finite...\n    if (!x.d || !y.d) {\n      // Return NaN if either is NaN.\n      if (!x.s || !y.s) y = new Ctor(NaN);\n\n      // Return x if y is finite and x is ±Infinity.\n      // Return x if both are ±Infinity with the same sign.\n      // Return NaN if both are ±Infinity with different signs.\n      // Return y if x is finite and y is ±Infinity.\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\n      return y;\n    }\n\n    // If signs differ...\n    if (x.s != y.s) {\n      y.s = -y.s;\n      return x.minus(y);\n    }\n    xd = x.d;\n    yd = y.d;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n\n    // If either is zero...\n    if (!xd[0] || !yd[0]) {\n      // Return x if y is zero.\n      // Return y if y is non-zero.\n      if (!yd[0]) y = new Ctor(x);\n      return external ? finalise(y, pr, rm) : y;\n    }\n\n    // x and y are finite, non-zero numbers with the same sign.\n\n    // Calculate base 1e7 exponents.\n    k = mathfloor(x.e / LOG_BASE);\n    e = mathfloor(y.e / LOG_BASE);\n    xd = xd.slice();\n    i = k - e;\n\n    // If base 1e7 exponents differ...\n    if (i) {\n      if (i < 0) {\n        d = xd;\n        i = -i;\n        len = yd.length;\n      } else {\n        d = yd;\n        e = k;\n        len = xd.length;\n      }\n\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\n      k = Math.ceil(pr / LOG_BASE);\n      len = k > len ? k + 1 : len + 1;\n      if (i > len) {\n        i = len;\n        d.length = 1;\n      }\n\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\n      d.reverse();\n      for (; i--;) d.push(0);\n      d.reverse();\n    }\n    len = xd.length;\n    i = yd.length;\n\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\n    if (len - i < 0) {\n      i = len;\n      d = yd;\n      yd = xd;\n      xd = d;\n    }\n\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\n    for (carry = 0; i;) {\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\n      xd[i] %= BASE;\n    }\n    if (carry) {\n      xd.unshift(carry);\n      ++e;\n    }\n\n    // Remove trailing zeros.\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\n    y.d = xd;\n    y.e = getBase10Exponent(xd, e);\n    return external ? finalise(y, pr, rm) : y;\n  };\n\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\n  P.precision = P.sd = function (z) {\n    var k,\n      x = this;\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\n    if (x.d) {\n      k = getPrecision(x.d);\n      if (z && x.e + 1 > k) k = x.e + 1;\n    } else {\n      k = NaN;\n    }\n    return k;\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\n  P.round = function () {\n    var x = this,\n      Ctor = x.constructor;\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\n  P.sine = P.sin = function () {\n    var pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n    Ctor.rounding = 1;\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\n  P.squareRoot = P.sqrt = function () {\n    var m,\n      n,\n      sd,\n      r,\n      rep,\n      t,\n      x = this,\n      d = x.d,\n      e = x.e,\n      s = x.s,\n      Ctor = x.constructor;\n\n    // Negative/NaN/Infinity/zero?\n    if (s !== 1 || !d || !d[0]) {\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\n    }\n    external = false;\n\n    // Initial estimate.\n    s = Math.sqrt(+x);\n\n    // Math.sqrt underflow/overflow?\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n    if (s == 0 || s == 1 / 0) {\n      n = digitsToString(d);\n      if ((n.length + e) % 2 == 0) n += '0';\n      s = Math.sqrt(n);\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\n      if (s == 1 / 0) {\n        n = '5e' + e;\n      } else {\n        n = s.toExponential();\n        n = n.slice(0, n.indexOf('e') + 1) + e;\n      }\n      r = new Ctor(n);\n    } else {\n      r = new Ctor(s.toString());\n    }\n    sd = (e = Ctor.precision) + 3;\n\n    // Newton-Raphson iteration.\n    for (;;) {\n      t = r;\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\n\n      // TODO? Replace with for-loop and checkRoundingDigits.\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n        n = n.slice(sd - 3, sd + 1);\n\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\n        if (n == '9999' || !rep && n == '4999') {\n          // On the first iteration only, check to see if rounding up gives the exact result as the\n          // nines may infinitely repeat.\n          if (!rep) {\n            finalise(t, e + 1, 0);\n            if (t.times(t).eq(x)) {\n              r = t;\n              break;\n            }\n          }\n          sd += 4;\n          rep = 1;\n        } else {\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n          // If not, then there are further digits and m will be truthy.\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n            // Truncate to the first rounding digit.\n            finalise(r, e + 1, 1);\n            m = !r.times(r).eq(x);\n          }\n          break;\n        }\n      }\n    }\n    external = true;\n    return finalise(r, e, Ctor.rounding, m);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\n  P.tangent = P.tan = function () {\n    var pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.isZero()) return new Ctor(x);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 10;\n    Ctor.rounding = 1;\n    x = x.sin();\n    x.s = 1;\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\n  };\n\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\n  P.times = P.mul = function (y) {\n    var carry,\n      e,\n      i,\n      k,\n      r,\n      rL,\n      t,\n      xdL,\n      ydL,\n      x = this,\n      Ctor = x.constructor,\n      xd = x.d,\n      yd = (y = new Ctor(y)).d;\n    y.s *= x.s;\n\n    // If either is NaN, ±Infinity or ±0...\n    if (!xd || !xd[0] || !yd || !yd[0]) {\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\n\n      // Return NaN if either is NaN.\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\n      ? NaN\n\n      // Return ±Infinity if either is ±Infinity.\n      // Return ±0 if either is ±0.\n      : !xd || !yd ? y.s / 0 : y.s * 0);\n    }\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\n    xdL = xd.length;\n    ydL = yd.length;\n\n    // Ensure xd points to the longer array.\n    if (xdL < ydL) {\n      r = xd;\n      xd = yd;\n      yd = r;\n      rL = xdL;\n      xdL = ydL;\n      ydL = rL;\n    }\n\n    // Initialise the result array with zeros.\n    r = [];\n    rL = xdL + ydL;\n    for (i = rL; i--;) r.push(0);\n\n    // Multiply!\n    for (i = ydL; --i >= 0;) {\n      carry = 0;\n      for (k = xdL + i; k > i;) {\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\n        r[k--] = t % BASE | 0;\n        carry = t / BASE | 0;\n      }\n      r[k] = (r[k] + carry) % BASE | 0;\n    }\n\n    // Remove trailing zeros.\n    for (; !r[--rL];) r.pop();\n    if (carry) ++e;else r.shift();\n    y.d = r;\n    y.e = getBase10Exponent(r, e);\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n  P.toBinary = function (sd, rm) {\n    return toStringBinary(this, 2, sd, rm);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\n    var x = this,\n      Ctor = x.constructor;\n    x = new Ctor(x);\n    if (dp === void 0) return x;\n    checkInt32(dp, 0, MAX_DIGITS);\n    if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n    return finalise(x, dp + x.e + 1, rm);\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n  P.toExponential = function (dp, rm) {\n    var str,\n      x = this,\n      Ctor = x.constructor;\n    if (dp === void 0) {\n      str = finiteToString(x, true);\n    } else {\n      checkInt32(dp, 0, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n      x = finalise(new Ctor(x), dp + 1, rm);\n      str = finiteToString(x, true, dp + 1);\n    }\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\n  P.toFixed = function (dp, rm) {\n    var str,\n      y,\n      x = this,\n      Ctor = x.constructor;\n    if (dp === void 0) {\n      str = finiteToString(x);\n    } else {\n      checkInt32(dp, 0, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\n      str = finiteToString(y, false, dp + y.e + 1);\n    }\n\n    // To determine whether to add the minus sign look at the value before it was rounded,\n    // i.e. look at `x` rather than `y`.\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\n  P.toFraction = function (maxD) {\n    var d,\n      d0,\n      d1,\n      d2,\n      e,\n      k,\n      n,\n      n0,\n      n1,\n      pr,\n      q,\n      r,\n      x = this,\n      xd = x.d,\n      Ctor = x.constructor;\n    if (!xd) return new Ctor(x);\n    n1 = d0 = new Ctor(1);\n    d1 = n0 = new Ctor(0);\n    d = new Ctor(d1);\n    e = d.e = getPrecision(xd) - x.e - 1;\n    k = e % LOG_BASE;\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\n    if (maxD == null) {\n      // d is 10**e, the minimum max-denominator needed.\n      maxD = e > 0 ? d : n1;\n    } else {\n      n = new Ctor(maxD);\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\n      maxD = n.gt(d) ? e > 0 ? d : n1 : n;\n    }\n    external = false;\n    n = new Ctor(digitsToString(xd));\n    pr = Ctor.precision;\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\n    for (;;) {\n      q = divide(n, d, 0, 1, 1);\n      d2 = d0.plus(q.times(d1));\n      if (d2.cmp(maxD) == 1) break;\n      d0 = d1;\n      d1 = d2;\n      d2 = n1;\n      n1 = n0.plus(q.times(d2));\n      n0 = d2;\n      d2 = d;\n      d = n.minus(q.times(d2));\n      n = d2;\n    }\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\n    n0 = n0.plus(d2.times(n1));\n    d0 = d0.plus(d2.times(d1));\n    n0.s = n1.s = x.s;\n\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n    Ctor.precision = pr;\n    external = true;\n    return r;\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n  P.toHexadecimal = P.toHex = function (sd, rm) {\n    return toStringBinary(this, 16, sd, rm);\n  };\n\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\n  P.toNearest = function (y, rm) {\n    var x = this,\n      Ctor = x.constructor;\n    x = new Ctor(x);\n    if (y == null) {\n      // If x is not finite, return x.\n      if (!x.d) return x;\n      y = new Ctor(1);\n      rm = Ctor.rounding;\n    } else {\n      y = new Ctor(y);\n      if (rm === void 0) {\n        rm = Ctor.rounding;\n      } else {\n        checkInt32(rm, 0, 8);\n      }\n\n      // If x is not finite, return x if y is not NaN, else NaN.\n      if (!x.d) return y.s ? x : y;\n\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\n      if (!y.d) {\n        if (y.s) y.s = x.s;\n        return y;\n      }\n    }\n\n    // If y is not zero, calculate the nearest multiple of y to x.\n    if (y.d[0]) {\n      external = false;\n      x = divide(x, y, 0, rm, 1).times(y);\n      external = true;\n      finalise(x);\n\n      // If y is zero, return zero with the sign of x.\n    } else {\n      y.s = x.s;\n      x = y;\n    }\n    return x;\n  };\n\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\n  P.toNumber = function () {\n    return +this;\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n  P.toOctal = function (sd, rm) {\n    return toStringBinary(this, 8, sd, rm);\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n     *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\n  P.toPower = P.pow = function (y) {\n    var e,\n      k,\n      pr,\n      r,\n      rm,\n      s,\n      x = this,\n      Ctor = x.constructor,\n      yn = +(y = new Ctor(y));\n\n    // Either ±Infinity, NaN or ±0?\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\n    x = new Ctor(x);\n    if (x.eq(1)) return x;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    if (y.eq(1)) return finalise(x, pr, rm);\n\n    // y exponent\n    e = mathfloor(y.e / LOG_BASE);\n\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\n      r = intPow(Ctor, x, k, pr);\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\n    }\n    s = x.s;\n\n    // if x is negative\n    if (s < 0) {\n      // if y is not an integer\n      if (e < y.d.length - 1) return new Ctor(NaN);\n\n      // Result is positive if x is negative and the last digit of integer y is even.\n      if ((y.d[e] & 1) == 0) s = 1;\n\n      // if x.eq(-1)\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\n        x.s = s;\n        return x;\n      }\n    }\n\n    // Estimate result exponent.\n    // x^y = 10^e,  where e = y * log10(x)\n    // log10(x) = log10(x_significand) + x_exponent\n    // log10(x_significand) = ln(x_significand) / ln(10)\n    k = mathpow(+x, yn);\n    e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + '').e;\n\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\n\n    // Overflow/underflow?\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\n    external = false;\n    Ctor.rounding = x.s = 1;\n\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\n    // new Decimal(2.32456).pow('2087987436534566.46411')\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\n    k = Math.min(12, (e + '').length);\n\n    // r = x^y = exp(y*ln(x))\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\n\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\n    if (r.d) {\n      // Truncate to the required precision plus five rounding digits.\n      r = finalise(r, pr + 5, 1);\n\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\n      // the result.\n      if (checkRoundingDigits(r.d, pr, rm)) {\n        e = pr + 10;\n\n        // Truncate to the increased precision plus five rounding digits.\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\n\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\n          r = finalise(r, pr + 1, 0);\n        }\n      }\n    }\n    r.s = s;\n    external = true;\n    Ctor.rounding = rm;\n    return finalise(r, pr, rm);\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\n  P.toPrecision = function (sd, rm) {\n    var str,\n      x = this,\n      Ctor = x.constructor;\n    if (sd === void 0) {\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    } else {\n      checkInt32(sd, 1, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n      x = finalise(new Ctor(x), sd, rm);\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\n    }\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\n    var x = this,\n      Ctor = x.constructor;\n    if (sd === void 0) {\n      sd = Ctor.precision;\n      rm = Ctor.rounding;\n    } else {\n      checkInt32(sd, 1, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n    }\n    return finalise(new Ctor(x), sd, rm);\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\n  P.toString = function () {\n    var x = this,\n      Ctor = x.constructor,\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\n  P.truncated = P.trunc = function () {\n    return finalise(new this.constructor(this), this.e + 1, 1);\n  };\n\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\n  P.valueOf = P.toJSON = function () {\n    var x = this,\n      Ctor = x.constructor,\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    return x.isNeg() ? '-' + str : str;\n  };\n\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\n\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\n\n  function digitsToString(d) {\n    var i,\n      k,\n      ws,\n      indexOfLastWord = d.length - 1,\n      str = '',\n      w = d[0];\n    if (indexOfLastWord > 0) {\n      str += w;\n      for (i = 1; i < indexOfLastWord; i++) {\n        ws = d[i] + '';\n        k = LOG_BASE - ws.length;\n        if (k) str += getZeroString(k);\n        str += ws;\n      }\n      w = d[i];\n      ws = w + '';\n      k = LOG_BASE - ws.length;\n      if (k) str += getZeroString(k);\n    } else if (w === 0) {\n      return '0';\n    }\n\n    // Remove trailing zeros of last w.\n    for (; w % 10 === 0;) w /= 10;\n    return str + w;\n  }\n  function checkInt32(i, min, max) {\n    if (i !== ~~i || i < min || i > max) {\n      throw Error(invalidArgument + i);\n    }\n  }\n\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\n  function checkRoundingDigits(d, i, rm, repeating) {\n    var di, k, r, rd;\n\n    // Get the length of the first word of the array d.\n    for (k = d[0]; k >= 10; k /= 10) --i;\n\n    // Is the rounding digit in the first word of d?\n    if (--i < 0) {\n      i += LOG_BASE;\n      di = 0;\n    } else {\n      di = Math.ceil((i + 1) / LOG_BASE);\n      i %= LOG_BASE;\n    }\n\n    // i is the index (0 - 6) of the rounding digit.\n    // E.g. if within the word 3487563 the first rounding digit is 5,\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\n    k = mathpow(10, LOG_BASE - i);\n    rd = d[di] % k | 0;\n    if (repeating == null) {\n      if (i < 3) {\n        if (i == 0) rd = rd / 100 | 0;else if (i == 1) rd = rd / 10 | 0;\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\n      } else {\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\n      }\n    } else {\n      if (i < 4) {\n        if (i == 0) rd = rd / 1000 | 0;else if (i == 1) rd = rd / 100 | 0;else if (i == 2) rd = rd / 10 | 0;\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\n      } else {\n        r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\n      }\n    }\n    return r;\n  }\n\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\n  function convertBase(str, baseIn, baseOut) {\n    var j,\n      arr = [0],\n      arrL,\n      i = 0,\n      strL = str.length;\n    for (; i < strL;) {\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\n      for (j = 0; j < arr.length; j++) {\n        if (arr[j] > baseOut - 1) {\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\n          arr[j + 1] += arr[j] / baseOut | 0;\n          arr[j] %= baseOut;\n        }\n      }\n    }\n    return arr.reverse();\n  }\n\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\n  function cosine(Ctor, x) {\n    var k, len, y;\n    if (x.isZero()) return x;\n\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\n\n    // Estimate the optimum number of times to use the argument reduction.\n    len = x.d.length;\n    if (len < 32) {\n      k = Math.ceil(len / 3);\n      y = (1 / tinyPow(4, k)).toString();\n    } else {\n      k = 16;\n      y = '2.3283064365386962890625e-10';\n    }\n    Ctor.precision += k;\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\n\n    // Reverse argument reduction\n    for (var i = k; i--;) {\n      var cos2x = x.times(x);\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\n    }\n    Ctor.precision -= k;\n    return x;\n  }\n\n  /*\r\n   * Perform division in the specified base.\r\n   */\n  var divide = function () {\n    // Assumes non-zero x and k, and hence non-zero result.\n    function multiplyInteger(x, k, base) {\n      var temp,\n        carry = 0,\n        i = x.length;\n      for (x = x.slice(); i--;) {\n        temp = x[i] * k + carry;\n        x[i] = temp % base | 0;\n        carry = temp / base | 0;\n      }\n      if (carry) x.unshift(carry);\n      return x;\n    }\n    function compare(a, b, aL, bL) {\n      var i, r;\n      if (aL != bL) {\n        r = aL > bL ? 1 : -1;\n      } else {\n        for (i = r = 0; i < aL; i++) {\n          if (a[i] != b[i]) {\n            r = a[i] > b[i] ? 1 : -1;\n            break;\n          }\n        }\n      }\n      return r;\n    }\n    function subtract(a, b, aL, base) {\n      var i = 0;\n\n      // Subtract b from a.\n      for (; aL--;) {\n        a[aL] -= i;\n        i = a[aL] < b[aL] ? 1 : 0;\n        a[aL] = i * base + a[aL] - b[aL];\n      }\n\n      // Remove leading zeros.\n      for (; !a[0] && a.length > 1;) a.shift();\n    }\n    return function (x, y, pr, rm, dp, base) {\n      var cmp,\n        e,\n        i,\n        k,\n        logBase,\n        more,\n        prod,\n        prodL,\n        q,\n        qd,\n        rem,\n        remL,\n        rem0,\n        sd,\n        t,\n        xi,\n        xL,\n        yd0,\n        yL,\n        yz,\n        Ctor = x.constructor,\n        sign = x.s == y.s ? 1 : -1,\n        xd = x.d,\n        yd = y.d;\n\n      // Either NaN, Infinity or 0?\n      if (!xd || !xd[0] || !yd || !yd[0]) {\n        return new Ctor(\n        // Return NaN if either NaN, or both Infinity or 0.\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\n      }\n      if (base) {\n        logBase = 1;\n        e = x.e - y.e;\n      } else {\n        base = BASE;\n        logBase = LOG_BASE;\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\n      }\n      yL = yd.length;\n      xL = xd.length;\n      q = new Ctor(sign);\n      qd = q.d = [];\n\n      // Result exponent may be one less than e.\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\n      if (yd[i] > (xd[i] || 0)) e--;\n      if (pr == null) {\n        sd = pr = Ctor.precision;\n        rm = Ctor.rounding;\n      } else if (dp) {\n        sd = pr + (x.e - y.e) + 1;\n      } else {\n        sd = pr;\n      }\n      if (sd < 0) {\n        qd.push(1);\n        more = true;\n      } else {\n        // Convert precision in number of base 10 digits to base 1e7 digits.\n        sd = sd / logBase + 2 | 0;\n        i = 0;\n\n        // divisor < 1e7\n        if (yL == 1) {\n          k = 0;\n          yd = yd[0];\n          sd++;\n\n          // k is the carry.\n          for (; (i < xL || k) && sd--; i++) {\n            t = k * base + (xd[i] || 0);\n            qd[i] = t / yd | 0;\n            k = t % yd | 0;\n          }\n          more = k || i < xL;\n\n          // divisor >= 1e7\n        } else {\n          // Normalise xd and yd so highest order digit of yd is >= base/2\n          k = base / (yd[0] + 1) | 0;\n          if (k > 1) {\n            yd = multiplyInteger(yd, k, base);\n            xd = multiplyInteger(xd, k, base);\n            yL = yd.length;\n            xL = xd.length;\n          }\n          xi = yL;\n          rem = xd.slice(0, yL);\n          remL = rem.length;\n\n          // Add zeros to make remainder as long as divisor.\n          for (; remL < yL;) rem[remL++] = 0;\n          yz = yd.slice();\n          yz.unshift(0);\n          yd0 = yd[0];\n          if (yd[1] >= base / 2) ++yd0;\n          do {\n            k = 0;\n\n            // Compare divisor and remainder.\n            cmp = compare(yd, rem, yL, remL);\n\n            // If divisor < remainder.\n            if (cmp < 0) {\n              // Calculate trial digit, k.\n              rem0 = rem[0];\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n              // k will be how many times the divisor goes into the current remainder.\n              k = rem0 / yd0 | 0;\n\n              //  Algorithm:\n              //  1. product = divisor * trial digit (k)\n              //  2. if product > remainder: product -= divisor, k--\n              //  3. remainder -= product\n              //  4. if product was < remainder at 2:\n              //    5. compare new remainder and divisor\n              //    6. If remainder > divisor: remainder -= divisor, k++\n\n              if (k > 1) {\n                if (k >= base) k = base - 1;\n\n                // product = divisor * trial digit.\n                prod = multiplyInteger(yd, k, base);\n                prodL = prod.length;\n                remL = rem.length;\n\n                // Compare product and remainder.\n                cmp = compare(prod, rem, prodL, remL);\n\n                // product > remainder.\n                if (cmp == 1) {\n                  k--;\n\n                  // Subtract divisor from product.\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\n                }\n              } else {\n                // cmp is -1.\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\n                if (k == 0) cmp = k = 1;\n                prod = yd.slice();\n              }\n              prodL = prod.length;\n              if (prodL < remL) prod.unshift(0);\n\n              // Subtract product from remainder.\n              subtract(rem, prod, remL, base);\n\n              // If product was < previous remainder.\n              if (cmp == -1) {\n                remL = rem.length;\n\n                // Compare divisor and new remainder.\n                cmp = compare(yd, rem, yL, remL);\n\n                // If divisor < new remainder, subtract divisor from remainder.\n                if (cmp < 1) {\n                  k++;\n\n                  // Subtract divisor from remainder.\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\n                }\n              }\n              remL = rem.length;\n            } else if (cmp === 0) {\n              k++;\n              rem = [0];\n            } // if cmp === 1, k will be 0\n\n            // Add the next digit, k, to the result array.\n            qd[i++] = k;\n\n            // Update the remainder.\n            if (cmp && rem[0]) {\n              rem[remL++] = xd[xi] || 0;\n            } else {\n              rem = [xd[xi]];\n              remL = 1;\n            }\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\n          more = rem[0] !== void 0;\n        }\n\n        // Leading zero?\n        if (!qd[0]) qd.shift();\n      }\n\n      // logBase is 1 when divide is being used for base conversion.\n      if (logBase == 1) {\n        q.e = e;\n        inexact = more;\n      } else {\n        // To calculate q.e, first get the number of digits of qd[0].\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\n        q.e = i + e * logBase - 1;\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\n      }\n      return q;\n    };\n  }();\n\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\n  function finalise(x, sd, rm, isTruncated) {\n    var digits,\n      i,\n      j,\n      k,\n      rd,\n      roundUp,\n      w,\n      xd,\n      xdi,\n      Ctor = x.constructor;\n\n    // Don't round if sd is null or undefined.\n    out: if (sd != null) {\n      xd = x.d;\n\n      // Infinity/NaN.\n      if (!xd) return x;\n\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\n      // w: the word of xd containing rd, a base 1e7 number.\n      // xdi: the index of w within xd.\n      // digits: the number of digits of w.\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\n      // they had leading zeros)\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\n\n      // Get the length of the first word of the digits array xd.\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\n      i = sd - digits;\n\n      // Is the rounding digit in the first word of xd?\n      if (i < 0) {\n        i += LOG_BASE;\n        j = sd;\n        w = xd[xdi = 0];\n\n        // Get the rounding digit at index j of w.\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\n      } else {\n        xdi = Math.ceil((i + 1) / LOG_BASE);\n        k = xd.length;\n        if (xdi >= k) {\n          if (isTruncated) {\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\n            for (; k++ <= xdi;) xd.push(0);\n            w = rd = 0;\n            digits = 1;\n            i %= LOG_BASE;\n            j = i - LOG_BASE + 1;\n          } else {\n            break out;\n          }\n        } else {\n          w = k = xd[xdi];\n\n          // Get the number of digits of w.\n          for (digits = 1; k >= 10; k /= 10) digits++;\n\n          // Get the index of rd within w.\n          i %= LOG_BASE;\n\n          // Get the index of rd within w, adjusted for leading zeros.\n          // The number of leading zeros of w is given by LOG_BASE - digits.\n          j = i - LOG_BASE + digits;\n\n          // Get the rounding digit at index j of w.\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\n        }\n      }\n\n      // Are there any non-zero digits after the rounding digit?\n      isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\n\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\n      // will give 714.\n\n      roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\n      // Check whether the digit to the left of the rounding digit is odd.\n      (i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n      if (sd < 1 || !xd[0]) {\n        xd.length = 0;\n        if (roundUp) {\n          // Convert sd to decimal places.\n          sd -= x.e + 1;\n\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\n          x.e = -sd || 0;\n        } else {\n          // Zero.\n          xd[0] = x.e = 0;\n        }\n        return x;\n      }\n\n      // Remove excess digits.\n      if (i == 0) {\n        xd.length = xdi;\n        k = 1;\n        xdi--;\n      } else {\n        xd.length = xdi + 1;\n        k = mathpow(10, LOG_BASE - i);\n\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n        // j > 0 means i > number of leading zeros of w.\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\n      }\n      if (roundUp) {\n        for (;;) {\n          // Is the digit to be rounded up in the first word of xd?\n          if (xdi == 0) {\n            // i will be the length of xd[0] before k is added.\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\n            j = xd[0] += k;\n            for (k = 1; j >= 10; j /= 10) k++;\n\n            // if i != k the length has increased.\n            if (i != k) {\n              x.e++;\n              if (xd[0] == BASE) xd[0] = 1;\n            }\n            break;\n          } else {\n            xd[xdi] += k;\n            if (xd[xdi] != BASE) break;\n            xd[xdi--] = 0;\n            k = 1;\n          }\n        }\n      }\n\n      // Remove trailing zeros.\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\n    }\n    if (external) {\n      // Overflow?\n      if (x.e > Ctor.maxE) {\n        // Infinity.\n        x.d = null;\n        x.e = NaN;\n\n        // Underflow?\n      } else if (x.e < Ctor.minE) {\n        // Zero.\n        x.e = 0;\n        x.d = [0];\n        // Ctor.underflow = true;\n      } // else Ctor.underflow = false;\n    }\n    return x;\n  }\n  function finiteToString(x, isExp, sd) {\n    if (!x.isFinite()) return nonFiniteToString(x);\n    var k,\n      e = x.e,\n      str = digitsToString(x.d),\n      len = str.length;\n    if (isExp) {\n      if (sd && (k = sd - len) > 0) {\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\n      } else if (len > 1) {\n        str = str.charAt(0) + '.' + str.slice(1);\n      }\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\n    } else if (e < 0) {\n      str = '0.' + getZeroString(-e - 1) + str;\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\n    } else if (e >= len) {\n      str += getZeroString(e + 1 - len);\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\n    } else {\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\n      if (sd && (k = sd - len) > 0) {\n        if (e + 1 === len) str += '.';\n        str += getZeroString(k);\n      }\n    }\n    return str;\n  }\n\n  // Calculate the base 10 exponent from the base 1e7 exponent.\n  function getBase10Exponent(digits, e) {\n    var w = digits[0];\n\n    // Add the number of digits of the first word of the digits array.\n    for (e *= LOG_BASE; w >= 10; w /= 10) e++;\n    return e;\n  }\n  function getLn10(Ctor, sd, pr) {\n    if (sd > LN10_PRECISION) {\n      // Reset global state in case the exception is caught.\n      external = true;\n      if (pr) Ctor.precision = pr;\n      throw Error(precisionLimitExceeded);\n    }\n    return finalise(new Ctor(LN10), sd, 1, true);\n  }\n  function getPi(Ctor, sd, rm) {\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\n    return finalise(new Ctor(PI), sd, rm, true);\n  }\n  function getPrecision(digits) {\n    var w = digits.length - 1,\n      len = w * LOG_BASE + 1;\n    w = digits[w];\n\n    // If non-zero...\n    if (w) {\n      // Subtract the number of trailing zeros of the last word.\n      for (; w % 10 == 0; w /= 10) len--;\n\n      // Add the number of digits of the first word.\n      for (w = digits[0]; w >= 10; w /= 10) len++;\n    }\n    return len;\n  }\n  function getZeroString(k) {\n    var zs = '';\n    for (; k--;) zs += '0';\n    return zs;\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\n  function intPow(Ctor, x, n, pr) {\n    var isTruncated,\n      r = new Ctor(1),\n      // Max n of 9007199254740991 takes 53 loop iterations.\n      // Maximum digits array length; leaves [28, 34] guard digits.\n      k = Math.ceil(pr / LOG_BASE + 4);\n    external = false;\n    for (;;) {\n      if (n % 2) {\n        r = r.times(x);\n        if (truncate(r.d, k)) isTruncated = true;\n      }\n      n = mathfloor(n / 2);\n      if (n === 0) {\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\n        n = r.d.length - 1;\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\n        break;\n      }\n      x = x.times(x);\n      truncate(x.d, k);\n    }\n    external = true;\n    return r;\n  }\n  function isOdd(n) {\n    return n.d[n.d.length - 1] & 1;\n  }\n\n  /*\r\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n   */\n  function maxOrMin(Ctor, args, ltgt) {\n    var y,\n      x = new Ctor(args[0]),\n      i = 0;\n    for (; ++i < args.length;) {\n      y = new Ctor(args[i]);\n      if (!y.s) {\n        x = y;\n        break;\n      } else if (x[ltgt](y)) {\n        x = y;\n      }\n    }\n    return x;\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\n  function naturalExponential(x, sd) {\n    var denominator,\n      guard,\n      j,\n      pow,\n      sum,\n      t,\n      wpr,\n      rep = 0,\n      i = 0,\n      k = 0,\n      Ctor = x.constructor,\n      rm = Ctor.rounding,\n      pr = Ctor.precision;\n\n    // 0/NaN/Infinity?\n    if (!x.d || !x.d[0] || x.e > 17) {\n      return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);\n    }\n    if (sd == null) {\n      external = false;\n      wpr = pr;\n    } else {\n      wpr = sd;\n    }\n    t = new Ctor(0.03125);\n\n    // while abs(x) >= 0.1\n    while (x.e > -2) {\n      // x = x / 2^5\n      x = x.times(t);\n      k += 5;\n    }\n\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\n    // necessary to ensure the first 4 rounding digits are correct.\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\n    wpr += guard;\n    denominator = pow = sum = new Ctor(1);\n    Ctor.precision = wpr;\n    for (;;) {\n      pow = finalise(pow.times(x), wpr, 1);\n      denominator = denominator.times(++i);\n      t = sum.plus(divide(pow, denominator, wpr, 1));\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n        j = k;\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\n\n        // Check to see if the first 4 rounding digits are [49]999.\n        // If so, repeat the summation with a higher precision, otherwise\n        // e.g. with precision: 18, rounding: 1\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\n        // `wpr - guard` is the index of first rounding digit.\n        if (sd == null) {\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n            Ctor.precision = wpr += 10;\n            denominator = pow = t = new Ctor(1);\n            i = 0;\n            rep++;\n          } else {\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\n          }\n        } else {\n          Ctor.precision = pr;\n          return sum;\n        }\n      }\n      sum = t;\n    }\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\n  function naturalLogarithm(y, sd) {\n    var c,\n      c0,\n      denominator,\n      e,\n      numerator,\n      rep,\n      sum,\n      t,\n      wpr,\n      x1,\n      x2,\n      n = 1,\n      guard = 10,\n      x = y,\n      xd = x.d,\n      Ctor = x.constructor,\n      rm = Ctor.rounding,\n      pr = Ctor.precision;\n\n    // Is x negative or Infinity, NaN, 0 or 1?\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\n    }\n    if (sd == null) {\n      external = false;\n      wpr = pr;\n    } else {\n      wpr = sd;\n    }\n    Ctor.precision = wpr += guard;\n    c = digitsToString(xd);\n    c0 = c.charAt(0);\n    if (Math.abs(e = x.e) < 1.5e15) {\n      // Argument reduction.\n      // The series converges faster the closer the argument is to 1, so using\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\n      // later be divided by this number, then separate out the power of 10 using\n      // ln(a*10^b) = ln(a) + b*ln(10).\n\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\n      // max n is 6 (gives 0.7 - 1.3)\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\n        x = x.times(y);\n        c = digitsToString(x.d);\n        c0 = c.charAt(0);\n        n++;\n      }\n      e = x.e;\n      if (c0 > 1) {\n        x = new Ctor('0.' + c);\n        e++;\n      } else {\n        x = new Ctor(c0 + '.' + c.slice(1));\n      }\n    } else {\n      // The argument reduction method above may result in overflow if the argument y is a massive\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\n      Ctor.precision = pr;\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\n    }\n\n    // x1 is x reduced to a value near 1.\n    x1 = x;\n\n    // Taylor series.\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\n    x2 = finalise(x.times(x), wpr, 1);\n    denominator = 3;\n    for (;;) {\n      numerator = finalise(numerator.times(x2), wpr, 1);\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n        sum = sum.times(2);\n\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\n        sum = divide(sum, new Ctor(n), wpr, 1);\n\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\n        // been repeated previously) and the first 4 rounding digits 9999?\n        // If so, restart the summation with a higher precision, otherwise\n        // e.g. with precision: 12, rounding: 1\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\n        // `wpr - guard` is the index of first rounding digit.\n        if (sd == null) {\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n            Ctor.precision = wpr += guard;\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\n            x2 = finalise(x.times(x), wpr, 1);\n            denominator = rep = 1;\n          } else {\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\n          }\n        } else {\n          Ctor.precision = pr;\n          return sum;\n        }\n      }\n      sum = t;\n      denominator += 2;\n    }\n  }\n\n  // ±Infinity, NaN.\n  function nonFiniteToString(x) {\n    // Unsigned.\n    return String(x.s * x.s / 0);\n  }\n\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\n  function parseDecimal(x, str) {\n    var e, i, len;\n\n    // Decimal point?\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n    // Exponential form?\n    if ((i = str.search(/e/i)) > 0) {\n      // Determine exponent.\n      if (e < 0) e = i;\n      e += +str.slice(i + 1);\n      str = str.substring(0, i);\n    } else if (e < 0) {\n      // Integer.\n      e = str.length;\n    }\n\n    // Determine leading zeros.\n    for (i = 0; str.charCodeAt(i) === 48; i++);\n\n    // Determine trailing zeros.\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\n    str = str.slice(i, len);\n    if (str) {\n      len -= i;\n      x.e = e = e - i - 1;\n      x.d = [];\n\n      // Transform base\n\n      // e is the base 10 exponent.\n      // i is where to slice str to get the first word of the digits array.\n      i = (e + 1) % LOG_BASE;\n      if (e < 0) i += LOG_BASE;\n      if (i < len) {\n        if (i) x.d.push(+str.slice(0, i));\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\n        str = str.slice(i);\n        i = LOG_BASE - str.length;\n      } else {\n        i -= len;\n      }\n      for (; i--;) str += '0';\n      x.d.push(+str);\n      if (external) {\n        // Overflow?\n        if (x.e > x.constructor.maxE) {\n          // Infinity.\n          x.d = null;\n          x.e = NaN;\n\n          // Underflow?\n        } else if (x.e < x.constructor.minE) {\n          // Zero.\n          x.e = 0;\n          x.d = [0];\n          // x.constructor.underflow = true;\n        } // else x.constructor.underflow = false;\n      }\n    } else {\n      // Zero.\n      x.e = 0;\n      x.d = [0];\n    }\n    return x;\n  }\n\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\n  function parseOther(x, str) {\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\n    if (str.indexOf('_') > -1) {\n      str = str.replace(/(\\d)_(?=\\d)/g, '$1');\n      if (isDecimal.test(str)) return parseDecimal(x, str);\n    } else if (str === 'Infinity' || str === 'NaN') {\n      if (!+str) x.s = NaN;\n      x.e = NaN;\n      x.d = null;\n      return x;\n    }\n    if (isHex.test(str)) {\n      base = 16;\n      str = str.toLowerCase();\n    } else if (isBinary.test(str)) {\n      base = 2;\n    } else if (isOctal.test(str)) {\n      base = 8;\n    } else {\n      throw Error(invalidArgument + str);\n    }\n\n    // Is there a binary exponent part?\n    i = str.search(/p/i);\n    if (i > 0) {\n      p = +str.slice(i + 1);\n      str = str.substring(2, i);\n    } else {\n      str = str.slice(2);\n    }\n\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\n    // fraction part will be restored.\n    i = str.indexOf('.');\n    isFloat = i >= 0;\n    Ctor = x.constructor;\n    if (isFloat) {\n      str = str.replace('.', '');\n      len = str.length;\n      i = len - i;\n\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\n    }\n    xd = convertBase(str, base, BASE);\n    xe = xd.length - 1;\n\n    // Remove trailing zeros.\n    for (i = xe; xd[i] === 0; --i) xd.pop();\n    if (i < 0) return new Ctor(x.s * 0);\n    x.e = getBase10Exponent(xd, xe);\n    x.d = xd;\n    external = false;\n\n    // At what precision to perform the division to ensure exact conversion?\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\n    // Therefore using 4 * the number of digits of str will always be enough.\n    if (isFloat) x = divide(x, divisor, len * 4);\n\n    // Multiply by the binary exponent part if present.\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\n    external = true;\n    return x;\n  }\n\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\n  function sine(Ctor, x) {\n    var k,\n      len = x.d.length;\n    if (len < 3) {\n      return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\n    }\n\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\n\n    // Estimate the optimum number of times to use the argument reduction.\n    k = 1.4 * Math.sqrt(len);\n    k = k > 16 ? 16 : k | 0;\n    x = x.times(1 / tinyPow(5, k));\n    x = taylorSeries(Ctor, 2, x, x);\n\n    // Reverse argument reduction\n    var sin2_x,\n      d5 = new Ctor(5),\n      d16 = new Ctor(16),\n      d20 = new Ctor(20);\n    for (; k--;) {\n      sin2_x = x.times(x);\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\n    }\n    return x;\n  }\n\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\n    var j,\n      t,\n      u,\n      x2,\n      i = 1,\n      pr = Ctor.precision,\n      k = Math.ceil(pr / LOG_BASE);\n    external = false;\n    x2 = x.times(x);\n    u = new Ctor(y);\n    for (;;) {\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\n      t = u.plus(y);\n      if (t.d[k] !== void 0) {\n        for (j = k; t.d[j] === u.d[j] && j--;);\n        if (j == -1) break;\n      }\n      j = u;\n      u = y;\n      y = t;\n      t = j;\n      i++;\n    }\n    external = true;\n    t.d.length = k + 1;\n    return t;\n  }\n\n  // Exponent e must be positive and non-zero.\n  function tinyPow(b, e) {\n    var n = b;\n    while (--e) n *= b;\n    return n;\n  }\n\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\n  function toLessThanHalfPi(Ctor, x) {\n    var t,\n      isNeg = x.s < 0,\n      pi = getPi(Ctor, Ctor.precision, 1),\n      halfPi = pi.times(0.5);\n    x = x.abs();\n    if (x.lte(halfPi)) {\n      quadrant = isNeg ? 4 : 1;\n      return x;\n    }\n    t = x.divToInt(pi);\n    if (t.isZero()) {\n      quadrant = isNeg ? 3 : 2;\n    } else {\n      x = x.minus(t.times(pi));\n\n      // 0 <= x < pi\n      if (x.lte(halfPi)) {\n        quadrant = isOdd(t) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;\n        return x;\n      }\n      quadrant = isOdd(t) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;\n    }\n    return x.minus(pi).abs();\n  }\n\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\n  function toStringBinary(x, baseOut, sd, rm) {\n    var base,\n      e,\n      i,\n      k,\n      len,\n      roundUp,\n      str,\n      xd,\n      y,\n      Ctor = x.constructor,\n      isExp = sd !== void 0;\n    if (isExp) {\n      checkInt32(sd, 1, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n    } else {\n      sd = Ctor.precision;\n      rm = Ctor.rounding;\n    }\n    if (!x.isFinite()) {\n      str = nonFiniteToString(x);\n    } else {\n      str = finiteToString(x);\n      i = str.indexOf('.');\n\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\n      // log[2](10) = 3.321928094887362347870319429489390175864\n\n      if (isExp) {\n        base = 2;\n        if (baseOut == 16) {\n          sd = sd * 4 - 3;\n        } else if (baseOut == 8) {\n          sd = sd * 3 - 2;\n        }\n      } else {\n        base = baseOut;\n      }\n\n      // Convert the number as an integer then divide the result by its base raised to a power such\n      // that the fraction part will be restored.\n\n      // Non-integer.\n      if (i >= 0) {\n        str = str.replace('.', '');\n        y = new Ctor(1);\n        y.e = str.length - i;\n        y.d = convertBase(finiteToString(y), 10, base);\n        y.e = y.d.length;\n      }\n      xd = convertBase(str, 10, base);\n      e = len = xd.length;\n\n      // Remove trailing zeros.\n      for (; xd[--len] == 0;) xd.pop();\n      if (!xd[0]) {\n        str = isExp ? '0p+0' : '0';\n      } else {\n        if (i < 0) {\n          e--;\n        } else {\n          x = new Ctor(x);\n          x.d = xd;\n          x.e = e;\n          x = divide(x, y, sd, rm, 0, base);\n          xd = x.d;\n          e = x.e;\n          roundUp = inexact;\n        }\n\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\n        i = xd[sd];\n        k = base / 2;\n        roundUp = roundUp || xd[sd + 1] !== void 0;\n        roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));\n        xd.length = sd;\n        if (roundUp) {\n          // Rounding up may mean the previous digit has to be rounded up and so on.\n          for (; ++xd[--sd] > base - 1;) {\n            xd[sd] = 0;\n            if (!sd) {\n              ++e;\n              xd.unshift(1);\n            }\n          }\n        }\n\n        // Determine trailing zeros.\n        for (len = xd.length; !xd[len - 1]; --len);\n\n        // E.g. [4, 11, 15] becomes 4bf.\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\n\n        // Add binary exponent suffix?\n        if (isExp) {\n          if (len > 1) {\n            if (baseOut == 16 || baseOut == 8) {\n              i = baseOut == 16 ? 4 : 3;\n              for (--len; len % i; len++) str += '0';\n              xd = convertBase(str, base, baseOut);\n              for (len = xd.length; !xd[len - 1]; --len);\n\n              // xd[0] will always be be 1\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\n            } else {\n              str = str.charAt(0) + '.' + str.slice(1);\n            }\n          }\n          str = str + (e < 0 ? 'p' : 'p+') + e;\n        } else if (e < 0) {\n          for (; ++e;) str = '0' + str;\n          str = '0.' + str;\n        } else {\n          if (++e > len) for (e -= len; e--;) str += '0';else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\n        }\n      }\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\n    }\n    return x.s < 0 ? '-' + str : str;\n  }\n\n  // Does not strip trailing zeros.\n  function truncate(arr, len) {\n    if (arr.length > len) {\n      arr.length = len;\n      return true;\n    }\n  }\n\n  // Decimal methods\n\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clamp\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  sum\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\n\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n  function abs(x) {\n    return new this(x).abs();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n  function acos(x) {\n    return new this(x).acos();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n  function acosh(x) {\n    return new this(x).acosh();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\n  function add(x, y) {\n    return new this(x).plus(y);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n  function asin(x) {\n    return new this(x).asin();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n  function asinh(x) {\n    return new this(x).asinh();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n  function atan(x) {\n    return new this(x).atan();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n  function atanh(x) {\n    return new this(x).atanh();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|Decimal} The y-coordinate.\r\n   * x {number|string|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\n  function atan2(y, x) {\n    y = new this(y);\n    x = new this(x);\n    var r,\n      pr = this.precision,\n      rm = this.rounding,\n      wpr = pr + 4;\n\n    // Either NaN\n    if (!y.s || !x.s) {\n      r = new this(NaN);\n\n      // Both ±Infinity\n    } else if (!y.d && !x.d) {\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\n      r.s = y.s;\n\n      // x is ±Infinity or y is ±0\n    } else if (!x.d || y.isZero()) {\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\n      r.s = y.s;\n\n      // y is ±Infinity or x is ±0\n    } else if (!y.d || x.isZero()) {\n      r = getPi(this, wpr, 1).times(0.5);\n      r.s = y.s;\n\n      // Both non-zero and finite\n    } else if (x.s < 0) {\n      this.precision = wpr;\n      this.rounding = 1;\n      r = this.atan(divide(y, x, wpr, 1));\n      x = getPi(this, wpr, 1);\n      this.precision = pr;\n      this.rounding = rm;\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\n    } else {\n      r = this.atan(divide(y, x, wpr, 1));\n    }\n    return r;\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n  function cbrt(x) {\n    return new this(x).cbrt();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n  function ceil(x) {\n    return finalise(x = new this(x), x.e + 1, 2);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */\n  function clamp(x, min, max) {\n    return new this(x).clamp(min, max);\n  }\n\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *   defaults   {true}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\n  function config(obj) {\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\n    var i,\n      p,\n      v,\n      useDefaults = obj.defaults === true,\n      ps = ['precision', 1, MAX_DIGITS, 'rounding', 0, 8, 'toExpNeg', -EXP_LIMIT, 0, 'toExpPos', 0, EXP_LIMIT, 'maxE', 0, EXP_LIMIT, 'minE', -EXP_LIMIT, 0, 'modulo', 0, 9];\n    for (i = 0; i < ps.length; i += 3) {\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\n      if ((v = obj[p]) !== void 0) {\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;else throw Error(invalidArgument + p + ': ' + v);\n      }\n    }\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\n    if ((v = obj[p]) !== void 0) {\n      if (v === true || v === false || v === 0 || v === 1) {\n        if (v) {\n          if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n            this[p] = true;\n          } else {\n            throw Error(cryptoUnavailable);\n          }\n        } else {\n          this[p] = false;\n        }\n      } else {\n        throw Error(invalidArgument + p + ': ' + v);\n      }\n    }\n    return this;\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n  function cos(x) {\n    return new this(x).cos();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n  function cosh(x) {\n    return new this(x).cosh();\n  }\n\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\n  function clone(obj) {\n    var i, p, ps;\n\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|Decimal} A numeric value.\r\n     *\r\n     */\n    function Decimal(v) {\n      var e,\n        i,\n        t,\n        x = this;\n\n      // Decimal called without new.\n      if (!(x instanceof Decimal)) return new Decimal(v);\n\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\n      // which points to Object.\n      x.constructor = Decimal;\n\n      // Duplicate.\n      if (isDecimalInstance(v)) {\n        x.s = v.s;\n        if (external) {\n          if (!v.d || v.e > Decimal.maxE) {\n            // Infinity.\n            x.e = NaN;\n            x.d = null;\n          } else if (v.e < Decimal.minE) {\n            // Zero.\n            x.e = 0;\n            x.d = [0];\n          } else {\n            x.e = v.e;\n            x.d = v.d.slice();\n          }\n        } else {\n          x.e = v.e;\n          x.d = v.d ? v.d.slice() : v.d;\n        }\n        return;\n      }\n      t = typeof v;\n      if (t === 'number') {\n        if (v === 0) {\n          x.s = 1 / v < 0 ? -1 : 1;\n          x.e = 0;\n          x.d = [0];\n          return;\n        }\n        if (v < 0) {\n          v = -v;\n          x.s = -1;\n        } else {\n          x.s = 1;\n        }\n\n        // Fast path for small integers.\n        if (v === ~~v && v < 1e7) {\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\n          if (external) {\n            if (e > Decimal.maxE) {\n              x.e = NaN;\n              x.d = null;\n            } else if (e < Decimal.minE) {\n              x.e = 0;\n              x.d = [0];\n            } else {\n              x.e = e;\n              x.d = [v];\n            }\n          } else {\n            x.e = e;\n            x.d = [v];\n          }\n          return;\n\n          // Infinity, NaN.\n        } else if (v * 0 !== 0) {\n          if (!v) x.s = NaN;\n          x.e = NaN;\n          x.d = null;\n          return;\n        }\n        return parseDecimal(x, v.toString());\n      } else if (t !== 'string') {\n        throw Error(invalidArgument + v);\n      }\n\n      // Minus sign?\n      if ((i = v.charCodeAt(0)) === 45) {\n        v = v.slice(1);\n        x.s = -1;\n      } else {\n        // Plus sign?\n        if (i === 43) v = v.slice(1);\n        x.s = 1;\n      }\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\n    }\n    Decimal.prototype = P;\n    Decimal.ROUND_UP = 0;\n    Decimal.ROUND_DOWN = 1;\n    Decimal.ROUND_CEIL = 2;\n    Decimal.ROUND_FLOOR = 3;\n    Decimal.ROUND_HALF_UP = 4;\n    Decimal.ROUND_HALF_DOWN = 5;\n    Decimal.ROUND_HALF_EVEN = 6;\n    Decimal.ROUND_HALF_CEIL = 7;\n    Decimal.ROUND_HALF_FLOOR = 8;\n    Decimal.EUCLID = 9;\n    Decimal.config = Decimal.set = config;\n    Decimal.clone = clone;\n    Decimal.isDecimal = isDecimalInstance;\n    Decimal.abs = abs;\n    Decimal.acos = acos;\n    Decimal.acosh = acosh; // ES6\n    Decimal.add = add;\n    Decimal.asin = asin;\n    Decimal.asinh = asinh; // ES6\n    Decimal.atan = atan;\n    Decimal.atanh = atanh; // ES6\n    Decimal.atan2 = atan2;\n    Decimal.cbrt = cbrt; // ES6\n    Decimal.ceil = ceil;\n    Decimal.clamp = clamp;\n    Decimal.cos = cos;\n    Decimal.cosh = cosh; // ES6\n    Decimal.div = div;\n    Decimal.exp = exp;\n    Decimal.floor = floor;\n    Decimal.hypot = hypot; // ES6\n    Decimal.ln = ln;\n    Decimal.log = log;\n    Decimal.log10 = log10; // ES6\n    Decimal.log2 = log2; // ES6\n    Decimal.max = max;\n    Decimal.min = min;\n    Decimal.mod = mod;\n    Decimal.mul = mul;\n    Decimal.pow = pow;\n    Decimal.random = random;\n    Decimal.round = round;\n    Decimal.sign = sign; // ES6\n    Decimal.sin = sin;\n    Decimal.sinh = sinh; // ES6\n    Decimal.sqrt = sqrt;\n    Decimal.sub = sub;\n    Decimal.sum = sum;\n    Decimal.tan = tan;\n    Decimal.tanh = tanh; // ES6\n    Decimal.trunc = trunc; // ES6\n\n    if (obj === void 0) obj = {};\n    if (obj) {\n      if (obj.defaults !== true) {\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\n        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\n      }\n    }\n    Decimal.config(obj);\n    return Decimal;\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\n  function div(x, y) {\n    return new this(x).div(y);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\n  function exp(x) {\n    return new this(x).exp();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n  function floor(x) {\n    return finalise(x = new this(x), x.e + 1, 3);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\n  function hypot() {\n    var i,\n      n,\n      t = new this(0);\n    external = false;\n    for (i = 0; i < arguments.length;) {\n      n = new this(arguments[i++]);\n      if (!n.d) {\n        if (n.s) {\n          external = true;\n          return new this(1 / 0);\n        }\n        t = n;\n      } else if (t.d) {\n        t = t.plus(n.times(n));\n      }\n    }\n    external = true;\n    return t.sqrt();\n  }\n\n  /*\r\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n   * otherwise return false.\r\n   *\r\n   */\n  function isDecimalInstance(obj) {\n    return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n  function ln(x) {\n    return new this(x).ln();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|Decimal} The argument of the logarithm.\r\n   * y {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\n  function log(x, y) {\n    return new this(x).log(y);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n  function log2(x) {\n    return new this(x).log(2);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n  function log10(x) {\n    return new this(x).log(10);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\n  function max() {\n    return maxOrMin(this, arguments, 'lt');\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\n  function min() {\n    return maxOrMin(this, arguments, 'gt');\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\n  function mod(x, y) {\n    return new this(x).mod(y);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\n  function mul(x, y) {\n    return new this(x).mul(y);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The base.\r\n   * y {number|string|Decimal} The exponent.\r\n   *\r\n   */\n  function pow(x, y) {\n    return new this(x).pow(y);\n  }\n\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\n  function random(sd) {\n    var d,\n      e,\n      k,\n      n,\n      i = 0,\n      r = new this(1),\n      rd = [];\n    if (sd === void 0) sd = this.precision;else checkInt32(sd, 1, MAX_DIGITS);\n    k = Math.ceil(sd / LOG_BASE);\n    if (!this.crypto) {\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\n\n      // Browsers supporting crypto.getRandomValues.\n    } else if (crypto.getRandomValues) {\n      d = crypto.getRandomValues(new Uint32Array(k));\n      for (; i < k;) {\n        n = d[i];\n\n        // 0 <= n < 4294967296\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\n        if (n >= 4.29e9) {\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\n        } else {\n          // 0 <= n <= 4289999999\n          // 0 <= (n % 1e7) <= 9999999\n          rd[i++] = n % 1e7;\n        }\n      }\n\n      // Node.js supporting crypto.randomBytes.\n    } else if (crypto.randomBytes) {\n      // buffer\n      d = crypto.randomBytes(k *= 4);\n      for (; i < k;) {\n        // 0 <= n < 2147483648\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\n\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\n        if (n >= 2.14e9) {\n          crypto.randomBytes(4).copy(d, i);\n        } else {\n          // 0 <= n <= 2139999999\n          // 0 <= (n % 1e7) <= 9999999\n          rd.push(n % 1e7);\n          i += 4;\n        }\n      }\n      i = k / 4;\n    } else {\n      throw Error(cryptoUnavailable);\n    }\n    k = rd[--i];\n    sd %= LOG_BASE;\n\n    // Convert trailing digits to zeros according to sd.\n    if (k && sd) {\n      n = mathpow(10, LOG_BASE - sd);\n      rd[i] = (k / n | 0) * n;\n    }\n\n    // Remove trailing words which are zero.\n    for (; rd[i] === 0; i--) rd.pop();\n\n    // Zero?\n    if (i < 0) {\n      e = 0;\n      rd = [0];\n    } else {\n      e = -1;\n\n      // Remove leading words which are zero and adjust exponent accordingly.\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\n\n      // Count the digits of the first word of rd to determine leading zeros.\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\n\n      // Adjust the exponent for leading zeros of the first word of rd.\n      if (k < LOG_BASE) e -= LOG_BASE - k;\n    }\n    r.e = e;\n    r.d = rd;\n    return r;\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n  function round(x) {\n    return finalise(x = new this(x), x.e + 1, this.rounding);\n  }\n\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n  function sign(x) {\n    x = new this(x);\n    return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n  function sin(x) {\n    return new this(x).sin();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n  function sinh(x) {\n    return new this(x).sinh();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n  function sqrt(x) {\n    return new this(x).sqrt();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\n  function sub(x, y) {\n    return new this(x).sub(y);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * Only the result is rounded, not the intermediate calculations.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\n  function sum() {\n    var i = 0,\n      args = arguments,\n      x = new this(args[i]);\n    external = false;\n    for (; x.s && ++i < args.length;) x = x.plus(args[i]);\n    external = true;\n    return finalise(x, this.precision, this.rounding);\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n  function tan(x) {\n    return new this(x).tan();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\n  function tanh(x) {\n    return new this(x).tanh();\n  }\n\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\n  function trunc(x) {\n    return finalise(x = new this(x), x.e + 1, 1);\n  }\n\n  // Create and configure initial Decimal constructor.\n  Decimal = clone(DEFAULTS);\n  Decimal.prototype.constructor = Decimal;\n  Decimal['default'] = Decimal.Decimal = Decimal;\n\n  // Create the internal constants from their string values.\n  LN10 = new Decimal(LN10);\n  PI = new Decimal(PI);\n\n  // Export.\n\n  // AMD.\n  if (typeof define == 'function' && define.amd) {\n    define(function () {\n      return Decimal;\n    });\n\n    // Node and other environments that support module.exports.\n  } else if (typeof module != 'undefined' && module.exports) {\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\n      P[Symbol['for']('nodejs.util.inspect.custom')] = P.toString;\n      P[Symbol.toStringTag] = 'Decimal';\n    }\n    module.exports = Decimal;\n\n    // Browser.\n  } else {\n    if (!globalScope) {\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\n    }\n    noConflict = globalScope.Decimal;\n    Decimal.noConflict = function () {\n      globalScope.Decimal = noConflict;\n      return Decimal;\n    };\n    globalScope.Decimal = Decimal;\n  }\n})(this);","map":{"version":3,"names":["globalScope","EXP_LIMIT","MAX_DIGITS","NUMERALS","LN10","PI","DEFAULTS","precision","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","Decimal","inexact","noConflict","quadrant","external","decimalError","invalidArgument","precisionLimitExceeded","cryptoUnavailable","tag","mathfloor","Math","floor","mathpow","pow","isBinary","isHex","isOctal","isDecimal","BASE","LOG_BASE","MAX_SAFE_INTEGER","LN10_PRECISION","length","PI_PRECISION","P","toStringTag","absoluteValue","abs","x","constructor","s","finalise","ceil","e","clampedTo","clamp","min","max","k","Ctor","NaN","gt","Error","cmp","comparedTo","y","i","j","xdL","ydL","xd","d","yd","xs","ys","cosine","cos","pr","rm","sd","toLessThanHalfPi","neg","cubeRoot","cbrt","m","n","r","rep","t","t3","t3plusx","isFinite","isZero","digitsToString","toExponential","slice","indexOf","toString","times","plus","divide","eq","charAt","decimalPlaces","dp","w","dividedBy","div","dividedToIntegerBy","divToInt","equals","greaterThan","greaterThanOrEqualTo","gte","hyperbolicCosine","cosh","len","one","tinyPow","taylorSeries","cosh2_x","d8","minus","hyperbolicSine","sinh","sqrt","sinh2_x","d5","d16","d20","hyperbolicTangent","tanh","inverseCosine","acos","halfPi","isNeg","getPi","asin","inverseHyperbolicCosine","acosh","lte","ln","inverseHyperbolicSine","asinh","inverseHyperbolicTangent","atanh","wpr","xsd","inverseSine","atan","inverseTangent","px","x2","isInteger","isInt","isNaN","isNegative","isPositive","isPos","lessThan","lt","lessThanOrEqualTo","logarithm","log","base","isBase10","denominator","inf","num","arg","guard","naturalLogarithm","getLn10","checkRoundingDigits","sub","xe","xLTy","reverse","push","pop","shift","getBase10Exponent","mod","q","naturalExponential","exp","negated","add","carry","unshift","z","getPrecision","round","sine","sin","squareRoot","tangent","tan","mul","rL","toBinary","toStringBinary","toDecimalPlaces","toDP","checkInt32","str","finiteToString","toFixed","toFraction","maxD","d0","d1","d2","n0","n1","toHexadecimal","toHex","toNearest","toNumber","toOctal","toPower","yn","intPow","toPrecision","toSignificantDigits","toSD","truncated","trunc","valueOf","toJSON","ws","indexOfLastWord","getZeroString","repeating","di","rd","convertBase","baseIn","baseOut","arr","arrL","strL","cos2x","multiplyInteger","temp","compare","a","b","aL","bL","subtract","logBase","more","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","sign","isTruncated","digits","roundUp","xdi","out","isExp","nonFiniteToString","zs","truncate","isOdd","maxOrMin","args","ltgt","sum","c","c0","numerator","x1","String","parseDecimal","replace","search","substring","charCodeAt","parseOther","divisor","isFloat","p","test","toLowerCase","sin2_x","isHyperbolic","u","pi","atan2","config","obj","v","useDefaults","defaults","ps","getRandomValues","randomBytes","clone","isDecimalInstance","prototype","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","set","hypot","log10","log2","random","hasOwnProperty","arguments","Uint32Array","copy","define","amd","module","exports","Symbol","iterator","self","window"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/decimal.js/decimal.js"],"sourcesContent":[";(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*!\r\n   *  decimal.js v10.4.3\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The maximum exponent magnitude.\r\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\n  var EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n    // Base conversion alphabet.\r\n    NUMERALS = '0123456789abcdef',\r\n\r\n    // The natural logarithm of 10 (1025 digits).\r\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n    // Pi (1025 digits).\r\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    DEFAULTS = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used when rounding to `precision`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN  6 The IEEE 754 remainder function.\r\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n      //\r\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n      // be used, but they may not give useful results.\r\n      modulo: 1,                             // 0 to 9\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // JavaScript numbers: -324  (5e-324)\r\n      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      crypto: false                          // true/false\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    Decimal, inexact, noConflict, quadrant,\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n    cryptoUnavailable = decimalError + 'crypto unavailable',\r\n    tag = '[object Decimal]',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n    LN10_PRECISION = LN10.length - 1,\r\n    PI_PRECISION = PI.length - 1,\r\n\r\n    // Decimal.prototype object\r\n    P = { toStringTag: tag };\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  clampedTo                 clamp\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\r\n  P.ceil = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n   * delineated by `min` and `max`.\r\n   *\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */\r\n  P.clampedTo = P.clamp = function (min, max) {\r\n    var k,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n    min = new Ctor(min);\r\n    max = new Ctor(max);\r\n    if (!min.s || !max.s) return new Ctor(NaN);\r\n    if (min.gt(max)) throw Error(invalidArgument + max);\r\n    k = x.cmp(min);\r\n    return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this,\r\n      xd = x.d,\r\n      yd = (y = new x.constructor(y)).d,\r\n      xs = x.s,\r\n      ys = y.s;\r\n\r\n    // Either NaN or ±Infinity?\r\n    if (!xd || !yd) {\r\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Either zero?\r\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n    // Signs differ?\r\n    if (xs !== ys) return xs;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\r\n  P.cosine = P.cos = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.d) return new Ctor(NaN);\r\n\r\n    // cos(0) = cos(-0) = 1\r\n    if (!x.d[0]) return new Ctor(1);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\r\n  P.cubeRoot = P.cbrt = function () {\r\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n     // Math.cbrt underflow/overflow?\r\n     // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n    if (!s || Math.abs(s) == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      e = x.e;\r\n\r\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n      s = mathpow(n, 1 / 3);\r\n\r\n      // Rarely, e may be one less than the result exponent value.\r\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n      r.s = x.s;\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Halley's method.\r\n    // TODO? Compare Newton's method.\r\n    for (;;) {\r\n      t = r;\r\n      t3 = t.times(t).times(t);\r\n      t3plusx = t3.plus(x);\r\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n        // , i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var w,\r\n      d = this.d,\r\n      n = NaN;\r\n\r\n    if (d) {\r\n      w = d.length - 1;\r\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      w = d[w];\r\n      if (w) for (; w % 10 == 0; w /= 10) n--;\r\n      if (n < 0) n = 0;\r\n    }\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.divToInt = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\r\n  P.floor = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 3);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    var k = this.cmp(y);\r\n    return k == 1 || k === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicCosine = P.cosh = function () {\r\n    var k, n, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      one = new Ctor(1);\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n    if (x.isZero()) return one;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    // TODO? Estimation reused from cosine() and may not be optimal here.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      n = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      n = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n    // Reverse argument reduction\r\n    var cosh2_x,\r\n      i = k,\r\n      d8 = new Ctor(8);\r\n    for (; i--;) {\r\n      cosh2_x = x.times(x);\r\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n    }\r\n\r\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicSine = P.sinh = function () {\r\n    var k, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n    } else {\r\n\r\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n      // 3 multiplications and 1 addition\r\n\r\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n      // 4 multiplications and 2 additions\r\n\r\n      // Estimate the optimum number of times to use the argument reduction.\r\n      k = 1.4 * Math.sqrt(len);\r\n      k = k > 16 ? 16 : k | 0;\r\n\r\n      x = x.times(1 / tinyPow(5, k));\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n      // Reverse argument reduction\r\n      var sinh2_x,\r\n        d5 = new Ctor(5),\r\n        d16 = new Ctor(16),\r\n        d20 = new Ctor(20);\r\n      for (; k--;) {\r\n        sinh2_x = x.times(x);\r\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n      }\r\n    }\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\r\n  P.hyperbolicTangent = P.tanh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 7;\r\n    Ctor.rounding = 1;\r\n\r\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\r\n  P.inverseCosine = P.acos = function () {\r\n    var halfPi,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      k = x.abs().cmp(1),\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n      return k === 0\r\n        // |x| is 1\r\n        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n        // |x| > 1 or x is NaN\r\n        : new Ctor(NaN);\r\n    }\r\n\r\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.asin();\r\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return halfPi.minus(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\r\n  P.inverseHyperbolicCosine = P.acosh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n    if (!x.isFinite()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\r\n  P.inverseHyperbolicSine = P.asinh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\r\n  P.inverseHyperbolicTangent = P.atanh = function () {\r\n    var pr, rm, wpr, xsd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    xsd = x.sd();\r\n\r\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n    Ctor.precision = wpr = xsd - x.e;\r\n\r\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n    Ctor.precision = pr + 4;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.ln();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(0.5);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\r\n  P.inverseSine = P.asin = function () {\r\n    var halfPi, k,\r\n      pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    k = x.abs().cmp(1);\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n\r\n      // |x| is 1\r\n      if (k === 0) {\r\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        halfPi.s = x.s;\r\n        return halfPi;\r\n      }\r\n\r\n      // |x| > 1 or x is NaN\r\n      return new Ctor(NaN);\r\n    }\r\n\r\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.inverseTangent = P.atan = function () {\r\n    var i, j, k, n, px, t, r, wpr, x2,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (!x.isFinite()) {\r\n      if (!x.s) return new Ctor(NaN);\r\n      if (pr + 4 <= PI_PRECISION) {\r\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        r.s = x.s;\r\n        return r;\r\n      }\r\n    } else if (x.isZero()) {\r\n      return new Ctor(x);\r\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n\r\n    Ctor.precision = wpr = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n    // Argument reduction\r\n    // Ensure |x| < 0.42\r\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n    external = false;\r\n\r\n    j = Math.ceil(wpr / LOG_BASE);\r\n    n = 1;\r\n    x2 = x.times(x);\r\n    r = new Ctor(x);\r\n    px = x;\r\n\r\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n    for (; i !== -1;) {\r\n      px = px.times(x2);\r\n      t = r.minus(px.div(n += 2));\r\n\r\n      px = px.times(x2);\r\n      r = t.plus(px.div(n += 2));\r\n\r\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n    }\r\n\r\n    if (k) r = r.times(2 << (k - 1));\r\n\r\n    external = true;\r\n\r\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.d;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isInt = function () {\r\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isNeg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.isPos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.d && this.d[0] === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var isBase10, d, denominator, k, inf, num, sd, r,\r\n      arg = this,\r\n      Ctor = arg.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding,\r\n      guard = 5;\r\n\r\n    // Default base is 10.\r\n    if (base == null) {\r\n      base = new Ctor(10);\r\n      isBase10 = true;\r\n    } else {\r\n      base = new Ctor(base);\r\n      d = base.d;\r\n\r\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n      isBase10 = base.eq(10);\r\n    }\r\n\r\n    d = arg.d;\r\n\r\n    // Is arg negative, non-finite, 0 or 1?\r\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n    }\r\n\r\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n    // integer power of 10.\r\n    if (isBase10) {\r\n      if (d.length > 1) {\r\n        inf = true;\r\n      } else {\r\n        for (k = d[0]; k % 10 === 0;) k /= 10;\r\n        inf = k !== 1;\r\n      }\r\n    }\r\n\r\n    external = false;\r\n    sd = pr + guard;\r\n    num = naturalLogarithm(arg, sd);\r\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n    // The result will have 5 rounding digits.\r\n    r = divide(num, denominator, sd, 1);\r\n\r\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n    // calculate 10 further digits.\r\n    //\r\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n    // further digits, the last 14 are nines, round up and assume the result is exact.\r\n    // Also assume the result is exact if the last 14 are zero.\r\n    //\r\n    // Example of a result that will be incorrectly rounded:\r\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n    // place is still 2.6.\r\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n      do {\r\n        sd += 10;\r\n        num = naturalLogarithm(arg, sd);\r\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n        r = divide(num, denominator, sd, 1);\r\n\r\n        if (!inf) {\r\n\r\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n            r = finalise(r, pr + 1, 0);\r\n          }\r\n\r\n          break;\r\n        }\r\n      } while (checkRoundingDigits(r.d, k += 10, rm));\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'lt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'gt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return y negated if x is finite and y is ±Infinity.\r\n      else if (x.d) y.s = -y.s;\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with different signs.\r\n      // Return NaN if both are ±Infinity with the same sign.\r\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n    // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.plus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return y negated if x is zero and y is non-zero.\r\n      if (yd[0]) y.s = -y.s;\r\n\r\n      // Return x if y is zero and x is non-zero.\r\n      else if (xd[0]) y = new Ctor(x);\r\n\r\n      // Return zero if both are zero.\r\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n      else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    e = mathfloor(y.e / LOG_BASE);\r\n    xe = mathfloor(x.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of\r\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to `xd` if shorter.\r\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n    // Return x if y is ±Infinity or x is ±0.\r\n    if (!y.d || x.d && !x.d[0]) {\r\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n    }\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n\r\n    if (Ctor.modulo == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // result = x - q * y    where  0 <= result < abs(y)\r\n      q = divide(x, y.abs(), 0, 3, 1);\r\n      q.s *= y.s;\r\n    } else {\r\n      q = divide(x, y, 0, Ctor.modulo, 1);\r\n    }\r\n\r\n    q = q.times(y);\r\n\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return naturalExponential(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return naturalLogarithm(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with the same sign.\r\n      // Return NaN if both are ±Infinity with different signs.\r\n      // Return y if x is finite and y is ±Infinity.\r\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n     // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!yd[0]) y = new Ctor(x);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    k = mathfloor(x.e / LOG_BASE);\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var k,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    if (x.d) {\r\n      k = getPrecision(x.d);\r\n      if (z && x.e + 1 > k) k = x.e + 1;\r\n    } else {\r\n      k = NaN;\r\n    }\r\n\r\n    return k;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.round = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\r\n  P.sine = P.sin = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, sd, r, rep, t,\r\n      x = this,\r\n      d = x.d,\r\n      e = x.e,\r\n      s = x.s,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !d || !d[0]) {\r\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n    }\r\n\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(d);\r\n\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.tangent = P.tan = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.sin();\r\n    x.s = 1;\r\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    y.s *= x.s;\r\n\r\n     // If either is NaN, ±Infinity or ±0...\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n        // Return NaN if either is NaN.\r\n        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n        ? NaN\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        // Return ±0 if either is ±0.\r\n        : !xd || !yd ? y.s / 0 : y.s * 0);\r\n    }\r\n\r\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = getBase10Exponent(r, e);\r\n\r\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toBinary = function (sd, rm) {\r\n    return toStringBinary(this, 2, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return finalise(x, dp + x.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), dp + 1, rm);\r\n      str = finiteToString(x, true, dp + 1);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n      str = finiteToString(y, false, dp + y.e + 1);\r\n    }\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\r\n  P.toFraction = function (maxD) {\r\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n      x = this,\r\n      xd = x.d,\r\n      Ctor = x.constructor;\r\n\r\n    if (!xd) return new Ctor(x);\r\n\r\n    n1 = d0 = new Ctor(1);\r\n    d1 = n0 = new Ctor(0);\r\n\r\n    d = new Ctor(d1);\r\n    e = d.e = getPrecision(xd) - x.e - 1;\r\n    k = e % LOG_BASE;\r\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n    if (maxD == null) {\r\n\r\n      // d is 10**e, the minimum max-denominator needed.\r\n      maxD = e > 0 ? d : n1;\r\n    } else {\r\n      n = new Ctor(maxD);\r\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n    }\r\n\r\n    external = false;\r\n    n = new Ctor(digitsToString(xd));\r\n    pr = Ctor.precision;\r\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n    for (;;)  {\r\n      q = divide(n, d, 0, 1, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.cmp(maxD) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      d2 = n1;\r\n      n1 = n0.plus(q.times(d2));\r\n      n0 = d2;\r\n      d2 = d;\r\n      d = n.minus(q.times(d2));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n        ? [n1, d1] : [n0, d0];\r\n\r\n    Ctor.precision = pr;\r\n    external = true;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toHexadecimal = P.toHex = function (sd, rm) {\r\n    return toStringBinary(this, 16, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toNearest = function (y, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (y == null) {\r\n\r\n      // If x is not finite, return x.\r\n      if (!x.d) return x;\r\n\r\n      y = new Ctor(1);\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      y = new Ctor(y);\r\n      if (rm === void 0) {\r\n        rm = Ctor.rounding;\r\n      } else {\r\n        checkInt32(rm, 0, 8);\r\n      }\r\n\r\n      // If x is not finite, return x if y is not NaN, else NaN.\r\n      if (!x.d) return y.s ? x : y;\r\n\r\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n      if (!y.d) {\r\n        if (y.s) y.s = x.s;\r\n        return y;\r\n      }\r\n    }\r\n\r\n    // If y is not zero, calculate the nearest multiple of y to x.\r\n    if (y.d[0]) {\r\n      external = false;\r\n      x = divide(x, y, 0, rm, 1).times(y);\r\n      external = true;\r\n      finalise(x);\r\n\r\n    // If y is zero, return zero with the sign of x.\r\n    } else {\r\n      y.s = x.s;\r\n      x = y;\r\n    }\r\n\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toOctal = function (sd, rm) {\r\n    return toStringBinary(this, 8, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n\r\n   *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, rm, s,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // Either ±Infinity, NaN or ±0?\r\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (x.eq(1)) return x;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n    // y exponent\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = intPow(Ctor, x, k, pr);\r\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n    }\r\n\r\n    s = x.s;\r\n\r\n    // if x is negative\r\n    if (s < 0) {\r\n\r\n      // if y is not an integer\r\n      if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n      // Result is positive if x is negative and the last digit of integer y is even.\r\n      if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n      // if x.eq(-1)\r\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n        x.s = s;\r\n        return x;\r\n      }\r\n    }\r\n\r\n    // Estimate result exponent.\r\n    // x^y = 10^e,  where e = y * log10(x)\r\n    // log10(x) = log10(x_significand) + x_exponent\r\n    // log10(x_significand) = ln(x_significand) / ln(10)\r\n    k = mathpow(+x, yn);\r\n    e = k == 0 || !isFinite(k)\r\n      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n      : new Ctor(k + '').e;\r\n\r\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n    // Overflow/underflow?\r\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n    external = false;\r\n    Ctor.rounding = x.s = 1;\r\n\r\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n    // new Decimal(2.32456).pow('2087987436534566.46411')\r\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n    k = Math.min(12, (e + '').length);\r\n\r\n    // r = x^y = exp(y*ln(x))\r\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n    if (r.d) {\r\n\r\n      // Truncate to the required precision plus five rounding digits.\r\n      r = finalise(r, pr + 5, 1);\r\n\r\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n      // the result.\r\n      if (checkRoundingDigits(r.d, pr, rm)) {\r\n        e = pr + 10;\r\n\r\n        // Truncate to the increased precision plus five rounding digits.\r\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n      }\r\n    }\r\n\r\n    r.s = s;\r\n    external = true;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), sd, rm);\r\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return finalise(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\r\n  P.truncated = P.trunc = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\r\n  function checkRoundingDigits(d, i, rm, repeating) {\r\n    var di, k, r, rd;\r\n\r\n    // Get the length of the first word of the array d.\r\n    for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n    // Is the rounding digit in the first word of d?\r\n    if (--i < 0) {\r\n      i += LOG_BASE;\r\n      di = 0;\r\n    } else {\r\n      di = Math.ceil((i + 1) / LOG_BASE);\r\n      i %= LOG_BASE;\r\n    }\r\n\r\n    // i is the index (0 - 6) of the rounding digit.\r\n    // E.g. if within the word 3487563 the first rounding digit is 5,\r\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n    k = mathpow(10, LOG_BASE - i);\r\n    rd = d[di] % k | 0;\r\n\r\n    if (repeating == null) {\r\n      if (i < 3) {\r\n        if (i == 0) rd = rd / 100 | 0;\r\n        else if (i == 1) rd = rd / 10 | 0;\r\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n      } else {\r\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n      }\r\n    } else {\r\n      if (i < 4) {\r\n        if (i == 0) rd = rd / 1000 | 0;\r\n        else if (i == 1) rd = rd / 100 | 0;\r\n        else if (i == 2) rd = rd / 10 | 0;\r\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n      } else {\r\n        r = ((repeating || rm < 4) && rd + 1 == k ||\r\n        (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\r\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n  function convertBase(str, baseIn, baseOut) {\r\n    var j,\r\n      arr = [0],\r\n      arrL,\r\n      i = 0,\r\n      strL = str.length;\r\n\r\n    for (; i < strL;) {\r\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n      for (j = 0; j < arr.length; j++) {\r\n        if (arr[j] > baseOut - 1) {\r\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n          arr[j + 1] += arr[j] / baseOut | 0;\r\n          arr[j] %= baseOut;\r\n        }\r\n      }\r\n    }\r\n\r\n    return arr.reverse();\r\n  }\r\n\r\n\r\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function cosine(Ctor, x) {\r\n    var k, len, y;\r\n\r\n    if (x.isZero()) return x;\r\n\r\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    len = x.d.length;\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      y = (1 / tinyPow(4, k)).toString();\r\n    } else {\r\n      k = 16;\r\n      y = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    Ctor.precision += k;\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n    // Reverse argument reduction\r\n    for (var i = k; i--;) {\r\n      var cos2x = x.times(x);\r\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n    }\r\n\r\n    Ctor.precision -= k;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Perform division in the specified base.\r\n   */\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k, base) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % base | 0;\r\n        carry = temp / base | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, rm, dp, base) {\r\n      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n        yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n      }\r\n\r\n      if (base) {\r\n        logBase = 1;\r\n        e = x.e - y.e;\r\n      } else {\r\n        base = BASE;\r\n        logBase = LOG_BASE;\r\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n      }\r\n\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n      if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n        rm = Ctor.rounding;\r\n      } else if (dp) {\r\n        sd = pr + (x.e - y.e) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) {\r\n        qd.push(1);\r\n        more = true;\r\n      } else {\r\n\r\n        // Convert precision in number of base 10 digits to base 1e7 digits.\r\n        sd = sd / logBase + 2 | 0;\r\n        i = 0;\r\n\r\n        // divisor < 1e7\r\n        if (yL == 1) {\r\n          k = 0;\r\n          yd = yd[0];\r\n          sd++;\r\n\r\n          // k is the carry.\r\n          for (; (i < xL || k) && sd--; i++) {\r\n            t = k * base + (xd[i] || 0);\r\n            qd[i] = t / yd | 0;\r\n            k = t % yd | 0;\r\n          }\r\n\r\n          more = k || i < xL;\r\n\r\n        // divisor >= 1e7\r\n        } else {\r\n\r\n          // Normalise xd and yd so highest order digit of yd is >= base/2\r\n          k = base / (yd[0] + 1) | 0;\r\n\r\n          if (k > 1) {\r\n            yd = multiplyInteger(yd, k, base);\r\n            xd = multiplyInteger(xd, k, base);\r\n            yL = yd.length;\r\n            xL = xd.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xd.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL;) rem[remL++] = 0;\r\n\r\n          yz = yd.slice();\r\n          yz.unshift(0);\r\n          yd0 = yd[0];\r\n\r\n          if (yd[1] >= base / 2) ++yd0;\r\n\r\n          do {\r\n            k = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, k.\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // k will be how many times the divisor goes into the current remainder.\r\n              k = rem0 / yd0 | 0;\r\n\r\n              //  Algorithm:\r\n              //  1. product = divisor * trial digit (k)\r\n              //  2. if product > remainder: product -= divisor, k--\r\n              //  3. remainder -= product\r\n              //  4. if product was < remainder at 2:\r\n              //    5. compare new remainder and divisor\r\n              //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n              if (k > 1) {\r\n                if (k >= base) k = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiplyInteger(yd, k, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                cmp = compare(prod, rem, prodL, remL);\r\n\r\n                // product > remainder.\r\n                if (cmp == 1) {\r\n                  k--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n                }\r\n              } else {\r\n\r\n                // cmp is -1.\r\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n                if (k == 0) cmp = k = 1;\r\n                prod = yd.slice();\r\n              }\r\n\r\n              prodL = prod.length;\r\n              if (prodL < remL) prod.unshift(0);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n\r\n              // If product was < previous remainder.\r\n              if (cmp == -1) {\r\n                remL = rem.length;\r\n\r\n                // Compare divisor and new remainder.\r\n                cmp = compare(yd, rem, yL, remL);\r\n\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                if (cmp < 1) {\r\n                  k++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\r\n                }\r\n              }\r\n\r\n              remL = rem.length;\r\n            } else if (cmp === 0) {\r\n              k++;\r\n              rem = [0];\r\n            }    // if cmp === 1, k will be 0\r\n\r\n            // Add the next digit, k, to the result array.\r\n            qd[i++] = k;\r\n\r\n            // Update the remainder.\r\n            if (cmp && rem[0]) {\r\n              rem[remL++] = xd[xi] || 0;\r\n            } else {\r\n              rem = [xd[xi]];\r\n              remL = 1;\r\n            }\r\n\r\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n          more = rem[0] !== void 0;\r\n        }\r\n\r\n        // Leading zero?\r\n        if (!qd[0]) qd.shift();\r\n      }\r\n\r\n      // logBase is 1 when divide is being used for base conversion.\r\n      if (logBase == 1) {\r\n        q.e = e;\r\n        inexact = more;\r\n      } else {\r\n\r\n        // To calculate q.e, first get the number of digits of qd[0].\r\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n        q.e = i + e * logBase - 1;\r\n\r\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\r\n   function finalise(x, sd, rm, isTruncated) {\r\n    var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n      Ctor = x.constructor;\r\n\r\n    // Don't round if sd is null or undefined.\r\n    out: if (sd != null) {\r\n      xd = x.d;\r\n\r\n      // Infinity/NaN.\r\n      if (!xd) return x;\r\n\r\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // w: the word of xd containing rd, a base 1e7 number.\r\n      // xdi: the index of w within xd.\r\n      // digits: the number of digits of w.\r\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n      // they had leading zeros)\r\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n      // Get the length of the first word of the digits array xd.\r\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n      i = sd - digits;\r\n\r\n      // Is the rounding digit in the first word of xd?\r\n      if (i < 0) {\r\n        i += LOG_BASE;\r\n        j = sd;\r\n        w = xd[xdi = 0];\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      } else {\r\n        xdi = Math.ceil((i + 1) / LOG_BASE);\r\n        k = xd.length;\r\n        if (xdi >= k) {\r\n          if (isTruncated) {\r\n\r\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n            for (; k++ <= xdi;) xd.push(0);\r\n            w = rd = 0;\r\n            digits = 1;\r\n            i %= LOG_BASE;\r\n            j = i - LOG_BASE + 1;\r\n          } else {\r\n            break out;\r\n          }\r\n        } else {\r\n          w = k = xd[xdi];\r\n\r\n          // Get the number of digits of w.\r\n          for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n          // Get the index of rd within w.\r\n          i %= LOG_BASE;\r\n\r\n          // Get the index of rd within w, adjusted for leading zeros.\r\n          // The number of leading zeros of w is given by LOG_BASE - digits.\r\n          j = i - LOG_BASE + digits;\r\n\r\n          // Get the rounding digit at index j of w.\r\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n        }\r\n      }\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      isTruncated = isTruncated || sd < 0 ||\r\n        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n      // will give 714.\r\n\r\n      roundUp = rm < 4\r\n        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n\r\n      if (sd < 1 || !xd[0]) {\r\n        xd.length = 0;\r\n        if (roundUp) {\r\n\r\n          // Convert sd to decimal places.\r\n          sd -= x.e + 1;\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n          x.e = -sd || 0;\r\n        } else {\r\n\r\n          // Zero.\r\n          xd[0] = x.e = 0;\r\n        }\r\n\r\n        return x;\r\n      }\r\n\r\n      // Remove excess digits.\r\n      if (i == 0) {\r\n        xd.length = xdi;\r\n        k = 1;\r\n        xdi--;\r\n      } else {\r\n        xd.length = xdi + 1;\r\n        k = mathpow(10, LOG_BASE - i);\r\n\r\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n        // j > 0 means i > number of leading zeros of w.\r\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n      }\r\n\r\n      if (roundUp) {\r\n        for (;;) {\r\n\r\n          // Is the digit to be rounded up in the first word of xd?\r\n          if (xdi == 0) {\r\n\r\n            // i will be the length of xd[0] before k is added.\r\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n            j = xd[0] += k;\r\n            for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n            // if i != k the length has increased.\r\n            if (i != k) {\r\n              x.e++;\r\n              if (xd[0] == BASE) xd[0] = 1;\r\n            }\r\n\r\n            break;\r\n          } else {\r\n            xd[xdi] += k;\r\n            if (xd[xdi] != BASE) break;\r\n            xd[xdi--] = 0;\r\n            k = 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n    }\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > Ctor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < Ctor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // Ctor.underflow = true;\r\n      } // else Ctor.underflow = false;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function finiteToString(x, isExp, sd) {\r\n    if (!x.isFinite()) return nonFiniteToString(x);\r\n    var k,\r\n      e = x.e,\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(digits, e) {\r\n    var w = digits[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n    if (sd > LN10_PRECISION) {\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(precisionLimitExceeded);\r\n    }\r\n    return finalise(new Ctor(LN10), sd, 1, true);\r\n  }\r\n\r\n\r\n  function getPi(Ctor, sd, rm) {\r\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n    return finalise(new Ctor(PI), sd, rm, true);\r\n  }\r\n\r\n\r\n  function getPrecision(digits) {\r\n    var w = digits.length - 1,\r\n      len = w * LOG_BASE + 1;\r\n\r\n    w = digits[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) len--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = digits[0]; w >= 10; w /= 10) len++;\r\n    }\r\n\r\n    return len;\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\r\n  function intPow(Ctor, x, n, pr) {\r\n    var isTruncated,\r\n      r = new Ctor(1),\r\n\r\n      // Max n of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (n % 2) {\r\n        r = r.times(x);\r\n        if (truncate(r.d, k)) isTruncated = true;\r\n      }\r\n\r\n      n = mathfloor(n / 2);\r\n      if (n === 0) {\r\n\r\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n        n = r.d.length - 1;\r\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n        break;\r\n      }\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, k);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  function isOdd(n) {\r\n    return n.d[n.d.length - 1] & 1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n   */\r\n  function maxOrMin(Ctor, args, ltgt) {\r\n    var y,\r\n      x = new Ctor(args[0]),\r\n      i = 0;\r\n\r\n    for (; ++i < args.length;) {\r\n      y = new Ctor(args[i]);\r\n      if (!y.s) {\r\n        x = y;\r\n        break;\r\n      } else if (x[ltgt](y)) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\r\n  function naturalExponential(x, sd) {\r\n    var denominator, guard, j, pow, sum, t, wpr,\r\n      rep = 0,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // 0/NaN/Infinity?\r\n    if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n      return new Ctor(x.d\r\n        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    // while abs(x) >= 0.1\r\n    while (x.e > -2) {\r\n\r\n      // x = x / 2^5\r\n      x = x.times(t);\r\n      k += 5;\r\n    }\r\n\r\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n    // necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(1);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = finalise(pow.times(x), wpr, 1);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        j = k;\r\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n        // Check to see if the first 4 rounding digits are [49]999.\r\n        // If so, repeat the summation with a higher precision, otherwise\r\n        // e.g. with precision: 18, rounding: 1\r\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n\r\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += 10;\r\n            denominator = pow = t = new Ctor(1);\r\n            i = 0;\r\n            rep++;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\r\n  function naturalLogarithm(y, sd) {\r\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // Is x negative or Infinity, NaN, 0 or 1?\r\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    Ctor.precision = wpr += guard;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n\r\n    if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = x.e;\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n      Ctor.precision = pr;\r\n\r\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n    }\r\n\r\n    // x1 is x reduced to a value near 1.\r\n    x1 = x;\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n    x2 = finalise(x.times(x), wpr, 1);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = finalise(numerator.times(x2), wpr, 1);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n        // been repeated previously) and the first 4 rounding digits 9999?\r\n        // If so, restart the summation with a higher precision, otherwise\r\n        // e.g. with precision: 12, rounding: 1\r\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += guard;\r\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n            x2 = finalise(x.times(x), wpr, 1);\r\n            denominator = rep = 1;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  // ±Infinity, NaN.\r\n  function nonFiniteToString(x) {\r\n    // Unsigned.\r\n    return String(x.s * x.s / 0);\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      x.e = e = e - i - 1;\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external) {\r\n\r\n        // Overflow?\r\n        if (x.e > x.constructor.maxE) {\r\n\r\n          // Infinity.\r\n          x.d = null;\r\n          x.e = NaN;\r\n\r\n        // Underflow?\r\n        } else if (x.e < x.constructor.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n          // x.constructor.underflow = true;\r\n        } // else x.constructor.underflow = false;\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\r\n  function parseOther(x, str) {\r\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n    if (str.indexOf('_') > -1) {\r\n      str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n      if (isDecimal.test(str)) return parseDecimal(x, str);\r\n    } else if (str === 'Infinity' || str === 'NaN') {\r\n      if (!+str) x.s = NaN;\r\n      x.e = NaN;\r\n      x.d = null;\r\n      return x;\r\n    }\r\n\r\n    if (isHex.test(str))  {\r\n      base = 16;\r\n      str = str.toLowerCase();\r\n    } else if (isBinary.test(str))  {\r\n      base = 2;\r\n    } else if (isOctal.test(str))  {\r\n      base = 8;\r\n    } else {\r\n      throw Error(invalidArgument + str);\r\n    }\r\n\r\n    // Is there a binary exponent part?\r\n    i = str.search(/p/i);\r\n\r\n    if (i > 0) {\r\n      p = +str.slice(i + 1);\r\n      str = str.substring(2, i);\r\n    } else {\r\n      str = str.slice(2);\r\n    }\r\n\r\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n    // fraction part will be restored.\r\n    i = str.indexOf('.');\r\n    isFloat = i >= 0;\r\n    Ctor = x.constructor;\r\n\r\n    if (isFloat) {\r\n      str = str.replace('.', '');\r\n      len = str.length;\r\n      i = len - i;\r\n\r\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n    }\r\n\r\n    xd = convertBase(str, base, BASE);\r\n    xe = xd.length - 1;\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xe; xd[i] === 0; --i) xd.pop();\r\n    if (i < 0) return new Ctor(x.s * 0);\r\n    x.e = getBase10Exponent(xd, xe);\r\n    x.d = xd;\r\n    external = false;\r\n\r\n    // At what precision to perform the division to ensure exact conversion?\r\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n    // Therefore using 4 * the number of digits of str will always be enough.\r\n    if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n    // Multiply by the binary exponent part if present.\r\n    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n    external = true;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function sine(Ctor, x) {\r\n    var k,\r\n      len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n    }\r\n\r\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Reverse argument reduction\r\n    var sin2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sin2_x = x.times(x);\r\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n    var j, t, u, x2,\r\n      i = 1,\r\n      pr = Ctor.precision,\r\n      k = Math.ceil(pr / LOG_BASE);\r\n\r\n    external = false;\r\n    x2 = x.times(x);\r\n    u = new Ctor(y);\r\n\r\n    for (;;) {\r\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      t = u.plus(y);\r\n\r\n      if (t.d[k] !== void 0) {\r\n        for (j = k; t.d[j] === u.d[j] && j--;);\r\n        if (j == -1) break;\r\n      }\r\n\r\n      j = u;\r\n      u = y;\r\n      y = t;\r\n      t = j;\r\n      i++;\r\n    }\r\n\r\n    external = true;\r\n    t.d.length = k + 1;\r\n\r\n    return t;\r\n  }\r\n\r\n\r\n  // Exponent e must be positive and non-zero.\r\n  function tinyPow(b, e) {\r\n    var n = b;\r\n    while (--e) n *= b;\r\n    return n;\r\n  }\r\n\r\n\r\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\r\n  function toLessThanHalfPi(Ctor, x) {\r\n    var t,\r\n      isNeg = x.s < 0,\r\n      pi = getPi(Ctor, Ctor.precision, 1),\r\n      halfPi = pi.times(0.5);\r\n\r\n    x = x.abs();\r\n\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isNeg ? 4 : 1;\r\n      return x;\r\n    }\r\n\r\n    t = x.divToInt(pi);\r\n\r\n    if (t.isZero()) {\r\n      quadrant = isNeg ? 3 : 2;\r\n    } else {\r\n      x = x.minus(t.times(pi));\r\n\r\n      // 0 <= x < pi\r\n      if (x.lte(halfPi)) {\r\n        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n        return x;\r\n      }\r\n\r\n      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n    }\r\n\r\n    return x.minus(pi).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\r\n  function toStringBinary(x, baseOut, sd, rm) {\r\n    var base, e, i, k, len, roundUp, str, xd, y,\r\n      Ctor = x.constructor,\r\n      isExp = sd !== void 0;\r\n\r\n    if (isExp) {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    } else {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    }\r\n\r\n    if (!x.isFinite()) {\r\n      str = nonFiniteToString(x);\r\n    } else {\r\n      str = finiteToString(x);\r\n      i = str.indexOf('.');\r\n\r\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n      // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n      if (isExp) {\r\n        base = 2;\r\n        if (baseOut == 16) {\r\n          sd = sd * 4 - 3;\r\n        } else if (baseOut == 8) {\r\n          sd = sd * 3 - 2;\r\n        }\r\n      } else {\r\n        base = baseOut;\r\n      }\r\n\r\n      // Convert the number as an integer then divide the result by its base raised to a power such\r\n      // that the fraction part will be restored.\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        str = str.replace('.', '');\r\n        y = new Ctor(1);\r\n        y.e = str.length - i;\r\n        y.d = convertBase(finiteToString(y), 10, base);\r\n        y.e = y.d.length;\r\n      }\r\n\r\n      xd = convertBase(str, 10, base);\r\n      e = len = xd.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xd[--len] == 0;) xd.pop();\r\n\r\n      if (!xd[0]) {\r\n        str = isExp ? '0p+0' : '0';\r\n      } else {\r\n        if (i < 0) {\r\n          e--;\r\n        } else {\r\n          x = new Ctor(x);\r\n          x.d = xd;\r\n          x.e = e;\r\n          x = divide(x, y, sd, rm, 0, base);\r\n          xd = x.d;\r\n          e = x.e;\r\n          roundUp = inexact;\r\n        }\r\n\r\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        i = xd[sd];\r\n        k = base / 2;\r\n        roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n        roundUp = rm < 4\r\n          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n            rm === (x.s < 0 ? 8 : 7));\r\n\r\n        xd.length = sd;\r\n\r\n        if (roundUp) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (; ++xd[--sd] > base - 1;) {\r\n            xd[sd] = 0;\r\n            if (!sd) {\r\n              ++e;\r\n              xd.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n        // Add binary exponent suffix?\r\n        if (isExp) {\r\n          if (len > 1) {\r\n            if (baseOut == 16 || baseOut == 8) {\r\n              i = baseOut == 16 ? 4 : 3;\r\n              for (--len; len % i; len++) str += '0';\r\n              xd = convertBase(str, base, baseOut);\r\n              for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n              // xd[0] will always be be 1\r\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n            } else {\r\n              str = str.charAt(0) + '.' + str.slice(1);\r\n            }\r\n          }\r\n\r\n          str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n        } else if (e < 0) {\r\n          for (; ++e;) str = '0' + str;\r\n          str = '0.' + str;\r\n        } else {\r\n          if (++e > len) for (e -= len; e-- ;) str += '0';\r\n          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n        }\r\n      }\r\n\r\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clamp\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  sum\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function abs(x) {\r\n    return new this(x).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function acos(x) {\r\n    return new this(x).acos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function acosh(x) {\r\n    return new this(x).acosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function add(x, y) {\r\n    return new this(x).plus(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function asin(x) {\r\n    return new this(x).asin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function asinh(x) {\r\n    return new this(x).asinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function atan(x) {\r\n    return new this(x).atan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function atanh(x) {\r\n    return new this(x).atanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|Decimal} The y-coordinate.\r\n   * x {number|string|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\r\n  function atan2(y, x) {\r\n    y = new this(y);\r\n    x = new this(x);\r\n    var r,\r\n      pr = this.precision,\r\n      rm = this.rounding,\r\n      wpr = pr + 4;\r\n\r\n    // Either NaN\r\n    if (!y.s || !x.s) {\r\n      r = new this(NaN);\r\n\r\n    // Both ±Infinity\r\n    } else if (!y.d && !x.d) {\r\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n      r.s = y.s;\r\n\r\n    // x is ±Infinity or y is ±0\r\n    } else if (!x.d || y.isZero()) {\r\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n      r.s = y.s;\r\n\r\n    // y is ±Infinity or x is ±0\r\n    } else if (!y.d || x.isZero()) {\r\n      r = getPi(this, wpr, 1).times(0.5);\r\n      r.s = y.s;\r\n\r\n    // Both non-zero and finite\r\n    } else if (x.s < 0) {\r\n      this.precision = wpr;\r\n      this.rounding = 1;\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n      x = getPi(this, wpr, 1);\r\n      this.precision = pr;\r\n      this.rounding = rm;\r\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n    } else {\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function cbrt(x) {\r\n    return new this(x).cbrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ceil(x) {\r\n    return finalise(x = new this(x), x.e + 1, 2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * min {number|string|Decimal}\r\n   * max {number|string|Decimal}\r\n   *\r\n   */\r\n  function clamp(x, min, max) {\r\n    return new this(x).clamp(min, max);\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *   defaults   {true}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n    var i, p, v,\r\n      useDefaults = obj.defaults === true,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -EXP_LIMIT, 0,\r\n        'toExpPos', 0, EXP_LIMIT,\r\n        'maxE', 0, EXP_LIMIT,\r\n        'minE', -EXP_LIMIT, 0,\r\n        'modulo', 0, 9\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n      if ((v = obj[p]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (v === true || v === false || v === 0 || v === 1) {\r\n        if (v) {\r\n          if (typeof crypto != 'undefined' && crypto &&\r\n            (crypto.getRandomValues || crypto.randomBytes)) {\r\n            this[p] = true;\r\n          } else {\r\n            throw Error(cryptoUnavailable);\r\n          }\r\n        } else {\r\n          this[p] = false;\r\n        }\r\n      } else {\r\n        throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cos(x) {\r\n    return new this(x).cos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cosh(x) {\r\n    return new this(x).cosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(v) {\r\n      var e, i, t,\r\n        x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (isDecimalInstance(v)) {\r\n        x.s = v.s;\r\n\r\n        if (external) {\r\n          if (!v.d || v.e > Decimal.maxE) {\r\n\r\n            // Infinity.\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (v.e < Decimal.minE) {\r\n\r\n            // Zero.\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.d = v.d.slice();\r\n          }\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d ? v.d.slice() : v.d;\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      t = typeof v;\r\n\r\n      if (t === 'number') {\r\n        if (v === 0) {\r\n          x.s = 1 / v < 0 ? -1 : 1;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        if (v < 0) {\r\n          v = -v;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 1;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (v === ~~v && v < 1e7) {\r\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n          if (external) {\r\n            if (e > Decimal.maxE) {\r\n              x.e = NaN;\r\n              x.d = null;\r\n            } else if (e < Decimal.minE) {\r\n              x.e = 0;\r\n              x.d = [0];\r\n            } else {\r\n              x.e = e;\r\n              x.d = [v];\r\n            }\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n\r\n          return;\r\n\r\n        // Infinity, NaN.\r\n        } else if (v * 0 !== 0) {\r\n          if (!v) x.s = NaN;\r\n          x.e = NaN;\r\n          x.d = null;\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, v.toString());\r\n\r\n      } else if (t !== 'string') {\r\n        throw Error(invalidArgument + v);\r\n      }\r\n\r\n      // Minus sign?\r\n      if ((i = v.charCodeAt(0)) === 45) {\r\n        v = v.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        // Plus sign?\r\n        if (i === 43) v = v.slice(1);\r\n        x.s = 1;\r\n      }\r\n\r\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n    Decimal.EUCLID = 9;\r\n\r\n    Decimal.config = Decimal.set = config;\r\n    Decimal.clone = clone;\r\n    Decimal.isDecimal = isDecimalInstance;\r\n\r\n    Decimal.abs = abs;\r\n    Decimal.acos = acos;\r\n    Decimal.acosh = acosh;        // ES6\r\n    Decimal.add = add;\r\n    Decimal.asin = asin;\r\n    Decimal.asinh = asinh;        // ES6\r\n    Decimal.atan = atan;\r\n    Decimal.atanh = atanh;        // ES6\r\n    Decimal.atan2 = atan2;\r\n    Decimal.cbrt = cbrt;          // ES6\r\n    Decimal.ceil = ceil;\r\n    Decimal.clamp = clamp;\r\n    Decimal.cos = cos;\r\n    Decimal.cosh = cosh;          // ES6\r\n    Decimal.div = div;\r\n    Decimal.exp = exp;\r\n    Decimal.floor = floor;\r\n    Decimal.hypot = hypot;        // ES6\r\n    Decimal.ln = ln;\r\n    Decimal.log = log;\r\n    Decimal.log10 = log10;        // ES6\r\n    Decimal.log2 = log2;          // ES6\r\n    Decimal.max = max;\r\n    Decimal.min = min;\r\n    Decimal.mod = mod;\r\n    Decimal.mul = mul;\r\n    Decimal.pow = pow;\r\n    Decimal.random = random;\r\n    Decimal.round = round;\r\n    Decimal.sign = sign;          // ES6\r\n    Decimal.sin = sin;\r\n    Decimal.sinh = sinh;          // ES6\r\n    Decimal.sqrt = sqrt;\r\n    Decimal.sub = sub;\r\n    Decimal.sum = sum;\r\n    Decimal.tan = tan;\r\n    Decimal.tanh = tanh;          // ES6\r\n    Decimal.trunc = trunc;        // ES6\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      if (obj.defaults !== true) {\r\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n      }\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function div(x, y) {\r\n    return new this(x).div(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\r\n  function exp(x) {\r\n    return new this(x).exp();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function floor(x) {\r\n    return finalise(x = new this(x), x.e + 1, 3);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function hypot() {\r\n    var i, n,\r\n      t = new this(0);\r\n\r\n    external = false;\r\n\r\n    for (i = 0; i < arguments.length;) {\r\n      n = new this(arguments[i++]);\r\n      if (!n.d) {\r\n        if (n.s) {\r\n          external = true;\r\n          return new this(1 / 0);\r\n        }\r\n        t = n;\r\n      } else if (t.d) {\r\n        t = t.plus(n.times(n));\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return t.sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  function isDecimalInstance(obj) {\r\n    return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ln(x) {\r\n    return new this(x).ln();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|Decimal} The argument of the logarithm.\r\n   * y {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  function log(x, y) {\r\n    return new this(x).log(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log2(x) {\r\n    return new this(x).log(2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log10(x) {\r\n    return new this(x).log(10);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function max() {\r\n    return maxOrMin(this, arguments, 'lt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function min() {\r\n    return maxOrMin(this, arguments, 'gt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mod(x, y) {\r\n    return new this(x).mod(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mul(x, y) {\r\n    return new this(x).mul(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The base.\r\n   * y {number|string|Decimal} The exponent.\r\n   *\r\n   */\r\n  function pow(x, y) {\r\n    return new this(x).pow(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\r\n  function random(sd) {\r\n    var d, e, k, n,\r\n      i = 0,\r\n      r = new this(1),\r\n      rd = [];\r\n\r\n    if (sd === void 0) sd = this.precision;\r\n    else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    k = Math.ceil(sd / LOG_BASE);\r\n\r\n    if (!this.crypto) {\r\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n    // Browsers supporting crypto.getRandomValues.\r\n    } else if (crypto.getRandomValues) {\r\n      d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n      for (; i < k;) {\r\n        n = d[i];\r\n\r\n        // 0 <= n < 4294967296\r\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n        if (n >= 4.29e9) {\r\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n        } else {\r\n\r\n          // 0 <= n <= 4289999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd[i++] = n % 1e7;\r\n        }\r\n      }\r\n\r\n    // Node.js supporting crypto.randomBytes.\r\n    } else if (crypto.randomBytes) {\r\n\r\n      // buffer\r\n      d = crypto.randomBytes(k *= 4);\r\n\r\n      for (; i < k;) {\r\n\r\n        // 0 <= n < 2147483648\r\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n        if (n >= 2.14e9) {\r\n          crypto.randomBytes(4).copy(d, i);\r\n        } else {\r\n\r\n          // 0 <= n <= 2139999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd.push(n % 1e7);\r\n          i += 4;\r\n        }\r\n      }\r\n\r\n      i = k / 4;\r\n    } else {\r\n      throw Error(cryptoUnavailable);\r\n    }\r\n\r\n    k = rd[--i];\r\n    sd %= LOG_BASE;\r\n\r\n    // Convert trailing digits to zeros according to sd.\r\n    if (k && sd) {\r\n      n = mathpow(10, LOG_BASE - sd);\r\n      rd[i] = (k / n | 0) * n;\r\n    }\r\n\r\n    // Remove trailing words which are zero.\r\n    for (; rd[i] === 0; i--) rd.pop();\r\n\r\n    // Zero?\r\n    if (i < 0) {\r\n      e = 0;\r\n      rd = [0];\r\n    } else {\r\n      e = -1;\r\n\r\n      // Remove leading words which are zero and adjust exponent accordingly.\r\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n      // Count the digits of the first word of rd to determine leading zeros.\r\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n      // Adjust the exponent for leading zeros of the first word of rd.\r\n      if (k < LOG_BASE) e -= LOG_BASE - k;\r\n    }\r\n\r\n    r.e = e;\r\n    r.d = rd;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function round(x) {\r\n    return finalise(x = new this(x), x.e + 1, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sign(x) {\r\n    x = new this(x);\r\n    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sin(x) {\r\n    return new this(x).sin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sinh(x) {\r\n    return new this(x).sinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sqrt(x) {\r\n    return new this(x).sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function sub(x, y) {\r\n    return new this(x).sub(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * Only the result is rounded, not the intermediate calculations.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function sum() {\r\n    var i = 0,\r\n      args = arguments,\r\n      x = new this(args[i]);\r\n\r\n    external = false;\r\n    for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n    external = true;\r\n\r\n    return finalise(x, this.precision, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tan(x) {\r\n    return new this(x).tan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tanh(x) {\r\n    return new this(x).tanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function trunc(x) {\r\n    return finalise(x = new this(x), x.e + 1, 1);\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(DEFAULTS);\r\n  Decimal.prototype.constructor = Decimal;\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Create the internal constants from their string values.\r\n  LN10 = new Decimal(LN10);\r\n  PI = new Decimal(PI);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\r\n      P[Symbol['for']('nodejs.util.inspect.custom')] = P.toString;\r\n      P[Symbol.toStringTag] = 'Decimal';\r\n    }\r\n\r\n    module.exports = Decimal;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\r\n    }\r\n\r\n    noConflict = globalScope.Decimal;\r\n    Decimal.noConflict = function () {\r\n      globalScope.Decimal = noConflict;\r\n      return Decimal;\r\n    };\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}