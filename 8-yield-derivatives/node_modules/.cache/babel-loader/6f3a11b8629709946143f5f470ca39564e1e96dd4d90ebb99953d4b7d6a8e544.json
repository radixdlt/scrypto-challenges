{"ast":null,"code":"var _jsxFileName = \"/Users/mdabdurrazzak/RadInsu/src/Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { DataRequestBuilder, RadixDappToolkit, RadixNetwork } from '@radixdlt/radix-dapp-toolkit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const [accountAddress, setAccountAddress] = useState('');\n  const [walletConnected, setWalletConnected] = useState(false);\n  const effectTriggered = useRef(false);\n  const rdt = useRef(null);\n  const subscription = useRef(null);\n  useEffect(() => {\n    console.log('Effect hook triggered');\n    if (!effectTriggered.current) {\n      // Define your dApp definition address\n      const dAppDefinitionAddress = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz';\n\n      // Create a dapp configuration object for the Radix Dapp Toolkit\n      const dappConfig = {\n        networkId: RadixNetwork.Stokenet,\n        applicationVersion: '1.0.0',\n        applicationName: 'Infinix',\n        applicationDappDefinitionAddress: dAppDefinitionAddress,\n        dAppDefinitionAddress // This field will be updated and removed soon\n      };\n\n      // Instantiate DappToolkit to connect to the Radix wallet and network\n      rdt.current = RadixDappToolkit(dappConfig);\n\n      // Connect a user account when wallet is connected\n      rdt.current.walletApi.setRequestData(DataRequestBuilder.accounts().exactly(1));\n\n      // Subscribe to updates to the user's shared wallet data\n      subscription.current = rdt.current.walletApi.walletData$.subscribe(walletData => {\n        console.log('Received wallet data:', walletData);\n        if (walletData && walletData.accounts && walletData.accounts.length > 0) {\n          setAccountAddress(walletData.accounts[0].address);\n          setWalletConnected(true);\n        }\n      });\n\n      // Cleanup subscription on unmount\n      return () => {\n        console.log('Cleaning up subscription');\n        if (subscription.current) {\n          subscription.current.unsubscribe();\n        }\n      };\n      effectTriggered.current = true;\n    }\n  }, []); // Only run this effect once on component mount\n\n  useEffect(() => {\n    console.log('Component rendered');\n  }, []); // Only run this effect once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: walletConnected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Wallet Connected Successfully\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Account Address: \", accountAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Connecting to Wallet...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(Profile, \"CD7b8Qv1b/CyBC3vFPB2fwGuA0M=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useState","useEffect","useRef","DataRequestBuilder","RadixDappToolkit","RadixNetwork","jsxDEV","_jsxDEV","Profile","_s","accountAddress","setAccountAddress","walletConnected","setWalletConnected","effectTriggered","rdt","subscription","console","log","current","dAppDefinitionAddress","dappConfig","networkId","Stokenet","applicationVersion","applicationName","applicationDappDefinitionAddress","walletApi","setRequestData","accounts","exactly","walletData$","subscribe","walletData","length","address","unsubscribe","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mdabdurrazzak/RadInsu/src/Profile.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport {\n  DataRequestBuilder,\n  RadixDappToolkit,\n  RadixNetwork,\n} from '@radixdlt/radix-dapp-toolkit';\n\nconst Profile = () => {\n  const [accountAddress, setAccountAddress] = useState('');\n  const [walletConnected, setWalletConnected] = useState(false);\n  const effectTriggered = useRef(false);\n  const rdt = useRef(null);\n  const subscription = useRef(null);\n\n  useEffect(() => {\n    console.log('Effect hook triggered');\n\n    if (!effectTriggered.current) {\n      // Define your dApp definition address\n      const dAppDefinitionAddress = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz';\n\n      // Create a dapp configuration object for the Radix Dapp Toolkit\n      const dappConfig = {\n        networkId: RadixNetwork.Stokenet,\n        applicationVersion: '1.0.0',\n        applicationName: 'Infinix',\n        applicationDappDefinitionAddress: dAppDefinitionAddress,\n        dAppDefinitionAddress, // This field will be updated and removed soon\n      };\n\n      // Instantiate DappToolkit to connect to the Radix wallet and network\n      rdt.current = RadixDappToolkit(dappConfig);\n\n      // Connect a user account when wallet is connected\n      rdt.current.walletApi.setRequestData(DataRequestBuilder.accounts().exactly(1));\n\n      // Subscribe to updates to the user's shared wallet data\n      subscription.current = rdt.current.walletApi.walletData$.subscribe((walletData) => {\n        console.log('Received wallet data:', walletData);\n        if (walletData && walletData.accounts && walletData.accounts.length > 0) {\n          setAccountAddress(walletData.accounts[0].address);\n          setWalletConnected(true);\n        }\n      });\n\n      // Cleanup subscription on unmount\n      return () => {\n        console.log('Cleaning up subscription');\n        if (subscription.current) {\n          subscription.current.unsubscribe();\n        }\n      };\n\n      effectTriggered.current = true;\n    }\n  }, []); // Only run this effect once on component mount\n\n  useEffect(() => {\n    console.log('Component rendered');\n  }, []); // Only run this effect once on component mount\n\n  return (\n    <div>\n      {walletConnected ? (\n        <div>\n          <p>Wallet Connected Successfully</p>\n          <p>Account Address: {accountAddress}</p>\n          {/* Add additional wallet details here */}\n        </div>\n      ) : (\n        <p>Connecting to Wallet...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Profile;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}