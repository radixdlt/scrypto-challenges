{"ast":null,"code":"/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nexport function throwError(error, scheduler) {\n  if (!scheduler) {\n    return new Observable(function (subscriber) {\n      return subscriber.error(error);\n    });\n  } else {\n    return new Observable(function (subscriber) {\n      return scheduler.schedule(dispatch, 0, {\n        error: error,\n        subscriber: subscriber\n      });\n    });\n  }\n}\nfunction dispatch(_a) {\n  var error = _a.error,\n    subscriber = _a.subscriber;\n  subscriber.error(error);\n}","map":{"version":3,"names":["Observable","throwError","error","scheduler","subscriber","schedule","dispatch","_a"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/observable/throwError.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * ![](throw.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then emit an error\n * ```ts\n * import { throwError, concat, of } from 'rxjs';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Logs:\n * // 7\n * // Error: oops!\n * ```\n *\n * ---\n *\n * ### Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 2\n * ```ts\n * import { throwError, interval, of } from 'rxjs';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 2\n *     ? throwError('Twos are bad')\n *     : of('a', 'b', 'c')\n *   ),\n * ).subscribe(x => console.log(x), e => console.error(e));\n *\n * // Logs:\n * // a\n * // b\n * // c\n * // a\n * // b\n * // c\n * // Twos are bad\n * ```\n *\n * @see {@link Observable}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throwError\n * @owner Observable\n */\nexport function throwError(error: any, scheduler?: SchedulerLike): Observable<never> {\n  if (!scheduler) {\n    return new Observable(subscriber => subscriber.error(error));\n  } else {\n    return new Observable(subscriber => scheduler.schedule(dispatch, 0, { error, subscriber }));\n  }\n}\n\ninterface DispatchArg {\n  error: any;\n  subscriber: Subscriber<any>;\n}\n\nfunction dispatch({ error, subscriber }: DispatchArg) {\n  subscriber.error(error);\n}\n"],"mappings":"AAAA;AAoEA,SAAMA,UAAU,QAAW,eAAY;OACrC,SAAKC,UAAWA,CAAAC,KAAA,EAAAC,SAAA;MACd,CAAAA,SAAO,EAAI;IACZ,WAAAH,UAAA,WAAAI,UAAA;MAAA,OAAAA,UAAA,CAAAF,KAAA,CAAAA,KAAA;IAAA;SACC;IACD,WAAAF,UAAA,WAAAI,UAAA;MAAA,OAAAD,SAAA,CAAAE,QAAA,CAAAC,QAAA;QAAAJ,KAAA,EAAAA,KAAA;QAAAE,UAAA,EAAAA;MAAA;IAAA;EACF;AAOD;SAAoBE,SAAAC,EAAA;EAClB,IAAAL,KAAA,GAAWK,EAAA,CAAAL,KAAM;IAAKE,UAAE,GAAAG,EAAA,CAAAH,UAAA;EACzBA,UAAA,CAAAF,KAAA,CAAAA,KAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}