{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\"; // `Identity` is a functor that holds a single value, where `map` simply\n// transforms the held value with the provided function.\n\nvar Identity = function (x) {\n  return {\n    value: x,\n    map: function (f) {\n      return Identity(f(x));\n    }\n  };\n};\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the result of applying the given function to\n * the focused value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> (a -> a) -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      const headLens = R.lensIndex(0);\n *\n *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n */\n\nvar over = /*#__PURE__*/\n_curry3(function over(lens, f, x) {\n  // The value returned by the getter function is first transformed with `f`,\n  // then set as the value of an `Identity`. This is then mapped over with the\n  // setter function of the lens.\n  return lens(function (y) {\n    return Identity(f(y));\n  })(x).value;\n});\nexport default over;","map":{"version":3,"names":["_curry3","Identity","x","value","map","f","over","lens","y"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/ramda/es/over.js"],"sourcesContent":["import _curry3 from \"./internal/_curry3.js\"; // `Identity` is a functor that holds a single value, where `map` simply\n// transforms the held value with the provided function.\n\nvar Identity = function (x) {\n  return {\n    value: x,\n    map: function (f) {\n      return Identity(f(x));\n    }\n  };\n};\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the result of applying the given function to\n * the focused value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> (a -> a) -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      const headLens = R.lensIndex(0);\n *\n *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n */\n\n\nvar over =\n/*#__PURE__*/\n_curry3(function over(lens, f, x) {\n  // The value returned by the getter function is first transformed with `f`,\n  // then set as the value of an `Identity`. This is then mapped over with the\n  // setter function of the lens.\n  return lens(function (y) {\n    return Identity(f(y));\n  })(x).value;\n});\n\nexport default over;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,uBAAuB,CAAC,CAAC;AAC7C;;AAEA,IAAIC,QAAQ,GAAG,SAAAA,CAAUC,CAAC,EAAE;EAC1B,OAAO;IACLC,KAAK,EAAED,CAAC;IACRE,GAAG,EAAE,SAAAA,CAAUC,CAAC,EAAE;MAChB,OAAOJ,QAAQ,CAACI,CAAC,CAACH,CAAC,CAAC,CAAC;IACvB;EACF,CAAC;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,IAAII,IAAI,GACR;AACAN,OAAO,CAAC,SAASM,IAAIA,CAACC,IAAI,EAAEF,CAAC,EAAEH,CAAC,EAAE;EAChC;EACA;EACA;EACA,OAAOK,IAAI,CAAC,UAAUC,CAAC,EAAE;IACvB,OAAOP,QAAQ,CAACI,CAAC,CAACG,CAAC,CAAC,CAAC;EACvB,CAAC,CAAC,CAACN,CAAC,CAAC,CAACC,KAAK;AACb,CAAC,CAAC;AAEF,eAAeG,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}