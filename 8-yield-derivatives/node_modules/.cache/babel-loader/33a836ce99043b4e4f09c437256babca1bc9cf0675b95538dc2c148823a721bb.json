{"ast":null,"code":"import _cloneRegExp from \"./_cloneRegExp.js\";\nimport type from \"../type.js\";\n/**\n * Copies an object.\n *\n * @private\n * @param {*} value The value to be copied\n * @param {Array} refFrom Array containing the source references\n * @param {Array} refTo Array containing the copied source references\n * @param {Boolean} deep Whether or not to perform deep cloning.\n * @return {*} The copied value.\n */\n\nexport default function _clone(value, refFrom, refTo, deep) {\n  var copy = function copy(copiedValue) {\n    var len = refFrom.length;\n    var idx = 0;\n    while (idx < len) {\n      if (value === refFrom[idx]) {\n        return refTo[idx];\n      }\n      idx += 1;\n    }\n    refFrom[idx + 1] = value;\n    refTo[idx + 1] = copiedValue;\n    for (var key in value) {\n      copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];\n    }\n    return copiedValue;\n  };\n  switch (type(value)) {\n    case 'Object':\n      return copy({});\n    case 'Array':\n      return copy([]);\n    case 'Date':\n      return new Date(value.valueOf());\n    case 'RegExp':\n      return _cloneRegExp(value);\n    default:\n      return value;\n  }\n}","map":{"version":3,"names":["_cloneRegExp","type","_clone","value","refFrom","refTo","deep","copy","copiedValue","len","length","idx","key","Date","valueOf"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/ramda/es/internal/_clone.js"],"sourcesContent":["import _cloneRegExp from \"./_cloneRegExp.js\";\nimport type from \"../type.js\";\n/**\n * Copies an object.\n *\n * @private\n * @param {*} value The value to be copied\n * @param {Array} refFrom Array containing the source references\n * @param {Array} refTo Array containing the copied source references\n * @param {Boolean} deep Whether or not to perform deep cloning.\n * @return {*} The copied value.\n */\n\nexport default function _clone(value, refFrom, refTo, deep) {\n  var copy = function copy(copiedValue) {\n    var len = refFrom.length;\n    var idx = 0;\n\n    while (idx < len) {\n      if (value === refFrom[idx]) {\n        return refTo[idx];\n      }\n\n      idx += 1;\n    }\n\n    refFrom[idx + 1] = value;\n    refTo[idx + 1] = copiedValue;\n\n    for (var key in value) {\n      copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];\n    }\n\n    return copiedValue;\n  };\n\n  switch (type(value)) {\n    case 'Object':\n      return copy({});\n\n    case 'Array':\n      return copy([]);\n\n    case 'Date':\n      return new Date(value.valueOf());\n\n    case 'RegExp':\n      return _cloneRegExp(value);\n\n    default:\n      return value;\n  }\n}"],"mappings":"AAAA,OAAOA,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,IAAI,MAAM,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,MAAMA,CAACC,KAAK,EAAEC,OAAO,EAAEC,KAAK,EAAEC,IAAI,EAAE;EAC1D,IAAIC,IAAI,GAAG,SAASA,IAAIA,CAACC,WAAW,EAAE;IACpC,IAAIC,GAAG,GAAGL,OAAO,CAACM,MAAM;IACxB,IAAIC,GAAG,GAAG,CAAC;IAEX,OAAOA,GAAG,GAAGF,GAAG,EAAE;MAChB,IAAIN,KAAK,KAAKC,OAAO,CAACO,GAAG,CAAC,EAAE;QAC1B,OAAON,KAAK,CAACM,GAAG,CAAC;MACnB;MAEAA,GAAG,IAAI,CAAC;IACV;IAEAP,OAAO,CAACO,GAAG,GAAG,CAAC,CAAC,GAAGR,KAAK;IACxBE,KAAK,CAACM,GAAG,GAAG,CAAC,CAAC,GAAGH,WAAW;IAE5B,KAAK,IAAII,GAAG,IAAIT,KAAK,EAAE;MACrBK,WAAW,CAACI,GAAG,CAAC,GAAGN,IAAI,GAAGJ,MAAM,CAACC,KAAK,CAACS,GAAG,CAAC,EAAER,OAAO,EAAEC,KAAK,EAAE,IAAI,CAAC,GAAGF,KAAK,CAACS,GAAG,CAAC;IACjF;IAEA,OAAOJ,WAAW;EACpB,CAAC;EAED,QAAQP,IAAI,CAACE,KAAK,CAAC;IACjB,KAAK,QAAQ;MACX,OAAOI,IAAI,CAAC,CAAC,CAAC,CAAC;IAEjB,KAAK,OAAO;MACV,OAAOA,IAAI,CAAC,EAAE,CAAC;IAEjB,KAAK,MAAM;MACT,OAAO,IAAIM,IAAI,CAACV,KAAK,CAACW,OAAO,CAAC,CAAC,CAAC;IAElC,KAAK,QAAQ;MACX,OAAOd,YAAY,CAACG,KAAK,CAAC;IAE5B;MACE,OAAOA,KAAK;EAChB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}