{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar __1 = require(\"..\");\nvar elliptic_1 = tslib_1.__importDefault(require(\"elliptic\"));\nvar bs58_1 = tslib_1.__importDefault(require(\"bs58\"));\nvar __2 = require(\"../../..\");\nvar ec = new elliptic_1.default.ec('secp256k1');\nvar id = ':adr:';\nvar RadixAddress = /** @class */function () {\n  function RadixAddress(magicByte) {\n    if (magicByte) {\n      this.magicByte = magicByte;\n    }\n  }\n  RadixAddress_1 = RadixAddress;\n  RadixAddress.generateNew = function () {\n    var radixKeyPair = new RadixAddress_1();\n    radixKeyPair.keyPair = ec.genKeyPair();\n    return radixKeyPair;\n  };\n  RadixAddress.fromAddress = function (address) {\n    var raw = Array.prototype.slice.call(bs58_1.default.decode(address), 0);\n    // Universe check\n    if (__2.radixUniverse && __2.radixUniverse.initialized && __2.radixUniverse.getMagicByte() !== raw[0]) {\n      throw new Error('Address is from a different universe');\n    }\n    // Checksum\n    var check = __2.radixHash(raw.splice(0, raw.length - 4), 0, raw.length - 4);\n    for (var i = 0; i < 4; i++) {\n      if (check[i] !== raw[raw.length - 4 + i]) {\n        throw new Error('Invalid address');\n      }\n    }\n    raw = Array.prototype.slice.call(bs58_1.default.decode(address), 0);\n    var radixAddress = new this(raw[0]);\n    radixAddress.keyPair = ec.keyFromPublic(raw.splice(1, raw.length - 5));\n    return radixAddress;\n  };\n  RadixAddress.fromPublic = function (publicKey, magicByte) {\n    if (!publicKey) {\n      throw new Error('Missing public key');\n    }\n    if (publicKey.length !== 33) {\n      throw new Error('Public key must be 33 bytes, but was ' + publicKey.length);\n    }\n    var radixAddress = new this(magicByte);\n    radixAddress.keyPair = ec.keyFromPublic(publicKey);\n    return radixAddress;\n  };\n  RadixAddress.fromPrivate = function (privateKey, magicByte) {\n    var radixAddress = new this(magicByte);\n    radixAddress.keyPair = ec.keyFromPrivate(privateKey);\n    return radixAddress;\n  };\n  RadixAddress.prototype.getAddressBytes = function () {\n    var publicKey = this.keyPair.getPublic().encode('array', true);\n    var addressBytes = [];\n    addressBytes[0] = this.magicByte ? this.magicByte : __2.radixUniverse.getMagicByte();\n    for (var i = 0; i < publicKey.length; i++) {\n      addressBytes[i + 1] = publicKey[i];\n    }\n    var check = __2.radixHash(addressBytes, 0, publicKey.length + 1);\n    for (var i = 0; i < 4; i++) {\n      addressBytes[publicKey.length + 1 + i] = check[i];\n    }\n    return Buffer.from(addressBytes);\n  };\n  RadixAddress.prototype.getAddress = function () {\n    return bs58_1.default.encode(this.getAddressBytes());\n  };\n  RadixAddress.prototype.getHash = function () {\n    return __2.radixHash(this.getPublic(), 0, this.getPublic().length);\n  };\n  RadixAddress.prototype.getUID = function () {\n    var hash = this.getHash();\n    return new __1.RadixEUID(hash.slice(0, 16));\n  };\n  RadixAddress.prototype.getShard = function () {\n    return this.getUID().getShard();\n  };\n  RadixAddress.prototype.getPublic = function () {\n    return Buffer.from(this.keyPair.getPublic(true, 'array'));\n  };\n  RadixAddress.prototype.getPrivate = function () {\n    return this.keyPair.getPrivate().toArrayLike(Buffer);\n  };\n  RadixAddress.prototype.sign = function (data) {\n    var signature = this.keyPair.sign(data);\n    return __1.RadixECSignature.fromEllasticSignature(signature);\n  };\n  RadixAddress.prototype.verify = function (data, signature) {\n    return this.keyPair.verify(data, {\n      r: signature.r.bytes,\n      s: signature.s.bytes\n    });\n  };\n  RadixAddress.prototype.equals = function (otherAddress) {\n    return this.getAddress() === otherAddress.getAddress();\n  };\n  RadixAddress.prototype.toString = function () {\n    return this.getAddress();\n  };\n  RadixAddress.fromJSON = function (address) {\n    return this.fromAddress(address);\n  };\n  RadixAddress.prototype.toJSON = function () {\n    return \"\" + id + this.getAddress();\n  };\n  RadixAddress.prototype.toDSON = function () {\n    return __1.RadixSerializer.toDSON(this);\n  };\n  RadixAddress.prototype.encodeCBOR = function (encoder) {\n    var addressBuffer = this.getAddressBytes();\n    var output = Buffer.alloc(addressBuffer.length + 1);\n    output.writeInt8(0x04, 0);\n    addressBuffer.copy(output, 1);\n    return encoder.pushAny(output);\n  };\n  var RadixAddress_1;\n  RadixAddress = RadixAddress_1 = tslib_1.__decorate([__1.RadixSerializer.registerPrimitive(id), tslib_1.__metadata(\"design:paramtypes\", [Number])], RadixAddress);\n  return RadixAddress;\n}();\nexports.RadixAddress = RadixAddress;","map":{"version":3,"names":["__1","require","elliptic_1","tslib_1","__importDefault","bs58_1","__2","ec","default","id","RadixAddress","magicByte","generateNew","radixKeyPair","RadixAddress_1","keyPair","genKeyPair","fromAddress","address","raw","Array","prototype","slice","call","decode","radixUniverse","initialized","getMagicByte","Error","check","radixHash","splice","length","i","radixAddress","keyFromPublic","fromPublic","publicKey","fromPrivate","privateKey","keyFromPrivate","getAddressBytes","getPublic","encode","addressBytes","Buffer","from","getAddress","getHash","getUID","hash","RadixEUID","getShard","getPrivate","toArrayLike","sign","data","signature","RadixECSignature","fromEllasticSignature","verify","r","bytes","s","equals","otherAddress","toString","fromJSON","toJSON","toDSON","RadixSerializer","encodeCBOR","encoder","addressBuffer","output","alloc","writeInt8","copy","pushAny","__decorate","registerPrimitive","exports"],"sources":["../../../../../src/modules/atommodel/primitives/RadixAddress.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}