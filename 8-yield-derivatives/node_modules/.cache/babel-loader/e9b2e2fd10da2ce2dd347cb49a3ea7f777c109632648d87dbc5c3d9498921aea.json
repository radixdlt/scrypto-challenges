{"ast":null,"code":"/**\n * Cross-browser support for logging in a web application.\n *\n * @author David I. Lehn <dlehn@digitalbazaar.com>\n *\n * Copyright (c) 2008-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\n\n/* LOG API */\nmodule.exports = forge.log = forge.log || {};\n\n/**\n * Application logging system.\n *\n * Each logger level available as it's own function of the form:\n *   forge.log.level(category, args...)\n * The category is an arbitrary string, and the args are the same as\n * Firebug's console.log API. By default the call will be output as:\n *   'LEVEL [category] <args[0]>, args[1], ...'\n * This enables proper % formatting via the first argument.\n * Each category is enabled by default but can be enabled or disabled with\n * the setCategoryEnabled() function.\n */\n// list of known levels\nforge.log.levels = ['none', 'error', 'warning', 'info', 'debug', 'verbose', 'max'];\n// info on the levels indexed by name:\n//   index: level index\n//   name: uppercased display name\nvar sLevelInfo = {};\n// list of loggers\nvar sLoggers = [];\n/**\n * Standard console logger. If no console support is enabled this will\n * remain null. Check before using.\n */\nvar sConsoleLogger = null;\n\n// logger flags\n/**\n * Lock the level at the current value. Used in cases where user config may\n * set the level such that only critical messages are seen but more verbose\n * messages are needed for debugging or other purposes.\n */\nforge.log.LEVEL_LOCKED = 1 << 1;\n/**\n * Always call log function. By default, the logging system will check the\n * message level against logger.level before calling the log function. This\n * flag allows the function to do its own check.\n */\nforge.log.NO_LEVEL_CHECK = 1 << 2;\n/**\n * Perform message interpolation with the passed arguments. \"%\" style\n * fields in log messages will be replaced by arguments as needed. Some\n * loggers, such as Firebug, may do this automatically. The original log\n * message will be available as 'message' and the interpolated version will\n * be available as 'fullMessage'.\n */\nforge.log.INTERPOLATE = 1 << 3;\n\n// setup each log level\nfor (var i = 0; i < forge.log.levels.length; ++i) {\n  var level = forge.log.levels[i];\n  sLevelInfo[level] = {\n    index: i,\n    name: level.toUpperCase()\n  };\n}\n\n/**\n * Message logger. Will dispatch a message to registered loggers as needed.\n *\n * @param message message object\n */\nforge.log.logMessage = function (message) {\n  var messageLevelIndex = sLevelInfo[message.level].index;\n  for (var i = 0; i < sLoggers.length; ++i) {\n    var logger = sLoggers[i];\n    if (logger.flags & forge.log.NO_LEVEL_CHECK) {\n      logger.f(message);\n    } else {\n      // get logger level\n      var loggerLevelIndex = sLevelInfo[logger.level].index;\n      // check level\n      if (messageLevelIndex <= loggerLevelIndex) {\n        // message critical enough, call logger\n        logger.f(logger, message);\n      }\n    }\n  }\n};\n\n/**\n * Sets the 'standard' key on a message object to:\n * \"LEVEL [category] \" + message\n *\n * @param message a message log object\n */\nforge.log.prepareStandard = function (message) {\n  if (!('standard' in message)) {\n    message.standard = sLevelInfo[message.level].name +\n    //' ' + +message.timestamp +\n    ' [' + message.category + '] ' + message.message;\n  }\n};\n\n/**\n * Sets the 'full' key on a message object to the original message\n * interpolated via % formatting with the message arguments.\n *\n * @param message a message log object.\n */\nforge.log.prepareFull = function (message) {\n  if (!('full' in message)) {\n    // copy args and insert message at the front\n    var args = [message.message];\n    args = args.concat([] || message['arguments']);\n    // format the message\n    message.full = forge.util.format.apply(this, args);\n  }\n};\n\n/**\n * Applies both preparseStandard() and prepareFull() to a message object and\n * store result in 'standardFull'.\n *\n * @param message a message log object.\n */\nforge.log.prepareStandardFull = function (message) {\n  if (!('standardFull' in message)) {\n    // FIXME implement 'standardFull' logging\n    forge.log.prepareStandard(message);\n    message.standardFull = message.standard;\n  }\n};\n\n// create log level functions\nif (true) {\n  // levels for which we want functions\n  var levels = ['error', 'warning', 'info', 'debug', 'verbose'];\n  for (var i = 0; i < levels.length; ++i) {\n    // wrap in a function to ensure proper level var is passed\n    (function (level) {\n      // create function for this level\n      forge.log[level] = function (category, message /*, args...*/) {\n        // convert arguments to real array, remove category and message\n        var args = Array.prototype.slice.call(arguments).slice(2);\n        // create message object\n        // Note: interpolation and standard formatting is done lazily\n        var msg = {\n          timestamp: new Date(),\n          level: level,\n          category: category,\n          message: message,\n          'arguments': args\n          /*standard*/\n          /*full*/\n          /*fullMessage*/\n        };\n        // process this message\n        forge.log.logMessage(msg);\n      };\n    })(levels[i]);\n  }\n}\n\n/**\n * Creates a new logger with specified custom logging function.\n *\n * The logging function has a signature of:\n *   function(logger, message)\n * logger: current logger\n * message: object:\n *   level: level id\n *   category: category\n *   message: string message\n *   arguments: Array of extra arguments\n *   fullMessage: interpolated message and arguments if INTERPOLATE flag set\n *\n * @param logFunction a logging function which takes a log message object\n *          as a parameter.\n *\n * @return a logger object.\n */\nforge.log.makeLogger = function (logFunction) {\n  var logger = {\n    flags: 0,\n    f: logFunction\n  };\n  forge.log.setLevel(logger, 'none');\n  return logger;\n};\n\n/**\n * Sets the current log level on a logger.\n *\n * @param logger the target logger.\n * @param level the new maximum log level as a string.\n *\n * @return true if set, false if not.\n */\nforge.log.setLevel = function (logger, level) {\n  var rval = false;\n  if (logger && !(logger.flags & forge.log.LEVEL_LOCKED)) {\n    for (var i = 0; i < forge.log.levels.length; ++i) {\n      var aValidLevel = forge.log.levels[i];\n      if (level == aValidLevel) {\n        // set level\n        logger.level = level;\n        rval = true;\n        break;\n      }\n    }\n  }\n  return rval;\n};\n\n/**\n * Locks the log level at its current value.\n *\n * @param logger the target logger.\n * @param lock boolean lock value, default to true.\n */\nforge.log.lock = function (logger, lock) {\n  if (typeof lock === 'undefined' || lock) {\n    logger.flags |= forge.log.LEVEL_LOCKED;\n  } else {\n    logger.flags &= ~forge.log.LEVEL_LOCKED;\n  }\n};\n\n/**\n * Adds a logger.\n *\n * @param logger the logger object.\n */\nforge.log.addLogger = function (logger) {\n  sLoggers.push(logger);\n};\n\n// setup the console logger if possible, else create fake console.log\nif (typeof console !== 'undefined' && 'log' in console) {\n  var logger;\n  if (console.error && console.warn && console.info && console.debug) {\n    // looks like Firebug-style logging is available\n    // level handlers map\n    var levelHandlers = {\n      error: console.error,\n      warning: console.warn,\n      info: console.info,\n      debug: console.debug,\n      verbose: console.debug\n    };\n    var f = function (logger, message) {\n      forge.log.prepareStandard(message);\n      var handler = levelHandlers[message.level];\n      // prepend standard message and concat args\n      var args = [message.standard];\n      args = args.concat(message['arguments'].slice());\n      // apply to low-level console function\n      handler.apply(console, args);\n    };\n    logger = forge.log.makeLogger(f);\n  } else {\n    // only appear to have basic console.log\n    var f = function (logger, message) {\n      forge.log.prepareStandardFull(message);\n      console.log(message.standardFull);\n    };\n    logger = forge.log.makeLogger(f);\n  }\n  forge.log.setLevel(logger, 'debug');\n  forge.log.addLogger(logger);\n  sConsoleLogger = logger;\n} else {\n  // define fake console.log to avoid potential script errors on\n  // browsers that do not have console logging\n  console = {\n    log: function () {}\n  };\n}\n\n/*\n * Check for logging control query vars.\n *\n * console.level=<level-name>\n * Set's the console log level by name.  Useful to override defaults and\n * allow more verbose logging before a user config is loaded.\n *\n * console.lock=<true|false>\n * Lock the console log level at whatever level it is set at.  This is run\n * after console.level is processed.  Useful to force a level of verbosity\n * that could otherwise be limited by a user config.\n */\nif (sConsoleLogger !== null) {\n  var query = forge.util.getQueryVariables();\n  if ('console.level' in query) {\n    // set with last value\n    forge.log.setLevel(sConsoleLogger, query['console.level'].slice(-1)[0]);\n  }\n  if ('console.lock' in query) {\n    // set with last value\n    var lock = query['console.lock'].slice(-1)[0];\n    if (lock == 'true') {\n      forge.log.lock(sConsoleLogger);\n    }\n  }\n}\n\n// provide public access to console logger\nforge.log.consoleLogger = sConsoleLogger;","map":{"version":3,"names":["forge","require","module","exports","log","levels","sLevelInfo","sLoggers","sConsoleLogger","LEVEL_LOCKED","NO_LEVEL_CHECK","INTERPOLATE","i","length","level","index","name","toUpperCase","logMessage","message","messageLevelIndex","logger","flags","f","loggerLevelIndex","prepareStandard","standard","category","prepareFull","args","concat","full","util","format","apply","prepareStandardFull","standardFull","Array","prototype","slice","call","arguments","msg","timestamp","Date","makeLogger","logFunction","setLevel","rval","aValidLevel","lock","addLogger","push","console","error","warn","info","debug","levelHandlers","warning","verbose","handler","query","getQueryVariables","consoleLogger"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/node-forge/lib/log.js"],"sourcesContent":["/**\n * Cross-browser support for logging in a web application.\n *\n * @author David I. Lehn <dlehn@digitalbazaar.com>\n *\n * Copyright (c) 2008-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\n\n/* LOG API */\nmodule.exports = forge.log = forge.log || {};\n\n/**\n * Application logging system.\n *\n * Each logger level available as it's own function of the form:\n *   forge.log.level(category, args...)\n * The category is an arbitrary string, and the args are the same as\n * Firebug's console.log API. By default the call will be output as:\n *   'LEVEL [category] <args[0]>, args[1], ...'\n * This enables proper % formatting via the first argument.\n * Each category is enabled by default but can be enabled or disabled with\n * the setCategoryEnabled() function.\n */\n// list of known levels\nforge.log.levels = [\n  'none', 'error', 'warning', 'info', 'debug', 'verbose', 'max'];\n// info on the levels indexed by name:\n//   index: level index\n//   name: uppercased display name\nvar sLevelInfo = {};\n// list of loggers\nvar sLoggers = [];\n/**\n * Standard console logger. If no console support is enabled this will\n * remain null. Check before using.\n */\nvar sConsoleLogger = null;\n\n// logger flags\n/**\n * Lock the level at the current value. Used in cases where user config may\n * set the level such that only critical messages are seen but more verbose\n * messages are needed for debugging or other purposes.\n */\nforge.log.LEVEL_LOCKED = (1 << 1);\n/**\n * Always call log function. By default, the logging system will check the\n * message level against logger.level before calling the log function. This\n * flag allows the function to do its own check.\n */\nforge.log.NO_LEVEL_CHECK = (1 << 2);\n/**\n * Perform message interpolation with the passed arguments. \"%\" style\n * fields in log messages will be replaced by arguments as needed. Some\n * loggers, such as Firebug, may do this automatically. The original log\n * message will be available as 'message' and the interpolated version will\n * be available as 'fullMessage'.\n */\nforge.log.INTERPOLATE = (1 << 3);\n\n// setup each log level\nfor(var i = 0; i < forge.log.levels.length; ++i) {\n  var level = forge.log.levels[i];\n  sLevelInfo[level] = {\n    index: i,\n    name: level.toUpperCase()\n  };\n}\n\n/**\n * Message logger. Will dispatch a message to registered loggers as needed.\n *\n * @param message message object\n */\nforge.log.logMessage = function(message) {\n  var messageLevelIndex = sLevelInfo[message.level].index;\n  for(var i = 0; i < sLoggers.length; ++i) {\n    var logger = sLoggers[i];\n    if(logger.flags & forge.log.NO_LEVEL_CHECK) {\n      logger.f(message);\n    } else {\n      // get logger level\n      var loggerLevelIndex = sLevelInfo[logger.level].index;\n      // check level\n      if(messageLevelIndex <= loggerLevelIndex) {\n        // message critical enough, call logger\n        logger.f(logger, message);\n      }\n    }\n  }\n};\n\n/**\n * Sets the 'standard' key on a message object to:\n * \"LEVEL [category] \" + message\n *\n * @param message a message log object\n */\nforge.log.prepareStandard = function(message) {\n  if(!('standard' in message)) {\n    message.standard =\n      sLevelInfo[message.level].name +\n      //' ' + +message.timestamp +\n      ' [' + message.category + '] ' +\n      message.message;\n  }\n};\n\n/**\n * Sets the 'full' key on a message object to the original message\n * interpolated via % formatting with the message arguments.\n *\n * @param message a message log object.\n */\nforge.log.prepareFull = function(message) {\n  if(!('full' in message)) {\n    // copy args and insert message at the front\n    var args = [message.message];\n    args = args.concat([] || message['arguments']);\n    // format the message\n    message.full = forge.util.format.apply(this, args);\n  }\n};\n\n/**\n * Applies both preparseStandard() and prepareFull() to a message object and\n * store result in 'standardFull'.\n *\n * @param message a message log object.\n */\nforge.log.prepareStandardFull = function(message) {\n  if(!('standardFull' in message)) {\n    // FIXME implement 'standardFull' logging\n    forge.log.prepareStandard(message);\n    message.standardFull = message.standard;\n  }\n};\n\n// create log level functions\nif(true) {\n  // levels for which we want functions\n  var levels = ['error', 'warning', 'info', 'debug', 'verbose'];\n  for(var i = 0; i < levels.length; ++i) {\n    // wrap in a function to ensure proper level var is passed\n    (function(level) {\n      // create function for this level\n      forge.log[level] = function(category, message/*, args...*/) {\n        // convert arguments to real array, remove category and message\n        var args = Array.prototype.slice.call(arguments).slice(2);\n        // create message object\n        // Note: interpolation and standard formatting is done lazily\n        var msg = {\n          timestamp: new Date(),\n          level: level,\n          category: category,\n          message: message,\n          'arguments': args\n          /*standard*/\n          /*full*/\n          /*fullMessage*/\n        };\n        // process this message\n        forge.log.logMessage(msg);\n      };\n    })(levels[i]);\n  }\n}\n\n/**\n * Creates a new logger with specified custom logging function.\n *\n * The logging function has a signature of:\n *   function(logger, message)\n * logger: current logger\n * message: object:\n *   level: level id\n *   category: category\n *   message: string message\n *   arguments: Array of extra arguments\n *   fullMessage: interpolated message and arguments if INTERPOLATE flag set\n *\n * @param logFunction a logging function which takes a log message object\n *          as a parameter.\n *\n * @return a logger object.\n */\nforge.log.makeLogger = function(logFunction) {\n  var logger = {\n    flags: 0,\n    f: logFunction\n  };\n  forge.log.setLevel(logger, 'none');\n  return logger;\n};\n\n/**\n * Sets the current log level on a logger.\n *\n * @param logger the target logger.\n * @param level the new maximum log level as a string.\n *\n * @return true if set, false if not.\n */\nforge.log.setLevel = function(logger, level) {\n  var rval = false;\n  if(logger && !(logger.flags & forge.log.LEVEL_LOCKED)) {\n    for(var i = 0; i < forge.log.levels.length; ++i) {\n      var aValidLevel = forge.log.levels[i];\n      if(level == aValidLevel) {\n        // set level\n        logger.level = level;\n        rval = true;\n        break;\n      }\n    }\n  }\n\n  return rval;\n};\n\n/**\n * Locks the log level at its current value.\n *\n * @param logger the target logger.\n * @param lock boolean lock value, default to true.\n */\nforge.log.lock = function(logger, lock) {\n  if(typeof lock === 'undefined' || lock) {\n    logger.flags |= forge.log.LEVEL_LOCKED;\n  } else {\n    logger.flags &= ~forge.log.LEVEL_LOCKED;\n  }\n};\n\n/**\n * Adds a logger.\n *\n * @param logger the logger object.\n */\nforge.log.addLogger = function(logger) {\n  sLoggers.push(logger);\n};\n\n// setup the console logger if possible, else create fake console.log\nif(typeof(console) !== 'undefined' && 'log' in console) {\n  var logger;\n  if(console.error && console.warn && console.info && console.debug) {\n    // looks like Firebug-style logging is available\n    // level handlers map\n    var levelHandlers = {\n      error: console.error,\n      warning: console.warn,\n      info: console.info,\n      debug: console.debug,\n      verbose: console.debug\n    };\n    var f = function(logger, message) {\n      forge.log.prepareStandard(message);\n      var handler = levelHandlers[message.level];\n      // prepend standard message and concat args\n      var args = [message.standard];\n      args = args.concat(message['arguments'].slice());\n      // apply to low-level console function\n      handler.apply(console, args);\n    };\n    logger = forge.log.makeLogger(f);\n  } else {\n    // only appear to have basic console.log\n    var f = function(logger, message) {\n      forge.log.prepareStandardFull(message);\n      console.log(message.standardFull);\n    };\n    logger = forge.log.makeLogger(f);\n  }\n  forge.log.setLevel(logger, 'debug');\n  forge.log.addLogger(logger);\n  sConsoleLogger = logger;\n} else {\n  // define fake console.log to avoid potential script errors on\n  // browsers that do not have console logging\n  console = {\n    log: function() {}\n  };\n}\n\n/*\n * Check for logging control query vars.\n *\n * console.level=<level-name>\n * Set's the console log level by name.  Useful to override defaults and\n * allow more verbose logging before a user config is loaded.\n *\n * console.lock=<true|false>\n * Lock the console log level at whatever level it is set at.  This is run\n * after console.level is processed.  Useful to force a level of verbosity\n * that could otherwise be limited by a user config.\n */\nif(sConsoleLogger !== null) {\n  var query = forge.util.getQueryVariables();\n  if('console.level' in query) {\n    // set with last value\n    forge.log.setLevel(\n      sConsoleLogger, query['console.level'].slice(-1)[0]);\n  }\n  if('console.lock' in query) {\n    // set with last value\n    var lock = query['console.lock'].slice(-1)[0];\n    if(lock == 'true') {\n      forge.log.lock(sConsoleLogger);\n    }\n  }\n}\n\n// provide public access to console logger\nforge.log.consoleLogger = sConsoleLogger;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC9BA,OAAO,CAAC,QAAQ,CAAC;;AAEjB;AACAC,MAAM,CAACC,OAAO,GAAGH,KAAK,CAACI,GAAG,GAAGJ,KAAK,CAACI,GAAG,IAAI,CAAC,CAAC;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,KAAK,CAACI,GAAG,CAACC,MAAM,GAAG,CACjB,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,CAAC;AAChE;AACA;AACA;AACA,IAAIC,UAAU,GAAG,CAAC,CAAC;AACnB;AACA,IAAIC,QAAQ,GAAG,EAAE;AACjB;AACA;AACA;AACA;AACA,IAAIC,cAAc,GAAG,IAAI;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACAR,KAAK,CAACI,GAAG,CAACK,YAAY,GAAI,CAAC,IAAI,CAAE;AACjC;AACA;AACA;AACA;AACA;AACAT,KAAK,CAACI,GAAG,CAACM,cAAc,GAAI,CAAC,IAAI,CAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACAV,KAAK,CAACI,GAAG,CAACO,WAAW,GAAI,CAAC,IAAI,CAAE;;AAEhC;AACA,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,KAAK,CAACI,GAAG,CAACC,MAAM,CAACQ,MAAM,EAAE,EAAED,CAAC,EAAE;EAC/C,IAAIE,KAAK,GAAGd,KAAK,CAACI,GAAG,CAACC,MAAM,CAACO,CAAC,CAAC;EAC/BN,UAAU,CAACQ,KAAK,CAAC,GAAG;IAClBC,KAAK,EAAEH,CAAC;IACRI,IAAI,EAAEF,KAAK,CAACG,WAAW,CAAC;EAC1B,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACAjB,KAAK,CAACI,GAAG,CAACc,UAAU,GAAG,UAASC,OAAO,EAAE;EACvC,IAAIC,iBAAiB,GAAGd,UAAU,CAACa,OAAO,CAACL,KAAK,CAAC,CAACC,KAAK;EACvD,KAAI,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,CAACM,MAAM,EAAE,EAAED,CAAC,EAAE;IACvC,IAAIS,MAAM,GAAGd,QAAQ,CAACK,CAAC,CAAC;IACxB,IAAGS,MAAM,CAACC,KAAK,GAAGtB,KAAK,CAACI,GAAG,CAACM,cAAc,EAAE;MAC1CW,MAAM,CAACE,CAAC,CAACJ,OAAO,CAAC;IACnB,CAAC,MAAM;MACL;MACA,IAAIK,gBAAgB,GAAGlB,UAAU,CAACe,MAAM,CAACP,KAAK,CAAC,CAACC,KAAK;MACrD;MACA,IAAGK,iBAAiB,IAAII,gBAAgB,EAAE;QACxC;QACAH,MAAM,CAACE,CAAC,CAACF,MAAM,EAAEF,OAAO,CAAC;MAC3B;IACF;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAnB,KAAK,CAACI,GAAG,CAACqB,eAAe,GAAG,UAASN,OAAO,EAAE;EAC5C,IAAG,EAAE,UAAU,IAAIA,OAAO,CAAC,EAAE;IAC3BA,OAAO,CAACO,QAAQ,GACdpB,UAAU,CAACa,OAAO,CAACL,KAAK,CAAC,CAACE,IAAI;IAC9B;IACA,IAAI,GAAGG,OAAO,CAACQ,QAAQ,GAAG,IAAI,GAC9BR,OAAO,CAACA,OAAO;EACnB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAnB,KAAK,CAACI,GAAG,CAACwB,WAAW,GAAG,UAAST,OAAO,EAAE;EACxC,IAAG,EAAE,MAAM,IAAIA,OAAO,CAAC,EAAE;IACvB;IACA,IAAIU,IAAI,GAAG,CAACV,OAAO,CAACA,OAAO,CAAC;IAC5BU,IAAI,GAAGA,IAAI,CAACC,MAAM,CAAC,EAAE,IAAIX,OAAO,CAAC,WAAW,CAAC,CAAC;IAC9C;IACAA,OAAO,CAACY,IAAI,GAAG/B,KAAK,CAACgC,IAAI,CAACC,MAAM,CAACC,KAAK,CAAC,IAAI,EAAEL,IAAI,CAAC;EACpD;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA7B,KAAK,CAACI,GAAG,CAAC+B,mBAAmB,GAAG,UAAShB,OAAO,EAAE;EAChD,IAAG,EAAE,cAAc,IAAIA,OAAO,CAAC,EAAE;IAC/B;IACAnB,KAAK,CAACI,GAAG,CAACqB,eAAe,CAACN,OAAO,CAAC;IAClCA,OAAO,CAACiB,YAAY,GAAGjB,OAAO,CAACO,QAAQ;EACzC;AACF,CAAC;;AAED;AACA,IAAG,IAAI,EAAE;EACP;EACA,IAAIrB,MAAM,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC;EAC7D,KAAI,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,MAAM,CAACQ,MAAM,EAAE,EAAED,CAAC,EAAE;IACrC;IACA,CAAC,UAASE,KAAK,EAAE;MACf;MACAd,KAAK,CAACI,GAAG,CAACU,KAAK,CAAC,GAAG,UAASa,QAAQ,EAAER,OAAO,gBAAe;QAC1D;QACA,IAAIU,IAAI,GAAGQ,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACC,SAAS,CAAC,CAACF,KAAK,CAAC,CAAC,CAAC;QACzD;QACA;QACA,IAAIG,GAAG,GAAG;UACRC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;UACrB9B,KAAK,EAAEA,KAAK;UACZa,QAAQ,EAAEA,QAAQ;UAClBR,OAAO,EAAEA,OAAO;UAChB,WAAW,EAAEU;UACb;UACA;UACA;QACF,CAAC;QACD;QACA7B,KAAK,CAACI,GAAG,CAACc,UAAU,CAACwB,GAAG,CAAC;MAC3B,CAAC;IACH,CAAC,EAAErC,MAAM,CAACO,CAAC,CAAC,CAAC;EACf;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,KAAK,CAACI,GAAG,CAACyC,UAAU,GAAG,UAASC,WAAW,EAAE;EAC3C,IAAIzB,MAAM,GAAG;IACXC,KAAK,EAAE,CAAC;IACRC,CAAC,EAAEuB;EACL,CAAC;EACD9C,KAAK,CAACI,GAAG,CAAC2C,QAAQ,CAAC1B,MAAM,EAAE,MAAM,CAAC;EAClC,OAAOA,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArB,KAAK,CAACI,GAAG,CAAC2C,QAAQ,GAAG,UAAS1B,MAAM,EAAEP,KAAK,EAAE;EAC3C,IAAIkC,IAAI,GAAG,KAAK;EAChB,IAAG3B,MAAM,IAAI,EAAEA,MAAM,CAACC,KAAK,GAAGtB,KAAK,CAACI,GAAG,CAACK,YAAY,CAAC,EAAE;IACrD,KAAI,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,KAAK,CAACI,GAAG,CAACC,MAAM,CAACQ,MAAM,EAAE,EAAED,CAAC,EAAE;MAC/C,IAAIqC,WAAW,GAAGjD,KAAK,CAACI,GAAG,CAACC,MAAM,CAACO,CAAC,CAAC;MACrC,IAAGE,KAAK,IAAImC,WAAW,EAAE;QACvB;QACA5B,MAAM,CAACP,KAAK,GAAGA,KAAK;QACpBkC,IAAI,GAAG,IAAI;QACX;MACF;IACF;EACF;EAEA,OAAOA,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAhD,KAAK,CAACI,GAAG,CAAC8C,IAAI,GAAG,UAAS7B,MAAM,EAAE6B,IAAI,EAAE;EACtC,IAAG,OAAOA,IAAI,KAAK,WAAW,IAAIA,IAAI,EAAE;IACtC7B,MAAM,CAACC,KAAK,IAAItB,KAAK,CAACI,GAAG,CAACK,YAAY;EACxC,CAAC,MAAM;IACLY,MAAM,CAACC,KAAK,IAAI,CAACtB,KAAK,CAACI,GAAG,CAACK,YAAY;EACzC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAT,KAAK,CAACI,GAAG,CAAC+C,SAAS,GAAG,UAAS9B,MAAM,EAAE;EACrCd,QAAQ,CAAC6C,IAAI,CAAC/B,MAAM,CAAC;AACvB,CAAC;;AAED;AACA,IAAG,OAAOgC,OAAQ,KAAK,WAAW,IAAI,KAAK,IAAIA,OAAO,EAAE;EACtD,IAAIhC,MAAM;EACV,IAAGgC,OAAO,CAACC,KAAK,IAAID,OAAO,CAACE,IAAI,IAAIF,OAAO,CAACG,IAAI,IAAIH,OAAO,CAACI,KAAK,EAAE;IACjE;IACA;IACA,IAAIC,aAAa,GAAG;MAClBJ,KAAK,EAAED,OAAO,CAACC,KAAK;MACpBK,OAAO,EAAEN,OAAO,CAACE,IAAI;MACrBC,IAAI,EAAEH,OAAO,CAACG,IAAI;MAClBC,KAAK,EAAEJ,OAAO,CAACI,KAAK;MACpBG,OAAO,EAAEP,OAAO,CAACI;IACnB,CAAC;IACD,IAAIlC,CAAC,GAAG,SAAAA,CAASF,MAAM,EAAEF,OAAO,EAAE;MAChCnB,KAAK,CAACI,GAAG,CAACqB,eAAe,CAACN,OAAO,CAAC;MAClC,IAAI0C,OAAO,GAAGH,aAAa,CAACvC,OAAO,CAACL,KAAK,CAAC;MAC1C;MACA,IAAIe,IAAI,GAAG,CAACV,OAAO,CAACO,QAAQ,CAAC;MAC7BG,IAAI,GAAGA,IAAI,CAACC,MAAM,CAACX,OAAO,CAAC,WAAW,CAAC,CAACoB,KAAK,CAAC,CAAC,CAAC;MAChD;MACAsB,OAAO,CAAC3B,KAAK,CAACmB,OAAO,EAAExB,IAAI,CAAC;IAC9B,CAAC;IACDR,MAAM,GAAGrB,KAAK,CAACI,GAAG,CAACyC,UAAU,CAACtB,CAAC,CAAC;EAClC,CAAC,MAAM;IACL;IACA,IAAIA,CAAC,GAAG,SAAAA,CAASF,MAAM,EAAEF,OAAO,EAAE;MAChCnB,KAAK,CAACI,GAAG,CAAC+B,mBAAmB,CAAChB,OAAO,CAAC;MACtCkC,OAAO,CAACjD,GAAG,CAACe,OAAO,CAACiB,YAAY,CAAC;IACnC,CAAC;IACDf,MAAM,GAAGrB,KAAK,CAACI,GAAG,CAACyC,UAAU,CAACtB,CAAC,CAAC;EAClC;EACAvB,KAAK,CAACI,GAAG,CAAC2C,QAAQ,CAAC1B,MAAM,EAAE,OAAO,CAAC;EACnCrB,KAAK,CAACI,GAAG,CAAC+C,SAAS,CAAC9B,MAAM,CAAC;EAC3Bb,cAAc,GAAGa,MAAM;AACzB,CAAC,MAAM;EACL;EACA;EACAgC,OAAO,GAAG;IACRjD,GAAG,EAAE,SAAAA,CAAA,EAAW,CAAC;EACnB,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAGI,cAAc,KAAK,IAAI,EAAE;EAC1B,IAAIsD,KAAK,GAAG9D,KAAK,CAACgC,IAAI,CAAC+B,iBAAiB,CAAC,CAAC;EAC1C,IAAG,eAAe,IAAID,KAAK,EAAE;IAC3B;IACA9D,KAAK,CAACI,GAAG,CAAC2C,QAAQ,CAChBvC,cAAc,EAAEsD,KAAK,CAAC,eAAe,CAAC,CAACvB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACxD;EACA,IAAG,cAAc,IAAIuB,KAAK,EAAE;IAC1B;IACA,IAAIZ,IAAI,GAAGY,KAAK,CAAC,cAAc,CAAC,CAACvB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7C,IAAGW,IAAI,IAAI,MAAM,EAAE;MACjBlD,KAAK,CAACI,GAAG,CAAC8C,IAAI,CAAC1C,cAAc,CAAC;IAChC;EACF;AACF;;AAEA;AACAR,KAAK,CAACI,GAAG,CAAC4D,aAAa,GAAGxD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}