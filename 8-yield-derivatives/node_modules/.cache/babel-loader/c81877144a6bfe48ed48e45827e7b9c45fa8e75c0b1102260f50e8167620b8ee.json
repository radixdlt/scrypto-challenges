{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { innerSubscribe, SimpleInnerSubscriber, SimpleOuterSubscriber } from '../innerSubscribe';\nexport function takeUntil(notifier) {\n  return function (source) {\n    return source.lift(new TakeUntilOperator(notifier));\n  };\n}\nvar TakeUntilOperator = /*@__PURE__*/function () {\n  function TakeUntilOperator(notifier) {\n    this.notifier = notifier;\n  }\n  TakeUntilOperator.prototype.call = function (subscriber, source) {\n    var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n    var notifierSubscription = innerSubscribe(this.notifier, new SimpleInnerSubscriber(takeUntilSubscriber));\n    if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n      takeUntilSubscriber.add(notifierSubscription);\n      return source.subscribe(takeUntilSubscriber);\n    }\n    return takeUntilSubscriber;\n  };\n  return TakeUntilOperator;\n}();\nvar TakeUntilSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(TakeUntilSubscriber, _super);\n  function TakeUntilSubscriber(destination) {\n    var _this = _super.call(this, destination) || this;\n    _this.seenValue = false;\n    return _this;\n  }\n  TakeUntilSubscriber.prototype.notifyNext = function () {\n    this.seenValue = true;\n    this.complete();\n  };\n  TakeUntilSubscriber.prototype.notifyComplete = function () {};\n  return TakeUntilSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"names":["tslib_1","innerSubscribe","SimpleInnerSubscriber","SimpleOuterSubscriber","takeUntil","notifier","source","lift","TakeUntilOperator","prototype","call","subscriber","takeUntilSubscriber","TakeUntilSubscriber","notifierSubscription","seenValue","add","subscribe","_super","__extends","destination","_this","notifyNext","complete","notifyComplete"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/takeUntil.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { innerSubscribe, SimpleInnerSubscriber, SimpleOuterSubscriber } from '../innerSubscribe';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * ![](takeUntil.png)\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * ## Example\n * Tick every second until the first click happens\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { takeUntil } from 'rxjs/operators';\n *\n * const source = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = source.pipe(takeUntil(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n    const notifierSubscription = innerSubscribe(this.notifier, new SimpleInnerSubscriber(takeUntilSubscriber));\n    if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n      takeUntilSubscriber.add(notifierSubscription);\n      return source.subscribe(takeUntilSubscriber);\n    }\n    return takeUntilSubscriber;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  seenValue = false;\n\n  constructor(destination: Subscriber<any>, ) {\n    super(destination);\n  }\n\n  notifyNext(): void {\n    this.seenValue = true;\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n"],"mappings":";AAKA,OAAO,KAAEA,OAAA,MAAgB;AA0CzB,SAAMC,cAAU,EAASC,qBAA6B,EAAAC,qBAAA;OACpD,SAAOC,SAACA,CAAAC,QAA0B;EACnC,iBAAAC,MAAA;IAAA,OAAAA,MAAA,CAAAC,IAAA,KAAAC,iBAAA,CAAAH,QAAA;EAAA;AAED;IACEG,iBAAA,gBAA6C;WAAzBA,kBAAAH,QAAyB;IAC5C,KAAAA,QAAA,GAAAA,QAAA;EAED;mBACQ,CAAAI,SAAmB,CAAAC,IAAG,GAAI,UAAAC,UAAoB,EAAAL,MAAA,EAAW;IAC/D,IAAMM,mBAAA,GAAoB,IAAGC,mBAAoB,CAAAF,UAAU,CAAI;IAC/D,IAAIG,oBAAoB,GAAAb,cAAK,MAAAI,QAAoB,MAAWH,qBAAA,CAAAU,mBAAA;QAC1DE,oBAAoB,IAAI,CAAAF,mBAAoB,CAACG,SAAC;MAC9CH,mBAAc,CAAAI,GAAS,CAACF,oBAAoB,CAAC;MAC9C,OAAAR,MAAA,CAAAW,SAAA,CAAAL,mBAAA;IACD;IACD,OAAAA,mBAAA;EACH;EAbA,OAaCJ,iBAAA;AAOD;IAAwCK,mBAAA,0BAA2BK,MAAA;EAGjElB,OAAA,CAAAmB,SAAA,CAAAN,mBAAY,EAAAK,MAA4B;WAAxCL,mBACEA,CAAAO,WAAM;IAHR,IAAAC,KAAA,GAAAH,MAAY,CAAAR,IAAK,CAAC,MAAAU,WAAA;;IAIjB,OAAAC,KAAA;EAED;qBACgB,CAAAZ,SAAQ,CAAAa,UAAA;IACtB,IAAI,CAACP,SAAQ,GAAG;IACjB,KAAAQ,QAAA;EAED;EAEAV,mBAAC,CAAAJ,SAAA,CAAAe,cAAA,gBACH;EAfwC,OAAAX,mBAevC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}