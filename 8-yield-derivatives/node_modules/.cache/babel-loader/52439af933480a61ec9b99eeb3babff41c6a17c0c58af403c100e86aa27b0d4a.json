{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { defaultThrottleConfig } from './throttle';\nexport function throttleTime(duration, scheduler, config) {\n  if (scheduler === void 0) {\n    scheduler = async;\n  }\n  if (config === void 0) {\n    config = defaultThrottleConfig;\n  }\n  return function (source) {\n    return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n  };\n}\nvar ThrottleTimeOperator = /*@__PURE__*/function () {\n  function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\n    this.duration = duration;\n    this.scheduler = scheduler;\n    this.leading = leading;\n    this.trailing = trailing;\n  }\n  ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n  };\n  return ThrottleTimeOperator;\n}();\nvar ThrottleTimeSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ThrottleTimeSubscriber, _super);\n  function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\n    var _this = _super.call(this, destination) || this;\n    _this.duration = duration;\n    _this.scheduler = scheduler;\n    _this.leading = leading;\n    _this.trailing = trailing;\n    _this._hasTrailingValue = false;\n    _this._trailingValue = null;\n    return _this;\n  }\n  ThrottleTimeSubscriber.prototype._next = function (value) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, {\n        subscriber: this\n      }));\n      if (this.leading) {\n        this.destination.next(value);\n      } else if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    }\n  };\n  ThrottleTimeSubscriber.prototype._complete = function () {\n    if (this._hasTrailingValue) {\n      this.destination.next(this._trailingValue);\n      this.destination.complete();\n    } else {\n      this.destination.complete();\n    }\n  };\n  ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n    var throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  };\n  return ThrottleTimeSubscriber;\n}(Subscriber);\nfunction dispatchNext(arg) {\n  var subscriber = arg.subscriber;\n  subscriber.clearThrottle();\n}","map":{"version":3,"names":["tslib_1","Subscriber","async","defaultThrottleConfig","throttleTime","duration","scheduler","config","source","lift","ThrottleTimeOperator","leading","trailing","prototype","call","subscriber","subscribe","ThrottleTimeSubscriber","_super","__extends","destination","_this","_hasTrailingValue","_trailingValue","_next","value","throttled","add","schedule","dispatchNext","next","_complete","complete","clearThrottle","unsubscribe","remove"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/throttleTime.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * ![](throttleTime.png)\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link SchedulerLike} for managing timers.\n *\n * ## Examples\n *\n * #### Limit click rate\n *\n * Emit clicks at a rate of at most one click per second\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { throttleTime } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(throttleTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * #### Double Click\n *\n * The following example only emits clicks which happen within a subsequent\n * delay of 400ms of the previous click. This for example can emulate a double\n * click. It makes use of the `trailing` parameter of the throttle configuration.\n *\n * ```ts\n * import { fromEvent, asyncScheduler } from 'rxjs';\n * import { throttleTime, withLatestFrom } from 'rxjs/operators';\n *\n * // defaultThottleConfig = { leading: true, trailing: false }\n * const throttleConfig = {\n *   leading: false,\n *   trailing: true\n * }\n *\n * const click = fromEvent(document, 'click');\n * const doubleClick = click.pipe(\n *   throttleTime(400, asyncScheduler, throttleConfig)\n * );\n *\n * doubleClick.subscribe((throttleValue: Event) => {\n *   console.log(`Double-clicked! Timestamp: ${throttleValue.timeStamp}`);\n * });\n * ```\n *\n * If you enable the `leading` parameter in this example, the output would be the primary click and\n * the double click, but restricts additional clicks within 400ms.\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the throttling.\n * @param {Object} config a configuration object to define `leading` and\n * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: SchedulerLike = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: SchedulerLike,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: SchedulerLike,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule<DispatchArg<T>>(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      } else if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    }\n  }\n\n  protected _complete() {\n    if (this._hasTrailingValue) {\n      this.destination.next(this._trailingValue);\n      this.destination.complete();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n"],"mappings":";AACA,OAAO,KAAEA,OAAU,MAAE,OAAM;AAE3B,SAASC,UAAO,QAAM,eAAoB;AAE1C,SAAyBC,KAAA,4BAA6B;AAkFtD,SAAMC,qBAA0B,QAAgB,YAEhB;OADA,SAAAC,aAAAC,QAAA,EAAAC,SAAA,EAAgCC,MAAA;EAChC,IAAAD,SAAA;IAC9BA,SAAO,GAAAJ,KAAC;EACT;EAED,IAAAK,MAAA;IACEA,MAAA,GAAAJ,qBAAoB;;SACA,UAAAK,MAAA;IAAA,OAAwBA,MAAA,CAAAC,IAAA,KAAAC,oBAAA,CAAAL,QAAA,EAAAC,SAAA,EAAAC,MAAA,CAAAI,OAAA,EAAAJ,MAAA,CAAAK,QAAA;EAAA;;wBAExB,gBAAiB;EACrC,SAACF,qBAAAL,QAAA,EAAAC,SAAA,EAAAK,OAAA,EAAAC,QAAA;IAED,KAAAP,QAAA,GAAAA,QAAA;IACE,KAAAC,SAAc,GAAAA,SACZ;IAEH,KAAAK,OAAA,GAAAA,OAAA;IACH,KAAAC,QAAA,GAAAA,QAAC;EAZD;EAmBAF,oBAAA,CAAAG,SAAA,CAAAC,IAAA,aAAAC,UAAA,EAAAP,MAAA;IAAwC,OAAAA,MAAA,CAAAQ,SAAA,KAAAC,sBAAa,CAAAF,UAAA,OAAAV,QAAA,OAAAC,SAAA,OAAAK,OAAA,OAAAC,QAAA;EAKnD;SAAAF,oBAKE;;0BAHkB,gBAAwB,UAAAQ,MAAA;SACxB,CAAAC,SAAO,CAAAF,sBAAS,EAAAC,MAAA;WAChBD,sBAAiBA,CAAAG,WAAA,EAAAf,QAAA,EAAAC,SAAA,EAAAK,OAAA,EAAAC,QAAA;IAP7B,IAAAS,KAAA,GAAAH,MAAA,CAAAJ,IAAiB,KAAY,EAAAM,WAAM;IACnCC,KAAA,CAAAhB,QAAA,GAAAA,QAAoB;;IAQ3BgB,KAAA,CAAAV,OAAA,GAAAA,OAAA;IAESU,KAAA,CAAAT,QAAA,GAAAA,QAAA;IACRS,KAAI,CAAAC,iBAAgB;SAClB,CAAAC,cAAS,GAAU;gBACb;;wBAEL,CAAAV,SAAA,CAAAW,KAAA,aAAAC,KAAA;QACF,KAAAC,SAAA;UAAM,KAAAd,QAAA;QACD,IAAI,CAACW,cAAc,GAAGE,KAAK;QAC3B,IAAI,CAACH,iBAAS;;;UAGhB,CAAAK,GAAI,CAAC,KAAAD,SAAc,GAAG,KAAKpB,SAAC,CAAAsB,QAAA,CAAAC,YAAA,OAAAxB,QAAA;QAAAU,UAAA;MAAA;UAC5B,IAAI,CAACJ,OAAA;QACN,KAAAS,WAAA,CAAAU,IAAA,CAAAL,KAAA;MACF,OACF,SAAAb,QAAA;QAES,KAAAW,cAAA,GAAAE,KAAA;QACA,IAAC,CAAAH,iBAAmB;MAC1B;;;wBAEK,CAAAT,SAAA,CAAAkB,SAAA;QACL,IAAI,CAACT,iBAAY;MAClB,KAAAF,WAAA,CAAAU,IAAA,MAAAP,cAAA;MACF,KAAAH,WAAA,CAAAY,QAAA;IAED,OACQ;MACF,KAAAZ,WAAW,CAAAY,QAAA;;;wBAGN,CAAAnB,SAAc,CAAAoB,aAAQ;iBACtB,QAAAP,SAAiB;iBACvB;MACD,SAASd,QAAC,IAAW,IAAG,CAAAU,iBAAA;QACpB,IAAC,CAAAF,WAAO,CAASU,IAAE,MAAAP,cAAA;QACnB,IAAC,CAAAA,cAAiB;QACvB,KAAAD,iBAAA;MACF;MACHI,SAAA,CAAAQ,WAAC;MApDiD,IAoDjD,CAAAC,MAAA,CAAAT,SAAA;MAMQ,KAAAA,SAAmC;IAClC;EACR;EACD,OAAAT,sBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}