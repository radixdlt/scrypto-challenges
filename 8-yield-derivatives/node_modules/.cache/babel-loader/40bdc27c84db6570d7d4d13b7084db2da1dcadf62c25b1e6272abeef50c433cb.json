{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nvar Action = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(Action, _super);\n  function Action(scheduler, work) {\n    return _super.call(this) || this;\n  }\n  Action.prototype.schedule = function (state, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    return this;\n  };\n  return Action;\n}(Subscription);\nexport { Action };","map":{"version":3,"names":["tslib_1","Subscription","Action","_super","__extends","scheduler","work","call","prototype","schedule","state","delay"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/scheduler/Action.ts"],"sourcesContent":["import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n\n/**\n * A unit of work to be executed in a `scheduler`. An action is typically\n * created from within a {@link SchedulerLike} and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent {@link SchedulerLike} for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n"],"mappings":";AACA,OAAO,KAAEA,OAAA,MAAc,OAAM;AAiB7B,SAAAC,YAAA;IAA+BC,MAAA,0BAAYC,MAAA;EACzCH,OAAA,CAAAI,SAAY,CAAAF,MAAA,EAAoBC,MAAqD;iBACnFD,CAAAG,SAAA,EAAAC,IAAO;IACR,OAAAH,MAAA,CAAAI,IAAA;EAWM;QAAoB,CAAAC,SAAA,CAAAC,QAAA,aAAiBC,KAAA,EAAAC,KAAA;IAC1C,IAAAA,KAAO,KAAK;MACbA,KAAA;IACH;IAjB+B,OAAY,IAiB1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}