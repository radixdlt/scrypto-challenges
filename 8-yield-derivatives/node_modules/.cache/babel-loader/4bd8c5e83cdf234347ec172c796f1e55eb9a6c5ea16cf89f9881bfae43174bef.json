{"ast":null,"code":"(function () {\n  var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root, zoneIndex;\n  ipaddr = {};\n  root = this;\n  if (typeof module !== \"undefined\" && module !== null && module.exports) {\n    module.exports = ipaddr;\n  } else {\n    root['ipaddr'] = ipaddr;\n  }\n  matchCIDR = function (first, second, partSize, cidrBits) {\n    var part, shift;\n    if (first.length !== second.length) {\n      throw new Error(\"ipaddr: cannot match CIDR for objects with different lengths\");\n    }\n    part = 0;\n    while (cidrBits > 0) {\n      shift = partSize - cidrBits;\n      if (shift < 0) {\n        shift = 0;\n      }\n      if (first[part] >> shift !== second[part] >> shift) {\n        return false;\n      }\n      cidrBits -= partSize;\n      part += 1;\n    }\n    return true;\n  };\n  ipaddr.subnetMatch = function (address, rangeList, defaultName) {\n    var k, len, rangeName, rangeSubnets, subnet;\n    if (defaultName == null) {\n      defaultName = 'unicast';\n    }\n    for (rangeName in rangeList) {\n      rangeSubnets = rangeList[rangeName];\n      if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {\n        rangeSubnets = [rangeSubnets];\n      }\n      for (k = 0, len = rangeSubnets.length; k < len; k++) {\n        subnet = rangeSubnets[k];\n        if (address.kind() === subnet[0].kind()) {\n          if (address.match.apply(address, subnet)) {\n            return rangeName;\n          }\n        }\n      }\n    }\n    return defaultName;\n  };\n  ipaddr.IPv4 = function () {\n    function IPv4(octets) {\n      var k, len, octet;\n      if (octets.length !== 4) {\n        throw new Error(\"ipaddr: ipv4 octet count should be 4\");\n      }\n      for (k = 0, len = octets.length; k < len; k++) {\n        octet = octets[k];\n        if (!(0 <= octet && octet <= 255)) {\n          throw new Error(\"ipaddr: ipv4 octet should fit in 8 bits\");\n        }\n      }\n      this.octets = octets;\n    }\n    IPv4.prototype.kind = function () {\n      return 'ipv4';\n    };\n    IPv4.prototype.toString = function () {\n      return this.octets.join(\".\");\n    };\n    IPv4.prototype.toNormalizedString = function () {\n      return this.toString();\n    };\n    IPv4.prototype.toByteArray = function () {\n      return this.octets.slice(0);\n    };\n    IPv4.prototype.match = function (other, cidrRange) {\n      var ref;\n      if (cidrRange === void 0) {\n        ref = other, other = ref[0], cidrRange = ref[1];\n      }\n      if (other.kind() !== 'ipv4') {\n        throw new Error(\"ipaddr: cannot match ipv4 address with non-ipv4 one\");\n      }\n      return matchCIDR(this.octets, other.octets, 8, cidrRange);\n    };\n    IPv4.prototype.SpecialRanges = {\n      unspecified: [[new IPv4([0, 0, 0, 0]), 8]],\n      broadcast: [[new IPv4([255, 255, 255, 255]), 32]],\n      multicast: [[new IPv4([224, 0, 0, 0]), 4]],\n      linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],\n      loopback: [[new IPv4([127, 0, 0, 0]), 8]],\n      carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],\n      \"private\": [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],\n      reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]\n    };\n    IPv4.prototype.range = function () {\n      return ipaddr.subnetMatch(this, this.SpecialRanges);\n    };\n    IPv4.prototype.toIPv4MappedAddress = function () {\n      return ipaddr.IPv6.parse(\"::ffff:\" + this.toString());\n    };\n    IPv4.prototype.prefixLengthFromSubnetMask = function () {\n      var cidr, i, k, octet, stop, zeros, zerotable;\n      zerotable = {\n        0: 8,\n        128: 7,\n        192: 6,\n        224: 5,\n        240: 4,\n        248: 3,\n        252: 2,\n        254: 1,\n        255: 0\n      };\n      cidr = 0;\n      stop = false;\n      for (i = k = 3; k >= 0; i = k += -1) {\n        octet = this.octets[i];\n        if (octet in zerotable) {\n          zeros = zerotable[octet];\n          if (stop && zeros !== 0) {\n            return null;\n          }\n          if (zeros !== 8) {\n            stop = true;\n          }\n          cidr += zeros;\n        } else {\n          return null;\n        }\n      }\n      return 32 - cidr;\n    };\n    return IPv4;\n  }();\n  ipv4Part = \"(0?\\\\d+|0x[a-f0-9]+)\";\n  ipv4Regexes = {\n    fourOctet: new RegExp(\"^\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"$\", 'i'),\n    longValue: new RegExp(\"^\" + ipv4Part + \"$\", 'i')\n  };\n  ipaddr.IPv4.parser = function (string) {\n    var match, parseIntAuto, part, shift, value;\n    parseIntAuto = function (string) {\n      if (string[0] === \"0\" && string[1] !== \"x\") {\n        return parseInt(string, 8);\n      } else {\n        return parseInt(string);\n      }\n    };\n    if (match = string.match(ipv4Regexes.fourOctet)) {\n      return function () {\n        var k, len, ref, results;\n        ref = match.slice(1, 6);\n        results = [];\n        for (k = 0, len = ref.length; k < len; k++) {\n          part = ref[k];\n          results.push(parseIntAuto(part));\n        }\n        return results;\n      }();\n    } else if (match = string.match(ipv4Regexes.longValue)) {\n      value = parseIntAuto(match[1]);\n      if (value > 0xffffffff || value < 0) {\n        throw new Error(\"ipaddr: address outside defined range\");\n      }\n      return function () {\n        var k, results;\n        results = [];\n        for (shift = k = 0; k <= 24; shift = k += 8) {\n          results.push(value >> shift & 0xff);\n        }\n        return results;\n      }().reverse();\n    } else {\n      return null;\n    }\n  };\n  ipaddr.IPv6 = function () {\n    function IPv6(parts, zoneId) {\n      var i, k, l, len, part, ref;\n      if (parts.length === 16) {\n        this.parts = [];\n        for (i = k = 0; k <= 14; i = k += 2) {\n          this.parts.push(parts[i] << 8 | parts[i + 1]);\n        }\n      } else if (parts.length === 8) {\n        this.parts = parts;\n      } else {\n        throw new Error(\"ipaddr: ipv6 part count should be 8 or 16\");\n      }\n      ref = this.parts;\n      for (l = 0, len = ref.length; l < len; l++) {\n        part = ref[l];\n        if (!(0 <= part && part <= 0xffff)) {\n          throw new Error(\"ipaddr: ipv6 part should fit in 16 bits\");\n        }\n      }\n      if (zoneId) {\n        this.zoneId = zoneId;\n      }\n    }\n    IPv6.prototype.kind = function () {\n      return 'ipv6';\n    };\n    IPv6.prototype.toString = function () {\n      return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, '::');\n    };\n    IPv6.prototype.toRFC5952String = function () {\n      var bestMatchIndex, bestMatchLength, match, regex, string;\n      regex = /((^|:)(0(:|$)){2,})/g;\n      string = this.toNormalizedString();\n      bestMatchIndex = 0;\n      bestMatchLength = -1;\n      while (match = regex.exec(string)) {\n        if (match[0].length > bestMatchLength) {\n          bestMatchIndex = match.index;\n          bestMatchLength = match[0].length;\n        }\n      }\n      if (bestMatchLength < 0) {\n        return string;\n      }\n      return string.substring(0, bestMatchIndex) + '::' + string.substring(bestMatchIndex + bestMatchLength);\n    };\n    IPv6.prototype.toByteArray = function () {\n      var bytes, k, len, part, ref;\n      bytes = [];\n      ref = this.parts;\n      for (k = 0, len = ref.length; k < len; k++) {\n        part = ref[k];\n        bytes.push(part >> 8);\n        bytes.push(part & 0xff);\n      }\n      return bytes;\n    };\n    IPv6.prototype.toNormalizedString = function () {\n      var addr, part, suffix;\n      addr = function () {\n        var k, len, ref, results;\n        ref = this.parts;\n        results = [];\n        for (k = 0, len = ref.length; k < len; k++) {\n          part = ref[k];\n          results.push(part.toString(16));\n        }\n        return results;\n      }.call(this).join(\":\");\n      suffix = '';\n      if (this.zoneId) {\n        suffix = '%' + this.zoneId;\n      }\n      return addr + suffix;\n    };\n    IPv6.prototype.toFixedLengthString = function () {\n      var addr, part, suffix;\n      addr = function () {\n        var k, len, ref, results;\n        ref = this.parts;\n        results = [];\n        for (k = 0, len = ref.length; k < len; k++) {\n          part = ref[k];\n          results.push(part.toString(16).padStart(4, '0'));\n        }\n        return results;\n      }.call(this).join(\":\");\n      suffix = '';\n      if (this.zoneId) {\n        suffix = '%' + this.zoneId;\n      }\n      return addr + suffix;\n    };\n    IPv6.prototype.match = function (other, cidrRange) {\n      var ref;\n      if (cidrRange === void 0) {\n        ref = other, other = ref[0], cidrRange = ref[1];\n      }\n      if (other.kind() !== 'ipv6') {\n        throw new Error(\"ipaddr: cannot match ipv6 address with non-ipv6 one\");\n      }\n      return matchCIDR(this.parts, other.parts, 16, cidrRange);\n    };\n    IPv6.prototype.SpecialRanges = {\n      unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],\n      linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],\n      multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],\n      loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],\n      uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],\n      ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],\n      rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],\n      rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],\n      '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],\n      teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],\n      reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]\n    };\n    IPv6.prototype.range = function () {\n      return ipaddr.subnetMatch(this, this.SpecialRanges);\n    };\n    IPv6.prototype.isIPv4MappedAddress = function () {\n      return this.range() === 'ipv4Mapped';\n    };\n    IPv6.prototype.toIPv4Address = function () {\n      var high, low, ref;\n      if (!this.isIPv4MappedAddress()) {\n        throw new Error(\"ipaddr: trying to convert a generic ipv6 address to ipv4\");\n      }\n      ref = this.parts.slice(-2), high = ref[0], low = ref[1];\n      return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);\n    };\n    IPv6.prototype.prefixLengthFromSubnetMask = function () {\n      var cidr, i, k, part, stop, zeros, zerotable;\n      zerotable = {\n        0: 16,\n        32768: 15,\n        49152: 14,\n        57344: 13,\n        61440: 12,\n        63488: 11,\n        64512: 10,\n        65024: 9,\n        65280: 8,\n        65408: 7,\n        65472: 6,\n        65504: 5,\n        65520: 4,\n        65528: 3,\n        65532: 2,\n        65534: 1,\n        65535: 0\n      };\n      cidr = 0;\n      stop = false;\n      for (i = k = 7; k >= 0; i = k += -1) {\n        part = this.parts[i];\n        if (part in zerotable) {\n          zeros = zerotable[part];\n          if (stop && zeros !== 0) {\n            return null;\n          }\n          if (zeros !== 16) {\n            stop = true;\n          }\n          cidr += zeros;\n        } else {\n          return null;\n        }\n      }\n      return 128 - cidr;\n    };\n    return IPv6;\n  }();\n  ipv6Part = \"(?:[0-9a-f]+::?)+\";\n  zoneIndex = \"%[0-9a-z]{1,}\";\n  ipv6Regexes = {\n    zoneIndex: new RegExp(zoneIndex, 'i'),\n    \"native\": new RegExp(\"^(::)?(\" + ipv6Part + \")?([0-9a-f]+)?(::)?(\" + zoneIndex + \")?$\", 'i'),\n    transitional: new RegExp(\"^((?:\" + ipv6Part + \")|(?:::)(?:\" + ipv6Part + \")?)\" + (ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part) + (\"(\" + zoneIndex + \")?$\"), 'i')\n  };\n  expandIPv6 = function (string, parts) {\n    var colonCount, lastColon, part, replacement, replacementCount, zoneId;\n    if (string.indexOf('::') !== string.lastIndexOf('::')) {\n      return null;\n    }\n    zoneId = (string.match(ipv6Regexes['zoneIndex']) || [])[0];\n    if (zoneId) {\n      zoneId = zoneId.substring(1);\n      string = string.replace(/%.+$/, '');\n    }\n    colonCount = 0;\n    lastColon = -1;\n    while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {\n      colonCount++;\n    }\n    if (string.substr(0, 2) === '::') {\n      colonCount--;\n    }\n    if (string.substr(-2, 2) === '::') {\n      colonCount--;\n    }\n    if (colonCount > parts) {\n      return null;\n    }\n    replacementCount = parts - colonCount;\n    replacement = ':';\n    while (replacementCount--) {\n      replacement += '0:';\n    }\n    string = string.replace('::', replacement);\n    if (string[0] === ':') {\n      string = string.slice(1);\n    }\n    if (string[string.length - 1] === ':') {\n      string = string.slice(0, -1);\n    }\n    parts = function () {\n      var k, len, ref, results;\n      ref = string.split(\":\");\n      results = [];\n      for (k = 0, len = ref.length; k < len; k++) {\n        part = ref[k];\n        results.push(parseInt(part, 16));\n      }\n      return results;\n    }();\n    return {\n      parts: parts,\n      zoneId: zoneId\n    };\n  };\n  ipaddr.IPv6.parser = function (string) {\n    var addr, k, len, match, octet, octets, zoneId;\n    if (ipv6Regexes['native'].test(string)) {\n      return expandIPv6(string, 8);\n    } else if (match = string.match(ipv6Regexes['transitional'])) {\n      zoneId = match[6] || '';\n      addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);\n      if (addr.parts) {\n        octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];\n        for (k = 0, len = octets.length; k < len; k++) {\n          octet = octets[k];\n          if (!(0 <= octet && octet <= 255)) {\n            return null;\n          }\n        }\n        addr.parts.push(octets[0] << 8 | octets[1]);\n        addr.parts.push(octets[2] << 8 | octets[3]);\n        return {\n          parts: addr.parts,\n          zoneId: addr.zoneId\n        };\n      }\n    }\n    return null;\n  };\n  ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function (string) {\n    return this.parser(string) !== null;\n  };\n  ipaddr.IPv4.isValid = function (string) {\n    var e;\n    try {\n      new this(this.parser(string));\n      return true;\n    } catch (error1) {\n      e = error1;\n      return false;\n    }\n  };\n  ipaddr.IPv4.isValidFourPartDecimal = function (string) {\n    if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){3}$/)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  ipaddr.IPv6.isValid = function (string) {\n    var addr, e;\n    if (typeof string === \"string\" && string.indexOf(\":\") === -1) {\n      return false;\n    }\n    try {\n      addr = this.parser(string);\n      new this(addr.parts, addr.zoneId);\n      return true;\n    } catch (error1) {\n      e = error1;\n      return false;\n    }\n  };\n  ipaddr.IPv4.parse = function (string) {\n    var parts;\n    parts = this.parser(string);\n    if (parts === null) {\n      throw new Error(\"ipaddr: string is not formatted like ip address\");\n    }\n    return new this(parts);\n  };\n  ipaddr.IPv6.parse = function (string) {\n    var addr;\n    addr = this.parser(string);\n    if (addr.parts === null) {\n      throw new Error(\"ipaddr: string is not formatted like ip address\");\n    }\n    return new this(addr.parts, addr.zoneId);\n  };\n  ipaddr.IPv4.parseCIDR = function (string) {\n    var maskLength, match, parsed;\n    if (match = string.match(/^(.+)\\/(\\d+)$/)) {\n      maskLength = parseInt(match[2]);\n      if (maskLength >= 0 && maskLength <= 32) {\n        parsed = [this.parse(match[1]), maskLength];\n        Object.defineProperty(parsed, 'toString', {\n          value: function () {\n            return this.join('/');\n          }\n        });\n        return parsed;\n      }\n    }\n    throw new Error(\"ipaddr: string is not formatted like an IPv4 CIDR range\");\n  };\n  ipaddr.IPv4.subnetMaskFromPrefixLength = function (prefix) {\n    var filledOctetCount, j, octets;\n    prefix = parseInt(prefix);\n    if (prefix < 0 || prefix > 32) {\n      throw new Error('ipaddr: invalid IPv4 prefix length');\n    }\n    octets = [0, 0, 0, 0];\n    j = 0;\n    filledOctetCount = Math.floor(prefix / 8);\n    while (j < filledOctetCount) {\n      octets[j] = 255;\n      j++;\n    }\n    if (filledOctetCount < 4) {\n      octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - prefix % 8;\n    }\n    return new this(octets);\n  };\n  ipaddr.IPv4.broadcastAddressFromCIDR = function (string) {\n    var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;\n    try {\n      cidr = this.parseCIDR(string);\n      ipInterfaceOctets = cidr[0].toByteArray();\n      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n      octets = [];\n      i = 0;\n      while (i < 4) {\n        octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);\n        i++;\n      }\n      return new this(octets);\n    } catch (error1) {\n      error = error1;\n      throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n    }\n  };\n  ipaddr.IPv4.networkAddressFromCIDR = function (string) {\n    var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;\n    try {\n      cidr = this.parseCIDR(string);\n      ipInterfaceOctets = cidr[0].toByteArray();\n      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n      octets = [];\n      i = 0;\n      while (i < 4) {\n        octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));\n        i++;\n      }\n      return new this(octets);\n    } catch (error1) {\n      error = error1;\n      throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n    }\n  };\n  ipaddr.IPv6.parseCIDR = function (string) {\n    var maskLength, match, parsed;\n    if (match = string.match(/^(.+)\\/(\\d+)$/)) {\n      maskLength = parseInt(match[2]);\n      if (maskLength >= 0 && maskLength <= 128) {\n        parsed = [this.parse(match[1]), maskLength];\n        Object.defineProperty(parsed, 'toString', {\n          value: function () {\n            return this.join('/');\n          }\n        });\n        return parsed;\n      }\n    }\n    throw new Error(\"ipaddr: string is not formatted like an IPv6 CIDR range\");\n  };\n  ipaddr.isValid = function (string) {\n    return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);\n  };\n  ipaddr.parse = function (string) {\n    if (ipaddr.IPv6.isValid(string)) {\n      return ipaddr.IPv6.parse(string);\n    } else if (ipaddr.IPv4.isValid(string)) {\n      return ipaddr.IPv4.parse(string);\n    } else {\n      throw new Error(\"ipaddr: the address has neither IPv6 nor IPv4 format\");\n    }\n  };\n  ipaddr.parseCIDR = function (string) {\n    var e;\n    try {\n      return ipaddr.IPv6.parseCIDR(string);\n    } catch (error1) {\n      e = error1;\n      try {\n        return ipaddr.IPv4.parseCIDR(string);\n      } catch (error1) {\n        e = error1;\n        throw new Error(\"ipaddr: the address has neither IPv6 nor IPv4 CIDR format\");\n      }\n    }\n  };\n  ipaddr.fromByteArray = function (bytes) {\n    var length;\n    length = bytes.length;\n    if (length === 4) {\n      return new ipaddr.IPv4(bytes);\n    } else if (length === 16) {\n      return new ipaddr.IPv6(bytes);\n    } else {\n      throw new Error(\"ipaddr: the binary input is neither an IPv6 nor IPv4 address\");\n    }\n  };\n  ipaddr.process = function (string) {\n    var addr;\n    addr = this.parse(string);\n    if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {\n      return addr.toIPv4Address();\n    } else {\n      return addr;\n    }\n  };\n}).call(this);","map":{"version":3,"names":["expandIPv6","ipaddr","ipv4Part","ipv4Regexes","ipv6Part","ipv6Regexes","matchCIDR","root","zoneIndex","module","exports","first","second","partSize","cidrBits","part","shift","length","Error","subnetMatch","address","rangeList","defaultName","k","len","rangeName","rangeSubnets","subnet","Array","kind","match","apply","IPv4","octets","octet","prototype","toString","join","toNormalizedString","toByteArray","slice","other","cidrRange","ref","SpecialRanges","unspecified","broadcast","multicast","linkLocal","loopback","carrierGradeNat","reserved","range","toIPv4MappedAddress","IPv6","parse","prefixLengthFromSubnetMask","cidr","i","stop","zeros","zerotable","fourOctet","RegExp","longValue","parser","string","parseIntAuto","value","parseInt","results","push","reverse","parts","zoneId","l","replace","toRFC5952String","bestMatchIndex","bestMatchLength","regex","exec","index","substring","bytes","addr","suffix","call","toFixedLengthString","padStart","uniqueLocal","ipv4Mapped","rfc6145","rfc6052","teredo","isIPv4MappedAddress","toIPv4Address","high","low","transitional","colonCount","lastColon","replacement","replacementCount","indexOf","lastIndexOf","substr","split","test","isIPv4","isIPv6","isValid","e","error1","isValidFourPartDecimal","parseCIDR","maskLength","parsed","Object","defineProperty","subnetMaskFromPrefixLength","prefix","filledOctetCount","j","Math","floor","pow","broadcastAddressFromCIDR","error","ipInterfaceOctets","subnetMaskOctets","networkAddressFromCIDR","fromByteArray","process"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/ipaddr.js/lib/ipaddr.js"],"sourcesContent":["(function() {\n  var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root, zoneIndex;\n\n  ipaddr = {};\n\n  root = this;\n\n  if ((typeof module !== \"undefined\" && module !== null) && module.exports) {\n    module.exports = ipaddr;\n  } else {\n    root['ipaddr'] = ipaddr;\n  }\n\n  matchCIDR = function(first, second, partSize, cidrBits) {\n    var part, shift;\n    if (first.length !== second.length) {\n      throw new Error(\"ipaddr: cannot match CIDR for objects with different lengths\");\n    }\n    part = 0;\n    while (cidrBits > 0) {\n      shift = partSize - cidrBits;\n      if (shift < 0) {\n        shift = 0;\n      }\n      if (first[part] >> shift !== second[part] >> shift) {\n        return false;\n      }\n      cidrBits -= partSize;\n      part += 1;\n    }\n    return true;\n  };\n\n  ipaddr.subnetMatch = function(address, rangeList, defaultName) {\n    var k, len, rangeName, rangeSubnets, subnet;\n    if (defaultName == null) {\n      defaultName = 'unicast';\n    }\n    for (rangeName in rangeList) {\n      rangeSubnets = rangeList[rangeName];\n      if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {\n        rangeSubnets = [rangeSubnets];\n      }\n      for (k = 0, len = rangeSubnets.length; k < len; k++) {\n        subnet = rangeSubnets[k];\n        if (address.kind() === subnet[0].kind()) {\n          if (address.match.apply(address, subnet)) {\n            return rangeName;\n          }\n        }\n      }\n    }\n    return defaultName;\n  };\n\n  ipaddr.IPv4 = (function() {\n    function IPv4(octets) {\n      var k, len, octet;\n      if (octets.length !== 4) {\n        throw new Error(\"ipaddr: ipv4 octet count should be 4\");\n      }\n      for (k = 0, len = octets.length; k < len; k++) {\n        octet = octets[k];\n        if (!((0 <= octet && octet <= 255))) {\n          throw new Error(\"ipaddr: ipv4 octet should fit in 8 bits\");\n        }\n      }\n      this.octets = octets;\n    }\n\n    IPv4.prototype.kind = function() {\n      return 'ipv4';\n    };\n\n    IPv4.prototype.toString = function() {\n      return this.octets.join(\".\");\n    };\n\n    IPv4.prototype.toNormalizedString = function() {\n      return this.toString();\n    };\n\n    IPv4.prototype.toByteArray = function() {\n      return this.octets.slice(0);\n    };\n\n    IPv4.prototype.match = function(other, cidrRange) {\n      var ref;\n      if (cidrRange === void 0) {\n        ref = other, other = ref[0], cidrRange = ref[1];\n      }\n      if (other.kind() !== 'ipv4') {\n        throw new Error(\"ipaddr: cannot match ipv4 address with non-ipv4 one\");\n      }\n      return matchCIDR(this.octets, other.octets, 8, cidrRange);\n    };\n\n    IPv4.prototype.SpecialRanges = {\n      unspecified: [[new IPv4([0, 0, 0, 0]), 8]],\n      broadcast: [[new IPv4([255, 255, 255, 255]), 32]],\n      multicast: [[new IPv4([224, 0, 0, 0]), 4]],\n      linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],\n      loopback: [[new IPv4([127, 0, 0, 0]), 8]],\n      carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],\n      \"private\": [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],\n      reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]\n    };\n\n    IPv4.prototype.range = function() {\n      return ipaddr.subnetMatch(this, this.SpecialRanges);\n    };\n\n    IPv4.prototype.toIPv4MappedAddress = function() {\n      return ipaddr.IPv6.parse(\"::ffff:\" + (this.toString()));\n    };\n\n    IPv4.prototype.prefixLengthFromSubnetMask = function() {\n      var cidr, i, k, octet, stop, zeros, zerotable;\n      zerotable = {\n        0: 8,\n        128: 7,\n        192: 6,\n        224: 5,\n        240: 4,\n        248: 3,\n        252: 2,\n        254: 1,\n        255: 0\n      };\n      cidr = 0;\n      stop = false;\n      for (i = k = 3; k >= 0; i = k += -1) {\n        octet = this.octets[i];\n        if (octet in zerotable) {\n          zeros = zerotable[octet];\n          if (stop && zeros !== 0) {\n            return null;\n          }\n          if (zeros !== 8) {\n            stop = true;\n          }\n          cidr += zeros;\n        } else {\n          return null;\n        }\n      }\n      return 32 - cidr;\n    };\n\n    return IPv4;\n\n  })();\n\n  ipv4Part = \"(0?\\\\d+|0x[a-f0-9]+)\";\n\n  ipv4Regexes = {\n    fourOctet: new RegExp(\"^\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"$\", 'i'),\n    longValue: new RegExp(\"^\" + ipv4Part + \"$\", 'i')\n  };\n\n  ipaddr.IPv4.parser = function(string) {\n    var match, parseIntAuto, part, shift, value;\n    parseIntAuto = function(string) {\n      if (string[0] === \"0\" && string[1] !== \"x\") {\n        return parseInt(string, 8);\n      } else {\n        return parseInt(string);\n      }\n    };\n    if (match = string.match(ipv4Regexes.fourOctet)) {\n      return (function() {\n        var k, len, ref, results;\n        ref = match.slice(1, 6);\n        results = [];\n        for (k = 0, len = ref.length; k < len; k++) {\n          part = ref[k];\n          results.push(parseIntAuto(part));\n        }\n        return results;\n      })();\n    } else if (match = string.match(ipv4Regexes.longValue)) {\n      value = parseIntAuto(match[1]);\n      if (value > 0xffffffff || value < 0) {\n        throw new Error(\"ipaddr: address outside defined range\");\n      }\n      return ((function() {\n        var k, results;\n        results = [];\n        for (shift = k = 0; k <= 24; shift = k += 8) {\n          results.push((value >> shift) & 0xff);\n        }\n        return results;\n      })()).reverse();\n    } else {\n      return null;\n    }\n  };\n\n  ipaddr.IPv6 = (function() {\n    function IPv6(parts, zoneId) {\n      var i, k, l, len, part, ref;\n      if (parts.length === 16) {\n        this.parts = [];\n        for (i = k = 0; k <= 14; i = k += 2) {\n          this.parts.push((parts[i] << 8) | parts[i + 1]);\n        }\n      } else if (parts.length === 8) {\n        this.parts = parts;\n      } else {\n        throw new Error(\"ipaddr: ipv6 part count should be 8 or 16\");\n      }\n      ref = this.parts;\n      for (l = 0, len = ref.length; l < len; l++) {\n        part = ref[l];\n        if (!((0 <= part && part <= 0xffff))) {\n          throw new Error(\"ipaddr: ipv6 part should fit in 16 bits\");\n        }\n      }\n      if (zoneId) {\n        this.zoneId = zoneId;\n      }\n    }\n\n    IPv6.prototype.kind = function() {\n      return 'ipv6';\n    };\n\n    IPv6.prototype.toString = function() {\n      return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, '::');\n    };\n\n    IPv6.prototype.toRFC5952String = function() {\n      var bestMatchIndex, bestMatchLength, match, regex, string;\n      regex = /((^|:)(0(:|$)){2,})/g;\n      string = this.toNormalizedString();\n      bestMatchIndex = 0;\n      bestMatchLength = -1;\n      while ((match = regex.exec(string))) {\n        if (match[0].length > bestMatchLength) {\n          bestMatchIndex = match.index;\n          bestMatchLength = match[0].length;\n        }\n      }\n      if (bestMatchLength < 0) {\n        return string;\n      }\n      return string.substring(0, bestMatchIndex) + '::' + string.substring(bestMatchIndex + bestMatchLength);\n    };\n\n    IPv6.prototype.toByteArray = function() {\n      var bytes, k, len, part, ref;\n      bytes = [];\n      ref = this.parts;\n      for (k = 0, len = ref.length; k < len; k++) {\n        part = ref[k];\n        bytes.push(part >> 8);\n        bytes.push(part & 0xff);\n      }\n      return bytes;\n    };\n\n    IPv6.prototype.toNormalizedString = function() {\n      var addr, part, suffix;\n      addr = ((function() {\n        var k, len, ref, results;\n        ref = this.parts;\n        results = [];\n        for (k = 0, len = ref.length; k < len; k++) {\n          part = ref[k];\n          results.push(part.toString(16));\n        }\n        return results;\n      }).call(this)).join(\":\");\n      suffix = '';\n      if (this.zoneId) {\n        suffix = '%' + this.zoneId;\n      }\n      return addr + suffix;\n    };\n\n    IPv6.prototype.toFixedLengthString = function() {\n      var addr, part, suffix;\n      addr = ((function() {\n        var k, len, ref, results;\n        ref = this.parts;\n        results = [];\n        for (k = 0, len = ref.length; k < len; k++) {\n          part = ref[k];\n          results.push(part.toString(16).padStart(4, '0'));\n        }\n        return results;\n      }).call(this)).join(\":\");\n      suffix = '';\n      if (this.zoneId) {\n        suffix = '%' + this.zoneId;\n      }\n      return addr + suffix;\n    };\n\n    IPv6.prototype.match = function(other, cidrRange) {\n      var ref;\n      if (cidrRange === void 0) {\n        ref = other, other = ref[0], cidrRange = ref[1];\n      }\n      if (other.kind() !== 'ipv6') {\n        throw new Error(\"ipaddr: cannot match ipv6 address with non-ipv6 one\");\n      }\n      return matchCIDR(this.parts, other.parts, 16, cidrRange);\n    };\n\n    IPv6.prototype.SpecialRanges = {\n      unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],\n      linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],\n      multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],\n      loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],\n      uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],\n      ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],\n      rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],\n      rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],\n      '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],\n      teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],\n      reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]\n    };\n\n    IPv6.prototype.range = function() {\n      return ipaddr.subnetMatch(this, this.SpecialRanges);\n    };\n\n    IPv6.prototype.isIPv4MappedAddress = function() {\n      return this.range() === 'ipv4Mapped';\n    };\n\n    IPv6.prototype.toIPv4Address = function() {\n      var high, low, ref;\n      if (!this.isIPv4MappedAddress()) {\n        throw new Error(\"ipaddr: trying to convert a generic ipv6 address to ipv4\");\n      }\n      ref = this.parts.slice(-2), high = ref[0], low = ref[1];\n      return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);\n    };\n\n    IPv6.prototype.prefixLengthFromSubnetMask = function() {\n      var cidr, i, k, part, stop, zeros, zerotable;\n      zerotable = {\n        0: 16,\n        32768: 15,\n        49152: 14,\n        57344: 13,\n        61440: 12,\n        63488: 11,\n        64512: 10,\n        65024: 9,\n        65280: 8,\n        65408: 7,\n        65472: 6,\n        65504: 5,\n        65520: 4,\n        65528: 3,\n        65532: 2,\n        65534: 1,\n        65535: 0\n      };\n      cidr = 0;\n      stop = false;\n      for (i = k = 7; k >= 0; i = k += -1) {\n        part = this.parts[i];\n        if (part in zerotable) {\n          zeros = zerotable[part];\n          if (stop && zeros !== 0) {\n            return null;\n          }\n          if (zeros !== 16) {\n            stop = true;\n          }\n          cidr += zeros;\n        } else {\n          return null;\n        }\n      }\n      return 128 - cidr;\n    };\n\n    return IPv6;\n\n  })();\n\n  ipv6Part = \"(?:[0-9a-f]+::?)+\";\n\n  zoneIndex = \"%[0-9a-z]{1,}\";\n\n  ipv6Regexes = {\n    zoneIndex: new RegExp(zoneIndex, 'i'),\n    \"native\": new RegExp(\"^(::)?(\" + ipv6Part + \")?([0-9a-f]+)?(::)?(\" + zoneIndex + \")?$\", 'i'),\n    transitional: new RegExp((\"^((?:\" + ipv6Part + \")|(?:::)(?:\" + ipv6Part + \")?)\") + (ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part) + (\"(\" + zoneIndex + \")?$\"), 'i')\n  };\n\n  expandIPv6 = function(string, parts) {\n    var colonCount, lastColon, part, replacement, replacementCount, zoneId;\n    if (string.indexOf('::') !== string.lastIndexOf('::')) {\n      return null;\n    }\n    zoneId = (string.match(ipv6Regexes['zoneIndex']) || [])[0];\n    if (zoneId) {\n      zoneId = zoneId.substring(1);\n      string = string.replace(/%.+$/, '');\n    }\n    colonCount = 0;\n    lastColon = -1;\n    while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {\n      colonCount++;\n    }\n    if (string.substr(0, 2) === '::') {\n      colonCount--;\n    }\n    if (string.substr(-2, 2) === '::') {\n      colonCount--;\n    }\n    if (colonCount > parts) {\n      return null;\n    }\n    replacementCount = parts - colonCount;\n    replacement = ':';\n    while (replacementCount--) {\n      replacement += '0:';\n    }\n    string = string.replace('::', replacement);\n    if (string[0] === ':') {\n      string = string.slice(1);\n    }\n    if (string[string.length - 1] === ':') {\n      string = string.slice(0, -1);\n    }\n    parts = (function() {\n      var k, len, ref, results;\n      ref = string.split(\":\");\n      results = [];\n      for (k = 0, len = ref.length; k < len; k++) {\n        part = ref[k];\n        results.push(parseInt(part, 16));\n      }\n      return results;\n    })();\n    return {\n      parts: parts,\n      zoneId: zoneId\n    };\n  };\n\n  ipaddr.IPv6.parser = function(string) {\n    var addr, k, len, match, octet, octets, zoneId;\n    if (ipv6Regexes['native'].test(string)) {\n      return expandIPv6(string, 8);\n    } else if (match = string.match(ipv6Regexes['transitional'])) {\n      zoneId = match[6] || '';\n      addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);\n      if (addr.parts) {\n        octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];\n        for (k = 0, len = octets.length; k < len; k++) {\n          octet = octets[k];\n          if (!((0 <= octet && octet <= 255))) {\n            return null;\n          }\n        }\n        addr.parts.push(octets[0] << 8 | octets[1]);\n        addr.parts.push(octets[2] << 8 | octets[3]);\n        return {\n          parts: addr.parts,\n          zoneId: addr.zoneId\n        };\n      }\n    }\n    return null;\n  };\n\n  ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function(string) {\n    return this.parser(string) !== null;\n  };\n\n  ipaddr.IPv4.isValid = function(string) {\n    var e;\n    try {\n      new this(this.parser(string));\n      return true;\n    } catch (error1) {\n      e = error1;\n      return false;\n    }\n  };\n\n  ipaddr.IPv4.isValidFourPartDecimal = function(string) {\n    if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){3}$/)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  ipaddr.IPv6.isValid = function(string) {\n    var addr, e;\n    if (typeof string === \"string\" && string.indexOf(\":\") === -1) {\n      return false;\n    }\n    try {\n      addr = this.parser(string);\n      new this(addr.parts, addr.zoneId);\n      return true;\n    } catch (error1) {\n      e = error1;\n      return false;\n    }\n  };\n\n  ipaddr.IPv4.parse = function(string) {\n    var parts;\n    parts = this.parser(string);\n    if (parts === null) {\n      throw new Error(\"ipaddr: string is not formatted like ip address\");\n    }\n    return new this(parts);\n  };\n\n  ipaddr.IPv6.parse = function(string) {\n    var addr;\n    addr = this.parser(string);\n    if (addr.parts === null) {\n      throw new Error(\"ipaddr: string is not formatted like ip address\");\n    }\n    return new this(addr.parts, addr.zoneId);\n  };\n\n  ipaddr.IPv4.parseCIDR = function(string) {\n    var maskLength, match, parsed;\n    if (match = string.match(/^(.+)\\/(\\d+)$/)) {\n      maskLength = parseInt(match[2]);\n      if (maskLength >= 0 && maskLength <= 32) {\n        parsed = [this.parse(match[1]), maskLength];\n        Object.defineProperty(parsed, 'toString', {\n          value: function() {\n            return this.join('/');\n          }\n        });\n        return parsed;\n      }\n    }\n    throw new Error(\"ipaddr: string is not formatted like an IPv4 CIDR range\");\n  };\n\n  ipaddr.IPv4.subnetMaskFromPrefixLength = function(prefix) {\n    var filledOctetCount, j, octets;\n    prefix = parseInt(prefix);\n    if (prefix < 0 || prefix > 32) {\n      throw new Error('ipaddr: invalid IPv4 prefix length');\n    }\n    octets = [0, 0, 0, 0];\n    j = 0;\n    filledOctetCount = Math.floor(prefix / 8);\n    while (j < filledOctetCount) {\n      octets[j] = 255;\n      j++;\n    }\n    if (filledOctetCount < 4) {\n      octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);\n    }\n    return new this(octets);\n  };\n\n  ipaddr.IPv4.broadcastAddressFromCIDR = function(string) {\n    var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;\n    try {\n      cidr = this.parseCIDR(string);\n      ipInterfaceOctets = cidr[0].toByteArray();\n      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n      octets = [];\n      i = 0;\n      while (i < 4) {\n        octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);\n        i++;\n      }\n      return new this(octets);\n    } catch (error1) {\n      error = error1;\n      throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n    }\n  };\n\n  ipaddr.IPv4.networkAddressFromCIDR = function(string) {\n    var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;\n    try {\n      cidr = this.parseCIDR(string);\n      ipInterfaceOctets = cidr[0].toByteArray();\n      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n      octets = [];\n      i = 0;\n      while (i < 4) {\n        octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));\n        i++;\n      }\n      return new this(octets);\n    } catch (error1) {\n      error = error1;\n      throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n    }\n  };\n\n  ipaddr.IPv6.parseCIDR = function(string) {\n    var maskLength, match, parsed;\n    if (match = string.match(/^(.+)\\/(\\d+)$/)) {\n      maskLength = parseInt(match[2]);\n      if (maskLength >= 0 && maskLength <= 128) {\n        parsed = [this.parse(match[1]), maskLength];\n        Object.defineProperty(parsed, 'toString', {\n          value: function() {\n            return this.join('/');\n          }\n        });\n        return parsed;\n      }\n    }\n    throw new Error(\"ipaddr: string is not formatted like an IPv6 CIDR range\");\n  };\n\n  ipaddr.isValid = function(string) {\n    return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);\n  };\n\n  ipaddr.parse = function(string) {\n    if (ipaddr.IPv6.isValid(string)) {\n      return ipaddr.IPv6.parse(string);\n    } else if (ipaddr.IPv4.isValid(string)) {\n      return ipaddr.IPv4.parse(string);\n    } else {\n      throw new Error(\"ipaddr: the address has neither IPv6 nor IPv4 format\");\n    }\n  };\n\n  ipaddr.parseCIDR = function(string) {\n    var e;\n    try {\n      return ipaddr.IPv6.parseCIDR(string);\n    } catch (error1) {\n      e = error1;\n      try {\n        return ipaddr.IPv4.parseCIDR(string);\n      } catch (error1) {\n        e = error1;\n        throw new Error(\"ipaddr: the address has neither IPv6 nor IPv4 CIDR format\");\n      }\n    }\n  };\n\n  ipaddr.fromByteArray = function(bytes) {\n    var length;\n    length = bytes.length;\n    if (length === 4) {\n      return new ipaddr.IPv4(bytes);\n    } else if (length === 16) {\n      return new ipaddr.IPv6(bytes);\n    } else {\n      throw new Error(\"ipaddr: the binary input is neither an IPv6 nor IPv4 address\");\n    }\n  };\n\n  ipaddr.process = function(string) {\n    var addr;\n    addr = this.parse(string);\n    if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {\n      return addr.toIPv4Address();\n    } else {\n      return addr;\n    }\n  };\n\n}).call(this);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}