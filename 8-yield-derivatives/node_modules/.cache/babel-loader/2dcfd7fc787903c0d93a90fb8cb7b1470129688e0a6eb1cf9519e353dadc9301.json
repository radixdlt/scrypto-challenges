{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mockedAPI = exports.mockRadixCoreAPI = exports.makeThrowingRadixCoreAPI = exports.deterministicRandomStakesForAddr = exports.deterministicRandomUnstakesForAddr = exports.deterministicRandomLookupTX = exports.deterministicRandomTXHistory = exports.deterministicRandomBalances = exports.deterministicRandomTxHistoryWithInput = exports.deterministicRandomStakesForAddress = exports.deterministicRandomUnstakesForAddress = exports.deterministicRandomBalancesForAddress = exports.erin = exports.dan = exports.carol = exports.bob = exports.alice = exports.castOfCharacters = exports.tokenByRRIMap = exports.balancesFor = exports.balanceOfFor = exports.__fallBackAlexToken = exports.radixWrappedEtherToken = exports.radixWrappedBitcoinToken = exports.goldToken = exports.barToken = exports.fooToken = exports.xrd = void 0;\nconst primitives_1 = require(\"@radixdlt/primitives\");\nconst account_1 = require(\"@radixdlt/account\");\nconst rxjs_1 = require(\"rxjs\");\nconst dto_1 = require(\"./dto\");\nconst operators_1 = require(\"rxjs/operators\");\nconst crypto_1 = require(\"@radixdlt/crypto\");\nconst actions_1 = require(\"./actions\");\nconst primitives_2 = require(\"@radixdlt/primitives\");\nexports.xrd = {\n  name: 'Rad',\n  rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n  symbol: 'XRD',\n  description: 'The native coin of Radix network',\n  granularity: primitives_2.Amount.fromUnsafe(1)._unsafeUnwrap(),\n  isSupplyMutable: false,\n  currentSupply: primitives_1.uint256Max,\n  tokenInfoURL: new URL('https://www.radixdlt.com'),\n  iconURL: new URL('https://www.image.radixdlt.com/')\n};\nexports.fooToken = {\n  name: 'Foo token',\n  rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n  symbol: 'FOO',\n  description: 'FOOest token.',\n  granularity: primitives_2.Amount.fromUnsafe(1)._unsafeUnwrap(),\n  isSupplyMutable: false,\n  currentSupply: primitives_1.uint256Max,\n  tokenInfoURL: new URL('https://www.footoken.com'),\n  iconURL: new URL('https://www.image.footoken.com/')\n};\nexports.barToken = {\n  name: 'Bar token',\n  rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n  symbol: 'BAR',\n  description: 'Bar token. Granularity E-3.',\n  granularity: primitives_2.Amount.fromUnsafe(1000)._unsafeUnwrap(),\n  isSupplyMutable: true,\n  currentSupply: primitives_1.uint256Max,\n  tokenInfoURL: new URL('https://www.bartoken.com'),\n  iconURL: new URL('https://www.image.bartoken.com/')\n};\nexports.goldToken = {\n  name: 'Gold token',\n  rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n  symbol: 'GOLD',\n  description: 'Gold token. Granularity E-12.',\n  granularity: primitives_2.Amount.fromUnsafe(1000000)._unsafeUnwrap(),\n  isSupplyMutable: false,\n  currentSupply: primitives_1.uint256Max,\n  tokenInfoURL: new URL('https://www.goldtoken.com'),\n  iconURL: new URL('https://www.image.goldtoken.com/')\n};\nexports.radixWrappedBitcoinToken = {\n  name: 'Bitcoin (wrapped on Radix)',\n  rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n  symbol: 'BTCRW',\n  description: 'Radix wrapped Bitcoin. Granularity E-18.',\n  granularity: primitives_2.Amount.fromUnsafe(1)._unsafeUnwrap(),\n  isSupplyMutable: true,\n  currentSupply: primitives_1.uint256Max,\n  tokenInfoURL: new URL('https://www.bitcoin.radix.com'),\n  iconURL: new URL('https://www.image.bitcoin.radix.com/')\n};\nexports.radixWrappedEtherToken = {\n  name: 'Ether (wrapped on Radix)',\n  rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n  symbol: 'ETHRW',\n  description: 'Radix wrapped Ether. Granularity E-9.',\n  granularity: primitives_2.Amount.fromUnsafe(1000000000)._unsafeUnwrap(),\n  isSupplyMutable: true,\n  currentSupply: primitives_1.uint256Max,\n  tokenInfoURL: new URL('https://www.ether.radix.com'),\n  iconURL: new URL('https://www.image.ether.radix.com/')\n};\nexports.__fallBackAlexToken = {\n  name: 'Alex token',\n  rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n  symbol: 'ALEX',\n  description: 'Fallback token for when token for requested symbol was not found.',\n  granularity: primitives_2.Amount.fromUnsafe(1)._unsafeUnwrap(),\n  isSupplyMutable: true,\n  currentSupply: primitives_1.uint256Max,\n  tokenInfoURL: new URL('https://www.alex.token.com'),\n  iconURL: new URL('https://www.image.alex.token.com/')\n};\nconst balanceOfFor = input => {\n  const amt = primitives_2.Amount.fromUnsafe(input.amount)._unsafeUnwrap();\n  return {\n    tokenIdentifier: input.token.rri,\n    amount: amt.lt(input.token.currentSupply) ? amt : input.token.currentSupply\n  };\n};\nexports.balanceOfFor = balanceOfFor;\nconst balancesFor = (address, amount) => ({\n  owner: address,\n  tokenBalances: [(0, exports.balanceOfFor)({\n    token: exports.xrd,\n    amount\n  })]\n});\nexports.balancesFor = balancesFor;\nconst differentTokens = [exports.xrd, exports.fooToken, exports.barToken, exports.radixWrappedBitcoinToken, exports.radixWrappedEtherToken, exports.goldToken];\n// PLEASE KEEP - used as Cast of characters: https://en.wikipedia.org/wiki/Alice_and_Bob#Cast_of_characters\nexports.tokenByRRIMap = differentTokens.reduce((a, b) => a.set(b.rri, b), new Map());\nconst detPRNGWithBuffer = buffer => {\n  const bufCopy = Buffer.from(buffer);\n  let bytes = Buffer.from(buffer);\n  return () => {\n    if (bytes.length === 0) {\n      bytes = (0, crypto_1.sha256)(bufCopy);\n    }\n    const lengthToSlice = 2;\n    const buf = bytes.slice(0, lengthToSlice);\n    bytes = bytes.slice(lengthToSlice, bytes.length);\n    return Number.parseInt(buf.toString('hex'), 16);\n  };\n};\nconst addressesString = ['tdx1qspksqs77z9e24e2dr9t5de6a9kymzhszp9k7jmr2ldkzl4hvn45xsqk409dt', 'tdx1qspksqs77z9e24e2dr9t5de6a9kymzhszp9k7jmr2ldkzl4hvn45xsqk409dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt'];\nconst characterNames = ['alice', 'bob', 'carol', 'dan', 'erin', 'frank', 'grace', 'heidi', 'ivan', 'judy', 'klara', 'leonard', 'mallory', 'niaj', 'olivia', 'peggy', 'quentin', 'rupert', 'stella', 'ted', 'ursula', 'victor', 'webdy', 'xerxez', 'yara', 'zelda'];\n/*\n* [Property in keyof ReturnType<typeof getAPI>]: ReturnType<\n        typeof getAPI\n    >[Property]\n* */\nexports.castOfCharacters = addressesString.map(s => account_1.AccountAddress.fromUnsafe(s)._unsafeUnwrap({\n  withStackTrace: true\n})).slice(0, characterNames.length);\nexports.alice = exports.castOfCharacters[0];\nexports.bob = exports.castOfCharacters[1];\nexports.carol = exports.castOfCharacters[2];\nexports.dan = exports.castOfCharacters[3];\nexports.erin = exports.castOfCharacters[4];\nconst makeListOfValidatorAddresses = () => {\n  const stringAddresses = ['tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p'];\n  return stringAddresses.map(s => account_1.ValidatorAddress.fromUnsafe(s)._unsafeUnwrap({\n    withStackTrace: true\n  }));\n};\nconst listOfValidatorAddresses = makeListOfValidatorAddresses();\nconst detRandomValidatorAddressWithPRNG = anInt => () => {\n  const randomInt = anInt();\n  const index = randomInt % (listOfValidatorAddresses.length - 1);\n  return listOfValidatorAddresses[index];\n};\nconst randomValidatorList = (size, validatorAddress) => {\n  const validatorList = [];\n  const randomBuf = validatorAddress !== undefined ? (0, crypto_1.sha256)(validatorAddress.toString()) : (0, crypto_1.sha256)(size.toString(16));\n  const prng = detPRNGWithBuffer(randomBuf);\n  const detRandomValidatorAddress = detRandomValidatorAddressWithPRNG(prng);\n  const listSize = prng() % 5 === 1 ? size - Math.round(size / 2) : size;\n  for (let i = 0; i < listSize; i++) {\n    const random = prng();\n    const ownerAddress = exports.castOfCharacters[random % exports.castOfCharacters.length];\n    const name = characterNames[random % characterNames.length];\n    const amount = primitives_2.Amount.fromUnsafe(random)._unsafeUnwrap();\n    const bool = random % 2 === 0;\n    validatorList.push({\n      address: detRandomValidatorAddress(),\n      ownerAddress,\n      name,\n      infoURL: new URL('https://rewards.radixtokens.comcom'),\n      totalDelegatedStake: amount,\n      ownerDelegation: amount,\n      validatorFee: 2.5,\n      registered: bool,\n      isExternalStakeAccepted: bool,\n      uptimePercentage: 100.0,\n      proposalsMissed: 10,\n      proposalsCompleted: 20\n    });\n  }\n  return validatorList;\n};\nconst randomUnsignedTransaction = transactionIntent => {\n  const transactionIntentDet = Object.assign(Object.assign({}, transactionIntent), {\n    actions: transactionIntent.actions.map(a => Object.assign({}, a))\n  });\n  const detBlob = JSON.stringify(transactionIntentDet, null, 4);\n  const blobBytes = Buffer.from(detBlob);\n  const bytes32 = (0, crypto_1.sha256)(blobBytes);\n  const anInt = detPRNGWithBuffer(bytes32);\n  return {\n    transaction: {\n      blob: blobBytes.toString('hex'),\n      hashOfBlobToSign: bytes32.toString('hex')\n    },\n    fee: primitives_2.Amount.fromUnsafe(anInt())._unsafeUnwrap()\n  };\n};\nconst randomPendingTransaction = signedTx => ({\n  txID: dto_1.TransactionIdentifier.create((0, crypto_1.sha256)(Buffer.from(signedTx.transaction.blob)))._unsafeUnwrap(),\n  blob: 'awd'\n});\nconst detRandomSignedUnconfirmedTransaction = signedTransaction => Object.assign({}, randomPendingTransaction(signedTransaction));\nconst rndDemand = detPRNGWithBuffer(Buffer.from('dmnd'));\nconst randomDemand = () => ({\n  tps: rndDemand() % 200\n});\nconst rndThroughput = detPRNGWithBuffer(Buffer.from('trpt'));\nconst randomThroughput = () => ({\n  tps: rndThroughput() % 200\n});\nconst detPRNGWithPubKey = pubKey => {\n  // cannot use first, since it is always 02 or 03\n  const bytes = pubKey.asData({\n    compressed: true\n  }).slice(1, 33);\n  return detPRNGWithBuffer(bytes);\n};\nconst detRandBalanceOfTokenWithInfo = png => {\n  const anInt = png;\n  const availableTokens = [...differentTokens];\n  const deterministicRandomToken = () => {\n    const tokenCount = availableTokens.length;\n    const tokenIndex = anInt() % tokenCount;\n    const token = availableTokens[tokenIndex];\n    availableTokens.splice(tokenIndex, 1);\n    return token;\n  };\n  const size = Math.max(anInt() % availableTokens.length, 1);\n  return Array(size).fill(undefined).map(_ => {\n    const token = deterministicRandomToken();\n    const amtOrZero = anInt() % 10000;\n    const amtFactor = primitives_2.Amount.fromUnsafe(Math.max(10, amtOrZero))._unsafeUnwrap();\n    const amount = primitives_2.Amount.fromUnsafe(token.granularity.mul(amtFactor))._unsafeUnwrap();\n    return {\n      token,\n      amount\n    };\n  });\n};\nconst deterministicRandomBalancesForAddress = address => {\n  const anInt = detPRNGWithPubKey(address.publicKey);\n  const tokenBalances = detRandBalanceOfTokenWithInfo(anInt).map(bti => (0, exports.balanceOfFor)(bti));\n  return {\n    owner: address,\n    tokenBalances\n  };\n};\nexports.deterministicRandomBalancesForAddress = deterministicRandomBalancesForAddress;\nconst deterministicRandomUnstakesForAddress = address => {\n  const anInt = detPRNGWithPubKey(address.publicKey);\n  const size = anInt() % 7;\n  return Array(size).fill(undefined).map((_, index) => {\n    const detRandomValidatorAddress = detRandomValidatorAddressWithPRNG(anInt);\n    const validator = detRandomValidatorAddress();\n    const amount = primitives_2.Amount.fromUnsafe(anInt())._unsafeUnwrap();\n    const bytesFromIndex = Buffer.allocUnsafe(2);\n    bytesFromIndex.writeUInt16BE(index);\n    const txIDBuffer = (0, crypto_1.sha256)(Buffer.concat([address.publicKey.asData({\n      compressed: true\n    }), bytesFromIndex]));\n    const withdrawTxID = dto_1.TransactionIdentifier.create(txIDBuffer)._unsafeUnwrap();\n    const epochsUntil = anInt() % 5;\n    return {\n      amount,\n      validator,\n      epochsUntil: epochsUntil > 60 ? 0 : epochsUntil,\n      withdrawTxID\n    };\n  });\n};\nexports.deterministicRandomUnstakesForAddress = deterministicRandomUnstakesForAddress;\nconst deterministicRandomStakesForAddress = address => (0, exports.deterministicRandomUnstakesForAddress)(address).map(un => Object.assign({}, un));\nexports.deterministicRandomStakesForAddress = deterministicRandomStakesForAddress;\nconst deterministicRandomTxHistoryWithInput = input => {\n  const address = input.address;\n  const anInt = detPRNGWithPubKey(address.publicKey);\n  const pubKeyBytes = address.publicKey.asData({\n    compressed: true\n  }).slice(1, 33);\n  const detRandomAddress = () => exports.castOfCharacters[anInt() % exports.castOfCharacters.length];\n  const detRandomValidatorAddress = detRandomValidatorAddressWithPRNG(anInt);\n  const tokenAndAmounts = detRandBalanceOfTokenWithInfo(anInt);\n  const deterministicRandomExecutedTransactions = () => Array(input.size).fill(undefined).map((_, index) => {\n    const bytesFromIndex = Buffer.allocUnsafe(2);\n    bytesFromIndex.writeUInt16BE(index);\n    const txIDBuffer = (0, crypto_1.sha256)(Buffer.concat([pubKeyBytes, bytesFromIndex]));\n    const date = new Date('2020-03-14T15:32:05');\n    date.setMonth(index % 12);\n    const txID = dto_1.TransactionIdentifier.create(txIDBuffer)._unsafeUnwrap();\n    const detMakeActionForTx = () => {\n      // mock max 5 actions per tx in history, min 1.\n      const actionCount = Math.max(anInt() % 5, 1);\n      return Array(actionCount).fill(undefined).map((_, actionIndex) => {\n        const v = anInt() % 4; // Transfer, Stake, Unstake, Other\n        const actionType = v === 0 ? actions_1.ActionType.TOKEN_TRANSFER : v === 1 ? actions_1.ActionType.STAKE_TOKENS : v === 2 ? actions_1.ActionType.UNSTAKE_TOKENS : actions_1.ActionType.OTHER;\n        let executedAction;\n        const tokenAndAmount = tokenAndAmounts[actionIndex % tokenAndAmounts.length];\n        switch (actionType) {\n          case actions_1.ActionType.OTHER:\n            executedAction = {\n              type: actions_1.ActionType.OTHER\n            };\n            break;\n          case actions_1.ActionType.STAKE_TOKENS:\n            executedAction = {\n              type: actions_1.ActionType.STAKE_TOKENS,\n              from: address,\n              amount: primitives_2.Amount.fromUnsafe(anInt())._unsafeUnwrap(),\n              validator: detRandomValidatorAddress()\n            };\n            break;\n          case actions_1.ActionType.UNSTAKE_TOKENS:\n            executedAction = {\n              type: actions_1.ActionType.UNSTAKE_TOKENS,\n              from: address,\n              amount: primitives_2.Amount.fromUnsafe(anInt())._unsafeUnwrap(),\n              validator: detRandomValidatorAddress()\n            };\n            break;\n          case actions_1.ActionType.TOKEN_TRANSFER:\n            executedAction = {\n              type: actions_1.ActionType.TOKEN_TRANSFER,\n              from_account: address.toString(),\n              to_account: detRandomAddress().toString(),\n              amount: tokenAndAmount.amount,\n              rri: tokenAndAmount.token.rri\n            };\n            break;\n        }\n        return executedAction;\n      });\n    };\n    const rndTxTypeInt = anInt() % 3;\n    const transactionType = rndTxTypeInt === 0 ? dto_1.TransactionType.INCOMING : rndTxTypeInt === 1 ? dto_1.TransactionType.FROM_ME_TO_ME : dto_1.TransactionType.OUTGOING;\n    return {\n      txID,\n      sentAt: date,\n      transactionType,\n      fee: primitives_2.Amount.fromUnsafe(anInt())._unsafeUnwrap(),\n      // message?: {\n      // \tmsg: string\n      // \tencryptionScheme: string\n      // }\n      actions: detMakeActionForTx()\n    };\n  });\n  const updatedCursor = (0, crypto_1.sha256)(input.cursor !== undefined ? Buffer.from(input.cursor) : pubKeyBytes).toString('hex');\n  return {\n    cursor: updatedCursor,\n    transactions: deterministicRandomExecutedTransactions()\n  };\n};\nexports.deterministicRandomTxHistoryWithInput = deterministicRandomTxHistoryWithInput;\nconst deterministicRandomLookupTXUsingHist = txID => {\n  const seed = (0, crypto_1.sha256)(Buffer.from(txID.__hex, 'hex'));\n  const addressWithTXIdBytesAsSeed = account_1.AccountAddress.fromPublicKeyAndNetwork({\n    publicKey: crypto_1.PrivateKey.fromBuffer(seed)._unsafeUnwrap().publicKey(),\n    network: primitives_1.Network.MAINNET\n  });\n  const txs = (0, exports.deterministicRandomTxHistoryWithInput)({\n    size: 1,\n    address: addressWithTXIdBytesAsSeed\n  }).transactions;\n  if (txs.length === 0) {\n    throw new Error('Expected at least one tx...');\n  }\n  return Object.assign(Object.assign({}, txs[0]), {\n    txID\n  });\n};\nconst deterministicRandomBalances = address => (0, rxjs_1.of)((0, exports.deterministicRandomBalancesForAddress)(address));\nexports.deterministicRandomBalances = deterministicRandomBalances;\nconst deterministicRandomTXHistory = input => (0, rxjs_1.of)((0, exports.deterministicRandomTxHistoryWithInput)(input));\nexports.deterministicRandomTXHistory = deterministicRandomTXHistory;\nconst deterministicRandomLookupTX = txID => (0, rxjs_1.of)(deterministicRandomLookupTXUsingHist(txID));\nexports.deterministicRandomLookupTX = deterministicRandomLookupTX;\nconst deterministicRandomUnstakesForAddr = address => (0, rxjs_1.of)((0, exports.deterministicRandomUnstakesForAddress)(address));\nexports.deterministicRandomUnstakesForAddr = deterministicRandomUnstakesForAddr;\nconst deterministicRandomStakesForAddr = address => (0, rxjs_1.of)((0, exports.deterministicRandomStakesForAddress)(address));\nexports.deterministicRandomStakesForAddr = deterministicRandomStakesForAddr;\nconst makeThrowingRadixCoreAPI = nodeUrl => ({\n  node: {\n    url: new URL(nodeUrl !== null && nodeUrl !== void 0 ? nodeUrl : 'https://www.radixdlt.com/')\n  },\n  networkId: () => {\n    throw Error('Not implemented');\n  },\n  tokenBalancesForAddress: _address => {\n    throw Error('Not implemented');\n  },\n  lookupTransaction: _txID => {\n    throw Error('Not implemented');\n  },\n  validators: _input => {\n    throw Error('Not implemented');\n  },\n  lookupValidator: _input => {\n    throw Error('Not implemented');\n  },\n  transactionHistory: _input => {\n    throw Error('Not implemented');\n  },\n  nativeToken: () => {\n    throw Error('Not implemented');\n  },\n  tokenInfo: _rri => {\n    throw Error('Not implemented');\n  },\n  stakesForAddress: _address => {\n    throw Error('Not implemented');\n  },\n  unstakesForAddress: _address => {\n    throw Error('Not implemented');\n  },\n  transactionStatus: _txID => {\n    throw Error('Not implemented');\n  },\n  NetworkTransactionThroughput: () => {\n    throw Error('Not implemented');\n  },\n  NetworkTransactionDemand: () => {\n    throw Error('Not implemented');\n  },\n  buildTransaction: _transactionIntent => {\n    throw Error('Not implemented');\n  },\n  submitSignedTransaction: _signedTransaction => {\n    throw Error('Not implemented');\n  },\n  finalizeTransaction: _signedUnconfirmedTransaction => {\n    throw Error('Not implemented');\n  }\n});\nexports.makeThrowingRadixCoreAPI = makeThrowingRadixCoreAPI;\nlet txStatusMapCounter = undefined;\nconst mockRadixCoreAPI = input => {\n  var _a;\n  txStatusMapCounter = new Map();\n  return {\n    node: {\n      url: new URL((_a = input === null || input === void 0 ? void 0 : input.nodeUrl) !== null && _a !== void 0 ? _a : 'https://www.radixdlt.com/')\n    },\n    networkId: () => {\n      var _a;\n      return (0, rxjs_1.of)((_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : primitives_1.Network.MAINNET).pipe((0, operators_1.shareReplay)(1));\n    },\n    nativeToken: () => (0, rxjs_1.of)(exports.xrd),\n    tokenInfo: rri => {\n      var _a;\n      return (0, rxjs_1.of)((_a = exports.tokenByRRIMap.get(rri)) !== null && _a !== void 0 ? _a : exports.__fallBackAlexToken);\n    },\n    tokenBalancesForAddress: exports.deterministicRandomBalances,\n    transactionStatus: txID => {\n      var _a;\n      const last = (_a = txStatusMapCounter.get(txID)) !== null && _a !== void 0 ? _a : 0;\n      const incremented = last + 1;\n      txStatusMapCounter.set(txID, incremented);\n      const status = last <= 1 ? dto_1.TransactionStatus.PENDING : dto_1.TransactionStatus.CONFIRMED;\n      return (0, rxjs_1.of)({\n        txID,\n        status // when TransactionStatus.FAIL ?\n      });\n    },\n    validators: input => (0, rxjs_1.of)({\n      cursor: 'cursor',\n      validators: randomValidatorList(input.size)\n    }),\n    lookupValidator: validatorAddress => {\n      const validatorRnd = randomValidatorList(1, validatorAddress)[0];\n      const validator = Object.assign(Object.assign({}, validatorRnd), {\n        address: validatorAddress\n      });\n      return (0, rxjs_1.of)(validator);\n    },\n    buildTransaction: transactionIntent => (0, rxjs_1.of)(randomUnsignedTransaction(transactionIntent)),\n    finalizeTransaction: signedTransaction => (0, rxjs_1.of)(detRandomSignedUnconfirmedTransaction(signedTransaction)),\n    submitSignedTransaction: signedUnconfirmedTX => (0, rxjs_1.of)(signedUnconfirmedTX),\n    NetworkTransactionDemand: () => (0, rxjs_1.of)(randomDemand()),\n    NetworkTransactionThroughput: () => (0, rxjs_1.of)(randomThroughput()),\n    transactionHistory: exports.deterministicRandomTXHistory,\n    lookupTransaction: exports.deterministicRandomLookupTX,\n    unstakesForAddress: exports.deterministicRandomUnstakesForAddr,\n    stakesForAddress: exports.deterministicRandomStakesForAddr\n  };\n};\nexports.mockRadixCoreAPI = mockRadixCoreAPI;\nexports.mockedAPI = (0, rxjs_1.of)((0, exports.mockRadixCoreAPI)());","map":{"version":3,"names":["Object","defineProperty","exports","value","mockedAPI","mockRadixCoreAPI","makeThrowingRadixCoreAPI","deterministicRandomStakesForAddr","deterministicRandomUnstakesForAddr","deterministicRandomLookupTX","deterministicRandomTXHistory","deterministicRandomBalances","deterministicRandomTxHistoryWithInput","deterministicRandomStakesForAddress","deterministicRandomUnstakesForAddress","deterministicRandomBalancesForAddress","erin","dan","carol","bob","alice","castOfCharacters","tokenByRRIMap","balancesFor","balanceOfFor","__fallBackAlexToken","radixWrappedEtherToken","radixWrappedBitcoinToken","goldToken","barToken","fooToken","xrd","primitives_1","require","account_1","rxjs_1","dto_1","operators_1","crypto_1","actions_1","primitives_2","name","rri","ResourceIdentifier","fromUnsafe","_unsafeUnwrap","symbol","description","granularity","Amount","isSupplyMutable","currentSupply","uint256Max","tokenInfoURL","URL","iconURL","input","amt","amount","tokenIdentifier","token","lt","address","owner","tokenBalances","differentTokens","reduce","a","b","set","Map","detPRNGWithBuffer","buffer","bufCopy","Buffer","from","bytes","length","sha256","lengthToSlice","buf","slice","Number","parseInt","toString","addressesString","characterNames","map","s","AccountAddress","withStackTrace","makeListOfValidatorAddresses","stringAddresses","ValidatorAddress","listOfValidatorAddresses","detRandomValidatorAddressWithPRNG","anInt","randomInt","index","randomValidatorList","size","validatorAddress","validatorList","randomBuf","undefined","prng","detRandomValidatorAddress","listSize","Math","round","i","random","ownerAddress","bool","push","infoURL","totalDelegatedStake","ownerDelegation","validatorFee","registered","isExternalStakeAccepted","uptimePercentage","proposalsMissed","proposalsCompleted","randomUnsignedTransaction","transactionIntent","transactionIntentDet","assign","actions","detBlob","JSON","stringify","blobBytes","bytes32","transaction","blob","hashOfBlobToSign","fee","randomPendingTransaction","signedTx","txID","TransactionIdentifier","create","detRandomSignedUnconfirmedTransaction","signedTransaction","rndDemand","randomDemand","tps","rndThroughput","randomThroughput","detPRNGWithPubKey","pubKey","asData","compressed","detRandBalanceOfTokenWithInfo","png","availableTokens","deterministicRandomToken","tokenCount","tokenIndex","splice","max","Array","fill","_","amtOrZero","amtFactor","mul","publicKey","bti","validator","bytesFromIndex","allocUnsafe","writeUInt16BE","txIDBuffer","concat","withdrawTxID","epochsUntil","un","pubKeyBytes","detRandomAddress","tokenAndAmounts","deterministicRandomExecutedTransactions","date","Date","setMonth","detMakeActionForTx","actionCount","actionIndex","v","actionType","ActionType","TOKEN_TRANSFER","STAKE_TOKENS","UNSTAKE_TOKENS","OTHER","executedAction","tokenAndAmount","type","from_account","to_account","rndTxTypeInt","transactionType","TransactionType","INCOMING","FROM_ME_TO_ME","OUTGOING","sentAt","updatedCursor","cursor","transactions","deterministicRandomLookupTXUsingHist","seed","__hex","addressWithTXIdBytesAsSeed","fromPublicKeyAndNetwork","PrivateKey","fromBuffer","network","Network","MAINNET","txs","Error","of","nodeUrl","node","url","networkId","tokenBalancesForAddress","_address","lookupTransaction","_txID","validators","_input","lookupValidator","transactionHistory","nativeToken","tokenInfo","_rri","stakesForAddress","unstakesForAddress","transactionStatus","NetworkTransactionThroughput","NetworkTransactionDemand","buildTransaction","_transactionIntent","submitSignedTransaction","_signedTransaction","finalizeTransaction","_signedUnconfirmedTransaction","txStatusMapCounter","_a","pipe","shareReplay","get","last","incremented","status","TransactionStatus","PENDING","CONFIRMED","validatorRnd","signedUnconfirmedTX"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/application/dist/mockRadix.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mockedAPI = exports.mockRadixCoreAPI = exports.makeThrowingRadixCoreAPI = exports.deterministicRandomStakesForAddr = exports.deterministicRandomUnstakesForAddr = exports.deterministicRandomLookupTX = exports.deterministicRandomTXHistory = exports.deterministicRandomBalances = exports.deterministicRandomTxHistoryWithInput = exports.deterministicRandomStakesForAddress = exports.deterministicRandomUnstakesForAddress = exports.deterministicRandomBalancesForAddress = exports.erin = exports.dan = exports.carol = exports.bob = exports.alice = exports.castOfCharacters = exports.tokenByRRIMap = exports.balancesFor = exports.balanceOfFor = exports.__fallBackAlexToken = exports.radixWrappedEtherToken = exports.radixWrappedBitcoinToken = exports.goldToken = exports.barToken = exports.fooToken = exports.xrd = void 0;\nconst primitives_1 = require(\"@radixdlt/primitives\");\nconst account_1 = require(\"@radixdlt/account\");\nconst rxjs_1 = require(\"rxjs\");\nconst dto_1 = require(\"./dto\");\nconst operators_1 = require(\"rxjs/operators\");\nconst crypto_1 = require(\"@radixdlt/crypto\");\nconst actions_1 = require(\"./actions\");\nconst primitives_2 = require(\"@radixdlt/primitives\");\nexports.xrd = {\n    name: 'Rad',\n    rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n    symbol: 'XRD',\n    description: 'The native coin of Radix network',\n    granularity: primitives_2.Amount.fromUnsafe(1)._unsafeUnwrap(),\n    isSupplyMutable: false,\n    currentSupply: primitives_1.uint256Max,\n    tokenInfoURL: new URL('https://www.radixdlt.com'),\n    iconURL: new URL('https://www.image.radixdlt.com/'),\n};\nexports.fooToken = {\n    name: 'Foo token',\n    rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n    symbol: 'FOO',\n    description: 'FOOest token.',\n    granularity: primitives_2.Amount.fromUnsafe(1)._unsafeUnwrap(),\n    isSupplyMutable: false,\n    currentSupply: primitives_1.uint256Max,\n    tokenInfoURL: new URL('https://www.footoken.com'),\n    iconURL: new URL('https://www.image.footoken.com/'),\n};\nexports.barToken = {\n    name: 'Bar token',\n    rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n    symbol: 'BAR',\n    description: 'Bar token. Granularity E-3.',\n    granularity: primitives_2.Amount.fromUnsafe(1000)._unsafeUnwrap(),\n    isSupplyMutable: true,\n    currentSupply: primitives_1.uint256Max,\n    tokenInfoURL: new URL('https://www.bartoken.com'),\n    iconURL: new URL('https://www.image.bartoken.com/'),\n};\nexports.goldToken = {\n    name: 'Gold token',\n    rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n    symbol: 'GOLD',\n    description: 'Gold token. Granularity E-12.',\n    granularity: primitives_2.Amount.fromUnsafe(1000000)._unsafeUnwrap(),\n    isSupplyMutable: false,\n    currentSupply: primitives_1.uint256Max,\n    tokenInfoURL: new URL('https://www.goldtoken.com'),\n    iconURL: new URL('https://www.image.goldtoken.com/'),\n};\nexports.radixWrappedBitcoinToken = {\n    name: 'Bitcoin (wrapped on Radix)',\n    rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n    symbol: 'BTCRW',\n    description: 'Radix wrapped Bitcoin. Granularity E-18.',\n    granularity: primitives_2.Amount.fromUnsafe(1)._unsafeUnwrap(),\n    isSupplyMutable: true,\n    currentSupply: primitives_1.uint256Max,\n    tokenInfoURL: new URL('https://www.bitcoin.radix.com'),\n    iconURL: new URL('https://www.image.bitcoin.radix.com/'),\n};\nexports.radixWrappedEtherToken = {\n    name: 'Ether (wrapped on Radix)',\n    rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n    symbol: 'ETHRW',\n    description: 'Radix wrapped Ether. Granularity E-9.',\n    granularity: primitives_2.Amount.fromUnsafe(1000000000)._unsafeUnwrap(),\n    isSupplyMutable: true,\n    currentSupply: primitives_1.uint256Max,\n    tokenInfoURL: new URL('https://www.ether.radix.com'),\n    iconURL: new URL('https://www.image.ether.radix.com/'),\n};\nexports.__fallBackAlexToken = {\n    name: 'Alex token',\n    rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n    symbol: 'ALEX',\n    description: 'Fallback token for when token for requested symbol was not found.',\n    granularity: primitives_2.Amount.fromUnsafe(1)._unsafeUnwrap(),\n    isSupplyMutable: true,\n    currentSupply: primitives_1.uint256Max,\n    tokenInfoURL: new URL('https://www.alex.token.com'),\n    iconURL: new URL('https://www.image.alex.token.com/'),\n};\nconst balanceOfFor = (input) => {\n    const amt = primitives_2.Amount.fromUnsafe(input.amount)._unsafeUnwrap();\n    return {\n        tokenIdentifier: input.token.rri,\n        amount: amt.lt(input.token.currentSupply)\n            ? amt\n            : input.token.currentSupply,\n    };\n};\nexports.balanceOfFor = balanceOfFor;\nconst balancesFor = (address, amount) => ({\n    owner: address,\n    tokenBalances: [\n        (0, exports.balanceOfFor)({\n            token: exports.xrd,\n            amount,\n        }),\n    ],\n});\nexports.balancesFor = balancesFor;\nconst differentTokens = [\n    exports.xrd,\n    exports.fooToken,\n    exports.barToken,\n    exports.radixWrappedBitcoinToken,\n    exports.radixWrappedEtherToken,\n    exports.goldToken,\n];\n// PLEASE KEEP - used as Cast of characters: https://en.wikipedia.org/wiki/Alice_and_Bob#Cast_of_characters\nexports.tokenByRRIMap = differentTokens.reduce((a, b) => a.set(b.rri, b), new Map());\nconst detPRNGWithBuffer = (buffer) => {\n    const bufCopy = Buffer.from(buffer);\n    let bytes = Buffer.from(buffer);\n    return () => {\n        if (bytes.length === 0) {\n            bytes = (0, crypto_1.sha256)(bufCopy);\n        }\n        const lengthToSlice = 2;\n        const buf = bytes.slice(0, lengthToSlice);\n        bytes = bytes.slice(lengthToSlice, bytes.length);\n        return Number.parseInt(buf.toString('hex'), 16);\n    };\n};\nconst addressesString = [\n    'tdx1qspksqs77z9e24e2dr9t5de6a9kymzhszp9k7jmr2ldkzl4hvn45xsqk409dt',\n    'tdx1qspksqs77z9e24e2dr9t5de6a9kymzhszp9k7jmr2ldkzl4hvn45xsqk409dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n    'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n];\nconst characterNames = [\n    'alice',\n    'bob',\n    'carol',\n    'dan',\n    'erin',\n    'frank',\n    'grace',\n    'heidi',\n    'ivan',\n    'judy',\n    'klara',\n    'leonard',\n    'mallory',\n    'niaj',\n    'olivia',\n    'peggy',\n    'quentin',\n    'rupert',\n    'stella',\n    'ted',\n    'ursula',\n    'victor',\n    'webdy',\n    'xerxez',\n    'yara',\n    'zelda',\n];\n/*\n* [Property in keyof ReturnType<typeof getAPI>]: ReturnType<\n        typeof getAPI\n    >[Property]\n* */\nexports.castOfCharacters = addressesString\n    .map(s => account_1.AccountAddress.fromUnsafe(s)._unsafeUnwrap({ withStackTrace: true }))\n    .slice(0, characterNames.length);\nexports.alice = exports.castOfCharacters[0];\nexports.bob = exports.castOfCharacters[1];\nexports.carol = exports.castOfCharacters[2];\nexports.dan = exports.castOfCharacters[3];\nexports.erin = exports.castOfCharacters[4];\nconst makeListOfValidatorAddresses = () => {\n    const stringAddresses = [\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n        'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n    ];\n    return stringAddresses.map(s => account_1.ValidatorAddress.fromUnsafe(s)._unsafeUnwrap({ withStackTrace: true }));\n};\nconst listOfValidatorAddresses = makeListOfValidatorAddresses();\nconst detRandomValidatorAddressWithPRNG = (anInt) => () => {\n    const randomInt = anInt();\n    const index = randomInt % (listOfValidatorAddresses.length - 1);\n    return listOfValidatorAddresses[index];\n};\nconst randomValidatorList = (size, validatorAddress) => {\n    const validatorList = [];\n    const randomBuf = validatorAddress !== undefined\n        ? (0, crypto_1.sha256)(validatorAddress.toString())\n        : (0, crypto_1.sha256)(size.toString(16));\n    const prng = detPRNGWithBuffer(randomBuf);\n    const detRandomValidatorAddress = detRandomValidatorAddressWithPRNG(prng);\n    const listSize = prng() % 5 === 1 ? size - Math.round(size / 2) : size;\n    for (let i = 0; i < listSize; i++) {\n        const random = prng();\n        const ownerAddress = exports.castOfCharacters[random % exports.castOfCharacters.length];\n        const name = characterNames[random % characterNames.length];\n        const amount = primitives_2.Amount.fromUnsafe(random)._unsafeUnwrap();\n        const bool = random % 2 === 0;\n        validatorList.push({\n            address: detRandomValidatorAddress(),\n            ownerAddress,\n            name,\n            infoURL: new URL('https://rewards.radixtokens.comcom'),\n            totalDelegatedStake: amount,\n            ownerDelegation: amount,\n            validatorFee: 2.5,\n            registered: bool,\n            isExternalStakeAccepted: bool,\n            uptimePercentage: 100.0,\n            proposalsMissed: 10,\n            proposalsCompleted: 20,\n        });\n    }\n    return validatorList;\n};\nconst randomUnsignedTransaction = (transactionIntent) => {\n    const transactionIntentDet = Object.assign(Object.assign({}, transactionIntent), { actions: transactionIntent.actions.map(a => (Object.assign({}, a))) });\n    const detBlob = JSON.stringify(transactionIntentDet, null, 4);\n    const blobBytes = Buffer.from(detBlob);\n    const bytes32 = (0, crypto_1.sha256)(blobBytes);\n    const anInt = detPRNGWithBuffer(bytes32);\n    return {\n        transaction: {\n            blob: blobBytes.toString('hex'),\n            hashOfBlobToSign: bytes32.toString('hex'),\n        },\n        fee: primitives_2.Amount.fromUnsafe(anInt())._unsafeUnwrap(),\n    };\n};\nconst randomPendingTransaction = (signedTx) => ({\n    txID: dto_1.TransactionIdentifier.create((0, crypto_1.sha256)(Buffer.from(signedTx.transaction.blob)))._unsafeUnwrap(),\n    blob: 'awd',\n});\nconst detRandomSignedUnconfirmedTransaction = (signedTransaction) => (Object.assign({}, randomPendingTransaction(signedTransaction)));\nconst rndDemand = detPRNGWithBuffer(Buffer.from('dmnd'));\nconst randomDemand = () => ({\n    tps: rndDemand() % 200,\n});\nconst rndThroughput = detPRNGWithBuffer(Buffer.from('trpt'));\nconst randomThroughput = () => ({\n    tps: rndThroughput() % 200,\n});\nconst detPRNGWithPubKey = (pubKey) => {\n    // cannot use first, since it is always 02 or 03\n    const bytes = pubKey.asData({ compressed: true }).slice(1, 33);\n    return detPRNGWithBuffer(bytes);\n};\nconst detRandBalanceOfTokenWithInfo = (png) => {\n    const anInt = png;\n    const availableTokens = [...differentTokens];\n    const deterministicRandomToken = () => {\n        const tokenCount = availableTokens.length;\n        const tokenIndex = anInt() % tokenCount;\n        const token = availableTokens[tokenIndex];\n        availableTokens.splice(tokenIndex, 1);\n        return token;\n    };\n    const size = Math.max(anInt() % availableTokens.length, 1);\n    return Array(size)\n        .fill(undefined)\n        .map((_) => {\n        const token = deterministicRandomToken();\n        const amtOrZero = anInt() % 10000;\n        const amtFactor = primitives_2.Amount.fromUnsafe(Math.max(10, amtOrZero))._unsafeUnwrap();\n        const amount = primitives_2.Amount.fromUnsafe(token.granularity.mul(amtFactor))._unsafeUnwrap();\n        return {\n            token,\n            amount,\n        };\n    });\n};\nconst deterministicRandomBalancesForAddress = (address) => {\n    const anInt = detPRNGWithPubKey(address.publicKey);\n    const tokenBalances = detRandBalanceOfTokenWithInfo(anInt).map(bti => (0, exports.balanceOfFor)(bti));\n    return {\n        owner: address,\n        tokenBalances,\n    };\n};\nexports.deterministicRandomBalancesForAddress = deterministicRandomBalancesForAddress;\nconst deterministicRandomUnstakesForAddress = (address) => {\n    const anInt = detPRNGWithPubKey(address.publicKey);\n    const size = anInt() % 7;\n    return Array(size)\n        .fill(undefined)\n        .map((_, index) => {\n        const detRandomValidatorAddress = detRandomValidatorAddressWithPRNG(anInt);\n        const validator = detRandomValidatorAddress();\n        const amount = primitives_2.Amount.fromUnsafe(anInt())._unsafeUnwrap();\n        const bytesFromIndex = Buffer.allocUnsafe(2);\n        bytesFromIndex.writeUInt16BE(index);\n        const txIDBuffer = (0, crypto_1.sha256)(Buffer.concat([\n            address.publicKey.asData({ compressed: true }),\n            bytesFromIndex,\n        ]));\n        const withdrawTxID = dto_1.TransactionIdentifier.create(txIDBuffer)._unsafeUnwrap();\n        const epochsUntil = anInt() % 5;\n        return {\n            amount,\n            validator,\n            epochsUntil: epochsUntil > 60 ? 0 : epochsUntil,\n            withdrawTxID,\n        };\n    });\n};\nexports.deterministicRandomUnstakesForAddress = deterministicRandomUnstakesForAddress;\nconst deterministicRandomStakesForAddress = (address) => (0, exports.deterministicRandomUnstakesForAddress)(address).map((un) => (Object.assign({}, un)));\nexports.deterministicRandomStakesForAddress = deterministicRandomStakesForAddress;\nconst deterministicRandomTxHistoryWithInput = (input) => {\n    const address = input.address;\n    const anInt = detPRNGWithPubKey(address.publicKey);\n    const pubKeyBytes = address.publicKey\n        .asData({ compressed: true })\n        .slice(1, 33);\n    const detRandomAddress = () => exports.castOfCharacters[anInt() % exports.castOfCharacters.length];\n    const detRandomValidatorAddress = detRandomValidatorAddressWithPRNG(anInt);\n    const tokenAndAmounts = detRandBalanceOfTokenWithInfo(anInt);\n    const deterministicRandomExecutedTransactions = () => Array(input.size)\n        .fill(undefined)\n        .map((_, index) => {\n        const bytesFromIndex = Buffer.allocUnsafe(2);\n        bytesFromIndex.writeUInt16BE(index);\n        const txIDBuffer = (0, crypto_1.sha256)(Buffer.concat([pubKeyBytes, bytesFromIndex]));\n        const date = new Date('2020-03-14T15:32:05');\n        date.setMonth(index % 12);\n        const txID = dto_1.TransactionIdentifier.create(txIDBuffer)._unsafeUnwrap();\n        const detMakeActionForTx = () => {\n            // mock max 5 actions per tx in history, min 1.\n            const actionCount = Math.max(anInt() % 5, 1);\n            return Array(actionCount)\n                .fill(undefined)\n                .map((_, actionIndex) => {\n                const v = anInt() % 4; // Transfer, Stake, Unstake, Other\n                const actionType = v === 0\n                    ? actions_1.ActionType.TOKEN_TRANSFER\n                    : v === 1\n                        ? actions_1.ActionType.STAKE_TOKENS\n                        : v === 2\n                            ? actions_1.ActionType.UNSTAKE_TOKENS\n                            : actions_1.ActionType.OTHER;\n                let executedAction;\n                const tokenAndAmount = tokenAndAmounts[actionIndex % tokenAndAmounts.length];\n                switch (actionType) {\n                    case actions_1.ActionType.OTHER:\n                        executedAction = {\n                            type: actions_1.ActionType.OTHER,\n                        };\n                        break;\n                    case actions_1.ActionType.STAKE_TOKENS:\n                        executedAction = {\n                            type: actions_1.ActionType.STAKE_TOKENS,\n                            from: address,\n                            amount: primitives_2.Amount.fromUnsafe(anInt())._unsafeUnwrap(),\n                            validator: detRandomValidatorAddress(),\n                        };\n                        break;\n                    case actions_1.ActionType.UNSTAKE_TOKENS:\n                        executedAction = {\n                            type: actions_1.ActionType.UNSTAKE_TOKENS,\n                            from: address,\n                            amount: primitives_2.Amount.fromUnsafe(anInt())._unsafeUnwrap(),\n                            validator: detRandomValidatorAddress(),\n                        };\n                        break;\n                    case actions_1.ActionType.TOKEN_TRANSFER:\n                        executedAction = {\n                            type: actions_1.ActionType.TOKEN_TRANSFER,\n                            from_account: address.toString(),\n                            to_account: detRandomAddress().toString(),\n                            amount: tokenAndAmount.amount,\n                            rri: tokenAndAmount.token.rri,\n                        };\n                        break;\n                }\n                return executedAction;\n            });\n        };\n        const rndTxTypeInt = anInt() % 3;\n        const transactionType = rndTxTypeInt === 0\n            ? dto_1.TransactionType.INCOMING\n            : rndTxTypeInt === 1\n                ? dto_1.TransactionType.FROM_ME_TO_ME\n                : dto_1.TransactionType.OUTGOING;\n        return {\n            txID,\n            sentAt: date,\n            transactionType,\n            fee: primitives_2.Amount.fromUnsafe(anInt())._unsafeUnwrap(),\n            // message?: {\n            // \tmsg: string\n            // \tencryptionScheme: string\n            // }\n            actions: detMakeActionForTx(),\n        };\n    });\n    const updatedCursor = (0, crypto_1.sha256)(input.cursor !== undefined ? Buffer.from(input.cursor) : pubKeyBytes).toString('hex');\n    return {\n        cursor: updatedCursor,\n        transactions: deterministicRandomExecutedTransactions(),\n    };\n};\nexports.deterministicRandomTxHistoryWithInput = deterministicRandomTxHistoryWithInput;\nconst deterministicRandomLookupTXUsingHist = (txID) => {\n    const seed = (0, crypto_1.sha256)(Buffer.from(txID.__hex, 'hex'));\n    const addressWithTXIdBytesAsSeed = account_1.AccountAddress.fromPublicKeyAndNetwork({\n        publicKey: crypto_1.PrivateKey.fromBuffer(seed)._unsafeUnwrap().publicKey(),\n        network: primitives_1.Network.MAINNET,\n    });\n    const txs = (0, exports.deterministicRandomTxHistoryWithInput)({\n        size: 1,\n        address: addressWithTXIdBytesAsSeed,\n    }).transactions;\n    if (txs.length === 0) {\n        throw new Error('Expected at least one tx...');\n    }\n    return Object.assign(Object.assign({}, txs[0]), { txID });\n};\nconst deterministicRandomBalances = (address) => (0, rxjs_1.of)((0, exports.deterministicRandomBalancesForAddress)(address));\nexports.deterministicRandomBalances = deterministicRandomBalances;\nconst deterministicRandomTXHistory = (input) => (0, rxjs_1.of)((0, exports.deterministicRandomTxHistoryWithInput)(input));\nexports.deterministicRandomTXHistory = deterministicRandomTXHistory;\nconst deterministicRandomLookupTX = (txID) => (0, rxjs_1.of)(deterministicRandomLookupTXUsingHist(txID));\nexports.deterministicRandomLookupTX = deterministicRandomLookupTX;\nconst deterministicRandomUnstakesForAddr = (address) => (0, rxjs_1.of)((0, exports.deterministicRandomUnstakesForAddress)(address));\nexports.deterministicRandomUnstakesForAddr = deterministicRandomUnstakesForAddr;\nconst deterministicRandomStakesForAddr = (address) => (0, rxjs_1.of)((0, exports.deterministicRandomStakesForAddress)(address));\nexports.deterministicRandomStakesForAddr = deterministicRandomStakesForAddr;\nconst makeThrowingRadixCoreAPI = (nodeUrl) => ({\n    node: { url: new URL(nodeUrl !== null && nodeUrl !== void 0 ? nodeUrl : 'https://www.radixdlt.com/') },\n    networkId: () => {\n        throw Error('Not implemented');\n    },\n    tokenBalancesForAddress: (_address) => {\n        throw Error('Not implemented');\n    },\n    lookupTransaction: (_txID) => {\n        throw Error('Not implemented');\n    },\n    validators: (_input) => {\n        throw Error('Not implemented');\n    },\n    lookupValidator: (_input) => {\n        throw Error('Not implemented');\n    },\n    transactionHistory: (_input) => {\n        throw Error('Not implemented');\n    },\n    nativeToken: () => {\n        throw Error('Not implemented');\n    },\n    tokenInfo: (_rri) => {\n        throw Error('Not implemented');\n    },\n    stakesForAddress: (_address) => {\n        throw Error('Not implemented');\n    },\n    unstakesForAddress: (_address) => {\n        throw Error('Not implemented');\n    },\n    transactionStatus: (_txID) => {\n        throw Error('Not implemented');\n    },\n    NetworkTransactionThroughput: () => {\n        throw Error('Not implemented');\n    },\n    NetworkTransactionDemand: () => {\n        throw Error('Not implemented');\n    },\n    buildTransaction: (_transactionIntent) => {\n        throw Error('Not implemented');\n    },\n    submitSignedTransaction: (_signedTransaction) => {\n        throw Error('Not implemented');\n    },\n    finalizeTransaction: (_signedUnconfirmedTransaction) => {\n        throw Error('Not implemented');\n    },\n});\nexports.makeThrowingRadixCoreAPI = makeThrowingRadixCoreAPI;\nlet txStatusMapCounter = undefined;\nconst mockRadixCoreAPI = (input) => {\n    var _a;\n    txStatusMapCounter = new Map();\n    return {\n        node: { url: new URL((_a = input === null || input === void 0 ? void 0 : input.nodeUrl) !== null && _a !== void 0 ? _a : 'https://www.radixdlt.com/') },\n        networkId: () => { var _a; return (0, rxjs_1.of)((_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : primitives_1.Network.MAINNET).pipe((0, operators_1.shareReplay)(1)); },\n        nativeToken: () => (0, rxjs_1.of)(exports.xrd),\n        tokenInfo: (rri) => { var _a; return (0, rxjs_1.of)((_a = exports.tokenByRRIMap.get(rri)) !== null && _a !== void 0 ? _a : exports.__fallBackAlexToken); },\n        tokenBalancesForAddress: exports.deterministicRandomBalances,\n        transactionStatus: (txID) => {\n            var _a;\n            const last = (_a = txStatusMapCounter.get(txID)) !== null && _a !== void 0 ? _a : 0;\n            const incremented = last + 1;\n            txStatusMapCounter.set(txID, incremented);\n            const status = last <= 1\n                ? dto_1.TransactionStatus.PENDING\n                : dto_1.TransactionStatus.CONFIRMED;\n            return (0, rxjs_1.of)({\n                txID,\n                status, // when TransactionStatus.FAIL ?\n            });\n        },\n        validators: (input) => (0, rxjs_1.of)({\n            cursor: 'cursor',\n            validators: randomValidatorList(input.size),\n        }),\n        lookupValidator: (validatorAddress) => {\n            const validatorRnd = randomValidatorList(1, validatorAddress)[0];\n            const validator = Object.assign(Object.assign({}, validatorRnd), { address: validatorAddress });\n            return (0, rxjs_1.of)(validator);\n        },\n        buildTransaction: (transactionIntent) => (0, rxjs_1.of)(randomUnsignedTransaction(transactionIntent)),\n        finalizeTransaction: (signedTransaction) => (0, rxjs_1.of)(detRandomSignedUnconfirmedTransaction(signedTransaction)),\n        submitSignedTransaction: (signedUnconfirmedTX) => (0, rxjs_1.of)(signedUnconfirmedTX),\n        NetworkTransactionDemand: () => (0, rxjs_1.of)(randomDemand()),\n        NetworkTransactionThroughput: () => (0, rxjs_1.of)(randomThroughput()),\n        transactionHistory: exports.deterministicRandomTXHistory,\n        lookupTransaction: exports.deterministicRandomLookupTX,\n        unstakesForAddress: exports.deterministicRandomUnstakesForAddr,\n        stakesForAddress: exports.deterministicRandomStakesForAddr,\n    };\n};\nexports.mockRadixCoreAPI = mockRadixCoreAPI;\nexports.mockedAPI = (0, rxjs_1.of)((0, exports.mockRadixCoreAPI)());\n//# sourceMappingURL=mockRadix.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}