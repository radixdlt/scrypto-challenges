{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function ignoreElements() {\n  return function ignoreElementsOperatorFunction(source) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\nvar IgnoreElementsOperator = /*@__PURE__*/function () {\n  function IgnoreElementsOperator() {}\n  IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  };\n  return IgnoreElementsOperator;\n}();\nvar IgnoreElementsSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(IgnoreElementsSubscriber, _super);\n  function IgnoreElementsSubscriber() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  IgnoreElementsSubscriber.prototype._next = function (unused) {};\n  return IgnoreElementsSubscriber;\n}(Subscriber);","map":{"version":3,"names":["tslib_1","Subscriber","ignoreElements","ignoreElementsOperatorFunction","source","lift","IgnoreElementsOperator","prototype","call","subscriber","subscribe","IgnoreElementsSubscriber","_super","__extends","apply","arguments","_next","unused"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/ignoreElements.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * ![](ignoreElements.png)\n *\n * ## Examples\n * ### Ignores emitted values, reacts to observable's completion.\n * ```ts\n * import { of } from 'rxjs';\n * import { ignoreElements } from 'rxjs/operators';\n *\n * of('you', 'talking', 'to', 'me').pipe(\n *   ignoreElements(),\n * )\n * .subscribe(\n *   word => console.log(word),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'the end'\n * ```\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements(): OperatorFunction<any, never> {\n  return function ignoreElementsOperatorFunction(source: Observable<any>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    // Do nothing\n  }\n}\n"],"mappings":";AAEA,OAAO,KAAEA,OAAU,MAAE,OAAM;AA8B3B,SAAMC,UAAU,uBAAc;OAC5B,SAAOC,cAASA,CAAA;SACd,SAAOC,8BAAgBA,CAAAC,MAA0B;IACjD,OAAAA,MAAA,CAAAC,IAAA,KAAAC,sBAAA;EACH;AAED;IAAAA,sBAAA;EAIA,SAACA,uBAAA,GAHC;wBACgB,CAAAC,SAAc,CAAAC,IAAA,aAAAC,UAAyB,EAAAL,MAAW,EAAE;IACnE,OAAAA,MAAA,CAAAM,SAAA,KAAAC,wBAAA,CAAAF,UAAA;EACH;EAJA,OAICH,sBAAA;AAOD;IAA0CK,wBAAA,0BAAaC,MAAA;EAAvDZ,OAAA,CAAAa,SAAA,CAAAF,wBAAA,EAAAC,MAAA;;IAIC,OAAAA,MAAA,aAAAA,MAAA,CAAAE,KAAA,OAAAC,SAAA;EAHW;EAEVJ,wBAAC,CAAAJ,SAAA,CAAAS,KAAA,aAAAC,MAAA,GACH;EAJ0C,OAAAN,wBAIzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}