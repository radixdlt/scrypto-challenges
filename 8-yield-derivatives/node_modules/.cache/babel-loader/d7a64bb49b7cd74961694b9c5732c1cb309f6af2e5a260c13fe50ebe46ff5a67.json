{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets = global.ShadowRoot && (global.ShadyCSS === undefined || global.ShadyCSS.nativeShadow) && 'adoptedStyleSheets' in Document.prototype && 'replace' in CSSStyleSheet.prototype;\nconst constructionToken = Symbol();\nconst cssTagCache = new WeakMap();\n/**\n * A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n *\n * CSSResult is the return value of `css`-tagged template literals and\n * `unsafeCSS()`. In order to ensure that CSSResults are only created via the\n * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.\n */\nexport class CSSResult {\n  constructor(cssText, strings, safeToken) {\n    // This property needs to remain unminified.\n    this['_$cssResult$'] = true;\n    if (safeToken !== constructionToken) {\n      throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n    }\n    this.cssText = cssText;\n    this._strings = strings;\n  }\n  // This is a getter so that it's lazy. In practice, this means stylesheets\n  // are not created until the first element instance is made.\n  get styleSheet() {\n    // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is\n    // constructable.\n    let styleSheet = this._styleSheet;\n    const strings = this._strings;\n    if (supportsAdoptingStyleSheets && styleSheet === undefined) {\n      const cacheable = strings !== undefined && strings.length === 1;\n      if (cacheable) {\n        styleSheet = cssTagCache.get(strings);\n      }\n      if (styleSheet === undefined) {\n        (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(this.cssText);\n        if (cacheable) {\n          cssTagCache.set(strings, styleSheet);\n        }\n      }\n    }\n    return styleSheet;\n  }\n  toString() {\n    return this.cssText;\n  }\n}\nconst textFromCSSResult = value => {\n  // This property needs to remain unminified.\n  if (value['_$cssResult$'] === true) {\n    return value.cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(`Value passed to 'css' function must be a 'css' function result: ` + `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` + `to ensure page security.`);\n  }\n};\n/**\n * Wrap a value for interpolation in a {@linkcode css} tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = value => new CSSResult(typeof value === 'string' ? value : String(value), undefined, constructionToken);\n/**\n * A template literal tag which can be used with LitElement's\n * {@linkcode LitElement.styles} property to set element styles.\n *\n * For security reasons, only literal string values and number may be used in\n * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}\n * may be used inside an expression.\n */\nexport const css = (strings, ...values) => {\n  const cssText = strings.length === 1 ? strings[0] : values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n  return new CSSResult(cssText, strings, constructionToken);\n};\n/**\n * Applies the given styles to a `shadowRoot`. When Shadow DOM is\n * available but `adoptedStyleSheets` is not, styles are appended to the\n * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n * Note, when shimming is used, any styles that are subsequently placed into\n * the shadowRoot should be placed *before* any shimmed adopted styles. This\n * will match spec behavior that gives adopted sheets precedence over styles in\n * shadowRoot.\n */\nexport const adoptStyles = (renderRoot, styles) => {\n  if (supportsAdoptingStyleSheets) {\n    renderRoot.adoptedStyleSheets = styles.map(s => s instanceof CSSStyleSheet ? s : s.styleSheet);\n  } else {\n    styles.forEach(s => {\n      const style = document.createElement('style');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const nonce = global['litNonce'];\n      if (nonce !== undefined) {\n        style.setAttribute('nonce', nonce);\n      }\n      style.textContent = s.cssText;\n      renderRoot.appendChild(style);\n    });\n  }\n};\nconst cssResultFromStyleSheet = sheet => {\n  let cssText = '';\n  for (const rule of sheet.cssRules) {\n    cssText += rule.cssText;\n  }\n  return unsafeCSS(cssText);\n};\nexport const getCompatibleStyle = supportsAdoptingStyleSheets || NODE_MODE && global.CSSStyleSheet === undefined ? s => s : s => s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;","map":{"version":3,"names":["NODE_MODE","global","globalThis","window","supportsAdoptingStyleSheets","ShadowRoot","ShadyCSS","undefined","nativeShadow","Document","prototype","CSSStyleSheet","constructionToken","Symbol","cssTagCache","WeakMap","CSSResult","constructor","cssText","strings","safeToken","Error","_strings","styleSheet","_styleSheet","cacheable","length","get","replaceSync","set","toString","textFromCSSResult","value","unsafeCSS","String","css","values","reduce","acc","v","idx","adoptStyles","renderRoot","styles","adoptedStyleSheets","map","s","forEach","style","document","createElement","nonce","setAttribute","textContent","appendChild","cssResultFromStyleSheet","sheet","rule","cssRules","getCompatibleStyle"],"sources":["/Users/mdabdurrazzak/scrypto-challenges/8-yield-derivatives/node_modules/@lit/reactive-element/src/css-tag.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets: boolean =\n  global.ShadowRoot &&\n  (global.ShadyCSS === undefined || global.ShadyCSS.nativeShadow) &&\n  'adoptedStyleSheets' in Document.prototype &&\n  'replace' in CSSStyleSheet.prototype;\n\n/**\n * A CSSResult or native CSSStyleSheet.\n *\n * In browsers that support constructible CSS style sheets, CSSStyleSheet\n * object can be used for styling along side CSSResult from the `css`\n * template tag.\n */\nexport type CSSResultOrNative = CSSResult | CSSStyleSheet;\n\nexport type CSSResultArray = Array<CSSResultOrNative | CSSResultArray>;\n\n/**\n * A single CSSResult, CSSStyleSheet, or an array or nested arrays of those.\n */\nexport type CSSResultGroup = CSSResultOrNative | CSSResultArray;\n\nconst constructionToken = Symbol();\n\nconst cssTagCache = new WeakMap<TemplateStringsArray, CSSStyleSheet>();\n\n/**\n * A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n *\n * CSSResult is the return value of `css`-tagged template literals and\n * `unsafeCSS()`. In order to ensure that CSSResults are only created via the\n * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.\n */\nexport class CSSResult {\n  // This property needs to remain unminified.\n  ['_$cssResult$'] = true;\n  readonly cssText: string;\n  private _styleSheet?: CSSStyleSheet;\n  private _strings: TemplateStringsArray | undefined;\n\n  private constructor(\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n        'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.'\n      );\n    }\n    this.cssText = cssText;\n    this._strings = strings;\n  }\n\n  // This is a getter so that it's lazy. In practice, this means stylesheets\n  // are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet | undefined {\n    // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is\n    // constructable.\n    let styleSheet = this._styleSheet;\n    const strings = this._strings;\n    if (supportsAdoptingStyleSheets && styleSheet === undefined) {\n      const cacheable = strings !== undefined && strings.length === 1;\n      if (cacheable) {\n        styleSheet = cssTagCache.get(strings);\n      }\n      if (styleSheet === undefined) {\n        (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(\n          this.cssText\n        );\n        if (cacheable) {\n          cssTagCache.set(strings, styleSheet);\n        }\n      }\n    }\n    return styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\ntype ConstructableCSSResult = CSSResult & {\n  new (\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ): CSSResult;\n};\n\nconst textFromCSSResult = (value: CSSResultGroup | number) => {\n  // This property needs to remain unminified.\n  if ((value as CSSResult)['_$cssResult$'] === true) {\n    return (value as CSSResult).cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n      `Value passed to 'css' function must be a 'css' function result: ` +\n        `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` +\n        `to ensure page security.`\n    );\n  }\n};\n\n/**\n * Wrap a value for interpolation in a {@linkcode css} tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) =>\n  new (CSSResult as ConstructableCSSResult)(\n    typeof value === 'string' ? value : String(value),\n    undefined,\n    constructionToken\n  );\n\n/**\n * A template literal tag which can be used with LitElement's\n * {@linkcode LitElement.styles} property to set element styles.\n *\n * For security reasons, only literal string values and number may be used in\n * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}\n * may be used inside an expression.\n */\nexport const css = (\n  strings: TemplateStringsArray,\n  ...values: (CSSResultGroup | number)[]\n): CSSResult => {\n  const cssText =\n    strings.length === 1\n      ? strings[0]\n      : values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]\n        );\n  return new (CSSResult as ConstructableCSSResult)(\n    cssText,\n    strings,\n    constructionToken\n  );\n};\n\n/**\n * Applies the given styles to a `shadowRoot`. When Shadow DOM is\n * available but `adoptedStyleSheets` is not, styles are appended to the\n * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n * Note, when shimming is used, any styles that are subsequently placed into\n * the shadowRoot should be placed *before* any shimmed adopted styles. This\n * will match spec behavior that gives adopted sheets precedence over styles in\n * shadowRoot.\n */\nexport const adoptStyles = (\n  renderRoot: ShadowRoot,\n  styles: Array<CSSResultOrNative>\n) => {\n  if (supportsAdoptingStyleSheets) {\n    (renderRoot as ShadowRoot).adoptedStyleSheets = styles.map((s) =>\n      s instanceof CSSStyleSheet ? s : s.styleSheet!\n    );\n  } else {\n    styles.forEach((s) => {\n      const style = document.createElement('style');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const nonce = (global as any)['litNonce'];\n      if (nonce !== undefined) {\n        style.setAttribute('nonce', nonce);\n      }\n      style.textContent = (s as CSSResult).cssText;\n      renderRoot.appendChild(style);\n    });\n  }\n};\n\nconst cssResultFromStyleSheet = (sheet: CSSStyleSheet) => {\n  let cssText = '';\n  for (const rule of sheet.cssRules) {\n    cssText += rule.cssText;\n  }\n  return unsafeCSS(cssText);\n};\n\nexport const getCompatibleStyle =\n  supportsAdoptingStyleSheets ||\n  (NODE_MODE && global.CSSStyleSheet === undefined)\n    ? (s: CSSResultOrNative) => s\n    : (s: CSSResultOrNative) =>\n        s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}