{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function takeLast(count) {\n  return function takeLastOperatorFunction(source) {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\nvar TakeLastOperator = /*@__PURE__*/function () {\n  function TakeLastOperator(total) {\n    this.total = total;\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError();\n    }\n  }\n  TakeLastOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  };\n  return TakeLastOperator;\n}();\nvar TakeLastSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(TakeLastSubscriber, _super);\n  function TakeLastSubscriber(destination, total) {\n    var _this = _super.call(this, destination) || this;\n    _this.total = total;\n    _this.ring = new Array();\n    _this.count = 0;\n    return _this;\n  }\n  TakeLastSubscriber.prototype._next = function (value) {\n    var ring = this.ring;\n    var total = this.total;\n    var count = this.count++;\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      var index = count % total;\n      ring[index] = value;\n    }\n  };\n  TakeLastSubscriber.prototype._complete = function () {\n    var destination = this.destination;\n    var count = this.count;\n    if (count > 0) {\n      var total = this.count >= this.total ? this.total : this.count;\n      var ring = this.ring;\n      for (var i = 0; i < total; i++) {\n        var idx = count++ % total;\n        destination.next(ring[idx]);\n      }\n    }\n    destination.complete();\n  };\n  return TakeLastSubscriber;\n}(Subscriber);","map":{"version":3,"names":["tslib_1","Subscriber","ArgumentOutOfRangeError","empty","takeLast","count","takeLastOperatorFunction","source","lift","TakeLastOperator","total","prototype","call","subscriber","subscribe","TakeLastSubscriber","_super","__extends","destination","_this","ring","Array","_next","value","length","push","index","_complete","i","idx","next","complete"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/takeLast.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * ![](takeLast.png)\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * ## Example\n * Take the last 3 values of an Observable with many values\n * ```ts\n * import { range } from 'rxjs';\n * import { takeLast } from 'rxjs/operators';\n *\n * const many = range(1, 100);\n * const lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n"],"mappings":";AACA,OAAO,KAAEA,OAAU,MAAE,OAAM;AAC3B,SAASC,UAAA,uBAA+B;AACxC,SAASC,uBAAa,yCAAsB;AA8C5C,SAAMC,KAAA,QAAU,qBAAyB;OACvC,SAAOC,QAASA,CAAAC,KAAA;SACd,SAASC,wBAAQA,CAAAC,MAAA;QACfF,KAAA,KAAO,GAAK;MACb,OAAAF,KAAA;WACC;MACD,OAAAI,MAAA,CAAAC,IAAA,KAAAC,gBAAA,CAAAJ,KAAA;IACD;EACH;AAED;IACEI,gBAAA,gBAAiC;WAAbA,gBAAaA,CAAAC,KAAA;IAC/B,IAAI,CAAAA,KAAK,GAAAA,KAAS;QAChB,KAAAA,KAAU;MACX,UAAAR,uBAAA;IACF;EAED;kBACS,CAAMS,SAAC,CAASC,IAAC,GAAI,UAAAC,UAAmB,EAAAN,MAAU,EAAE;IAC5D,OAAAA,MAAA,CAAAO,SAAA,KAAAC,kBAAA,CAAAF,UAAA,OAAAH,KAAA;EACH;EAVA,OAUCD,gBAAA;AAOD;IAAoCM,kBAAA,0BAAaC,MAAA;EAI/ChB,OAAA,CAAAiB,SAAA,CAAAF,kBAAY,EAAAC,MAAoC;WAAhDD,kBACEA,CAAAG,WAAM,EAAAR,KAAY;IAD4B,IAAAS,KAAA,GAAKH,MAAL,CAAKJ,IAAQ,OAAAM,WAAA;IAHrDC,KAAA,CAAAT,KAAI,GAAaA,KAAI;IACrBS,KAAA,CAAAC,IAAA,GAAK,IAAaC,KAAA;;IAIzB,OAAAF,KAAA;EAES;oBACK,CAAIR,SAAM,CAAAW,KAAA,aAAAC,KAAA;IACvB,IAAMH,IAAA,GAAK,IAAG,CAAIA,IAAC;IACnB,IAAMV,KAAK,GAAG,IAAI,CAACA,KAAK;IAExB,IAAIL,KAAK,OAAM,CAAAA,KAAG,EAAK;QACrBe,IAAI,CAACI,MAAK,GAAAd,KAAO;MAClBU,IAAA,CAAAK,IAAA,CAAAF,KAAA;WACC;MACA,IAAIG,KAAC,GAAMrB,KAAG,GAAMK,KAAA;MACrBU,IAAA,CAAAM,KAAA,IAAAH,KAAA;IACF;EAES;oBACF,CAAWZ,SAAQ,CAAAgB,SAAW,GAAC;IACrC,IAAIT,WAAQ,GAAK,IAAK,CAACA,WAAA;IAEvB,IAAIb,KAAK,GAAG,IAAG,CAAAA,KAAA;QACbA,KAAM,IAAK;MACX,IAAMK,KAAI,GAAI,IAAK,CAAAL,KAAK,SAAAK,KAAA,QAAAA,KAAA,QAAAL,KAAA;MAExB,IAAAe,IAAK,GAAK,IAAI,CAAEA,IAAI;WAClB,IAAMQ,CAAA,GAAG,CAAG,EAACA,CAAA,GAAKlB,KAAG,EAAGkB,CAAA,IAAM;QAC9B,IAAAC,GAAA,GAAWxB,KAAK,EAAC,GAAKK,KAAK;QAC5BQ,WAAA,CAAAY,IAAA,CAAAV,IAAA,CAAAS,GAAA;MACF;IAED;IACDX,WAAA,CAAAa,QAAA;EACH;EArCoC,OAAAhB,kBAqCnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}