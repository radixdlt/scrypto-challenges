{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function debounce(durationSelector) {\n  return function (source) {\n    return source.lift(new DebounceOperator(durationSelector));\n  };\n}\nvar DebounceOperator = /*@__PURE__*/function () {\n  function DebounceOperator(durationSelector) {\n    this.durationSelector = durationSelector;\n  }\n  DebounceOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  };\n  return DebounceOperator;\n}();\nvar DebounceSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(DebounceSubscriber, _super);\n  function DebounceSubscriber(destination, durationSelector) {\n    var _this = _super.call(this, destination) || this;\n    _this.durationSelector = durationSelector;\n    _this.hasValue = false;\n    return _this;\n  }\n  DebounceSubscriber.prototype._next = function (value) {\n    try {\n      var result = this.durationSelector.call(this, value);\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  };\n  DebounceSubscriber.prototype._complete = function () {\n    this.emitValue();\n    this.destination.complete();\n  };\n  DebounceSubscriber.prototype._tryNext = function (value, duration) {\n    var subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n    subscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));\n    if (subscription && !subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  };\n  DebounceSubscriber.prototype.notifyNext = function () {\n    this.emitValue();\n  };\n  DebounceSubscriber.prototype.notifyComplete = function () {\n    this.emitValue();\n  };\n  DebounceSubscriber.prototype.emitValue = function () {\n    if (this.hasValue) {\n      var value = this.value;\n      var subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = undefined;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = undefined;\n      this.hasValue = false;\n      _super.prototype._next.call(this, value);\n    }\n  };\n  return DebounceSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"names":["tslib_1","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","debounce","durationSelector","source","lift","DebounceOperator","prototype","call","subscriber","subscribe","DebounceSubscriber","_super","__extends","destination","_this","_next","value","result","_tryNext","err","error","_complete","emitValue","complete","duration","subscription","durationSubscription","hasValue","unsubscribe","remove","closed","add","notifyNext","notifyComplete","undefined"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/debounce.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SubscribableOrPromise, TeardownLogic } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * ![](debounce.png)\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * ## Example\n * Emit the most recent click after a burst of clicks\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { debounce } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(debounce(() => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  private value?: T;\n  private hasValue = false;\n  private durationSubscription?: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error!(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete!();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<any>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));\n    if (subscription && !subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = undefined;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      // This must be done *before* passing the value\n      // along to the destination because it's possible for\n      // the value to synchronously re-enter this operator\n      // recursively if the duration selector Observable\n      // emits synchronously\n      this.value = undefined;\n      this.hasValue = false;\n      super._next(value!);\n    }\n  }\n}\n"],"mappings":";AAKA,OAAO,KAAEA,OAAA,aAAuB;AAkDhC,SAAMC,qBAAsB,EAAAC,cAA0D,EAAAC,qBAAA;OACpF,SAAOC,QAACA,CAAAC,gBAA0B;EACnC,iBAAAC,MAAA;IAAA,OAAAA,MAAA,CAAAC,IAAA,KAAAC,gBAAA,CAAAH,gBAAA;EAAA;AAED;IACEG,gBAAA,gBAAoB,YAA0D;WAA1DA,gBAAgBA,CAAAH,gBAAhB,EAAgB;IACnC,KAAAA,gBAAA,GAAAA,gBAAA;EAED;kBACS,CAAMI,SAAC,CAASC,IAAC,GAAI,UAAAC,UAAmB,EAAAL,MAAU,EAAE;IAC5D,OAAAA,MAAA,CAAAM,SAAA,KAAAC,kBAAA,CAAAF,UAAA,OAAAN,gBAAA;EACH;EAPA,OAOCG,gBAAA;AAOD;IAAuCK,kBAAA,0BAA2BC,MAAA;EAKhEd,OAAA,CAAAe,SAAA,CAAAF,kBAAY,EAAAC,MACQ;WADpBD,kBAEEA,CAAAG,WAAM,EAAAX,gBACP;IAFmB,IAAAY,KAAA,GAAAH,MAAA,CAAAJ,IAAgB,KAAhB,EAAAM,WAAgB,CAA0C;IAJtEC,KAAA,CAAAZ,gBAAgB,GAACA,gBAAA;;IAMxB,OAAAY,KAAA;EAES;oBACJ,CAAAR,SAAA,CAAAS,KAAA,aAAAC,KAAA;QACF;MAEA,IAAIC,MAAM,GAAE,KAAAf,gBAAA,CAAAK,IAAA,OAAAS,KAAA;UACVC,MAAK;QACN,KAAAC,QAAA,CAAAF,KAAA,EAAAC,MAAA;MACF;IAAC,E,OACAE,GAAK;MACN,KAAAN,WAAA,CAAAO,KAAA,CAAAD,GAAA;IACF;EAES;oBACM,CAAAb,SAAG,CAAAe,SAAA;IACjB,IAAI,CAACC,SAAA,EAAW;IACjB,KAAAT,WAAA,CAAAU,QAAA;EAEO;oBACF,CAAAjB,SAAoB,CAAAY,QAAA,aAAqBF,KAAA,EAAAQ,QAAA;IAC7C,IAAIC,YAAS,GAAM,KAAAC,oBAAA;IACnB,IAAI,CAACV,KAAA,GAAQA,KAAG;IAChB,IAAI,CAAAW,QAAA,GAAY,IAAE;QAChBF,YAAY,EAAC;MACbA,YAAY,CAAAG,WAAY,CAAC,CAAC;MAC3B,KAAAC,MAAA,CAAAJ,YAAA;IAED;IACAA,YAAI,GAAA1B,cAAiB,CAAAyB,QAAa,EAAM,IAAExB,qBAAA;QACxCyB,YAAS,IAAK,CAAAA,YAAA,CAAAK,MAAoB,EAAG;MACtC,KAAAC,GAAA,MAAAL,oBAAA,GAAAD,YAAA;IACF;EAED;oBACgB,CAAAnB,SAAG,CAAA0B,UAAA;IAClB,KAAAV,SAAA;EAED;oBACgB,CAAAhB,SAAG,CAAA2B,cAAA;IAClB,KAAAX,SAAA;EAED;oBACW,CAAAhB,SAAU,CAAAgB,SAAA;QACjB,IAAM,CAAAK,QAAQ;MACd,IAAMX,KAAA,OAAY,CAAAA,KAAG;MACrB,IAAIS,YAAY,GAAE,KAAAC,oBAAA;UAChBD,YAAK;QACL,KAAAC,oBAAwB,GAAGQ,SAAA;QAC3BT,YAAY,CAAAG,WAAY,CAAC,CAAC;QAC3B,KAAAC,MAAA,CAAAJ,YAAA;MAMD;MACA,IAAI,CAACT,KAAA,GAAQkB,SAAS;MACtB,KAAAP,QAAA,QAAM;MACPhB,MAAA,CAAAL,SAAA,CAAAS,KAAA,CAAAR,IAAA,OAAAS,KAAA;IACF;EACH;EArEuC,OAAAN,kBAqEtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}