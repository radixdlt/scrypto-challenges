{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function sample(notifier) {\n  return function (source) {\n    return source.lift(new SampleOperator(notifier));\n  };\n}\nvar SampleOperator = /*@__PURE__*/function () {\n  function SampleOperator(notifier) {\n    this.notifier = notifier;\n  }\n  SampleOperator.prototype.call = function (subscriber, source) {\n    var sampleSubscriber = new SampleSubscriber(subscriber);\n    var subscription = source.subscribe(sampleSubscriber);\n    subscription.add(innerSubscribe(this.notifier, new SimpleInnerSubscriber(sampleSubscriber)));\n    return subscription;\n  };\n  return SampleOperator;\n}();\nvar SampleSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SampleSubscriber, _super);\n  function SampleSubscriber() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.hasValue = false;\n    return _this;\n  }\n  SampleSubscriber.prototype._next = function (value) {\n    this.value = value;\n    this.hasValue = true;\n  };\n  SampleSubscriber.prototype.notifyNext = function () {\n    this.emitValue();\n  };\n  SampleSubscriber.prototype.notifyComplete = function () {\n    this.emitValue();\n  };\n  SampleSubscriber.prototype.emitValue = function () {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  };\n  return SampleSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"names":["tslib_1","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","sample","notifier","source","lift","SampleOperator","prototype","call","subscriber","sampleSubscriber","SampleSubscriber","subscription","subscribe","add","_super","__extends","_this","apply","arguments","_next","value","hasValue","notifyNext","emitValue","notifyComplete","destination","next"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/sample.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * ![](sample.png)\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * ## Example\n * On every click, sample the most recent \"seconds\" timer\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { sample } from 'rxjs/operators';\n *\n * const seconds = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = seconds.pipe(sample(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(innerSubscribe(this.notifier, new SimpleInnerSubscriber(sampleSubscriber)));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  private value?: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next!(this.value!);\n    }\n  }\n}\n"],"mappings":";AAKA,OAAO,KAAEA,OAAA,aAAuB;AA0ChC,SAAMC,qBAAoB,EAAyBC,cAAA,EAAAC,qBAAA;OACjD,SAAOC,MAACA,CAAAC,QAA0B;EACnC,iBAAAC,MAAA;IAAA,OAAAA,MAAA,CAAAC,IAAA,KAAAC,cAAA,CAAAH,QAAA;EAAA;AAED;IACEG,cAAA,gBAA6C;WAAzBA,eAAAH,QAAyB;IAC5C,KAAAA,QAAA,GAAAA,QAAA;EAED;gBACQ,CAAAI,SAAgB,CAAAC,IAAG,GAAI,UAAAC,UAAiB,EAAAL,MAAY;IAC1D,IAAMM,gBAAe,OAAOC,gBAAU,CAAAF,UAAkB;IACxD,IAAAG,YAAgB,GAACR,MAAA,CAAAS,SAAe,CAAIH,gBAAe;IACnDE,YAAO,CAAAE,GAAA,CAAAd,cAAa,MAAAG,QAAA,MAAAF,qBAAA,CAAAS,gBAAA;IACrB,OAAAE,YAAA;EACH;EAVA,OAUCN,cAAA;AAOD;IAAqCK,gBAAA,0BAA2BI,MAAA;EAAhEjB,OAAA,CAAAkB,SAAA,CAAAL,gBAAA,EAAAI,MAAA;WAAAJ,iBAAA;IAEU,IAAAM,KAAA,GAAAF,MAAoB,KAAM,QAAAA,MAAA,CAAAG,KAAA,OAAAC,SAAA;;IAqBnC,OAAAF,KAAA;EAnBW;kBACE,CAAGV,SAAM,CAAAa,KAAA,aAAAC,KAAA;IACnB,IAAI,CAACA,KAAA,GAAQA,KAAG;IACjB,KAAAC,QAAA;EAED;kBACO,CAAAf,SAAY,CAAAgB,UAAA;IAClB,KAAAC,SAAA;EAED;kBACO,CAAAjB,SAAY,CAAAkB,cAAA;IAClB,KAAAD,SAAA;EAED;kBACW,CAAAjB,SAAU,CAAAiB,SAAA;QACjB,IAAI,CAACF,QAAQ;MACb,IAAI,CAACA,QAAA,GAAW,KAAM;MACvB,KAAAI,WAAA,CAAAC,IAAA,MAAAN,KAAA;IACF;EACH;EAvBqC,OAAAV,gBAuBpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}