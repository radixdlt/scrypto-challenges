{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\nimport { immediateProvider } from './immediateProvider';\nvar AsapAction = function (_super) {\n  __extends(AsapAction, _super);\n  function AsapAction(scheduler, work) {\n    var _this = _super.call(this, scheduler, work) || this;\n    _this.scheduler = scheduler;\n    _this.work = work;\n    return _this;\n  }\n  AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    if (delay !== null && delay > 0) {\n      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n    }\n    scheduler.actions.push(this);\n    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));\n  };\n  AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    if (delay != null && delay > 0 || delay == null && this.delay > 0) {\n      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n    }\n    if (scheduler.actions.length === 0) {\n      immediateProvider.clearImmediate(id);\n      scheduler._scheduled = undefined;\n    }\n    return undefined;\n  };\n  return AsapAction;\n}(AsyncAction);\nexport { AsapAction };","map":{"version":3,"names":["AsyncAction","immediateProvider","AsapAction","_super","__extends","scheduler","work","_this","call","prototype","requestAsyncId","id","delay","actions","push","_scheduled","setImmediate","flush","bind","undefined","recycleAsyncId","length","clearImmediate"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/rxjs/src/internal/scheduler/AsapAction.ts"],"sourcesContent":["import { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\nimport { SchedulerAction } from '../types';\nimport { immediateProvider } from './immediateProvider';\n\nexport class AsapAction<T> extends AsyncAction<T> {\n  constructor(protected scheduler: AsapScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      immediateProvider.clearImmediate(id);\n      scheduler._scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,eAAe;AAG3C,SAASC,iBAAiB,QAAQ,qBAAqB;AAEvD,IAAAC,UAAA,aAAAC,MAAA;EAAmCC,SAAA,CAAAF,UAAA,EAAAC,MAAA;EACjC,SAAAD,WAAsBG,SAAwB,EAAYC,IAAmD;IAA7G,IAAAC,KAAA,GACEJ,MAAA,CAAAK,IAAA,OAAMH,SAAS,EAAEC,IAAI,CAAC;IADFC,KAAA,CAAAF,SAAS,GAATA,SAAS;IAA2BE,KAAA,CAAAD,IAAI,GAAJA,IAAI;;EAE9D;EAEUJ,UAAA,CAAAO,SAAA,CAAAC,cAAc,GAAxB,UAAyBL,SAAwB,EAAEM,EAAQ,EAAEC,KAAiB;IAAjB,IAAAA,KAAA;MAAAA,KAAA,IAAiB;IAAA;IAE5E,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,GAAG,CAAC,EAAE;MAC/B,OAAOT,MAAA,CAAAM,SAAA,CAAMC,cAAc,CAAAF,IAAA,OAACH,SAAS,EAAEM,EAAE,EAAEC,KAAK,CAAC;;IAGnDP,SAAS,CAACQ,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;IAI5B,OAAOT,SAAS,CAACU,UAAU,KAAKV,SAAS,CAACU,UAAU,GAAGd,iBAAiB,CAACe,YAAY,CAACX,SAAS,CAACY,KAAK,CAACC,IAAI,CAACb,SAAS,EAAEc,SAAS,CAAC,CAAC,CAAC;EACpI,CAAC;EACSjB,UAAA,CAAAO,SAAA,CAAAW,cAAc,GAAxB,UAAyBf,SAAwB,EAAEM,EAAQ,EAAEC,KAAiB;IAAjB,IAAAA,KAAA;MAAAA,KAAA,IAAiB;IAAA;IAI5E,IAAKA,KAAK,IAAI,IAAI,IAAIA,KAAK,GAAG,CAAC,IAAMA,KAAK,IAAI,IAAI,IAAI,IAAI,CAACA,KAAK,GAAG,CAAE,EAAE;MACrE,OAAOT,MAAA,CAAAM,SAAA,CAAMW,cAAc,CAAAZ,IAAA,OAACH,SAAS,EAAEM,EAAE,EAAEC,KAAK,CAAC;;IAKnD,IAAIP,SAAS,CAACQ,OAAO,CAACQ,MAAM,KAAK,CAAC,EAAE;MAClCpB,iBAAiB,CAACqB,cAAc,CAACX,EAAE,CAAC;MACpCN,SAAS,CAACU,UAAU,GAAGI,SAAS;;IAGlC,OAAOA,SAAS;EAClB,CAAC;EACH,OAAAjB,UAAC;AAAD,CAAC,CAlCkCF,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}