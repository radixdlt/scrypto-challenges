{"ast":null,"code":"/** PURE_IMPORTS_START _scheduler_async,_map PURE_IMPORTS_END */\nimport { async } from '../scheduler/async';\nimport { map } from './map';\nexport function timestamp(scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async;\n  }\n  return map(function (value) {\n    return new Timestamp(value, scheduler.now());\n  });\n}\nvar Timestamp = /*@__PURE__*/function () {\n  function Timestamp(value, timestamp) {\n    this.value = value;\n    this.timestamp = timestamp;\n  }\n  return Timestamp;\n}();\nexport { Timestamp };","map":{"version":3,"names":["async","map","timestamp","scheduler","value","Timestamp","now"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/timestamp.ts"],"sourcesContent":["\nimport { async } from '../scheduler/async';\nimport { OperatorFunction, SchedulerLike, Timestamp as TimestampInterface } from '../types';\nimport { map } from './map';\n\n/**\n * Attaches a timestamp to each item emitted by an observable indicating when it was emitted\n *\n * The `timestamp` operator maps the *source* observable stream to an object of type\n * `{value: T, timestamp: R}`. The properties are generically typed. The `value` property contains the value\n * and type of the *source* observable. The `timestamp` is generated by the schedulers `now` function. By\n * default it uses the *async* scheduler which simply returns `Date.now()` (milliseconds since 1970/01/01\n * 00:00:00:000) and therefore is of type `number`.\n *\n * ![](timestamp.png)\n *\n * ## Example\n *\n * In this example there is a timestamp attached to the documents click event.\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { timestamp } from 'rxjs/operators';\n *\n * const clickWithTimestamp = fromEvent(document, 'click').pipe(\n *   timestamp()\n * );\n *\n * // Emits data of type {value: MouseEvent, timestamp: number}\n * clickWithTimestamp.subscribe(data => {\n *   console.log(data);\n * });\n * ```\n *\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(scheduler: SchedulerLike = async): OperatorFunction<T, Timestamp<T>> {\n  return map((value: T) => new Timestamp(value, scheduler.now()));\n  // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> implements TimestampInterface<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n}\n"],"mappings":"AACA;AAEA,SAASA,KAAK,QAAM,oBAAQ;AAoC5B,SAAMC,GAAA,QAAU,OAAa;OAAA,SAAAC,UAAAC,SAAA;EAC3B,IAAAA,SAAW,UAAC,GAAQ;IAErBA,SAAA,GAAAH,KAAA;EAED;EACE,OAAAC,GAAA,WAAmBG,KAAiB;IAAA,OAAiB,IAAAC,SAAA,CAAAD,KAAA,EAAAD,SAAA,CAAAG,GAAA;EAAA;;aAAjB,4BAAiB;EACrD,SAACD,UAAAD,KAAA,EAAAF,SAAA;IACH,KAAAE,KAAA,GAACA,KAAA;IAAA,KAAAF,SAAA,GAAAA,SAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}