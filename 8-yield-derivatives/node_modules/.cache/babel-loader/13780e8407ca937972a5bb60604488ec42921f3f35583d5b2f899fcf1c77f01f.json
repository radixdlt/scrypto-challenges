{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function catchError(selector) {\n  return function catchErrorOperatorFunction(source) {\n    var operator = new CatchOperator(selector);\n    var caught = source.lift(operator);\n    return operator.caught = caught;\n  };\n}\nvar CatchOperator = /*@__PURE__*/function () {\n  function CatchOperator(selector) {\n    this.selector = selector;\n  }\n  CatchOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  };\n  return CatchOperator;\n}();\nvar CatchSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(CatchSubscriber, _super);\n  function CatchSubscriber(destination, selector, caught) {\n    var _this = _super.call(this, destination) || this;\n    _this.selector = selector;\n    _this.caught = caught;\n    return _this;\n  }\n  CatchSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var result = void 0;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        _super.prototype.error.call(this, err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      var innerSubscriber = new SimpleInnerSubscriber(this);\n      this.add(innerSubscriber);\n      var innerSubscription = innerSubscribe(result, innerSubscriber);\n      if (innerSubscription !== innerSubscriber) {\n        this.add(innerSubscription);\n      }\n    }\n  };\n  return CatchSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"names":["tslib_1","SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","catchError","selector","catchErrorOperatorFunction","source","operator","CatchOperator","caught","lift","prototype","call","subscriber","subscribe","CatchSubscriber","_super","__extends","destination","_this","error","err","isStopped","result","err2","_unsubscribeAndRecycle","innerSubscriber","add","innerSubscription"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/catchError.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\n\n/* tslint:disable:max-line-length */\nexport function catchError<T, O extends ObservableInput<any>>(selector: (err: any, caught: Observable<T>) => O): OperatorFunction<T, T | ObservedValueOf<O>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * ![](catch.png)\n *\n * ## Examples\n * Continues with a different Observable when there's an error\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { map, catchError } from 'rxjs/operators';\n *\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *   \t   if (n === 4) {\n * \t       throw 'four!';\n *       }\n *\t     return n;\n *     }),\n *     catchError(err => of('I', 'II', 'III', 'IV', 'V')),\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n * ```\n *\n * Retries the caught source Observable again in case of error, similar to retry() operator\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { map, catchError, take } from 'rxjs/operators';\n *\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *   \t   if (n === 4) {\n *   \t     throw 'four!';\n *       }\n * \t     return n;\n *     }),\n *     catchError((err, caught) => caught),\n *     take(30),\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n * ```\n *\n * Throws a new error when the source Observable throws an error\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { map, catchError } from 'rxjs/operators';\n *\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError(err => {\n *       throw 'error in source. Details: ' + err;\n *     }),\n *   )\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n * ```\n *\n *  @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, O extends ObservableInput<any>>(\n  selector: (err: any, caught: Observable<T>) => O\n): OperatorFunction<T, T | ObservedValueOf<O>> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | ObservedValueOf<O>> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends SimpleOuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      const innerSubscriber = new SimpleInnerSubscriber(this);\n      this.add(innerSubscriber);\n      const innerSubscription = innerSubscribe(result, innerSubscriber);\n      // The returned subscription will usually be the subscriber that was\n      // passed. However, interop subscribers will be wrapped and for\n      // unsubscriptions to chain correctly, the wrapper needs to be added, too.\n      if (innerSubscription !== innerSubscriber) {\n        this.add(innerSubscription);\n      }\n    }\n  }\n}\n"],"mappings":";AAKA,OAAO,KAAEA,OAAA,aAAuB;AAkFhC,SAAMC,qBACJ,EAAAC,qBAAgD,EAAAC,cAAA;OAEhD,SAAOC,UAASA,CAAAC,QAAA;SACd,SAAcC,0BAAqBA,CAAAC,MAAU;IAC7C,IAAMC,QAAM,GAAG,IAAMC,aAAM,CAAQJ,QAAE;IACrC,IAAAK,MAAQ,GAAAH,MAAS,CAAAI,IAAM,CAAAH,QAA2B,CAAC;IACnD,OAAAA,QAAA,CAAAE,MAAA,GAAAA,MAAA;EACH;AAED;IAGED,aAAA,gBAAyF;WAArEA,cAAAJ,QAAqE;IACxF,KAAAA,QAAA,GAAAA,QAAA;EAED;eACS,CAAAO,SAAO,CAAAC,IAAU,aAAIC,UAAgB,EAAAP,MAAU,EAAE;IACzD,OAAAA,MAAA,CAAAQ,SAAA,KAAAC,eAAA,CAAAF,UAAA,OAAAT,QAAA,OAAAK,MAAA;EACH;EATA,OASCD,aAAA;AAOD;IAAoCO,eAAA,0BAA+BC,MAAA;EACjEjB,OAAA,CAAAkB,SAAA,CAAAF,eAAY,EAAAC,MACQ;WADpBD,eAGEA,CAAAG,WAAM,EAAAd,QAAY,EAAAK,MAAA,EACnB;IAHmB,IAAAU,KAAA,GAAAH,MAAA,CAAAJ,IAAA,KAAqE,EAAAM,WAAA;IACrEC,KAAA,CAAAf,QAAM,GAANA,QAAqB;;IAExC,OAAAe,KAAA;EAOD;iBACY,CAAAR,SAAW,CAAAS,KAAA,aAAAC,GAAA;QACnB,KAAI,CAAAC,SAAM;MACV,IAAIC,MAAA;UACF;QACDA,MAAA,QAAAnB,QAAA,CAAAiB,GAAA,OAAAZ,MAAA;MAAC,E,OACAe,IAAA;QACAR,MAAA,CAAOL,SAAA,CAAAS,KAAA,CAAAR,IAAA,OAAAY,IAAA;QACR;MACD;MACA,IAAM,CAAAC,sBAAsB;MAC5B,IAAIC,eAAK,OAAiBzB,qBAAA;MAC1B,IAAM,CAAA0B,GAAA,CAAAD,eAAoB;MAI1B,IAAIE,iBAAiB,GAAA1B,cAAK,CAAAqB,MAAiB,EAAAG,eAAA;UACzCE,iBAAS,KAAAF,eAAmB;QAC7B,KAAAC,GAAA,CAAAC,iBAAA;MACF;IACF;EACH;EAjCoC,OAAAb,eAiCnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}