{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAPI = void 0;\nconst responseHandlers_1 = require(\"./responseHandlers\");\nconst ramda_1 = require(\"ramda\");\nconst callAPIWith = call => method => handleResponse => (params, headers) => (0, ramda_1.pipe)(() => call(method, params, headers), result => result.mapErr(e => [e]).andThen(handleResponse))();\nexports.getAPI = (0, ramda_1.pipe)(call => callAPIWith(call), callAPI => ({\n  gateway: callAPI('gatewayPost')(responseHandlers_1.handleGatewayResponse),\n  tokenInfo: callAPI('tokenPost')(responseHandlers_1.handleTokenInfoResponse),\n  nativeTokenInfo: callAPI('tokenNativePost')(responseHandlers_1.handleNativeTokenResponse),\n  stakePositions: callAPI('accountStakesPost')(responseHandlers_1.handleStakePositionsResponse),\n  unstakePositions: callAPI('accountUnstakesPost')(responseHandlers_1.handleUnstakePositionsResponse),\n  /*\n  deriveTokenIdentifier: callAPI('tokenDerivePost')(\n      handleDeriveTokenIdentifierResponse,\n  ),\n  */\n  accountBalances: callAPI('accountBalancesPost')(responseHandlers_1.handleAccountBalancesResponse),\n  accountTransactions: callAPI('accountTransactionsPost')(responseHandlers_1.handleAccountTransactionsResponse),\n  validator: callAPI('validatorPost')(responseHandlers_1.handleValidatorResponse),\n  validators: callAPI('validatorsPost')(responseHandlers_1.handleValidatorsResponse),\n  /*\n  transactionRules: callAPI('transactionRulesPost')(\n      handleTransactionRulesResponse,\n  ),\n  */\n  buildTransaction: callAPI('transactionBuildPost')(responseHandlers_1.handleBuildTransactionResponse),\n  finalizeTransaction: callAPI('transactionFinalizePost')(responseHandlers_1.handleFinalizeTransactionResponse),\n  submitTransaction: callAPI('transactionSubmitPost')(responseHandlers_1.handleSubmitTransactionResponse),\n  getTransaction: callAPI('transactionStatusPost')(responseHandlers_1.handleTransactionResponse),\n  recentTransactions: callAPI('transactionRecentPost')(responseHandlers_1.handleRecentTransactionResponse)\n}));","map":{"version":3,"names":["responseHandlers_1","require","ramda_1","callAPIWith","call","method","handleResponse","params","headers","pipe","result","mapErr","e","andThen","exports","getAPI","callAPI","gateway","handleGatewayResponse","tokenInfo","handleTokenInfoResponse","nativeTokenInfo","handleNativeTokenResponse","stakePositions","handleStakePositionsResponse","unstakePositions","handleUnstakePositionsResponse","accountBalances","handleAccountBalancesResponse","accountTransactions","handleAccountTransactionsResponse","validator","handleValidatorResponse","validators","handleValidatorsResponse","buildTransaction","handleBuildTransactionResponse","finalizeTransaction","handleFinalizeTransactionResponse","submitTransaction","handleSubmitTransactionResponse","getTransaction","handleTransactionResponse","recentTransactions","handleRecentTransactionResponse"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/application/src/api/open-api/interface.ts"],"sourcesContent":["import {\n\tInputOfAPICall,\n\tMethodName,\n\tOpenApiClientCall,\n\tReturnOfAPICall,\n} from '@radixdlt/networking'\nimport {\n\thandleAccountBalancesResponse,\n\thandleNativeTokenResponse,\n\thandleGatewayResponse,\n\thandleStakePositionsResponse,\n\thandleTokenInfoResponse,\n\thandleUnstakePositionsResponse,\n\thandleBuildTransactionResponse,\n\thandleFinalizeTransactionResponse,\n\thandleSubmitTransactionResponse,\n\thandleTransactionResponse,\n\thandleAccountTransactionsResponse,\n\thandleValidatorResponse,\n\thandleValidatorsResponse,\n\thandleRecentTransactionResponse,\n} from './responseHandlers'\nimport { pipe } from 'ramda'\nimport { Result, ResultAsync } from 'neverthrow'\n\nconst callAPIWith = (call: OpenApiClientCall) => <M extends MethodName>(\n\tmethod: M,\n) => <DecodedResponse>(\n\thandleResponse: (\n\t\tresponse: ReturnOfAPICall<M>,\n\t) => Result<DecodedResponse, Error[]>,\n) => (\n\tparams: InputOfAPICall<M>,\n\theaders?: Record<string, string>,\n): ResultAsync<DecodedResponse, Error[]> =>\n\tpipe(\n\t\t() => call(method, params, headers),\n\t\tresult => result.mapErr(e => [e]).andThen(handleResponse),\n\t)()\n\nexport const getAPI = pipe(\n\t(call: OpenApiClientCall) => callAPIWith(call),\n\n\tcallAPI => ({\n\t\tgateway: callAPI('gatewayPost')(handleGatewayResponse),\n\t\ttokenInfo: callAPI('tokenPost')(handleTokenInfoResponse),\n\t\tnativeTokenInfo: callAPI('tokenNativePost')(handleNativeTokenResponse),\n\t\tstakePositions: callAPI('accountStakesPost')(\n\t\t\thandleStakePositionsResponse,\n\t\t),\n\t\tunstakePositions: callAPI('accountUnstakesPost')(\n\t\t\thandleUnstakePositionsResponse,\n\t\t),\n\t\t/*\n\t\tderiveTokenIdentifier: callAPI('tokenDerivePost')(\n\t\t\thandleDeriveTokenIdentifierResponse,\n\t\t),\n\t\t*/\n\t\taccountBalances: callAPI('accountBalancesPost')(\n\t\t\thandleAccountBalancesResponse,\n\t\t),\n\t\taccountTransactions: callAPI('accountTransactionsPost')(\n\t\t\thandleAccountTransactionsResponse,\n\t\t),\n\t\tvalidator: callAPI('validatorPost')(handleValidatorResponse),\n\t\tvalidators: callAPI('validatorsPost')(handleValidatorsResponse),\n\t\t/*\n\t\ttransactionRules: callAPI('transactionRulesPost')(\n\t\t\thandleTransactionRulesResponse,\n\t\t),\n\t\t*/\n\t\tbuildTransaction: callAPI('transactionBuildPost')(\n\t\t\thandleBuildTransactionResponse,\n\t\t),\n\t\tfinalizeTransaction: callAPI('transactionFinalizePost')(\n\t\t\thandleFinalizeTransactionResponse,\n\t\t),\n\t\tsubmitTransaction: callAPI('transactionSubmitPost')(\n\t\t\thandleSubmitTransactionResponse,\n\t\t),\n\t\tgetTransaction: callAPI('transactionStatusPost')(\n\t\t\thandleTransactionResponse,\n\t\t),\n\t\trecentTransactions: callAPI('transactionRecentPost')(\n\t\t\thandleRecentTransactionResponse,\n\t\t),\n\t}),\n)\n"],"mappings":";;;;;;AAMA,MAAAA,kBAAA,GAAAC,OAAA;AAgBA,MAAAC,OAAA,GAAAD,OAAA;AAGA,MAAME,WAAW,GAAIC,IAAuB,IAC3CC,MAAS,IAETC,cAEqC,IACjC,CACJC,MAAyB,EACzBC,OAAgC,KAEhC,IAAAN,OAAA,CAAAO,IAAI,EACH,MAAML,IAAI,CAACC,MAAM,EAAEE,MAAM,EAAEC,OAAO,CAAC,EACnCE,MAAM,IAAIA,MAAM,CAACC,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAAC,CAAC,CAACC,OAAO,CAACP,cAAc,CAAC,CACzD,EAAE;AAESQ,OAAA,CAAAC,MAAM,GAAG,IAAAb,OAAA,CAAAO,IAAI,EACxBL,IAAuB,IAAKD,WAAW,CAACC,IAAI,CAAC,EAE9CY,OAAO,KAAK;EACXC,OAAO,EAAED,OAAO,CAAC,aAAa,CAAC,CAAChB,kBAAA,CAAAkB,qBAAqB,CAAC;EACtDC,SAAS,EAAEH,OAAO,CAAC,WAAW,CAAC,CAAChB,kBAAA,CAAAoB,uBAAuB,CAAC;EACxDC,eAAe,EAAEL,OAAO,CAAC,iBAAiB,CAAC,CAAChB,kBAAA,CAAAsB,yBAAyB,CAAC;EACtEC,cAAc,EAAEP,OAAO,CAAC,mBAAmB,CAAC,CAC3ChB,kBAAA,CAAAwB,4BAA4B,CAC5B;EACDC,gBAAgB,EAAET,OAAO,CAAC,qBAAqB,CAAC,CAC/ChB,kBAAA,CAAA0B,8BAA8B,CAC9B;EACD;;;;;EAKAC,eAAe,EAAEX,OAAO,CAAC,qBAAqB,CAAC,CAC9ChB,kBAAA,CAAA4B,6BAA6B,CAC7B;EACDC,mBAAmB,EAAEb,OAAO,CAAC,yBAAyB,CAAC,CACtDhB,kBAAA,CAAA8B,iCAAiC,CACjC;EACDC,SAAS,EAAEf,OAAO,CAAC,eAAe,CAAC,CAAChB,kBAAA,CAAAgC,uBAAuB,CAAC;EAC5DC,UAAU,EAAEjB,OAAO,CAAC,gBAAgB,CAAC,CAAChB,kBAAA,CAAAkC,wBAAwB,CAAC;EAC/D;;;;;EAKAC,gBAAgB,EAAEnB,OAAO,CAAC,sBAAsB,CAAC,CAChDhB,kBAAA,CAAAoC,8BAA8B,CAC9B;EACDC,mBAAmB,EAAErB,OAAO,CAAC,yBAAyB,CAAC,CACtDhB,kBAAA,CAAAsC,iCAAiC,CACjC;EACDC,iBAAiB,EAAEvB,OAAO,CAAC,uBAAuB,CAAC,CAClDhB,kBAAA,CAAAwC,+BAA+B,CAC/B;EACDC,cAAc,EAAEzB,OAAO,CAAC,uBAAuB,CAAC,CAC/ChB,kBAAA,CAAA0C,yBAAyB,CACzB;EACDC,kBAAkB,EAAE3B,OAAO,CAAC,uBAAuB,CAAC,CACnDhB,kBAAA,CAAA4C,+BAA+B;CAEhC,CAAC,CACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}