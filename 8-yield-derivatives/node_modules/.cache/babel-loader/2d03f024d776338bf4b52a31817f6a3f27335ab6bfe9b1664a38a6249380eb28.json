{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar cbor_1 = tslib_1.__importDefault(require(\"cbor\"));\nvar typescript_map_1 = require(\"typescript-map\");\nvar RadixLogger_1 = require(\"../../common/RadixLogger\");\nrequire(\"reflect-metadata\");\nvar RadixUtil_1 = require(\"../../common/RadixUtil\");\nexports.JSON_PROPERTIES_KEY = 'JSON_SERIALIZATION_PROPERTIES';\nexports.DSON_PROPERTIES_KEY = 'DSON_SERIALIZATION_PROPERTIES';\n/**\n * Decorator to register a property for JSON serialization.\n *   Stores property names in the prototype metadata\n * @param target\n * @param propertyName\n */\nfunction includeJSON(target, propertyName) {\n  registerPropertyForSerialization(target, propertyName, exports.JSON_PROPERTIES_KEY);\n}\nexports.includeJSON = includeJSON;\n/**\n * Decorator to register a property for DSON serialization.\n *   Stores property names in the prototype metadata\n * @param target\n * @param propertyName\n */\nfunction includeDSON(target, propertyName) {\n  registerPropertyForSerialization(target, propertyName, exports.DSON_PROPERTIES_KEY);\n}\nexports.includeDSON = includeDSON;\n/**\n * Registers property for serialization.\n *   Stores an array of property names in the prototype metadata.\n *   Inherits from the object prototype chain.\n * @param target\n * @param propertyName\n * @param metadataKey\n */\nfunction registerPropertyForSerialization(target, propertyName, metadataKey) {\n  // Avoid modifying parent metadata, clone instead\n  if (!Reflect.hasOwnMetadata(metadataKey, target)) {\n    var props = [];\n    if (Reflect.hasMetadata(metadataKey, target)) {\n      // Clone parent metadata\n      props = Reflect.getMetadata(metadataKey, target).slice(0);\n    }\n    Reflect.defineMetadata(metadataKey, props, target);\n  }\n  Reflect.getMetadata(metadataKey, target).push(propertyName);\n  Reflect.getMetadata(metadataKey, target).sort();\n}\nvar RadixSerializer = /** @class */function () {\n  function RadixSerializer() {}\n  /**\n   * Decorator to register a class for serialization\n   * @param serializer serializer id\n   * @returns\n   */\n  RadixSerializer.registerClass = function (serializer) {\n    var _this = this;\n    return function (constructor) {\n      constructor.SERIALIZER = serializer;\n      _this.classes.set(serializer, constructor);\n    };\n  };\n  /**\n   * Registers advanced 'primitive' types for serialization\n   * @param tag\n   * @returns\n   */\n  RadixSerializer.registerPrimitive = function (tag) {\n    var _this = this;\n    return function (constructor) {\n      _this.primitives.set(tag, constructor);\n    };\n  };\n  RadixSerializer.toJSON = function (data) {\n    var e_1, _a;\n    if (Array.isArray(data)) {\n      var output = [];\n      try {\n        for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {\n          var item = data_1_1.value;\n          output.push(RadixSerializer.toJSON(item));\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      return output;\n    } else if (typeof data === 'number' || typeof data === 'boolean') {\n      return data;\n    } else if (typeof data === 'string') {\n      return \":str:\" + data;\n    } else if (data !== null && typeof data === 'object') {\n      if (typeof data.toJSON === 'function') {\n        return data.toJSON();\n      } else {\n        var output = {};\n        for (var key in data) {\n          var serialized = RadixSerializer.toJSON(data[key]);\n          if (!RadixUtil_1.isEmpty(serialized)) {\n            output[key] = serialized;\n          }\n        }\n        return output;\n      }\n    }\n  };\n  RadixSerializer.fromJSON = function (json) {\n    var e_2, _a;\n    if (Array.isArray(json)) {\n      var output = [];\n      try {\n        for (var json_1 = tslib_1.__values(json), json_1_1 = json_1.next(); !json_1_1.done; json_1_1 = json_1.next()) {\n          var item = json_1_1.value;\n          output.push(RadixSerializer.fromJSON(item));\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (json_1_1 && !json_1_1.done && (_a = json_1.return)) _a.call(json_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n      return output;\n    } else if (typeof json === 'object') {\n      return RadixSerializer.fromJSONObject(json);\n    } else if (typeof json === 'string') {\n      // Advanced primitives\n      var tag = json.slice(0, 5);\n      if (tag === ':str:') {\n        return json.slice(5);\n      }\n      // Cast to a primitve class\n      if (this.primitives.has(tag)) {\n        return this.primitives.get(tag).fromJSON(json.slice(5));\n      }\n      RadixLogger_1.logger.warn(\"No matching class for primitive string \\\"\" + json + \"\\\"\");\n    } else {\n      return json;\n    }\n  };\n  RadixSerializer.fromJSONObject = function (jsonObject) {\n    var output = {};\n    for (var key in jsonObject) {\n      output[key] = key === 'serializer' ? jsonObject[key] : RadixSerializer.fromJSON(jsonObject[key]);\n    }\n    if ('serializer' in output) {\n      // tslint:disable-next-line:no-string-literal\n      var type = output['serializer'];\n      if (this.classes.has(type)) {\n        return this.classes.get(type).fromJSON(output);\n      }\n      RadixLogger_1.logger.warn(\"Serializer \\\"\" + type + \"\\\" not implemented\");\n    }\n    return output;\n  };\n  RadixSerializer.toDSON = function (data) {\n    var enc = new cbor_1.default.Encoder();\n    // Overide default object encoder to use stream encoding and lexicographical ordering of keys\n    enc.addSemanticType(Object, function (encoder, obj) {\n      var e_3, _a;\n      var keys = Object.keys(obj);\n      keys.sort();\n      if (!encoder.push(Buffer.from([191]))) {\n        return false;\n      }\n      try {\n        for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n          var key = keys_1_1.value;\n          if (RadixUtil_1.isEmpty(obj[key])) {\n            continue;\n          }\n          if (!encoder.pushAny(key)) {\n            return false;\n          }\n          if (!encoder.pushAny(obj[key])) {\n            return false;\n          }\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n      if (!encoder.push(Buffer.from([0xFF]))) {\n        return false;\n      }\n      return true;\n    });\n    return enc._encodeAll([data]);\n  };\n  RadixSerializer.classes = new typescript_map_1.TSMap();\n  RadixSerializer.primitives = new typescript_map_1.TSMap();\n  return RadixSerializer;\n}();\nexports.RadixSerializer = RadixSerializer;","map":{"version":3,"names":["cbor_1","tslib_1","__importDefault","require","typescript_map_1","RadixLogger_1","RadixUtil_1","exports","JSON_PROPERTIES_KEY","DSON_PROPERTIES_KEY","includeJSON","target","propertyName","registerPropertyForSerialization","includeDSON","metadataKey","Reflect","hasOwnMetadata","props","hasMetadata","getMetadata","slice","defineMetadata","push","sort","RadixSerializer","registerClass","serializer","_this","constructor","SERIALIZER","classes","set","registerPrimitive","tag","primitives","toJSON","data","Array","isArray","output","data_1","__values","data_1_1","next","done","item","value","key","serialized","isEmpty","fromJSON","json","json_1","json_1_1","fromJSONObject","has","get","logger","warn","jsonObject","type","toDSON","enc","default","Encoder","addSemanticType","Object","encoder","obj","keys","Buffer","from","keys_1","keys_1_1","pushAny","_encodeAll","TSMap"],"sources":["../../../../../src/modules/atommodel/serializer/RadixSerializer.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA,CAAAC,eAAA,CAAAC,OAAA;AAEA,IAAAC,gBAAA,GAAAD,OAAA;AAEA,IAAAE,aAAA,GAAAF,OAAA;AAGAA,OAAA;AACA,IAAAG,WAAA,GAAAH,OAAA;AAEaI,OAAA,CAAAC,mBAAmB,GAAG,+BAA+B;AACrDD,OAAA,CAAAE,mBAAmB,GAAG,+BAA+B;AAElE;;;;;;AAMA,SAAgBC,WAAWA,CAACC,MAA+B,EAAEC,YAAoB;EAC7EC,gCAAgC,CAACF,MAAM,EAAEC,YAAY,EAAEL,OAAA,CAAAC,mBAAmB,CAAC;AAC/E;AAFAD,OAAA,CAAAG,WAAA,GAAAA,WAAA;AAIA;;;;;;AAMA,SAAgBI,WAAWA,CAACH,MAA+B,EAAEC,YAAoB;EAC7EC,gCAAgC,CAACF,MAAM,EAAEC,YAAY,EAAEL,OAAA,CAAAE,mBAAmB,CAAC;AAC/E;AAFAF,OAAA,CAAAO,WAAA,GAAAA,WAAA;AAIA;;;;;;;;AAQA,SAASD,gCAAgCA,CAACF,MAA+B,EAAEC,YAAoB,EAAEG,WAAmB;EAChH;EACA,IAAI,CAACC,OAAO,CAACC,cAAc,CAACF,WAAW,EAAEJ,MAAM,CAAC,EAAE;IAC9C,IAAIO,KAAK,GAAG,EAAE;IACd,IAAIF,OAAO,CAACG,WAAW,CAACJ,WAAW,EAAEJ,MAAM,CAAC,EAAE;MAC1C;MACAO,KAAK,GAAGF,OAAO,CAACI,WAAW,CAACL,WAAW,EAAEJ,MAAM,CAAC,CAACU,KAAK,CAAC,CAAC,CAAC;;IAE7DL,OAAO,CAACM,cAAc,CAACP,WAAW,EAAEG,KAAK,EAAEP,MAAM,CAAC;;EAEtDK,OAAO,CAACI,WAAW,CAACL,WAAW,EAAEJ,MAAM,CAAC,CAACY,IAAI,CAACX,YAAY,CAAC;EAC3DI,OAAO,CAACI,WAAW,CAACL,WAAW,EAAEJ,MAAM,CAAC,CAACa,IAAI,EAAE;AACnD;AAEA,IAAAC,eAAA;EAAA,SAAAA,gBAAA,GA0IA;EArII;;;;;EAKcA,eAAA,CAAAC,aAAa,GAA3B,UAA4BC,UAAkB;IAA9C,IAAAC,KAAA;IACI,OAAO,UAACC,WAA2C;MAC/CA,WAAW,CAACC,UAAU,GAAGH,UAAU;MAEnCC,KAAI,CAACG,OAAO,CAACC,GAAG,CAACL,UAAU,EAAEE,WAAW,CAAC;IAC7C,CAAC;EACL,CAAC;EAED;;;;;EAKcJ,eAAA,CAAAQ,iBAAiB,GAA/B,UAAgCC,GAAW;IAA3C,IAAAN,KAAA;IACI,OAAO,UAACC,WAA2D;MAC/DD,KAAI,CAACO,UAAU,CAACH,GAAG,CAACE,GAAG,EAAEL,WAAW,CAAC;IACzC,CAAC;EACL,CAAC;EAEaJ,eAAA,CAAAW,MAAM,GAApB,UAAqBC,IAAS;;IAC1B,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;MACrB,IAAMG,MAAM,GAAG,EAAE;;QACjB,KAAmB,IAAAC,MAAA,GAAAxC,OAAA,CAAAyC,QAAA,CAAAL,IAAI,GAAAM,QAAA,GAAAF,MAAA,CAAAG,IAAA,KAAAD,QAAA,CAAAE,IAAA,EAAAF,QAAA,GAAAF,MAAA,CAAAG,IAAA,IAAE;UAApB,IAAME,IAAI,GAAAH,QAAA,CAAAI,KAAA;UACXP,MAAM,CAACjB,IAAI,CAACE,eAAe,CAACW,MAAM,CAACU,IAAI,CAAC,CAAC;;;;;;;;;;;;;MAE7C,OAAON,MAAM;KAChB,MAAM,IACH,OAAOH,IAAI,KAAK,QAAQ,IACxB,OAAOA,IAAI,KAAK,SAAS,EAC3B;MACE,OAAOA,IAAI;KACd,MAAM,IACH,OAAOA,IAAI,KAAK,QAAQ,EAC1B;MACE,OAAO,UAAQA,IAAM;KACxB,MAAM,IAAIA,IAAI,KAAK,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAClD,IAAI,OAAOA,IAAI,CAACD,MAAM,KAAK,UAAU,EAAE;QACnC,OAAOC,IAAI,CAACD,MAAM,EAAE;OACvB,MAAM;QACH,IAAMI,MAAM,GAAG,EAAE;QACjB,KAAK,IAAMQ,GAAG,IAAIX,IAAI,EAAE;UACpB,IAAMY,UAAU,GAAGxB,eAAe,CAACW,MAAM,CAACC,IAAI,CAACW,GAAG,CAAC,CAAC;UACpD,IAAI,CAAC1C,WAAA,CAAA4C,OAAO,CAACD,UAAU,CAAC,EAAE;YACtBT,MAAM,CAACQ,GAAG,CAAC,GAAGC,UAAU;;;QAIhC,OAAOT,MAAM;;;EAGzB,CAAC;EAEaf,eAAA,CAAA0B,QAAQ,GAAtB,UAAuBC,IAAS;;IAC5B,IAAId,KAAK,CAACC,OAAO,CAACa,IAAI,CAAC,EAAE;MACrB,IAAMZ,MAAM,GAAG,EAAE;;QACjB,KAAmB,IAAAa,MAAA,GAAApD,OAAA,CAAAyC,QAAA,CAAAU,IAAI,GAAAE,QAAA,GAAAD,MAAA,CAAAT,IAAA,KAAAU,QAAA,CAAAT,IAAA,EAAAS,QAAA,GAAAD,MAAA,CAAAT,IAAA,IAAE;UAApB,IAAME,IAAI,GAAAQ,QAAA,CAAAP,KAAA;UACXP,MAAM,CAACjB,IAAI,CAACE,eAAe,CAAC0B,QAAQ,CAACL,IAAI,CAAC,CAAC;;;;;;;;;;;;;MAE/C,OAAON,MAAM;KAChB,MAAM,IAAI,OAAOY,IAAI,KAAK,QAAQ,EAAE;MACjC,OAAO3B,eAAe,CAAC8B,cAAc,CAACH,IAAI,CAAC;KAC9C,MAAM,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MACjC;MACA,IAAMlB,GAAG,GAAIkB,IAAe,CAAC/B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;MAExC,IAAIa,GAAG,KAAK,OAAO,EAAE;QACjB,OAAQkB,IAAe,CAAC/B,KAAK,CAAC,CAAC,CAAC;;MAGpC;MACA,IAAI,IAAI,CAACc,UAAU,CAACqB,GAAG,CAACtB,GAAG,CAAC,EAAE;QAC1B,OAAO,IAAI,CAACC,UAAU,CAACsB,GAAG,CAACvB,GAAG,CAAC,CAACiB,QAAQ,CAAEC,IAAe,CAAC/B,KAAK,CAAC,CAAC,CAAC,CAAC;;MAGvEhB,aAAA,CAAAqD,MAAM,CAACC,IAAI,CAAC,8CAA2CP,IAAI,OAAG,CAAC;KAClE,MAAM;MACH,OAAOA,IAAI;;EAEnB,CAAC;EAEa3B,eAAA,CAAA8B,cAAc,GAA5B,UAA6BK,UAAkB;IAC3C,IAAMpB,MAAM,GAAG,EAAE;IAEjB,KAAK,IAAMQ,GAAG,IAAIY,UAAU,EAAE;MAC1BpB,MAAM,CAACQ,GAAG,CAAC,GAAIA,GAAG,KAAK,YAAY,GAAGY,UAAU,CAACZ,GAAG,CAAC,GAAGvB,eAAe,CAAC0B,QAAQ,CAACS,UAAU,CAACZ,GAAG,CAAC,CAAE;;IAGtG,IAAI,YAAY,IAAIR,MAAM,EAAE;MACxB;MACA,IAAMqB,IAAI,GAAWrB,MAAM,CAAC,YAAY,CAAC;MAEzC,IAAI,IAAI,CAACT,OAAO,CAACyB,GAAG,CAACK,IAAI,CAAC,EAAE;QACxB,OAAO,IAAI,CAAC9B,OAAO,CAAC0B,GAAG,CAACI,IAAI,CAAC,CAACV,QAAQ,CAACX,MAAM,CAAC;;MAGlDnC,aAAA,CAAAqD,MAAM,CAACC,IAAI,CAAC,kBAAeE,IAAI,uBAAmB,CAAC;;IAGvD,OAAOrB,MAAM;EACjB,CAAC;EAEaf,eAAA,CAAAqC,MAAM,GAApB,UAAqBzB,IAAS;IAC1B,IAAM0B,GAAG,GAAG,IAAI/D,MAAA,CAAAgE,OAAI,CAACC,OAAO,EAAE;IAE9B;IACAF,GAAG,CAACG,eAAe,CAACC,MAAM,EAAE,UAACC,OAAO,EAAEC,GAAG;;MACrC,IAAMC,IAAI,GAAGH,MAAM,CAACG,IAAI,CAACD,GAAG,CAAC;MAE7BC,IAAI,CAAC9C,IAAI,EAAE;MAEX,IAAI,CAAC4C,OAAO,CAAC7C,IAAI,CAACgD,MAAM,CAACC,IAAI,CAAC,CAAC,GAAW,CAAC,CAAC,CAAC,EAAE;QAAE,OAAO,KAAK;;;QAE7D,KAAkB,IAAAC,MAAA,GAAAxE,OAAA,CAAAyC,QAAA,CAAA4B,IAAI,GAAAI,QAAA,GAAAD,MAAA,CAAA7B,IAAA,KAAA8B,QAAA,CAAA7B,IAAA,EAAA6B,QAAA,GAAAD,MAAA,CAAA7B,IAAA,IAAE;UAAnB,IAAMI,GAAG,GAAA0B,QAAA,CAAA3B,KAAA;UACV,IAAIzC,WAAA,CAAA4C,OAAO,CAACmB,GAAG,CAACrB,GAAG,CAAC,CAAC,EAAE;YACnB;;UAGJ,IAAI,CAACoB,OAAO,CAACO,OAAO,CAAC3B,GAAG,CAAC,EAAE;YAAE,OAAO,KAAK;;UACzC,IAAI,CAACoB,OAAO,CAACO,OAAO,CAACN,GAAG,CAACrB,GAAG,CAAC,CAAC,EAAE;YAAE,OAAO,KAAK;;;;;;;;;;;;;;MAGlD,IAAI,CAACoB,OAAO,CAAC7C,IAAI,CAACgD,MAAM,CAACC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;QAAE,OAAO,KAAK;;MAEtD,OAAO,IAAI;IACf,CAAC,CAAC;IAEF,OAAOT,GAAG,CAACa,UAAU,CAAC,CAACvC,IAAI,CAAC,CAAC;EACjC,CAAC;EAvIcZ,eAAA,CAAAM,OAAO,GAAkD,IAAI3B,gBAAA,CAAAyE,KAAK,EAAE;EACpEpD,eAAA,CAAAU,UAAU,GAAkE,IAAI/B,gBAAA,CAAAyE,KAAK,EAAE;EAuI1G,OAAApD,eAAC;CAAA,CA1ID;AAAalB,OAAA,CAAAkB,eAAA,GAAAA,eAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}