{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar rxjs_1 = require(\"rxjs\");\nvar typescript_map_1 = require(\"typescript-map\");\nvar __1 = require(\"../..\");\nvar RadixLogger_1 = require(\"../common/RadixLogger\");\nvar atommodel_1 = require(\"../atommodel\");\nvar RadixUtil_1 = require(\"../common/RadixUtil\");\nvar RadixAccount = /** @class */function () {\n  /**\n   * Creates an instance of radix account.\n   * @param address Address of the account\n   * @param [plain] If set to false, will not create default account systems.\n   * Use this for accounts that will not be connected to the network\n   */\n  function RadixAccount(address, plain) {\n    var _this = this;\n    if (plain === void 0) {\n      plain = false;\n    }\n    this.address = address;\n    this.accountSystems = new typescript_map_1.TSMap();\n    this.synced = new rxjs_1.BehaviorSubject(false);\n    this.connectionStatus = new rxjs_1.BehaviorSubject('STARTING');\n    this.openNodeConnection = function () {\n      return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var _a, error_1;\n        return tslib_1.__generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              this.connectionStatus.next('CONNECTING');\n              _b.label = 1;\n            case 1:\n              _b.trys.push([1, 3,, 4]);\n              _a = this;\n              return [4 /*yield*/, __1.radixUniverse.getNodeConnection(this.address.getShard())];\n            case 2:\n              _a.nodeConnection = _b.sent();\n              this.nodeConnection.on('closed', this._onConnectionClosed);\n              // Subscribe to events\n              this.atomSubscription = this.nodeConnection.subscribe(this.address.toString());\n              this.atomSubscription.subscribe({\n                next: this._onAtomReceived,\n                error: function (error) {\n                  return RadixLogger_1.logger.error('Subscription error:', error);\n                }\n              });\n              this.connectionStatus.next('CONNECTED');\n              return [3 /*break*/, 4];\n            case 3:\n              error_1 = _b.sent();\n              RadixLogger_1.logger.error(error_1);\n              setTimeout(this._onConnectionClosed, 1000);\n              return [3 /*break*/, 4];\n            case 4:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n    /**\n     * Unsubscribes the node connection to the stream of past and future atoms associated with this address account\n     *\n     * @returns A promise with the result of the unsubscription call\n     */\n    this.closeNodeConnection = function () {\n      return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        return tslib_1.__generator(this, function (_a) {\n          this.connectionStatus.next('DISCONNECTED');\n          if (this.nodeConnection) {\n            this.nodeConnection.removeListener('closed', this._onConnectionClosed);\n            return [2 /*return*/, this.nodeConnection.unsubscribe(this.getAddress())];\n          }\n          return [2 /*return*/];\n        });\n      });\n    };\n    this._onAtomReceived = function (atomUpdate) {\n      return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var _a, _b, system, e_1_1;\n        var e_1, _c;\n        return tslib_1.__generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              _d.trys.push([0, 5, 6, 7]);\n              _a = tslib_1.__values(this.accountSystems.values()), _b = _a.next();\n              _d.label = 1;\n            case 1:\n              if (!!_b.done) return [3 /*break*/, 4];\n              system = _b.value;\n              return [4 /*yield*/, system.processAtomUpdate(atomUpdate)];\n            case 2:\n              _d.sent();\n              _d.label = 3;\n            case 3:\n              _b = _a.next();\n              return [3 /*break*/, 1];\n            case 4:\n              return [3 /*break*/, 7];\n            case 5:\n              e_1_1 = _d.sent();\n              e_1 = {\n                error: e_1_1\n              };\n              return [3 /*break*/, 7];\n            case 6:\n              try {\n                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n              } finally {\n                if (e_1) throw e_1.error;\n              }\n              return [7 /*endfinally*/];\n            case 7:\n              this.synced.next(atomUpdate.isHead);\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n    this._onConnectionClosed = function () {\n      // Get a new one\n      _this.openNodeConnection();\n    };\n    if (!plain) {\n      this.cacheSystem = new __1.RadixCacheAccountSystem(address);\n      this.addAccountSystem(this.cacheSystem);\n      this.decryptionSystem = new __1.RadixDecryptionAccountSystem();\n      this.addAccountSystem(this.decryptionSystem);\n      this.tokenDefinitionSystem = new __1.RadixTokenDefinitionAccountSystem(address);\n      this.addAccountSystem(this.tokenDefinitionSystem);\n      this.transferSystem = new __1.RadixTransferAccountSystem(address);\n      this.addAccountSystem(this.transferSystem);\n      this.dataSystem = new __1.RadixDataAccountSystem(address);\n      this.addAccountSystem(this.dataSystem);\n      this.messagingSystem = new __1.RadixMessagingAccountSystem(address);\n      this.addAccountSystem(this.messagingSystem);\n    }\n  }\n  /**\n   * Create an instance of radix account from an address\n   * @param address string address\n   * @param [plain] If set to false, will not create default account systems.\n   * Use this for accounts that will not be connected to the network\n   * @returns\n   */\n  RadixAccount.fromAddress = function (address, plain) {\n    if (plain === void 0) {\n      plain = false;\n    }\n    return new RadixAccount(atommodel_1.RadixAddress.fromAddress(address), plain);\n  };\n  /**\n   * Create an instance of a Radix account from an arbitrary byte buffer. This\n   * could e.g. be a friendly name of an account, in which case it would be\n   * created as <code>Buffer.from('friendly name')</code>.\n   *\n   * @param seed Buffer seed for the address\n   * @param [plain] If set to true, will not create default account systems.\n   * Use this for accounts that will not be connected to the network.\n   * @returns a new Radix account.\n   */\n  RadixAccount.fromSeed = function (seed, plain) {\n    if (plain === void 0) {\n      plain = false;\n    }\n    var hash = RadixUtil_1.radixHash(seed);\n    return new RadixAccount(atommodel_1.RadixAddress.fromPrivate(hash), plain);\n  };\n  RadixAccount.prototype.enableDecryption = function (decryptionProvider) {\n    this.decryptionSystem.decryptionProvider = decryptionProvider;\n  };\n  RadixAccount.prototype.enableCache = function (cacheProvider) {\n    var _this = this;\n    this.cacheSystem.atomCache = cacheProvider;\n    // Load atoms from cache\n    return this.cacheSystem.loadAtoms().then(function (atoms) {\n      var e_2, _a;\n      try {\n        for (var atoms_1 = tslib_1.__values(atoms), atoms_1_1 = atoms_1.next(); !atoms_1_1.done; atoms_1_1 = atoms_1.next()) {\n          var atom = atoms_1_1.value;\n          _this._onAtomReceived({\n            action: 'STORE',\n            atom: atom,\n            processedData: {},\n            isHead: false\n          });\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (atoms_1_1 && !atoms_1_1.done && (_a = atoms_1.return)) _a.call(atoms_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    });\n  };\n  RadixAccount.prototype.getAddress = function () {\n    return this.address.getAddress();\n  };\n  RadixAccount.prototype.addAccountSystem = function (system) {\n    if (this.accountSystems.has(system.name)) {\n      throw new Error(\"System \\\"\" + system.name + \"\\\" already exists in account, you can only have one of each system per account\");\n    }\n    this.accountSystems.set(system.name, system);\n    return system;\n  };\n  RadixAccount.prototype.removeAccountSystem = function (name) {\n    if (this.accountSystems.has(name)) {\n      this.accountSystems.delete(name);\n    }\n  };\n  RadixAccount.prototype.getSystem = function (name) {\n    if (this.accountSystems.has(name)) {\n      return this.accountSystems.get(name);\n    }\n    throw new Error(\"System \\\"\" + name + \"\\\" doesn't exist in account\");\n  };\n  /**\n   * An observable that tells you when the account is in sync with the network\n   *\n   * @returns An observable which sends 'true' whenever the account has received and processed new information form the network\n   */\n  RadixAccount.prototype.isSynced = function () {\n    return this.synced.share();\n  };\n  return RadixAccount;\n}();\nexports.default = RadixAccount;","map":{"version":3,"names":["rxjs_1","require","typescript_map_1","__1","RadixLogger_1","atommodel_1","RadixUtil_1","RadixAccount","address","plain","_this","accountSystems","TSMap","synced","BehaviorSubject","connectionStatus","openNodeConnection","tslib_1","__awaiter","next","_a","radixUniverse","getNodeConnection","getShard","nodeConnection","_b","sent","on","_onConnectionClosed","atomSubscription","subscribe","toString","_onAtomReceived","error","logger","error_1","setTimeout","closeNodeConnection","removeListener","unsubscribe","getAddress","atomUpdate","__values","values","system","value","processAtomUpdate","_d","isHead","cacheSystem","RadixCacheAccountSystem","addAccountSystem","decryptionSystem","RadixDecryptionAccountSystem","tokenDefinitionSystem","RadixTokenDefinitionAccountSystem","transferSystem","RadixTransferAccountSystem","dataSystem","RadixDataAccountSystem","messagingSystem","RadixMessagingAccountSystem","fromAddress","RadixAddress","fromSeed","seed","hash","radixHash","fromPrivate","prototype","enableDecryption","decryptionProvider","enableCache","cacheProvider","atomCache","loadAtoms","then","atoms","atoms_1","atoms_1_1","done","atom","action","processedData","has","name","Error","set","removeAccountSystem","delete","getSystem","get","isSynced","share"],"sources":["../../../../src/modules/account/RadixAccount.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}