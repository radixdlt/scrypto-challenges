{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar _a;\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport { decorateProperty } from './base.js';\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n/**\n * A tiny module scoped polyfill for HTMLSlotElement.assignedElements.\n */\nconst slotAssignedElements = ((_a = global.HTMLSlotElement) === null || _a === void 0 ? void 0 : _a.prototype.assignedElements) != null ? (slot, opts) => slot.assignedElements(opts) : (slot, opts) => slot.assignedNodes(opts).filter(node => node.nodeType === Node.ELEMENT_NODE);\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedElements` of the given `slot`. Provides a declarative\n * way to use\n * [`HTMLSlotElement.assignedElements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n *\n * Can be passed an optional {@linkcode QueryAssignedElementsOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedElements({ slot: 'list' })\n *   listItems!: Array<HTMLElement>;\n *   @queryAssignedElements()\n *   unnamedSlotEls!: Array<HTMLElement>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *       <slot></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note, the type of this property should be annotated as `Array<HTMLElement>`.\n *\n * @category Decorator\n */\nexport function queryAssignedElements(options) {\n  const {\n    slot,\n    selector\n  } = options !== null && options !== void 0 ? options : {};\n  return decorateProperty({\n    descriptor: _name => ({\n      get() {\n        var _a;\n        const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n        const slotEl = (_a = this.renderRoot) === null || _a === void 0 ? void 0 : _a.querySelector(slotSelector);\n        const elements = slotEl != null ? slotAssignedElements(slotEl, options) : [];\n        if (selector) {\n          return elements.filter(node => node.matches(selector));\n        }\n        return elements;\n      },\n      enumerable: true,\n      configurable: true\n    })\n  });\n}","map":{"version":3,"names":["decorateProperty","NODE_MODE","global","globalThis","window","slotAssignedElements","_a","HTMLSlotElement","prototype","assignedElements","slot","opts","assignedNodes","filter","node","nodeType","Node","ELEMENT_NODE","queryAssignedElements","options","selector","descriptor","_name","get","slotSelector","slotEl","renderRoot","querySelector","elements","matches","enumerable","configurable"],"sources":["/Users/mdabdurrazzak/scrypto-challenges/8-yield-derivatives/node_modules/@lit/reactive-element/src/decorators/query-assigned-elements.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {decorateProperty} from './base.js';\n\nimport type {ReactiveElement} from '../reactive-element.js';\nimport type {QueryAssignedNodesOptions} from './query-assigned-nodes.js';\n\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n\n/**\n * A tiny module scoped polyfill for HTMLSlotElement.assignedElements.\n */\nconst slotAssignedElements =\n  global.HTMLSlotElement?.prototype.assignedElements != null\n    ? (slot: HTMLSlotElement, opts?: AssignedNodesOptions) =>\n        slot.assignedElements(opts)\n    : (slot: HTMLSlotElement, opts?: AssignedNodesOptions) =>\n        slot\n          .assignedNodes(opts)\n          .filter(\n            (node): node is Element => node.nodeType === Node.ELEMENT_NODE\n          );\n\n/**\n * Options for the {@linkcode queryAssignedElements} decorator. Extends the\n * options that can be passed into\n * [HTMLSlotElement.assignedElements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n */\nexport interface QueryAssignedElementsOptions\n  extends QueryAssignedNodesOptions {\n  /**\n   * CSS selector used to filter the elements returned. For example, a selector\n   * of `\".item\"` will only include elements with the `item` class.\n   */\n  selector?: string;\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedElements` of the given `slot`. Provides a declarative\n * way to use\n * [`HTMLSlotElement.assignedElements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n *\n * Can be passed an optional {@linkcode QueryAssignedElementsOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedElements({ slot: 'list' })\n *   listItems!: Array<HTMLElement>;\n *   @queryAssignedElements()\n *   unnamedSlotEls!: Array<HTMLElement>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *       <slot></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note, the type of this property should be annotated as `Array<HTMLElement>`.\n *\n * @category Decorator\n */\nexport function queryAssignedElements(options?: QueryAssignedElementsOptions) {\n  const {slot, selector} = options ?? {};\n  return decorateProperty({\n    descriptor: (_name: PropertyKey) => ({\n      get(this: ReactiveElement) {\n        const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n        const slotEl =\n          this.renderRoot?.querySelector<HTMLSlotElement>(slotSelector);\n        const elements =\n          slotEl != null ? slotAssignedElements(slotEl, options) : [];\n        if (selector) {\n          return elements.filter((node) => node.matches(selector));\n        }\n        return elements;\n      },\n      enumerable: true,\n      configurable: true,\n    }),\n  });\n}\n"],"mappings":"AAAA;;;;;;AAMA;;;;;;AAOA,SAAQA,gBAAgB,QAAO,WAAW;AAK1C,MAAMC,SAAS,GAAG,KAAK;AACvB,MAAMC,MAAM,GAAGD,SAAS,GAAGE,UAAU,GAAGC,MAAM;AAE9C;;;AAGA,MAAMC,oBAAoB,GACxB,EAAAC,EAAA,GAAAJ,MAAM,CAACK,eAAe,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,SAAS,CAACC,gBAAgB,KAAI,IAAI,GACtD,CAACC,IAAqB,EAAEC,IAA2B,KACjDD,IAAI,CAACD,gBAAgB,CAACE,IAAI,CAAC,GAC7B,CAACD,IAAqB,EAAEC,IAA2B,KACjDD,IAAI,CACDE,aAAa,CAACD,IAAI,CAAC,CACnBE,MAAM,CACJC,IAAI,IAAsBA,IAAI,CAACC,QAAQ,KAAKC,IAAI,CAACC,YAAY,CAC/D;AAgBX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,OAAM,SAAUC,qBAAqBA,CAACC,OAAsC;EAC1E,MAAM;IAACT,IAAI;IAAEU;EAAQ,CAAC,GAAGD,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,EAAE;EACtC,OAAOnB,gBAAgB,CAAC;IACtBqB,UAAU,EAAGC,KAAkB,KAAM;MACnCC,GAAGA,CAAA;;QACD,MAAMC,YAAY,GAAG,OAAOd,IAAI,GAAG,SAASA,IAAI,GAAG,GAAG,cAAc,EAAE;QACtE,MAAMe,MAAM,GACV,CAAAnB,EAAA,OAAI,CAACoB,UAAU,cAAApB,EAAA,uBAAAA,EAAA,CAAEqB,aAAa,CAAkBH,YAAY,CAAC;QAC/D,MAAMI,QAAQ,GACZH,MAAM,IAAI,IAAI,GAAGpB,oBAAoB,CAACoB,MAAM,EAAEN,OAAO,CAAC,GAAG,EAAE;QAC7D,IAAIC,QAAQ,EAAE;UACZ,OAAOQ,QAAQ,CAACf,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACe,OAAO,CAACT,QAAQ,CAAC,CAAC;;QAE1D,OAAOQ,QAAQ;MACjB,CAAC;MACDE,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE;KACf;GACF,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}