{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst i = (i, e) => \"method\" === e.kind && e.descriptor && !(\"value\" in e.descriptor) ? {\n    ...e,\n    finisher(n) {\n      n.createProperty(e.key, i);\n    }\n  } : {\n    kind: \"field\",\n    key: Symbol(),\n    placement: \"own\",\n    descriptor: {},\n    originalKey: e.key,\n    initializer() {\n      \"function\" == typeof e.initializer && (this[e.key] = e.initializer.call(this));\n    },\n    finisher(n) {\n      n.createProperty(e.key, i);\n    }\n  },\n  e = (i, e, n) => {\n    e.constructor.createProperty(n, i);\n  };\nfunction n(n) {\n  return (t, o) => void 0 !== o ? e(n, t, o) : i(n, t);\n}\nexport { n as property };","map":{"version":3,"names":["i","standardProperty","e","kind","descriptor","finisher","n","createProperty","key","Symbol","placement","originalKey","initializer","call","legacyProperty","constructor","t","o","property"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@lit/reactive-element/src/decorators/property.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport {PropertyDeclaration, ReactiveElement} from '../reactive-element.js';\nimport {ClassElement} from './base.js';\n\nconst standardProperty = (\n  options: PropertyDeclaration,\n  element: ClassElement\n) => {\n  // When decorating an accessor, pass it through and add property metadata.\n  // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n  // stomp over the user's accessor.\n  if (\n    element.kind === 'method' &&\n    element.descriptor &&\n    !('value' in element.descriptor)\n  ) {\n    return {\n      ...element,\n      finisher(clazz: typeof ReactiveElement) {\n        clazz.createProperty(element.key, options);\n      },\n    };\n  } else {\n    // createProperty() takes care of defining the property, but we still\n    // must return some kind of descriptor, so return a descriptor for an\n    // unused prototype field. The finisher calls createProperty().\n    return {\n      kind: 'field',\n      key: Symbol(),\n      placement: 'own',\n      descriptor: {},\n      // store the original key so subsequent decorators have access to it.\n      originalKey: element.key,\n      // When @babel/plugin-proposal-decorators implements initializers,\n      // do this instead of the initializer below. See:\n      // https://github.com/babel/babel/issues/9260 extras: [\n      //   {\n      //     kind: 'initializer',\n      //     placement: 'own',\n      //     initializer: descriptor.initializer,\n      //   }\n      // ],\n      initializer(this: {[key: string]: unknown}) {\n        if (typeof element.initializer === 'function') {\n          this[element.key as string] = element.initializer.call(this);\n        }\n      },\n      finisher(clazz: typeof ReactiveElement) {\n        clazz.createProperty(element.key, options);\n      },\n    };\n  }\n};\n\nconst legacyProperty = (\n  options: PropertyDeclaration,\n  proto: Object,\n  name: PropertyKey\n) => {\n  (proto.constructor as typeof ReactiveElement).createProperty(name, options);\n};\n\n/**\n * A property decorator which creates a reactive property that reflects a\n * corresponding attribute value. When a decorated property is set\n * the element will update and render. A {@linkcode PropertyDeclaration} may\n * optionally be supplied to configure property features.\n *\n * This decorator should only be used for public fields. As public fields,\n * properties should be considered as primarily settable by element users,\n * either via attribute or the property itself.\n *\n * Generally, properties that are changed by the element should be private or\n * protected fields and should use the {@linkcode state} decorator.\n *\n * However, sometimes element code does need to set a public property. This\n * should typically only be done in response to user interaction, and an event\n * should be fired informing the user; for example, a checkbox sets its\n * `checked` property when clicked and fires a `changed` event. Mutating public\n * properties should typically not be done for non-primitive (object or array)\n * properties. In other cases when an element needs to manage state, a private\n * property decorated via the {@linkcode state} decorator should be used. When\n * needed, state properties can be initialized via public properties to\n * facilitate complex interactions.\n *\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (protoOrDescriptor: Object | ClassElement, name?: PropertyKey): any =>\n    name !== undefined\n      ? legacyProperty(options!, protoOrDescriptor as Object, name)\n      : standardProperty(options!, protoOrDescriptor as ClassElement);\n}\n"],"mappings":";;;;;AAeA,MAAMA,CAAA,GAAmBC,CACvBD,CAAA,EACAE,CAAA,KAMmB,aAAjBA,CAAA,CAAQC,IAAA,IACRD,CAAA,CAAQE,UAAA,MACN,WAAWF,CAAA,CAAQE,UAAA,IAEd;IAAA,GACFF,CAAA;IACHG,SAASC,CAAA;MACPA,CAAA,CAAMC,cAAA,CAAeL,CAAA,CAAQM,GAAA,EAAKR,CAAA,CACnC;IAAA;EAAA,IAMI;IACLG,IAAA,EAAM;IACNK,GAAA,EAAKC,MAAA;IACLC,SAAA,EAAW;IACXN,UAAA,EAAY,CAAE;IAEdO,WAAA,EAAaT,CAAA,CAAQM,GAAA;IAUrBI,YAAA;MACqC,qBAAxBV,CAAA,CAAQU,WAAA,KACjB,KAAKV,CAAA,CAAQM,GAAA,IAAiBN,CAAA,CAAQU,WAAA,CAAYC,IAAA,CAAK,MAE1D;IAAA;IACDR,SAASC,CAAA;MACPA,CAAA,CAAMC,cAAA,CAAeL,CAAA,CAAQM,GAAA,EAAKR,CAAA,CACnC;IAAA;EAAA;EAKDE,CAAA,GAAiBY,CACrBd,CAAA,EACAE,CAAA,EACAI,CAAA;IAECJ,CAAA,CAAMa,WAAA,CAAuCR,cAAA,CAAeD,CAAA,EAAMN,CAAA,CAAQ;EAAA;AAmCvE,SAAUM,EAASA,CAAA;EAEvB,OAAO,CAACU,CAAA,EAA0CC,CAAA,UACvC,MAATA,CAAA,GACIf,CAAA,CAAeI,CAAA,EAAUU,CAAA,EAA6BC,CAAA,IACtDjB,CAAA,CAAiBM,CAAA,EAAUU,CAAA,CACnC;AAAA;AAAA,SAAAV,CAAA,IAAAY,QAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}