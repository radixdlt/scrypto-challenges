{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.handleSubmitTransactionResponse = exports.handleFinalizeTransactionResponse = exports.handleBuildTransactionResponse = exports.handleNetworkxDemandResponse = exports.handleNetworkxThroughputResponse = exports.handleTransactionStatusResponse = exports.handleUnstakesResponse = exports.handleStakesResponse = exports.handleTokenInfoResponse = exports.handleLookupValidatorResponse = exports.handleValidatorsResponse = exports.handleTokenBalancesResponse = exports.handleNetworkIdResponse = exports.handleLookupTXResponse = exports.handleTransactionHistoryResponse = void 0;\nconst data_formats_1 = require(\"@radixdlt/data-formats\");\nconst neverthrow_1 = require(\"neverthrow\");\nconst ramda_1 = require(\"ramda\");\nconst crypto_1 = require(\"@radixdlt/crypto\");\nconst decoders_1 = require(\"../decoders\");\nconst executedTXDecoders = data_formats_1.JSONDecoding.withDecoders((0, decoders_1.amountDecoder)('amount', 'fee'), (0, decoders_1.dateDecoder)('sentAt'), (0, decoders_1.addressDecoder)('from', 'to'), (0, decoders_1.validatorAddressDecoder)('validator'), (0, decoders_1.transactionIdentifierDecoder)('txID'), (0, decoders_1.RRIDecoder)('rri'));\nconst isRPCRequestFailureResponse = something => {\n  const inspection = something;\n  return inspection.failure !== undefined;\n};\nconst hasRequiredProps = (methodName, obj, props) => {\n  for (const prop of props) {\n    if (obj[prop] === undefined) {\n      return (0, neverthrow_1.err)([Error(\"Prop validation failed for \".concat(methodName, \" response. \").concat(prop, \" was undefined.\"))]);\n    }\n  }\n  return (0, neverthrow_1.ok)(obj);\n};\nconst handleTransactionHistoryResponse = json => executedTXDecoders.create()(json).andThen(decoded => (0, neverthrow_1.ok)(Object.assign(Object.assign({}, decoded), {\n  transactions: decoded.transactions.map(tx => Object.assign(Object.assign({}, tx), {\n    message: (() => {\n      if (!tx.message) return undefined;\n      // Check format\n      if (!/^(00|01)[0-9a-fA-F]+$/.test(tx.message)) return '<Failed to interpret message>';\n      return crypto_1.Message.isPlaintext(tx.message) ? crypto_1.Message.plaintextToString(Buffer.from(tx.message, 'hex')) : tx.message;\n    })()\n  }))\n})));\nexports.handleTransactionHistoryResponse = handleTransactionHistoryResponse;\nconst handleLookupTXResponse = json => executedTXDecoders.create()(json).andThen(decoded => (0, neverthrow_1.ok)(Object.assign(Object.assign({}, decoded), {\n  message: (() => {\n    if (!decoded.message) return undefined;\n    // Check format\n    if (!/^(00|01)[0-9a-fA-F]+$/.test(decoded.message)) return '<Failed to interpret message>';\n    return crypto_1.Message.isPlaintext(decoded.message) ? crypto_1.Message.plaintextToString(Buffer.from(decoded.message, 'hex')) : decoded.message;\n  })()\n})));\nexports.handleLookupTXResponse = handleLookupTXResponse;\nconst handleNetworkIdResponse = json => data_formats_1.JSONDecoding.withDecoders((0, decoders_1.networkDecoder)('networkId')).create()(json).andThen(decoded => hasRequiredProps('networkId', decoded, ['networkId']));\nexports.handleNetworkIdResponse = handleNetworkIdResponse;\nconst handleTokenBalancesResponse = json => (0, ramda_1.pipe)(json => ({\n  owner: json.owner,\n  tokenBalances: json.tokenBalances.map(balance => ({\n    tokenIdentifier: balance.rri,\n    amount: balance.amount\n  }))\n}), data_formats_1.JSONDecoding.withDecoders((0, decoders_1.addressDecoder)('owner'), (0, decoders_1.RRIDecoder)('tokenIdentifier'), (0, decoders_1.amountDecoder)('amount')).create())(json).andThen(decoded => hasRequiredProps('tokenBalances', decoded, ['owner', 'tokenBalances']));\nexports.handleTokenBalancesResponse = handleTokenBalancesResponse;\nconst validatorDecoders = data_formats_1.JSONDecoding.withDecoders((0, decoders_1.validatorAddressDecoder)('address'), (0, decoders_1.addressDecoder)('ownerAddress'), (0, decoders_1.URLDecoder)('infoURL'), (0, decoders_1.amountDecoder)('totalDelegatedStake', 'ownerDelegation'));\nconst handleValidatorsResponse = json => validatorDecoders.create()(json).andThen(decoded => hasRequiredProps('validators', decoded, ['cursor', 'validators']));\nexports.handleValidatorsResponse = handleValidatorsResponse;\nexports.handleLookupValidatorResponse = validatorDecoders.create();\nconst handleTokenInfoResponse = json => data_formats_1.JSONDecoding.withDecoders((0, decoders_1.RRIDecoder)('rri'), (0, decoders_1.amountDecoder)('granularity', 'currentSupply'), (0, decoders_1.URLDecoder)('tokenInfoURL', 'iconURL')).create()(json).andThen(decoded => hasRequiredProps('tokenInfo', decoded, ['name', 'rri', 'symbol', 'granularity', 'isSupplyMutable', 'currentSupply', 'tokenInfoURL', 'iconURL']));\nexports.handleTokenInfoResponse = handleTokenInfoResponse;\nexports.handleStakesResponse = data_formats_1.JSONDecoding.withDecoders((0, decoders_1.validatorAddressDecoder)('validator'), (0, decoders_1.amountDecoder)('amount')).create();\nexports.handleUnstakesResponse = data_formats_1.JSONDecoding.withDecoders((0, decoders_1.validatorAddressDecoder)('validator'), (0, decoders_1.amountDecoder)('amount'), (0, decoders_1.transactionIdentifierDecoder)('withdrawTxID')).create();\nconst handleTransactionStatusResponse = json => isRPCRequestFailureResponse(json) ? (0, neverthrow_1.err)([new Error(json.failure)]) : data_formats_1.JSONDecoding.withDecoders((0, decoders_1.transactionIdentifierDecoder)('txID')).create()(json).andThen(decoded => hasRequiredProps('transactionStatus', decoded, ['txID', 'status']));\nexports.handleTransactionStatusResponse = handleTransactionStatusResponse;\nconst handleNetworkxThroughputResponse = json => data_formats_1.JSONDecoding.create()(json).andThen(decoded => hasRequiredProps('NetworkTransactionThroughput', decoded, ['tps']));\nexports.handleNetworkxThroughputResponse = handleNetworkxThroughputResponse;\nconst handleNetworkxDemandResponse = json => data_formats_1.JSONDecoding.create()(json).andThen(decoded => hasRequiredProps('NetworkTransactionDemand', decoded, ['tps']));\nexports.handleNetworkxDemandResponse = handleNetworkxDemandResponse;\nconst handleBuildTransactionResponse = json => data_formats_1.JSONDecoding.withDecoders((0, decoders_1.amountDecoder)('fee')).create()(json).andThen(decoded => hasRequiredProps('buildTransaction', decoded, ['transaction', 'fee']));\nexports.handleBuildTransactionResponse = handleBuildTransactionResponse;\nconst handleFinalizeTransactionResponse = json => isRPCRequestFailureResponse(json) ? (0, neverthrow_1.err)([new Error(json.failure)]) : data_formats_1.JSONDecoding.withDecoders((0, decoders_1.transactionIdentifierDecoder)('txID')).create()(json).andThen(decoded => hasRequiredProps('finalizeTransaction', decoded, ['txID']));\nexports.handleFinalizeTransactionResponse = handleFinalizeTransactionResponse;\nconst handleSubmitTransactionResponse = json => isRPCRequestFailureResponse(json) ? (0, neverthrow_1.err)([new Error(json.failure)]) : data_formats_1.JSONDecoding.withDecoders((0, decoders_1.transactionIdentifierDecoder)('txID')).create()(json).andThen(decoded => hasRequiredProps('submitTransaction', decoded, ['txID']));\nexports.handleSubmitTransactionResponse = handleSubmitTransactionResponse;","map":{"version":3,"names":["data_formats_1","require","neverthrow_1","ramda_1","crypto_1","decoders_1","executedTXDecoders","JSONDecoding","withDecoders","amountDecoder","dateDecoder","addressDecoder","validatorAddressDecoder","transactionIdentifierDecoder","RRIDecoder","isRPCRequestFailureResponse","something","inspection","failure","undefined","hasRequiredProps","methodName","obj","props","prop","err","Error","concat","ok","handleTransactionHistoryResponse","json","create","andThen","decoded","Object","assign","transactions","map","tx","message","test","Message","isPlaintext","plaintextToString","Buffer","from","exports","handleLookupTXResponse","handleNetworkIdResponse","networkDecoder","handleTokenBalancesResponse","pipe","owner","tokenBalances","balance","tokenIdentifier","rri","amount","validatorDecoders","URLDecoder","handleValidatorsResponse","handleLookupValidatorResponse","handleTokenInfoResponse","handleStakesResponse","handleUnstakesResponse","handleTransactionStatusResponse","handleNetworkxThroughputResponse","handleNetworkxDemandResponse","handleBuildTransactionResponse","handleFinalizeTransactionResponse","handleSubmitTransactionResponse"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/application/src/api/json-rpc/responseHandlers.ts"],"sourcesContent":["import { JSONDecoding } from '@radixdlt/data-formats'\nimport { err, ok, Result } from 'neverthrow'\nimport {\n\tBuildTransactionEndpoint,\n\tSubmitTransactionEndpoint,\n\tLookupTransactionEndpoint,\n\tNetworkIdEndpoint,\n\tNetworkTransactionDemandEndpoint,\n\tNetworkTransactionThroughputEndpoint,\n\tStakePositionsEndpoint,\n\tFinalizeTransactionEndpoint,\n\tTokenBalancesEndpoint,\n\tTokenInfoEndpoint,\n\tTransactionHistoryEndpoint,\n\tTransactionStatusEndpoint,\n\tUnstakePositionsEndpoint,\n\tValidatorsEndpoint,\n\tLookupValidatorEndpoint,\n} from './_types'\nimport { pipe } from 'ramda'\nimport { Message } from '@radixdlt/crypto'\nimport {\n\taddressDecoder,\n\tamountDecoder,\n\tdateDecoder,\n\tnetworkDecoder,\n\tRRIDecoder,\n\ttransactionIdentifierDecoder,\n\tURLDecoder,\n\tvalidatorAddressDecoder,\n} from '../decoders'\n\nconst executedTXDecoders = JSONDecoding.withDecoders(\n\tamountDecoder('amount', 'fee'),\n\tdateDecoder('sentAt'),\n\taddressDecoder('from', 'to'),\n\tvalidatorAddressDecoder('validator'),\n\ttransactionIdentifierDecoder('txID'),\n\tRRIDecoder('rri'),\n)\n\nexport type RPCRequestFailureResponse = Readonly<{\n\tfailure: string\n}>\n\nconst isRPCRequestFailureResponse = (\n\tsomething: unknown,\n): something is RPCRequestFailureResponse => {\n\tconst inspection = something as RPCRequestFailureResponse\n\treturn inspection.failure !== undefined\n}\n\nconst hasRequiredProps = <T extends Record<string, unknown>>(\n\tmethodName: string,\n\tobj: T,\n\tprops: string[],\n): Result<T, Error[]> => {\n\tfor (const prop of props) {\n\t\tif (obj[prop] === undefined) {\n\t\t\treturn err([\n\t\t\t\tError(\n\t\t\t\t\t`Prop validation failed for ${methodName} response. ${prop} was undefined.`,\n\t\t\t\t),\n\t\t\t])\n\t\t}\n\t}\n\treturn ok(obj)\n}\n\nexport const handleTransactionHistoryResponse = (\n\tjson: TransactionHistoryEndpoint.Response,\n) =>\n\texecutedTXDecoders\n\t\t.create<\n\t\t\tTransactionHistoryEndpoint.Response,\n\t\t\tTransactionHistoryEndpoint.DecodedResponse\n\t\t>()(json)\n\t\t.andThen(decoded =>\n\t\t\tok({\n\t\t\t\t...decoded,\n\t\t\t\ttransactions: decoded.transactions.map(tx => ({\n\t\t\t\t\t...tx,\n\t\t\t\t\tmessage: (() => {\n\t\t\t\t\t\tif (!tx.message) return undefined\n\n\t\t\t\t\t\t// Check format\n\t\t\t\t\t\tif (!/^(00|01)[0-9a-fA-F]+$/.test(tx.message))\n\t\t\t\t\t\t\treturn '<Failed to interpret message>'\n\n\t\t\t\t\t\treturn Message.isPlaintext(tx.message)\n\t\t\t\t\t\t\t? Message.plaintextToString(\n\t\t\t\t\t\t\t\t\tBuffer.from(tx.message, 'hex'),\n\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t: tx.message\n\t\t\t\t\t})(),\n\t\t\t\t})),\n\t\t\t}),\n\t\t)\n\nexport const handleLookupTXResponse = (\n\tjson: LookupTransactionEndpoint.Response,\n) =>\n\texecutedTXDecoders\n\t\t.create<\n\t\t\tLookupTransactionEndpoint.Response,\n\t\t\tLookupTransactionEndpoint.DecodedResponse\n\t\t>()(json)\n\t\t.andThen(decoded =>\n\t\t\tok({\n\t\t\t\t...decoded,\n\t\t\t\tmessage: (() => {\n\t\t\t\t\tif (!decoded.message) return undefined\n\n\t\t\t\t\t// Check format\n\t\t\t\t\tif (!/^(00|01)[0-9a-fA-F]+$/.test(decoded.message))\n\t\t\t\t\t\treturn '<Failed to interpret message>'\n\n\t\t\t\t\treturn Message.isPlaintext(decoded.message)\n\t\t\t\t\t\t? Message.plaintextToString(\n\t\t\t\t\t\t\t\tBuffer.from(decoded.message, 'hex'),\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: decoded.message\n\t\t\t\t})(),\n\t\t\t}),\n\t\t)\n\nexport const handleNetworkIdResponse = (json: NetworkIdEndpoint.Response) =>\n\tJSONDecoding.withDecoders(networkDecoder('networkId'))\n\t\t.create<\n\t\t\tNetworkIdEndpoint.Response,\n\t\t\tNetworkIdEndpoint.DecodedResponse\n\t\t>()(json)\n\t\t.andThen(decoded =>\n\t\t\thasRequiredProps('networkId', decoded, ['networkId']),\n\t\t)\n\nexport const handleTokenBalancesResponse = (\n\tjson: TokenBalancesEndpoint.Response,\n): Result<TokenBalancesEndpoint.DecodedResponse, Error[]> =>\n\tpipe(\n\t\t(json: TokenBalancesEndpoint.Response) => ({\n\t\t\towner: json.owner,\n\t\t\ttokenBalances: json.tokenBalances.map(balance => ({\n\t\t\t\ttokenIdentifier: balance.rri,\n\t\t\t\tamount: balance.amount,\n\t\t\t})),\n\t\t}),\n\t\tJSONDecoding.withDecoders(\n\t\t\taddressDecoder('owner'),\n\t\t\tRRIDecoder('tokenIdentifier'),\n\t\t\tamountDecoder('amount'),\n\t\t).create<\n\t\t\t{\n\t\t\t\towner: string\n\t\t\t\ttokenBalances: {\n\t\t\t\t\ttokenIdentifier: string\n\t\t\t\t\tamount: string\n\t\t\t\t}[]\n\t\t\t},\n\t\t\tTokenBalancesEndpoint.DecodedResponse\n\t\t>(),\n\t)(json).andThen(decoded =>\n\t\thasRequiredProps('tokenBalances', decoded, ['owner', 'tokenBalances']),\n\t)\n\nconst validatorDecoders = JSONDecoding.withDecoders(\n\tvalidatorAddressDecoder('address'),\n\taddressDecoder('ownerAddress'),\n\tURLDecoder('infoURL'),\n\tamountDecoder('totalDelegatedStake', 'ownerDelegation'),\n)\n\nexport const handleValidatorsResponse = (json: ValidatorsEndpoint.Response) =>\n\tvalidatorDecoders\n\t\t.create<\n\t\t\tValidatorsEndpoint.Response,\n\t\t\tValidatorsEndpoint.DecodedResponse\n\t\t>()(json)\n\t\t.andThen(decoded =>\n\t\t\thasRequiredProps('validators', decoded, ['cursor', 'validators']),\n\t\t)\n\nexport const handleLookupValidatorResponse = validatorDecoders.create<\n\tLookupValidatorEndpoint.Response,\n\tLookupValidatorEndpoint.DecodedResponse\n>()\n\nexport const handleTokenInfoResponse = (json: TokenInfoEndpoint.Response) =>\n\tJSONDecoding.withDecoders(\n\t\tRRIDecoder('rri'),\n\t\tamountDecoder('granularity', 'currentSupply'),\n\t\tURLDecoder('tokenInfoURL', 'iconURL'),\n\t)\n\t\t.create<\n\t\t\tTokenInfoEndpoint.Response,\n\t\t\tTokenInfoEndpoint.DecodedResponse\n\t\t>()(json)\n\t\t.andThen(decoded =>\n\t\t\thasRequiredProps('tokenInfo', decoded, [\n\t\t\t\t'name',\n\t\t\t\t'rri',\n\t\t\t\t'symbol',\n\t\t\t\t'granularity',\n\t\t\t\t'isSupplyMutable',\n\t\t\t\t'currentSupply',\n\t\t\t\t'tokenInfoURL',\n\t\t\t\t'iconURL',\n\t\t\t]),\n\t\t)\n\nexport const handleStakesResponse = JSONDecoding.withDecoders(\n\tvalidatorAddressDecoder('validator'),\n\tamountDecoder('amount'),\n).create<\n\tStakePositionsEndpoint.Response,\n\tStakePositionsEndpoint.DecodedResponse\n>()\n\nexport const handleUnstakesResponse = JSONDecoding.withDecoders(\n\tvalidatorAddressDecoder('validator'),\n\tamountDecoder('amount'),\n\ttransactionIdentifierDecoder('withdrawTxID'),\n).create<\n\tUnstakePositionsEndpoint.Response,\n\tUnstakePositionsEndpoint.DecodedResponse\n>()\n\nexport const handleTransactionStatusResponse = (\n\tjson: TransactionStatusEndpoint.Response,\n): Result<TransactionStatusEndpoint.DecodedResponse, Error[]> =>\n\tisRPCRequestFailureResponse(json)\n\t\t? err([new Error(json.failure)])\n\t\t: JSONDecoding.withDecoders(transactionIdentifierDecoder('txID'))\n\t\t\t\t.create<\n\t\t\t\t\tTransactionStatusEndpoint.Response,\n\t\t\t\t\tTransactionStatusEndpoint.DecodedResponse\n\t\t\t\t>()(json)\n\t\t\t\t.andThen(decoded =>\n\t\t\t\t\thasRequiredProps('transactionStatus', decoded, [\n\t\t\t\t\t\t'txID',\n\t\t\t\t\t\t'status',\n\t\t\t\t\t]),\n\t\t\t\t)\n\nexport const handleNetworkxThroughputResponse = (\n\tjson: NetworkTransactionThroughputEndpoint.Response,\n) =>\n\tJSONDecoding.create<\n\t\tNetworkTransactionThroughputEndpoint.Response,\n\t\tNetworkTransactionThroughputEndpoint.DecodedResponse\n\t>()(json).andThen(decoded =>\n\t\thasRequiredProps('NetworkTransactionThroughput', decoded, ['tps']),\n\t)\n\nexport const handleNetworkxDemandResponse = (\n\tjson: NetworkTransactionDemandEndpoint.Response,\n) =>\n\tJSONDecoding.create<\n\t\tNetworkTransactionDemandEndpoint.Response,\n\t\tNetworkTransactionDemandEndpoint.DecodedResponse\n\t>()(json).andThen(decoded =>\n\t\thasRequiredProps('NetworkTransactionDemand', decoded, ['tps']),\n\t)\n\nexport const handleBuildTransactionResponse = (\n\tjson: BuildTransactionEndpoint.Response,\n): Result<BuildTransactionEndpoint.DecodedResponse, Error[]> =>\n\tJSONDecoding.withDecoders(amountDecoder('fee'))\n\t\t.create<\n\t\t\tBuildTransactionEndpoint.Response,\n\t\t\tBuildTransactionEndpoint.DecodedResponse\n\t\t>()(json)\n\t\t.andThen(decoded =>\n\t\t\thasRequiredProps('buildTransaction', decoded, [\n\t\t\t\t'transaction',\n\t\t\t\t'fee',\n\t\t\t]),\n\t\t)\n\nexport const handleFinalizeTransactionResponse = (\n\tjson: FinalizeTransactionEndpoint.Response,\n): Result<FinalizeTransactionEndpoint.DecodedResponse, Error[]> =>\n\tisRPCRequestFailureResponse(json)\n\t\t? err([new Error(json.failure)])\n\t\t: JSONDecoding.withDecoders(transactionIdentifierDecoder('txID'))\n\t\t\t\t.create<\n\t\t\t\t\tFinalizeTransactionEndpoint.Response,\n\t\t\t\t\tFinalizeTransactionEndpoint.DecodedResponse\n\t\t\t\t>()(json)\n\t\t\t\t.andThen(decoded =>\n\t\t\t\t\thasRequiredProps('finalizeTransaction', decoded, ['txID']),\n\t\t\t\t)\n\nexport const handleSubmitTransactionResponse = (\n\tjson: SubmitTransactionEndpoint.Response,\n): Result<SubmitTransactionEndpoint.DecodedResponse, Error[]> =>\n\tisRPCRequestFailureResponse(json)\n\t\t? err([new Error(json.failure)])\n\t\t: JSONDecoding.withDecoders(transactionIdentifierDecoder('txID'))\n\t\t\t\t.create<\n\t\t\t\t\tSubmitTransactionEndpoint.Response,\n\t\t\t\t\tSubmitTransactionEndpoint.DecodedResponse\n\t\t\t\t>()(json)\n\t\t\t\t.andThen(decoded =>\n\t\t\t\t\thasRequiredProps('submitTransaction', decoded, ['txID']),\n\t\t\t\t)\n"],"mappings":";;;;;;AAAA,MAAAA,cAAA,GAAAC,OAAA;AACA,MAAAC,YAAA,GAAAD,OAAA;AAkBA,MAAAE,OAAA,GAAAF,OAAA;AACA,MAAAG,QAAA,GAAAH,OAAA;AACA,MAAAI,UAAA,GAAAJ,OAAA;AAWA,MAAMK,kBAAkB,GAAGN,cAAA,CAAAO,YAAY,CAACC,YAAY,CACnD,IAAAH,UAAA,CAAAI,aAAa,EAAC,QAAQ,EAAE,KAAK,CAAC,EAC9B,IAAAJ,UAAA,CAAAK,WAAW,EAAC,QAAQ,CAAC,EACrB,IAAAL,UAAA,CAAAM,cAAc,EAAC,MAAM,EAAE,IAAI,CAAC,EAC5B,IAAAN,UAAA,CAAAO,uBAAuB,EAAC,WAAW,CAAC,EACpC,IAAAP,UAAA,CAAAQ,4BAA4B,EAAC,MAAM,CAAC,EACpC,IAAAR,UAAA,CAAAS,UAAU,EAAC,KAAK,CAAC,CACjB;AAMD,MAAMC,2BAA2B,GAChCC,SAAkB,IACyB;EAC3C,MAAMC,UAAU,GAAGD,SAAsC;EACzD,OAAOC,UAAU,CAACC,OAAO,KAAKC,SAAS;AACxC,CAAC;AAED,MAAMC,gBAAgB,GAAGA,CACxBC,UAAkB,EAClBC,GAAM,EACNC,KAAe,KACQ;EACvB,KAAK,MAAMC,IAAI,IAAID,KAAK,EAAE;IACzB,IAAID,GAAG,CAACE,IAAI,CAAC,KAAKL,SAAS,EAAE;MAC5B,OAAO,IAAAjB,YAAA,CAAAuB,GAAG,EAAC,CACVC,KAAK,+BAAAC,MAAA,CAC0BN,UAAU,iBAAAM,MAAA,CAAcH,IAAI,oBAAiB,CAC3E,CACD,CAAC;;;EAGJ,OAAO,IAAAtB,YAAA,CAAA0B,EAAE,EAACN,GAAG,CAAC;AACf,CAAC;AAEM,MAAMO,gCAAgC,GAC5CC,IAAyC,IAEzCxB,kBAAkB,CAChByB,MAAM,EAGJ,CAACD,IAAI,CAAC,CACRE,OAAO,CAACC,OAAO,IACf,IAAA/B,YAAA,CAAA0B,EAAE,EAAAM,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACEF,OAAO;EACVG,YAAY,EAAEH,OAAO,CAACG,YAAY,CAACC,GAAG,CAACC,EAAE,IAAIJ,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACzCG,EAAE;IACLC,OAAO,EAAE,CAAC,MAAK;MACd,IAAI,CAACD,EAAE,CAACC,OAAO,EAAE,OAAOpB,SAAS;MAEjC;MACA,IAAI,CAAC,uBAAuB,CAACqB,IAAI,CAACF,EAAE,CAACC,OAAO,CAAC,EAC5C,OAAO,+BAA+B;MAEvC,OAAOnC,QAAA,CAAAqC,OAAO,CAACC,WAAW,CAACJ,EAAE,CAACC,OAAO,CAAC,GACnCnC,QAAA,CAAAqC,OAAO,CAACE,iBAAiB,CACzBC,MAAM,CAACC,IAAI,CAACP,EAAE,CAACC,OAAO,EAAE,KAAK,CAAC,CAC7B,GACDD,EAAE,CAACC,OAAO;IACd,CAAC,EAAC;EAAE,EACH;AAAC,GACF,CACF;AA5BUO,OAAA,CAAAjB,gCAAgC,GAAAA,gCAAA;AA8BtC,MAAMkB,sBAAsB,GAClCjB,IAAwC,IAExCxB,kBAAkB,CAChByB,MAAM,EAGJ,CAACD,IAAI,CAAC,CACRE,OAAO,CAACC,OAAO,IACf,IAAA/B,YAAA,CAAA0B,EAAE,EAAAM,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACEF,OAAO;EACVM,OAAO,EAAE,CAAC,MAAK;IACd,IAAI,CAACN,OAAO,CAACM,OAAO,EAAE,OAAOpB,SAAS;IAEtC;IACA,IAAI,CAAC,uBAAuB,CAACqB,IAAI,CAACP,OAAO,CAACM,OAAO,CAAC,EACjD,OAAO,+BAA+B;IAEvC,OAAOnC,QAAA,CAAAqC,OAAO,CAACC,WAAW,CAACT,OAAO,CAACM,OAAO,CAAC,GACxCnC,QAAA,CAAAqC,OAAO,CAACE,iBAAiB,CACzBC,MAAM,CAACC,IAAI,CAACZ,OAAO,CAACM,OAAO,EAAE,KAAK,CAAC,CAClC,GACDN,OAAO,CAACM,OAAO;EACnB,CAAC,EAAC;AAAE,GACH,CACF;AAzBUO,OAAA,CAAAC,sBAAsB,GAAAA,sBAAA;AA2B5B,MAAMC,uBAAuB,GAAIlB,IAAgC,IACvE9B,cAAA,CAAAO,YAAY,CAACC,YAAY,CAAC,IAAAH,UAAA,CAAA4C,cAAc,EAAC,WAAW,CAAC,CAAC,CACpDlB,MAAM,EAGJ,CAACD,IAAI,CAAC,CACRE,OAAO,CAACC,OAAO,IACfb,gBAAgB,CAAC,WAAW,EAAEa,OAAO,EAAE,CAAC,WAAW,CAAC,CAAC,CACrD;AARUa,OAAA,CAAAE,uBAAuB,GAAAA,uBAAA;AAU7B,MAAME,2BAA2B,GACvCpB,IAAoC,IAEpC,IAAA3B,OAAA,CAAAgD,IAAI,EACFrB,IAAoC,KAAM;EAC1CsB,KAAK,EAAEtB,IAAI,CAACsB,KAAK;EACjBC,aAAa,EAAEvB,IAAI,CAACuB,aAAa,CAAChB,GAAG,CAACiB,OAAO,KAAK;IACjDC,eAAe,EAAED,OAAO,CAACE,GAAG;IAC5BC,MAAM,EAAEH,OAAO,CAACG;GAChB,CAAC;CACF,CAAC,EACFzD,cAAA,CAAAO,YAAY,CAACC,YAAY,CACxB,IAAAH,UAAA,CAAAM,cAAc,EAAC,OAAO,CAAC,EACvB,IAAAN,UAAA,CAAAS,UAAU,EAAC,iBAAiB,CAAC,EAC7B,IAAAT,UAAA,CAAAI,aAAa,EAAC,QAAQ,CAAC,CACvB,CAACsB,MAAM,EASL,CACH,CAACD,IAAI,CAAC,CAACE,OAAO,CAACC,OAAO,IACtBb,gBAAgB,CAAC,eAAe,EAAEa,OAAO,EAAE,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CACtE;AA3BWa,OAAA,CAAAI,2BAA2B,GAAAA,2BAAA;AA6BxC,MAAMQ,iBAAiB,GAAG1D,cAAA,CAAAO,YAAY,CAACC,YAAY,CAClD,IAAAH,UAAA,CAAAO,uBAAuB,EAAC,SAAS,CAAC,EAClC,IAAAP,UAAA,CAAAM,cAAc,EAAC,cAAc,CAAC,EAC9B,IAAAN,UAAA,CAAAsD,UAAU,EAAC,SAAS,CAAC,EACrB,IAAAtD,UAAA,CAAAI,aAAa,EAAC,qBAAqB,EAAE,iBAAiB,CAAC,CACvD;AAEM,MAAMmD,wBAAwB,GAAI9B,IAAiC,IACzE4B,iBAAiB,CACf3B,MAAM,EAGJ,CAACD,IAAI,CAAC,CACRE,OAAO,CAACC,OAAO,IACfb,gBAAgB,CAAC,YAAY,EAAEa,OAAO,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC,CACjE;AARUa,OAAA,CAAAc,wBAAwB,GAAAA,wBAAA;AAUxBd,OAAA,CAAAe,6BAA6B,GAAGH,iBAAiB,CAAC3B,MAAM,EAGlE;AAEI,MAAM+B,uBAAuB,GAAIhC,IAAgC,IACvE9B,cAAA,CAAAO,YAAY,CAACC,YAAY,CACxB,IAAAH,UAAA,CAAAS,UAAU,EAAC,KAAK,CAAC,EACjB,IAAAT,UAAA,CAAAI,aAAa,EAAC,aAAa,EAAE,eAAe,CAAC,EAC7C,IAAAJ,UAAA,CAAAsD,UAAU,EAAC,cAAc,EAAE,SAAS,CAAC,CACrC,CACC5B,MAAM,EAGJ,CAACD,IAAI,CAAC,CACRE,OAAO,CAACC,OAAO,IACfb,gBAAgB,CAAC,WAAW,EAAEa,OAAO,EAAE,CACtC,MAAM,EACN,KAAK,EACL,QAAQ,EACR,aAAa,EACb,iBAAiB,EACjB,eAAe,EACf,cAAc,EACd,SAAS,CACT,CAAC,CACF;AArBUa,OAAA,CAAAgB,uBAAuB,GAAAA,uBAAA;AAuBvBhB,OAAA,CAAAiB,oBAAoB,GAAG/D,cAAA,CAAAO,YAAY,CAACC,YAAY,CAC5D,IAAAH,UAAA,CAAAO,uBAAuB,EAAC,WAAW,CAAC,EACpC,IAAAP,UAAA,CAAAI,aAAa,EAAC,QAAQ,CAAC,CACvB,CAACsB,MAAM,EAGL;AAEUe,OAAA,CAAAkB,sBAAsB,GAAGhE,cAAA,CAAAO,YAAY,CAACC,YAAY,CAC9D,IAAAH,UAAA,CAAAO,uBAAuB,EAAC,WAAW,CAAC,EACpC,IAAAP,UAAA,CAAAI,aAAa,EAAC,QAAQ,CAAC,EACvB,IAAAJ,UAAA,CAAAQ,4BAA4B,EAAC,cAAc,CAAC,CAC5C,CAACkB,MAAM,EAGL;AAEI,MAAMkC,+BAA+B,GAC3CnC,IAAwC,IAExCf,2BAA2B,CAACe,IAAI,CAAC,GAC9B,IAAA5B,YAAA,CAAAuB,GAAG,EAAC,CAAC,IAAIC,KAAK,CAACI,IAAI,CAACZ,OAAO,CAAC,CAAC,CAAC,GAC9BlB,cAAA,CAAAO,YAAY,CAACC,YAAY,CAAC,IAAAH,UAAA,CAAAQ,4BAA4B,EAAC,MAAM,CAAC,CAAC,CAC9DkB,MAAM,EAGJ,CAACD,IAAI,CAAC,CACRE,OAAO,CAACC,OAAO,IACfb,gBAAgB,CAAC,mBAAmB,EAAEa,OAAO,EAAE,CAC9C,MAAM,EACN,QAAQ,CACR,CAAC,CACF;AAfQa,OAAA,CAAAmB,+BAA+B,GAAAA,+BAAA;AAiBrC,MAAMC,gCAAgC,GAC5CpC,IAAmD,IAEnD9B,cAAA,CAAAO,YAAY,CAACwB,MAAM,EAGhB,CAACD,IAAI,CAAC,CAACE,OAAO,CAACC,OAAO,IACxBb,gBAAgB,CAAC,8BAA8B,EAAEa,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC,CAClE;AARWa,OAAA,CAAAoB,gCAAgC,GAAAA,gCAAA;AAUtC,MAAMC,4BAA4B,GACxCrC,IAA+C,IAE/C9B,cAAA,CAAAO,YAAY,CAACwB,MAAM,EAGhB,CAACD,IAAI,CAAC,CAACE,OAAO,CAACC,OAAO,IACxBb,gBAAgB,CAAC,0BAA0B,EAAEa,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC,CAC9D;AARWa,OAAA,CAAAqB,4BAA4B,GAAAA,4BAAA;AAUlC,MAAMC,8BAA8B,GAC1CtC,IAAuC,IAEvC9B,cAAA,CAAAO,YAAY,CAACC,YAAY,CAAC,IAAAH,UAAA,CAAAI,aAAa,EAAC,KAAK,CAAC,CAAC,CAC7CsB,MAAM,EAGJ,CAACD,IAAI,CAAC,CACRE,OAAO,CAACC,OAAO,IACfb,gBAAgB,CAAC,kBAAkB,EAAEa,OAAO,EAAE,CAC7C,aAAa,EACb,KAAK,CACL,CAAC,CACF;AAbUa,OAAA,CAAAsB,8BAA8B,GAAAA,8BAAA;AAepC,MAAMC,iCAAiC,GAC7CvC,IAA0C,IAE1Cf,2BAA2B,CAACe,IAAI,CAAC,GAC9B,IAAA5B,YAAA,CAAAuB,GAAG,EAAC,CAAC,IAAIC,KAAK,CAACI,IAAI,CAACZ,OAAO,CAAC,CAAC,CAAC,GAC9BlB,cAAA,CAAAO,YAAY,CAACC,YAAY,CAAC,IAAAH,UAAA,CAAAQ,4BAA4B,EAAC,MAAM,CAAC,CAAC,CAC9DkB,MAAM,EAGJ,CAACD,IAAI,CAAC,CACRE,OAAO,CAACC,OAAO,IACfb,gBAAgB,CAAC,qBAAqB,EAAEa,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,CAC1D;AAZQa,OAAA,CAAAuB,iCAAiC,GAAAA,iCAAA;AAcvC,MAAMC,+BAA+B,GAC3CxC,IAAwC,IAExCf,2BAA2B,CAACe,IAAI,CAAC,GAC9B,IAAA5B,YAAA,CAAAuB,GAAG,EAAC,CAAC,IAAIC,KAAK,CAACI,IAAI,CAACZ,OAAO,CAAC,CAAC,CAAC,GAC9BlB,cAAA,CAAAO,YAAY,CAACC,YAAY,CAAC,IAAAH,UAAA,CAAAQ,4BAA4B,EAAC,MAAM,CAAC,CAAC,CAC9DkB,MAAM,EAGJ,CAACD,IAAI,CAAC,CACRE,OAAO,CAACC,OAAO,IACfb,gBAAgB,CAAC,mBAAmB,EAAEa,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,CACxD;AAZQa,OAAA,CAAAwB,+BAA+B,GAAAA,+BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}