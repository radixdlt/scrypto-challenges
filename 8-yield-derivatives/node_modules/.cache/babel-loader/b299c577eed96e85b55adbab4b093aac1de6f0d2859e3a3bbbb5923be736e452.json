{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nexport function debounceTime(dueTime, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async;\n  }\n  return function (source) {\n    return source.lift(new DebounceTimeOperator(dueTime, scheduler));\n  };\n}\nvar DebounceTimeOperator = /*@__PURE__*/function () {\n  function DebounceTimeOperator(dueTime, scheduler) {\n    this.dueTime = dueTime;\n    this.scheduler = scheduler;\n  }\n  DebounceTimeOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  };\n  return DebounceTimeOperator;\n}();\nvar DebounceTimeSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(DebounceTimeSubscriber, _super);\n  function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n    var _this = _super.call(this, destination) || this;\n    _this.dueTime = dueTime;\n    _this.scheduler = scheduler;\n    _this.debouncedSubscription = null;\n    _this.lastValue = null;\n    _this.hasValue = false;\n    return _this;\n  }\n  DebounceTimeSubscriber.prototype._next = function (value) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  };\n  DebounceTimeSubscriber.prototype._complete = function () {\n    this.debouncedNext();\n    this.destination.complete();\n  };\n  DebounceTimeSubscriber.prototype.debouncedNext = function () {\n    this.clearDebounce();\n    if (this.hasValue) {\n      var lastValue = this.lastValue;\n      this.lastValue = null;\n      this.hasValue = false;\n      this.destination.next(lastValue);\n    }\n  };\n  DebounceTimeSubscriber.prototype.clearDebounce = function () {\n    var debouncedSubscription = this.debouncedSubscription;\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  };\n  return DebounceTimeSubscriber;\n}(Subscriber);\nfunction dispatchNext(subscriber) {\n  subscriber.debouncedNext();\n}","map":{"version":3,"names":["tslib_1","Subscriber","async","debounceTime","dueTime","scheduler","source","lift","DebounceTimeOperator","prototype","call","subscriber","subscribe","DebounceTimeSubscriber","_super","__extends","destination","_this","lastValue","hasValue","_next","value","clearDebounce","add","debouncedSubscription","schedule","dispatchNext","_complete","debouncedNext","complete","next","remove","unsubscribe"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/debounceTime.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * ![](debounceTime.png)\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link SchedulerLike} for\n * managing timers.\n *\n * ## Example\n * Emit the most recent click after a burst of clicks\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { debounceTime } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(debounceTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      const { lastValue } = this;\n      // This must be done *before* passing the value\n      // along to the destination because it's possible for\n      // the value to synchronously re-enter this operator\n      // recursively when scheduled with things like\n      // VirtualScheduler/TestScheduler.\n      this.lastValue = null;\n      this.hasValue = false;\n      this.destination.next(lastValue);\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n"],"mappings":";AAEA,OAAO,KAAEA,OAAU,MAAE,OAAM;AAE3B,SAASC,UAAO,QAAM,eAAoB;AAuD1C,SAAMC,KAAA,QAAU,oBAAiC;OAAA,SAAAC,aAAAC,OAAA,EAAAC,SAAA,EAAgC;EAC/E,IAAAA,SAAO,KAAC,KAAqB;IAC9BA,SAAA,GAAAH,KAAA;EAED;EACE,iBAAAI,MAAA;IAAA,OAAoBA,MAAyB,CAAAC,IAAA,KAAwBC,oBAAA,CAAAJ,OAAA,EAAAC,SAAA;EAAA;;wBAAf,GAAT,aAAwB;EACrE,SAACG,qBAAAJ,OAAA,EAAAC,SAAA;IAED,KAAAD,OAAA,GAAAA,OAAA;IACE,KAAAC,SAAc,GAAAA,SAAU;EAC1B;EACFG,oBAAA,CAAAC,SAAC,CAAAC,IAAA,aAAAC,UAAA,EAAAL,MAAA;IAAA,OAAAA,MAAA,CAAAM,SAAA,KAAAC,sBAAA,CAAAF,UAAA,OAAAP,OAAA,OAAAC,SAAA;EAOD;EAAwC,OAAAG,oBAAA;GAKtC;0BAGE,gBAAM,UAAYM,MACnB;SAHmB,CAAAC,SAAO,CAAAF,sBAAQ,EAAAC,MAAA;WACfD,sBAASA,CAAeG,WAAA,EAAAZ,OAAA,EAAAC,SAAA;IANpC,IAAAY,KAAA,GAAAH,MAAA,CAAAJ,IAAA,KAAqB,EAAiBM,WAAK;IAC3CC,KAAA,CAAAb,OAAA,GAASA,OAAW;IACpBa,KAAA,CAAAZ,SAAQ,GAAYA,SAAM;;IAMjCY,KAAA,CAAAC,SAAA;IAESD,KAAA,CAAAE,QAAA;IACR,OAAKF,KAAA;;wBAEW,CAAAR,SAAK,CAAAW,KAAA,aAAAC,KAAA;IACrB,IAAI,CAACC,aAAS;IACf,KAAAJ,SAAA,GAAAG,KAAA;IAES,KAAAF,QAAA;IACR,IAAI,CAACI,GAAA,MAAAC,qBAAgB,QAAAnB,SAAA,CAAAoB,QAAA,CAAAC,YAAA,OAAAtB,OAAA;;EAEvBS,sBAAC,CAAAJ,SAAA,CAAAkB,SAAA;IAED,KAAAC,aAAA;IACE,IAAI,CAACZ,WAAA,CAAAa,QAAgB;;wBAGX,CAAApB,SAAA,CAAAmB,aAAmB;QAM3B,CAAAN,aAAc;QACd,IAAI,CAACH,QAAQ;MACb,IAAID,SAAC,GAAW,IAAC,CAAIA,SAAC;MACvB,KAAAA,SAAA;MACF,KAAAC,QAAA;MAEO,KAAAH,WAAA,CAAAc,IAAA,CAAAZ,SAAA;IACN;;wBAGc,CAAAT,SAAA,CAAAa,aAAuB;QACnCE,qBAAqB,GAAC,KAAAA,qBAAc;QACpCA,qBAAK,KAAqB,IAAG;MAC9B,KAAAO,MAAA,CAAAP,qBAAA;MACFA,qBAAA,CAAAQ,WAAA;MACH,KAAAR,qBAAC;IAhDuC;EAkDxC;EACE,OAAAX,sBAA2B;AAC7B,CAAC,CAAAZ,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}