{"ast":null,"code":"import _isArray from \"./_isArray.js\";\nimport _isTransformer from \"./_isTransformer.js\";\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer [xf] to return a new transformer (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\n\nexport default function _dispatchable(methodNames, xf, fn) {\n  return function () {\n    if (arguments.length === 0) {\n      return fn();\n    }\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n    if (!_isArray(obj)) {\n      var idx = 0;\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n        idx += 1;\n      }\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n    return fn.apply(this, arguments);\n  };\n}","map":{"version":3,"names":["_isArray","_isTransformer","_dispatchable","methodNames","xf","fn","arguments","length","args","Array","prototype","slice","call","obj","pop","idx","apply","transducer"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/ramda/es/internal/_dispatchable.js"],"sourcesContent":["import _isArray from \"./_isArray.js\";\nimport _isTransformer from \"./_isTransformer.js\";\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer [xf] to return a new transformer (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\n\nexport default function _dispatchable(methodNames, xf, fn) {\n  return function () {\n    if (arguments.length === 0) {\n      return fn();\n    }\n\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n\n    if (!_isArray(obj)) {\n      var idx = 0;\n\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n\n        idx += 1;\n      }\n\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n\n    return fn.apply(this, arguments);\n  };\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,eAAe;AACpC,OAAOC,cAAc,MAAM,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,aAAaA,CAACC,WAAW,EAAEC,EAAE,EAAEC,EAAE,EAAE;EACzD,OAAO,YAAY;IACjB,IAAIC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;MAC1B,OAAOF,EAAE,CAAC,CAAC;IACb;IAEA,IAAIG,IAAI,GAAGC,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACN,SAAS,EAAE,CAAC,CAAC;IACnD,IAAIO,GAAG,GAAGL,IAAI,CAACM,GAAG,CAAC,CAAC;IAEpB,IAAI,CAACd,QAAQ,CAACa,GAAG,CAAC,EAAE;MAClB,IAAIE,GAAG,GAAG,CAAC;MAEX,OAAOA,GAAG,GAAGZ,WAAW,CAACI,MAAM,EAAE;QAC/B,IAAI,OAAOM,GAAG,CAACV,WAAW,CAACY,GAAG,CAAC,CAAC,KAAK,UAAU,EAAE;UAC/C,OAAOF,GAAG,CAACV,WAAW,CAACY,GAAG,CAAC,CAAC,CAACC,KAAK,CAACH,GAAG,EAAEL,IAAI,CAAC;QAC/C;QAEAO,GAAG,IAAI,CAAC;MACV;MAEA,IAAId,cAAc,CAACY,GAAG,CAAC,EAAE;QACvB,IAAII,UAAU,GAAGb,EAAE,CAACY,KAAK,CAAC,IAAI,EAAER,IAAI,CAAC;QACrC,OAAOS,UAAU,CAACJ,GAAG,CAAC;MACxB;IACF;IAEA,OAAOR,EAAE,CAACW,KAAK,CAAC,IAAI,EAAEV,SAAS,CAAC;EAClC,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}