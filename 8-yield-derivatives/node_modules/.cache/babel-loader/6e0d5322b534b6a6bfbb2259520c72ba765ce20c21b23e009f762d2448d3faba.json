{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SealedMessage = exports.__validateNonce = exports.__validateTag = void 0;\nconst neverthrow_1 = require(\"neverthrow\");\nconst util_1 = require(\"@radixdlt/util\");\nconst symmetric_encryption_1 = require(\"../symmetric-encryption\");\nconst utils_1 = require(\"../utils\");\nconst elliptic_curve_1 = require(\"../elliptic-curve\");\nconst create = input => (0, neverthrow_1.combine)([(0, exports.__validateNonce)(input.nonce), (0, exports.__validateTag)(input.authTag)]).map(_ => Object.assign(Object.assign({}, input), {\n  combined: () => Buffer.concat([input.ephemeralPublicKey.asData({\n    compressed: true\n  }), input.nonce, input.authTag, input.ciphertext])\n}));\nconst sealedMessageNonceLength = symmetric_encryption_1.AES_GCM.nonceLength;\nconst sealedMessageAuthTagLength = symmetric_encryption_1.AES_GCM.tagLength;\nexports.__validateTag = utils_1.validateLength.bind(null, sealedMessageAuthTagLength, 'auth tag');\nexports.__validateNonce = utils_1.validateLength.bind(null, sealedMessageNonceLength, 'nonce');\nconst sealedMessageFromBuffer = buffer => {\n  const sealedMessageLength = buffer.length;\n  const lengthOfCiphertext = sealedMessageLength - elliptic_curve_1.PublicKey.compressedByteCount - sealedMessageNonceLength - sealedMessageAuthTagLength;\n  if (lengthOfCiphertext <= 0) return (0, neverthrow_1.err)(new Error('Ciphertext cannot be empty'));\n  const readNextBuffer = util_1.readBuffer.bind(null, buffer)();\n  return (0, neverthrow_1.combine)([readNextBuffer(elliptic_curve_1.PublicKey.compressedByteCount).andThen(elliptic_curve_1.PublicKey.fromBuffer), readNextBuffer(sealedMessageNonceLength), readNextBuffer(sealedMessageAuthTagLength), readNextBuffer(lengthOfCiphertext)]).andThen(resultList => {\n    const ephemeralPublicKey = resultList[0];\n    const nonce = resultList[1];\n    const authTag = resultList[2];\n    const ciphertext = resultList[3];\n    return create({\n      ephemeralPublicKey,\n      nonce,\n      authTag,\n      ciphertext\n    });\n  });\n};\nconst sealedMsgFromAESSealedBox = (aesSealedBox, ephemeralPublicKey) => create(Object.assign(Object.assign({}, aesSealedBox), {\n  ephemeralPublicKey\n}));\nexports.SealedMessage = {\n  nonceByteCount: sealedMessageNonceLength,\n  authTagByteCount: sealedMessageAuthTagLength,\n  create,\n  fromAESSealedBox: sealedMsgFromAESSealedBox,\n  fromBuffer: sealedMessageFromBuffer\n};","map":{"version":3,"names":["neverthrow_1","require","util_1","symmetric_encryption_1","utils_1","elliptic_curve_1","create","input","combine","exports","__validateNonce","nonce","__validateTag","authTag","map","_","Object","assign","combined","Buffer","concat","ephemeralPublicKey","asData","compressed","ciphertext","sealedMessageNonceLength","AES_GCM","nonceLength","sealedMessageAuthTagLength","tagLength","validateLength","bind","sealedMessageFromBuffer","buffer","sealedMessageLength","length","lengthOfCiphertext","PublicKey","compressedByteCount","err","Error","readNextBuffer","readBuffer","andThen","fromBuffer","resultList","sealedMsgFromAESSealedBox","aesSealedBox","SealedMessage","nonceByteCount","authTagByteCount","fromAESSealedBox"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/crypto/src/encryption/sealedMessage.ts"],"sourcesContent":["import { combine, err, Result } from 'neverthrow'\nimport { readBuffer } from '@radixdlt/util'\nimport { AES_GCM, AES_GCM_SealedBoxT } from '../symmetric-encryption'\nimport { SealedMessageT } from './_types'\nimport { validateLength } from '../utils'\nimport { PublicKey, PublicKeyT } from '../elliptic-curve'\n\nconst create = (\n\tinput: Readonly<{\n\t\tephemeralPublicKey: PublicKeyT\n\t\tnonce: Buffer\n\t\tauthTag: Buffer\n\t\tciphertext: Buffer\n\t}>,\n): Result<SealedMessageT, Error> =>\n\tcombine([__validateNonce(input.nonce), __validateTag(input.authTag)]).map(\n\t\t_ => ({\n\t\t\t...input,\n\t\t\tcombined: (): Buffer =>\n\t\t\t\tBuffer.concat([\n\t\t\t\t\tinput.ephemeralPublicKey.asData({ compressed: true }),\n\t\t\t\t\tinput.nonce,\n\t\t\t\t\tinput.authTag,\n\t\t\t\t\tinput.ciphertext,\n\t\t\t\t]),\n\t\t}),\n\t)\n\nconst sealedMessageNonceLength = AES_GCM.nonceLength\nconst sealedMessageAuthTagLength = AES_GCM.tagLength\n\nexport const __validateTag: (\n\tbuffer: Buffer,\n) => Result<Buffer, Error> = validateLength.bind(\n\tnull,\n\tsealedMessageAuthTagLength,\n\t'auth tag',\n)\n\nexport const __validateNonce: (\n\tbuffer: Buffer,\n) => Result<Buffer, Error> = validateLength.bind(\n\tnull,\n\tsealedMessageNonceLength,\n\t'nonce',\n)\n\nconst sealedMessageFromBuffer = (\n\tbuffer: Buffer,\n): Result<SealedMessageT, Error> => {\n\tconst sealedMessageLength = buffer.length\n\tconst lengthOfCiphertext =\n\t\tsealedMessageLength -\n\t\tPublicKey.compressedByteCount -\n\t\tsealedMessageNonceLength -\n\t\tsealedMessageAuthTagLength\n\n\tif (lengthOfCiphertext <= 0)\n\t\treturn err(new Error('Ciphertext cannot be empty'))\n\n\tconst readNextBuffer = readBuffer.bind(null, buffer)()\n\n\treturn combine([\n\t\treadNextBuffer(PublicKey.compressedByteCount).andThen(\n\t\t\tPublicKey.fromBuffer,\n\t\t),\n\t\treadNextBuffer(sealedMessageNonceLength),\n\t\treadNextBuffer(sealedMessageAuthTagLength),\n\t\treadNextBuffer(lengthOfCiphertext),\n\t]).andThen(resultList => {\n\t\tconst ephemeralPublicKey = resultList[0] as PublicKeyT\n\t\tconst nonce = resultList[1] as Buffer\n\t\tconst authTag = resultList[2] as Buffer\n\t\tconst ciphertext = resultList[3] as Buffer\n\n\t\treturn create({\n\t\t\tephemeralPublicKey,\n\t\t\tnonce,\n\t\t\tauthTag,\n\t\t\tciphertext,\n\t\t})\n\t})\n}\n\nconst sealedMsgFromAESSealedBox = (\n\taesSealedBox: AES_GCM_SealedBoxT,\n\tephemeralPublicKey: PublicKeyT,\n): Result<SealedMessageT, Error> =>\n\tcreate({ ...aesSealedBox, ephemeralPublicKey })\n\nexport const SealedMessage = {\n\tnonceByteCount: sealedMessageNonceLength,\n\tauthTagByteCount: sealedMessageAuthTagLength,\n\tcreate,\n\tfromAESSealedBox: sealedMsgFromAESSealedBox,\n\tfromBuffer: sealedMessageFromBuffer,\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}