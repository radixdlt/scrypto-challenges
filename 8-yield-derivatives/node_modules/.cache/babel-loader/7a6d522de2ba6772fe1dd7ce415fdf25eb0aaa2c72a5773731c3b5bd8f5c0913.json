{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar rxjs_1 = require(\"rxjs\");\nvar typescript_map_1 = require(\"typescript-map\");\nvar RadixDecryptionAccountSystem_1 = require(\"../account/RadixDecryptionAccountSystem\");\nvar RadixMessagingAccountSystem = /** @class */function () {\n  function RadixMessagingAccountSystem(address) {\n    this.address = address;\n    this.name = 'RADIX-MESSAGING';\n    this.messageSubject = new rxjs_1.Subject();\n    this.chats = new typescript_map_1.TSMap();\n    this.messages = new typescript_map_1.TSMap();\n  }\n  RadixMessagingAccountSystem.prototype.processAtomUpdate = function (atomUpdate) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        if (!('decryptedData' in atomUpdate.processedData) || atomUpdate.processedData.decryptedData.application !== 'message' || atomUpdate.processedData.decryptedData.decryptionState === RadixDecryptionAccountSystem_1.RadixDecryptionState.CANNOT_DECRYPT) {\n          return [2 /*return*/];\n        }\n        if (atomUpdate.action === 'STORE') {\n          this.processStoreAtom(atomUpdate);\n        } else if (atomUpdate.action === 'DELETE') {\n          this.processDeleteAtom(atomUpdate);\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n  RadixMessagingAccountSystem.prototype.startNewChat = function (to) {\n    // Create new chat\n    var chatId = to.getAddress();\n    if (this.chats.has(chatId)) {\n      return;\n    }\n    var chatDescription = {\n      address: to.getAddress(),\n      chat_id: chatId,\n      title: chatId,\n      last_message_timestamp: Date.now(),\n      messages: new typescript_map_1.TSMap()\n    };\n    // Add at the top\n    this.chats.set(chatId, chatDescription);\n  };\n  RadixMessagingAccountSystem.prototype.processStoreAtom = function (atomUpdate) {\n    var atom = atomUpdate.atom;\n    var aid = atom.getAidString();\n    var signatures = atom.signatures;\n    var decryptedData = atomUpdate.processedData.decryptedData;\n    // Skip existing atoms\n    if (this.messages.has(aid)) {\n      return;\n    }\n    var from = decryptedData.from;\n    var to = decryptedData.to.find(function (a) {\n      return !a.equals(from);\n    });\n    if (!to) {\n      throw new Error('A message needs to have at least one other recipient');\n    }\n    // Chat id\n    var address = null;\n    var isMine = false;\n    if (from.equals(this.address)) {\n      address = to;\n      isMine = true;\n    } else {\n      address = from;\n    }\n    if (address === null) {\n      throw new Error('Error processing a radix-message atom: neither of addresses is owned by this account');\n    }\n    var chatId = address.toString();\n    var message = {\n      aid: aid,\n      chat_id: chatId,\n      to: to,\n      from: from,\n      content: decryptedData.data,\n      timestamp: atom.getTimestamp(),\n      is_mine: isMine,\n      encryptionState: decryptedData.decryptionState\n    };\n    // Find existing chat\n    // Otherwise create new chat\n    if (!this.chats.has(chatId)) {\n      var newChatDescription = {\n        address: address.getAddress(),\n        chat_id: chatId,\n        title: chatId,\n        last_message_timestamp: message.timestamp,\n        messages: new typescript_map_1.TSMap()\n      };\n      this.chats.set(chatId, newChatDescription);\n    }\n    var chatDescription = this.chats.get(chatId);\n    if (message.timestamp > chatDescription.last_message_timestamp) {\n      chatDescription.last_message_timestamp = message.timestamp;\n    }\n    chatDescription.messages.set(aid, message);\n    // Move chat to the top\n    this.chats.delete(chatId);\n    this.chats.set(chatId, chatDescription);\n    this.messages.set(aid, message);\n    var messageUpdate = {\n      action: 'STORE',\n      aid: aid,\n      message: message\n    };\n    this.messageSubject.next(messageUpdate);\n  };\n  RadixMessagingAccountSystem.prototype.processDeleteAtom = function (atomUpdate) {\n    var atom = atomUpdate.atom;\n    var aid = atom.getAidString();\n    // Skip nonexisting atoms\n    if (!this.messages.has(aid)) {\n      return;\n    }\n    var message = this.messages.get(aid);\n    this.chats.get(message.chat_id).messages.delete(aid);\n    this.messages.delete(aid);\n    var messageUpdate = {\n      action: 'DELETE',\n      aid: aid,\n      message: message\n    };\n    this.messageSubject.next(messageUpdate);\n  };\n  RadixMessagingAccountSystem.prototype.getAllMessages = function () {\n    var _this = this;\n    return rxjs_1.Observable.create(function (observer) {\n      var e_1, _a;\n      try {\n        // Send all old transactions\n        for (var _b = tslib_1.__values(_this.messages.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var message = _c.value;\n          var messageUpdate = {\n            action: 'STORE',\n            aid: message.aid,\n            message: message\n          };\n          observer.next(messageUpdate);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      // Subscribe for new ones\n      _this.messageSubject.subscribe(observer);\n    });\n  };\n  return RadixMessagingAccountSystem;\n}();\nexports.default = RadixMessagingAccountSystem;","map":{"version":3,"names":["rxjs_1","require","typescript_map_1","RadixDecryptionAccountSystem_1","RadixMessagingAccountSystem","address","name","messageSubject","Subject","chats","TSMap","messages","prototype","processAtomUpdate","atomUpdate","processedData","decryptedData","application","decryptionState","RadixDecryptionState","CANNOT_DECRYPT","action","processStoreAtom","processDeleteAtom","startNewChat","to","chatId","getAddress","has","chatDescription","chat_id","title","last_message_timestamp","Date","now","set","atom","aid","getAidString","signatures","from","find","a","equals","Error","isMine","toString","message","content","data","timestamp","getTimestamp","is_mine","encryptionState","newChatDescription","get","delete","messageUpdate","next","getAllMessages","_this","Observable","create","observer","_b","tslib_1","__values","values","_c","done","value","subscribe"],"sources":["../../../../src/modules/messaging/RadixMessagingAccountSystem.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}