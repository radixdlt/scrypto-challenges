{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AES_GCM = exports.aesGCMSealDeterministic = void 0;\nconst node_forge_1 = require(\"node-forge\");\nconst neverthrow_1 = require(\"neverthrow\");\nconst util_1 = require(\"@radixdlt/util\");\nconst aesGCMSealedBox_1 = require(\"./aesGCMSealedBox\");\nconst AES_GCM_256_ALGORITHM = 'AES-GCM';\nconst aesGCMSealDeterministic = input => {\n  const {\n    nonce\n  } = input;\n  const aesCipher = node_forge_1.cipher.createCipher(AES_GCM_256_ALGORITHM, node_forge_1.util.createBuffer(input.symmetricKey));\n  const iv = node_forge_1.util.createBuffer(nonce);\n  const startOptions = {\n    iv\n  };\n  if (input.additionalAuthenticationData) {\n    aesCipher.start(Object.assign(Object.assign({}, startOptions), {\n      additionalData: node_forge_1.util.hexToBytes(input.additionalAuthenticationData.toString('hex'))\n    }));\n  } else {\n    aesCipher.start(startOptions);\n  }\n  aesCipher.update(node_forge_1.util.createBuffer(input.plaintext));\n  if (!aesCipher.finish()) {\n    throw new Error(`AES encryption failed, error unknown...`);\n  }\n  const ciphertext = Buffer.from(aesCipher.output.toHex(), 'hex');\n  const authTag = Buffer.from(aesCipher.mode.tag.toHex(), 'hex');\n  return aesGCMSealedBox_1.AES_GCM_SealedBox.create({\n    ciphertext,\n    authTag,\n    nonce\n  });\n};\nexports.aesGCMSealDeterministic = aesGCMSealDeterministic;\nconst seal = input => {\n  var _a, _b;\n  const secureRandom = (_a = input.secureRandom) !== null && _a !== void 0 ? _a : util_1.secureRandomGenerator;\n  const nonce = (_b = input.nonce) !== null && _b !== void 0 ? _b : Buffer.from(secureRandom.randomSecureBytes(aesGCMSealedBox_1.AES_GCM_SealedBox.nonceLength), 'hex');\n  return (0, exports.aesGCMSealDeterministic)(Object.assign(Object.assign({}, input), {\n    nonce\n  }));\n};\nconst open = input => {\n  const {\n    ciphertext,\n    additionalAuthenticationData,\n    symmetricKey\n  } = input;\n  return aesGCMSealedBox_1.AES_GCM_SealedBox.create(input).andThen(box => {\n    const nonce = box.nonce;\n    const authTag = box.authTag;\n    const decipher = node_forge_1.cipher.createDecipher(AES_GCM_256_ALGORITHM, node_forge_1.util.createBuffer(symmetricKey));\n    const iv = node_forge_1.util.createBuffer(nonce);\n    const tag = node_forge_1.util.createBuffer(authTag);\n    const startOptions = {\n      iv,\n      tag\n    };\n    if (additionalAuthenticationData) {\n      const additionalData = node_forge_1.util.hexToBytes(additionalAuthenticationData.toString('hex'));\n      decipher.start(Object.assign(Object.assign({}, startOptions), {\n        additionalData\n      }));\n    } else {\n      decipher.start(startOptions);\n    }\n    decipher.update(node_forge_1.util.createBuffer(ciphertext));\n    if (!decipher.finish()) {\n      return (0, neverthrow_1.err)(new Error(`AES decryption failed.`));\n    }\n    return (0, neverthrow_1.ok)(Buffer.from(decipher.output.toHex(), 'hex'));\n  });\n};\nexports.AES_GCM = {\n  seal,\n  open,\n  tagLength: aesGCMSealedBox_1.AES_GCM_SealedBox.tagLength,\n  nonceLength: aesGCMSealedBox_1.AES_GCM_SealedBox.nonceLength,\n  algorithm: AES_GCM_256_ALGORITHM\n};","map":{"version":3,"names":["node_forge_1","require","neverthrow_1","util_1","aesGCMSealedBox_1","AES_GCM_256_ALGORITHM","aesGCMSealDeterministic","input","nonce","aesCipher","cipher","createCipher","util","createBuffer","symmetricKey","iv","startOptions","additionalAuthenticationData","start","Object","assign","additionalData","hexToBytes","toString","update","plaintext","finish","Error","ciphertext","Buffer","from","output","toHex","authTag","mode","tag","AES_GCM_SealedBox","create","exports","seal","secureRandom","_a","secureRandomGenerator","_b","randomSecureBytes","nonceLength","open","andThen","box","decipher","createDecipher","err","ok","AES_GCM","tagLength","algorithm"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/crypto/src/symmetric-encryption/aes/aesGCM.ts"],"sourcesContent":["import { cipher as forgeCipher, util as forgeUtil } from 'node-forge'\nimport {\n\tAES_GCM_OPEN_Input,\n\tAES_GCM_SEAL_Input,\n\tAES_GCM_SealedBoxT,\n} from './_types'\nimport { err, ok, Result } from 'neverthrow'\nimport { secureRandomGenerator } from '@radixdlt/util'\nimport { AES_GCM_SealedBox } from './aesGCMSealedBox'\n\nconst AES_GCM_256_ALGORITHM = 'AES-GCM'\n\nexport const aesGCMSealDeterministic = (\n\tinput: Omit<AES_GCM_SEAL_Input, 'secureRandom'> & {\n\t\treadonly nonce: Buffer\n\t},\n): Result<AES_GCM_SealedBoxT, Error> => {\n\tconst { nonce } = input\n\n\tconst aesCipher = forgeCipher.createCipher(\n\t\tAES_GCM_256_ALGORITHM,\n\t\tforgeUtil.createBuffer(input.symmetricKey),\n\t)\n\n\tconst iv = forgeUtil.createBuffer(nonce)\n\tconst startOptions = { iv }\n\n\tif (input.additionalAuthenticationData) {\n\t\taesCipher.start({\n\t\t\t...startOptions,\n\t\t\tadditionalData: forgeUtil.hexToBytes(\n\t\t\t\tinput.additionalAuthenticationData.toString('hex'),\n\t\t\t),\n\t\t})\n\t} else {\n\t\taesCipher.start(startOptions)\n\t}\n\n\taesCipher.update(forgeUtil.createBuffer(input.plaintext))\n\n\tif (!aesCipher.finish()) {\n\t\tthrow new Error(`AES encryption failed, error unknown...`)\n\t}\n\n\tconst ciphertext = Buffer.from(aesCipher.output.toHex(), 'hex')\n\tconst authTag = Buffer.from(aesCipher.mode.tag.toHex(), 'hex')\n\n\treturn AES_GCM_SealedBox.create({\n\t\tciphertext,\n\t\tauthTag,\n\t\tnonce,\n\t})\n}\n\nconst seal = (input: AES_GCM_SEAL_Input): Result<AES_GCM_SealedBoxT, Error> => {\n\tconst secureRandom = input.secureRandom ?? secureRandomGenerator\n\tconst nonce =\n\t\tinput.nonce ??\n\t\tBuffer.from(\n\t\t\tsecureRandom.randomSecureBytes(AES_GCM_SealedBox.nonceLength),\n\t\t\t'hex',\n\t\t)\n\treturn aesGCMSealDeterministic({ ...input, nonce })\n}\n\nconst open = (input: AES_GCM_OPEN_Input): Result<Buffer, Error> => {\n\tconst { ciphertext, additionalAuthenticationData, symmetricKey } = input\n\n\treturn AES_GCM_SealedBox.create(input).andThen(\n\t\t(box: AES_GCM_SealedBoxT) => {\n\t\t\tconst nonce = box.nonce\n\t\t\tconst authTag = box.authTag\n\n\t\t\tconst decipher = forgeCipher.createDecipher(\n\t\t\t\tAES_GCM_256_ALGORITHM,\n\t\t\t\tforgeUtil.createBuffer(symmetricKey),\n\t\t\t)\n\n\t\t\tconst iv = forgeUtil.createBuffer(nonce)\n\t\t\tconst tag = forgeUtil.createBuffer(authTag)\n\n\t\t\tconst startOptions = {\n\t\t\t\tiv,\n\t\t\t\ttag,\n\t\t\t}\n\n\t\t\tif (additionalAuthenticationData) {\n\t\t\t\tconst additionalData = forgeUtil.hexToBytes(\n\t\t\t\t\tadditionalAuthenticationData.toString('hex'),\n\t\t\t\t)\n\t\t\t\tdecipher.start({\n\t\t\t\t\t...startOptions,\n\t\t\t\t\tadditionalData,\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tdecipher.start(startOptions)\n\t\t\t}\n\n\t\t\tdecipher.update(forgeUtil.createBuffer(ciphertext))\n\n\t\t\tif (!decipher.finish()) {\n\t\t\t\treturn err(new Error(`AES decryption failed.`))\n\t\t\t}\n\n\t\t\treturn ok(Buffer.from(decipher.output.toHex(), 'hex'))\n\t\t},\n\t)\n}\n\nexport const AES_GCM = {\n\tseal,\n\topen,\n\ttagLength: AES_GCM_SealedBox.tagLength,\n\tnonceLength: AES_GCM_SealedBox.nonceLength,\n\talgorithm: AES_GCM_256_ALGORITHM,\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}