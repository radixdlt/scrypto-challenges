{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_from PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { map } from '../operators/map';\nimport { isObject } from '../util/isObject';\nimport { from } from './from';\nexport function forkJoin() {\n  var sources = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n  if (sources.length === 1) {\n    var first_1 = sources[0];\n    if (isArray(first_1)) {\n      return forkJoinInternal(first_1, null);\n    }\n    if (isObject(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {\n      var keys = Object.keys(first_1);\n      return forkJoinInternal(keys.map(function (key) {\n        return first_1[key];\n      }), keys);\n    }\n  }\n  if (typeof sources[sources.length - 1] === 'function') {\n    var resultSelector_1 = sources.pop();\n    sources = sources.length === 1 && isArray(sources[0]) ? sources[0] : sources;\n    return forkJoinInternal(sources, null).pipe(map(function (args) {\n      return resultSelector_1.apply(void 0, args);\n    }));\n  }\n  return forkJoinInternal(sources, null);\n}\nfunction forkJoinInternal(sources, keys) {\n  return new Observable(function (subscriber) {\n    var len = sources.length;\n    if (len === 0) {\n      subscriber.complete();\n      return;\n    }\n    var values = new Array(len);\n    var completed = 0;\n    var emitted = 0;\n    var _loop_1 = function (i) {\n      var source = from(sources[i]);\n      var hasValue = false;\n      subscriber.add(source.subscribe({\n        next: function (value) {\n          if (!hasValue) {\n            hasValue = true;\n            emitted++;\n          }\n          values[i] = value;\n        },\n        error: function (err) {\n          return subscriber.error(err);\n        },\n        complete: function () {\n          completed++;\n          if (completed === len || !hasValue) {\n            if (emitted === len) {\n              subscriber.next(keys ? keys.reduce(function (result, key, i) {\n                return result[key] = values[i], result;\n              }, {}) : values);\n            }\n            subscriber.complete();\n          }\n        }\n      }));\n    };\n    for (var i = 0; i < len; i++) {\n      _loop_1(i);\n    }\n  });\n}","map":{"version":3,"names":["Observable","isArray","map","isObject","from","forkJoin","_i","arguments","length","sources","first_1","forkJoinInternal","Object","getPrototypeOf","prototype","keys","key","resultSelector_1","pop","pipe","args","apply","subscriber","len","complete","values","Array","completed","_loop_1","i","source","hasValue","add","subscribe","next","value","emitted","error","err","reduce","result"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/observable/forkJoin.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { ObservableInput, ObservedValuesFromArray, ObservedValueOf, SubscribableOrPromise } from '../types';\nimport { isArray } from '../util/isArray';\nimport { map } from '../operators/map';\nimport { isObject } from '../util/isObject';\nimport { isObservable } from '../util/isObservable';\nimport { from } from './from';\n\n/* tslint:disable:max-line-length */\n\n// forkJoin(a$, b$, c$)\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T>(v1: SubscribableOrPromise<T>): Observable<[T]>;\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n// forkJoin([a$, b$, c$]);\n// TODO(benlesh): Uncomment for TS 3.0\n// export function forkJoin(sources: []): Observable<never>;\nexport function forkJoin<A>(sources: [ObservableInput<A>]): Observable<[A]>;\nexport function forkJoin<A, B>(sources: [ObservableInput<A>, ObservableInput<B>]): Observable<[A, B]>;\nexport function forkJoin<A, B, C>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>]): Observable<[A, B, C]>;\nexport function forkJoin<A, B, C, D>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>]): Observable<[A, B, C, D]>;\nexport function forkJoin<A, B, C, D, E>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>, ObservableInput<E>]): Observable<[A, B, C, D, E]>;\nexport function forkJoin<A, B, C, D, E, F>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>, ObservableInput<E>, ObservableInput<F>]): Observable<[A, B, C, D, E, F]>;\nexport function forkJoin<A extends ObservableInput<any>[]>(sources: A): Observable<ObservedValuesFromArray<A>[]>;\n\n// forkJoin({})\nexport function forkJoin(sourcesObject: {}): Observable<never>;\nexport function forkJoin<T, K extends keyof T>(sourcesObject: T): Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>;\n\n/** @deprecated resultSelector is deprecated, pipe to map instead */\nexport function forkJoin(...args: Array<ObservableInput<any>|Function>): Observable<any>;\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T>(...sources: ObservableInput<T>[]): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Accepts an `Array` of {@link ObservableInput} or a dictionary `Object` of {@link ObservableInput} and returns\n * an {@link Observable} that emits either an array of values in the exact same order as the passed array,\n * or a dictionary of values in the same shape as the passed dictionary.\n *\n * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n *\n * ![](forkJoin.png)\n *\n * `forkJoin` is an operator that takes any number of input observables which can be passed either as an array\n * or a dictionary of input observables. If no input observables are provided, resulting stream will complete\n * immediately.\n *\n * `forkJoin` will wait for all passed observables to complete and then it will emit an array or an object with last\n * values from corresponding observables.\n *\n * If you pass an array of `n` observables to the operator, resulting\n * array will have `n` values, where first value is the last thing emitted by the first observable,\n * second value is the last thing emitted by the second observable and so on.\n *\n * If you pass a dictionary of observables to the operator, resulting\n * objects will have the same keys as the dictionary passed, with their last values they've emitted\n * located at the corresponding key.\n *\n * That means `forkJoin` will not emit more than once and it will complete after that. If you need to emit combined\n * values not only at the end of lifecycle of passed observables, but also throughout it, try out {@link combineLatest}\n * or {@link zip} instead.\n *\n * In order for resulting array to have the same length as the number of input observables, whenever any of\n * that observables completes without emitting any value, `forkJoin` will complete at that moment as well\n * and it will not emit anything either, even if it already has some last values from other observables.\n * Conversely, if there is an observable that never completes, `forkJoin` will never complete as well,\n * unless at any point some other observable completes without emitting value, which brings us back to\n * the previous case. Overall, in order for `forkJoin` to emit a value, all observables passed as arguments\n * have to emit something at least once and complete.\n *\n * If any input observable errors at some point, `forkJoin` will error as well and all other observables\n * will be immediately unsubscribed.\n *\n * Optionally `forkJoin` accepts project function, that will be called with values which normally\n * would land in emitted array. Whatever is returned by project function, will appear in output\n * observable instead. This means that default project can be thought of as a function that takes\n * all its arguments and puts them into an array. Note that project function will be called only\n * when output observable is supposed to emit a result.\n *\n * ## Examples\n *\n * ### Use forkJoin with a dictionary of observable inputs\n * ```ts\n * import { forkJoin, of, timer } from 'rxjs';\n *\n * const observable = forkJoin({\n *   foo: of(1, 2, 3, 4),\n *   bar: Promise.resolve(8),\n *   baz: timer(4000),\n * });\n * observable.subscribe({\n *  next: value => console.log(value),\n *  complete: () => console.log('This is how it ends!'),\n * });\n *\n * // Logs:\n * // { foo: 4, bar: 8, baz: 0 } after 4 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * ### Use forkJoin with an array of observable inputs\n * ```ts\n * import { forkJoin, of } from 'rxjs';\n *\n * const observable = forkJoin([\n *   of(1, 2, 3, 4),\n *   Promise.resolve(8),\n *   timer(4000),\n * ]);\n * observable.subscribe({\n *  next: value => console.log(value),\n *  complete: () => console.log('This is how it ends!'),\n * });\n *\n * // Logs:\n * // [4, 8, 0] after 4 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n *\n * @param {...ObservableInput} sources Any number of Observables provided either as an array or as an arguments\n * passed directly to the operator.\n * @param {function} [project] Function that takes values emitted by input Observables and returns value\n * that will appear in resulting Observable instead of default array.\n * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n * or value from project function.\n */\nexport function forkJoin(\n  ...sources: any[]\n): Observable<any> {\n  if (sources.length === 1) {\n    const first = sources[0];\n    if (isArray(first)) {\n      return forkJoinInternal(first, null);\n    }\n    // TODO(benlesh): isObservable check will not be necessary when deprecated path is removed.\n    if (isObject(first) && Object.getPrototypeOf(first) === Object.prototype) {\n      const keys = Object.keys(first);\n      return forkJoinInternal(keys.map(key => first[key]), keys);\n    }\n  }\n\n  // DEPRECATED PATHS BELOW HERE\n  if (typeof sources[sources.length - 1] === 'function') {\n    const resultSelector = sources.pop() as Function;\n    sources = (sources.length === 1 && isArray(sources[0])) ? sources[0] : sources;\n    return forkJoinInternal(sources, null).pipe(\n      map((args: any[]) => resultSelector(...args))\n    );\n  }\n\n  return forkJoinInternal(sources, null);\n}\n\nfunction forkJoinInternal(sources: ObservableInput<any>[], keys: string[] | null): Observable<any> {\n  return new Observable(subscriber => {\n    const len = sources.length;\n    if (len === 0) {\n      subscriber.complete();\n      return;\n    }\n    const values = new Array(len);\n    let completed = 0;\n    let emitted = 0;\n    for (let i = 0; i < len; i++) {\n      const source = from(sources[i]);\n      let hasValue = false;\n      subscriber.add(source.subscribe({\n        next: value => {\n          if (!hasValue) {\n            hasValue = true;\n            emitted++;\n          }\n          values[i] = value;\n        },\n        error: err => subscriber.error(err),\n        complete: () => {\n          completed++;\n          if (completed === len || !hasValue) {\n            if (emitted === len) {\n              subscriber.next(keys ?\n                keys.reduce((result, key, i) => (result[key] = values[i], result), {}) :\n                values);\n            }\n            subscriber.complete();\n          }\n        }\n      }));\n    }\n  });\n}\n"],"mappings":"AAAA;AAEA,SAASA,UAAS,QAAM,eAAkB;AAC1C,SAASC,OAAK,QAAM,iBAAmB;AACvC,SAASC,GAAA,QAAU,kBAAM;AAEzB,SAASC,QAAM,QAAM,kBAAS;AAsI9B,SAAMC,IAAA,QAAU,QAAQ;OACtB,SAAAC,QAAiBA,CAAA;aAAjB,KAAiB;OAAjB,IAAAC,EAAA,MAAAA,EAAA,GAAAC,SAAA,CAAiBC,MAAA,EAAAF,EAAA;;EAEjB;MACEG,OAAM,CAAAD,MAAQ,QAAQ;IACtB,IAAIE,OAAO,GAACD,OAAM,CAAE;QAClBR,OAAO,CAAAS,OAAA;MACR,OAAAC,gBAAA,CAAAD,OAAA;IAED;QACEP,QAAU,CAAAO,OAAG,CAAM,IAACE,MAAK,CAAAC,cAAO,CAAAH,OAAA,MAAAE,MAAA,CAAAE,SAAA;MAChC,IAAAC,IAAO,GAAAH,MAAA,CAAAG,IAAA,CAAgBL,OAAM;MAC9B,OAAAC,gBAAA,CAAAI,IAAA,CAAAb,GAAA,WAAAc,GAAA;QAAA,OAAAN,OAAA,CAAAM,GAAA;MAAA,IAAAD,IAAA;IACF;EAGD;MACE,OAAMN,OAAA,CAAAA,OAAc,CAAGD,MAAA,GAAQ,EAAG,KAAe;IACjD,IAAAS,gBAAmB,GAAAR,OAAW,CAACS,GAAA,CAAI;IACnCT,OAAO,GAAAA,OAAA,CAAAD,MAAiB,MAAO,IAAEP,OAAM,CAAIQ,OACrC,OAACA,OAAW,CAAK,KAAAA,OAAA;IAExB,OAAAE,gBAAA,CAAAF,OAAA,QAAAU,IAAA,CAAAjB,GAAA,WAAAkB,IAAA;MAAA,OAAAH,gBAAA,CAAAI,KAAA,SAAAD,IAAA;IAAA;EAED;EACD,OAAAT,gBAAA,CAAAF,OAAA;AAED;SACEE,gBAAqBA,CAACF,OAAA,EAAAM,IAAA;SACpB,IAASf,UAAU,CAAC,UAAOsB,UAAA;IAC3B,IAAIC,GAAG,GAAAd,OAAQ,CAAAD,MAAA;QACbe,GAAA,QAAW;MACXD,UAAO,CAAAE,QAAA;MACR;IACD;IACA,IAAIC,MAAA,GAAS,IAAIC,KAAC,CAAAH,GAAA;IAClB,IAAII,SAAO,GAAK;;QAEdC,OAAM,GAAM,SAAAA,CAAQC,CAAA;MACpB,IAAIC,MAAA,GAAQ1B,IAAG,CAAAK,OAAM,CAAAoB,CAAA;MACrB,IAAAE,QAAW,GAAI;gBACP,CAAAC,GAAA,CAAAF,MAAA,CAAAG,SAAK;YACT,WAAAC,CAAKC,KAAU;cACb,CAAAJ,QAAQ,EAAG;YACXA,QAAO,GAAG;YACXK,OAAA;UACD;UACDX,MAAA,CAAAI,CAAA,IAAAM,KAAA;QACD;QACAE,KAAA,WAAAA,CAAUC,GAAA;UAAA,OAAAhB,UAAA,CAAAe,KAAA,CAAAC,GAAA;QAAA;gBACR,WAAAd,CAAA,EAAY;UACZG,SAAI;cACFA,SAAI,KAAOJ,GAAK,IAAK,CAAAQ,QAAA;gBACnBK,OAAA,KAAWb,GAAI,EAAC;wBACT,CAAAW,IAAM,CAACnB,IAAA,GACZA,IAAA,CAAAwB,MAAQ,WAAAC,MAAA,EAAAxB,GAAA,EAAAa,CAAA;gBAAA,OAAAW,MAAA,CAAAxB,GAAA,IAAAS,MAAA,CAAAI,CAAA,GAAAW,MAAA;cAAA,SACXf,MAAA;YACD;YACDH,UAAA,CAAAE,QAAA;UACF;QACC;MACL;IAxBD;iBAAU,GAAAK,CAAA,GAAAN,GAAA,EAAAM,CAAA;MAwBTD,OAAA,CAAAC,CAAA;IACA;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}