{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { from } from './from';\nimport { empty } from './empty';\nexport function defer(observableFactory) {\n  return new Observable(function (subscriber) {\n    var input;\n    try {\n      input = observableFactory();\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n    var source = input ? from(input) : empty();\n    return source.subscribe(subscriber);\n  });\n}","map":{"version":3,"names":["Observable","from","empty","defer","observableFactory","subscriber","input","err","error","undefined","source","subscribe"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/observable/defer.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { SubscribableOrPromise, ObservedValueOf, ObservableInput } from '../types';\nimport { from } from './from'; // lol\nimport { empty } from './empty';\n\n/**\n * Creates an Observable that, on subscribe, calls an Observable factory to\n * make an Observable for each new Observer.\n *\n * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n * is subscribed.\n * </span>\n *\n * ![](defer.png)\n *\n * `defer` allows you to create the Observable only when the Observer\n * subscribes, and create a fresh Observable for each Observer. It waits until\n * an Observer subscribes to it, and then it generates an Observable,\n * typically with an Observable factory function. It does this afresh for each\n * subscriber, so although each subscriber may think it is subscribing to the\n * same Observable, in fact each subscriber gets its own individual\n * Observable.\n *\n * ## Example\n * ### Subscribe to either an Observable of clicks or an Observable of interval, at random\n * ```ts\n * import { defer, fromEvent, interval } from 'rxjs';\n *\n * const clicksOrInterval = defer(function () {\n *   return Math.random() > 0.5\n *     ? fromEvent(document, 'click')\n *     : interval(1000);\n * });\n * clicksOrInterval.subscribe(x => console.log(x));\n *\n * // Results in the following behavior:\n * // If the result of Math.random() is greater than 0.5 it will listen\n * // for clicks anywhere on the \"document\"; when document is clicked it\n * // will log a MouseEvent object to the console. If the result is less\n * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n * ```\n *\n * @see {@link Observable}\n *\n * @param {function(): SubscribableOrPromise} observableFactory The Observable\n * factory function to invoke for each Observer that subscribes to the output\n * Observable. May also return a Promise, which will be converted on the fly\n * to an Observable.\n * @return {Observable} An Observable whose Observers' subscriptions trigger\n * an invocation of the given Observable factory function.\n * @static true\n * @name defer\n * @owner Observable\n */\nexport function defer<R extends ObservableInput<any> | void>(observableFactory: () => R): Observable<ObservedValueOf<R>> {\n  return new Observable<ObservedValueOf<R>>(subscriber => {\n    let input: R | void;\n    try {\n      input = observableFactory();\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n    const source = input ? from(input as ObservableInput<ObservedValueOf<R>>) : empty();\n    return source.subscribe(subscriber);\n  });\n}\n"],"mappings":"AAAA;AAEA,SAASA,UAAM,QAAM,eAAS;AAC9B,SAASC,IAAA,QAAO,QAAM;AAmDtB,SAAMC,KAAA,QAAuD;OAC3D,SAAWC,MAAAC,iBAA+B;SACxC,IAAIJ,UAAgB,WAAAK,UAAA;IACpB,IAAIC,KAAA;QACF;MACDA,KAAA,GAAAF,iBAAA;IAAC,E,OACAG,GAAA;MACAF,UAAO,CAAAG,KAAS,CAACD,GAAA;MAClB,OAAAE,SAAA;IACD;IACA,IAAAC,MAAO,GAAMJ,KAAC,GAAAL,IAAU,CAAAK,KAAA,IAAWJ,KAAC;IACnC,OAAAQ,MAAA,CAAAC,SAAA,CAAAN,UAAA;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}