{"ast":null,"code":"import { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription } from './Subscription';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nvar Observable = function () {\n  function Observable(subscribe) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n  Observable.prototype.lift = function (operator) {\n    var observable = new Observable();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  };\n  Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n    var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      this._deprecatedSyncErrorSubscribe(subscriber);\n    } else {\n      var _a = this,\n        operator = _a.operator,\n        source = _a.source;\n      subscriber.add(operator ? operator.call(subscriber, source) : source ? this._subscribe(subscriber) : this._trySubscribe(subscriber));\n    }\n    return subscriber;\n  };\n  Observable.prototype._deprecatedSyncErrorSubscribe = function (subscriber) {\n    var localSubscriber = subscriber;\n    localSubscriber._syncErrorHack_isSubscribing = true;\n    var operator = this.operator;\n    if (operator) {\n      subscriber.add(operator.call(subscriber, this.source));\n    } else {\n      try {\n        this._subscribe(subscriber);\n      } catch (err) {\n        localSubscriber.__syncError = err;\n      }\n    }\n    var dest = localSubscriber;\n    while (dest) {\n      if ('__syncError' in dest) {\n        try {\n          throw dest.__syncError;\n        } finally {\n          subscriber.unsubscribe();\n        }\n      }\n      dest = dest.destination;\n    }\n    localSubscriber._syncErrorHack_isSubscribing = false;\n  };\n  Observable.prototype._trySubscribe = function (sink) {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.error(err);\n    }\n  };\n  Observable.prototype.forEach = function (next, promiseCtor) {\n    var _this = this;\n    promiseCtor = getPromiseCtor(promiseCtor);\n    return new promiseCtor(function (resolve, reject) {\n      var subscription;\n      subscription = _this.subscribe(function (value) {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();\n        }\n      }, reject, resolve);\n    });\n  };\n  Observable.prototype._subscribe = function (subscriber) {\n    var _a;\n    return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);\n  };\n  Observable.prototype[Symbol_observable] = function () {\n    return this;\n  };\n  Observable.prototype.pipe = function () {\n    var operations = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      operations[_i] = arguments[_i];\n    }\n    return operations.length ? pipeFromArray(operations)(this) : this;\n  };\n  Observable.prototype.toPromise = function (promiseCtor) {\n    var _this = this;\n    promiseCtor = getPromiseCtor(promiseCtor);\n    return new promiseCtor(function (resolve, reject) {\n      var value;\n      _this.subscribe(function (x) {\n        return value = x;\n      }, function (err) {\n        return reject(err);\n      }, function () {\n        return resolve(value);\n      });\n    });\n  };\n  Observable.create = function (subscribe) {\n    return new Observable(subscribe);\n  };\n  return Observable;\n}();\nexport { Observable };\nfunction getPromiseCtor(promiseCtor) {\n  var _a;\n  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;\n}\nfunction isObserver(value) {\n  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\nfunction isSubscriber(value) {\n  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);\n}","map":{"version":3,"names":["SafeSubscriber","Subscriber","isSubscription","observable","Symbol_observable","pipeFromArray","config","isFunction","Observable","subscribe","_subscribe","prototype","lift","operator","source","observerOrNext","error","complete","subscriber","isSubscriber","useDeprecatedSynchronousErrorHandling","_deprecatedSyncErrorSubscribe","_a","add","call","_trySubscribe","localSubscriber","_syncErrorHack_isSubscribing","err","__syncError","dest","unsubscribe","destination","sink","forEach","next","promiseCtor","_this","getPromiseCtor","resolve","reject","subscription","value","pipe","operations","_i","arguments","length","toPromise","x","create","Promise","isObserver"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/rxjs/src/internal/Observable.ts"],"sourcesContent":["/**\n * @prettier\n */\nimport { Operator } from './Operator';\nimport { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription, Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, Subscribable, Observer } from './types';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  source: Observable<any> | undefined;\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  operator: Operator<any, T> | undefined;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new Observable by calling the Observable constructor\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new observable\n   * @nocollapse\n   * @deprecated Use `new Observable()` instead. Will be removed in v8.\n   */\n  static create: (...args: any[]) => any = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable instance as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param operator the operator defining the operation to take on the observable\n   * @return a new observable with the Operator applied\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * If you have implemented an operator using `lift`, it is recommended that you create an\n   * operator by simply returning `new Observable()` directly. See \"Creating new operators from\n   * scratch\" section here: https://rxjs.dev/guide/operators\n   */\n  lift<R>(operator?: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: Partial<Observer<T>>): Subscription;\n  subscribe(next: (value: T) => void): Subscription;\n  /** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\n  subscribe(next?: ((value: T) => void) | null, error?: ((error: any) => void) | null, complete?: (() => void) | null): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular, do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided and an error happens,\n   * it will be thrown asynchronously. Errors thrown asynchronously cannot be caught using `try`/`catch`. Instead,\n   * use the {@link onUnhandledError} configuration option or use a runtime handler (like `window.onerror` or\n   * `process.on('error)`) to be notified of unhandled errors. Because of this, it's recommended that you provide\n   * an `error` method to avoid missing thrown errors.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of an Observer,\n   * if you do not need to listen for something, you can omit a function by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to the `error` function, as with an Observer, if not provided, errors emitted by an Observable will be thrown asynchronously.\n   *\n   * You can, however, subscribe with no parameters at all. This may be the case where you're not interested in terminal events\n   * and you also handled emissions internally by using operators (e.g. using `tap`).\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```ts\n   * import { of } from 'rxjs';\n   *\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() {\n   *     // We actually could just remove this method,\n   *     // since we do not really care about errors right now.\n   *   },\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   *   .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```ts\n   * import { of } from 'rxjs'\n   *\n   * let sum = 0;\n   *\n   * of(1, 2, 3).subscribe(\n   *   value => {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   () => console.log('Sum equals: ' + sum)\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```ts\n   * import { interval } from 'rxjs';\n   *\n   * const subscription = interval(1000).subscribe({\n   *   next(num) {\n   *     console.log(num)\n   *   },\n   *   complete() {\n   *     // Will not be called, even when cancelling subscription.\n   *     console.log('completed!');\n   *   }\n   * });\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown asynchronously as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {Subscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((error: any) => void) | null,\n    complete?: (() => void) | null\n  ): Subscription {\n    const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      this._deprecatedSyncErrorSubscribe(subscriber);\n    } else {\n      const { operator, source } = this;\n      subscriber.add(\n        operator\n          ? // We're dealing with a subscription in the\n            // operator chain to one of our lifted operators.\n            operator.call(subscriber, source)\n          : source\n          ? // If `source` has a value, but `operator` does not, something that\n            // had intimate knowledge of our API, like our `Subject`, must have\n            // set it. We're going to just call `_subscribe` directly.\n            this._subscribe(subscriber)\n          : // In all other cases, we're likely wrapping a user-provided initializer\n            // function, so we need to catch errors and handle them appropriately.\n            this._trySubscribe(subscriber)\n      );\n    }\n    return subscriber;\n  }\n\n  /**\n   * REMOVE THIS ENTIRE METHOD IN VERSION 8.\n   */\n  private _deprecatedSyncErrorSubscribe(subscriber: Subscriber<unknown>) {\n    const localSubscriber: any = subscriber;\n    localSubscriber._syncErrorHack_isSubscribing = true;\n    const { operator } = this;\n    if (operator) {\n      // We don't need to try/catch on operators, as they\n      // are doing their own try/catching, and will\n      // properly decorate the subscriber with `__syncError`.\n      subscriber.add(operator.call(subscriber, this.source));\n    } else {\n      try {\n        this._subscribe(subscriber);\n      } catch (err) {\n        localSubscriber.__syncError = err;\n      }\n    }\n\n    // In the case of the deprecated sync error handling,\n    // we need to crawl forward through our subscriber chain and\n    // look to see if there's any synchronously thrown errors.\n    // Does this suck for perf? Yes. So stop using the deprecated sync\n    // error handling already. We're removing this in v8.\n    let dest = localSubscriber;\n    while (dest) {\n      // Technically, someone could throw something falsy, like 0, or \"\",\n      // so we need to check to see if anything was thrown, and we know\n      // that by the mere existence of `__syncError`.\n      if ('__syncError' in dest) {\n        try {\n          throw dest.__syncError;\n        } finally {\n          subscriber.unsubscribe();\n        }\n      }\n      dest = dest.destination;\n    }\n\n    localSubscriber._syncErrorHack_isSubscribing = false;\n  }\n\n  /** @internal */\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      // We don't need to return anything in this case,\n      // because it's just going to try to `add()` to a subscription\n      // above.\n      sink.error(err);\n    }\n  }\n\n  /**\n   * Used as a NON-CANCELLABLE means of subscribing to an observable, for use with\n   * APIs that expect promises, like `async/await`. You cannot unsubscribe from this.\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * ### Example:\n   *\n   * ```ts\n   * import { interval } from 'rxjs';\n   * import { take } from 'rxjs/operators';\n   *\n   * const source$ = interval(1000).pipe(take(4));\n   *\n   * async function getTotal() {\n   *    let total = 0;\n   *\n   *    await source$.forEach(value => {\n   *      total += value;\n   *      console.log('observable -> ', value);\n   *    });\n   *\n   *    return total;\n   * }\n   *\n   * getTotal().then(\n   *    total => console.log('Total:', total)\n   * )\n   *\n   * // Expected:\n   * // \"observable -> 0\"\n   * // \"observable -> 1\"\n   * // \"observable -> 2\"\n   * // \"observable -> 3\"\n   * // \"Total: 6\"\n   * ```\n   * @param next a handler for each value emitted by the observable\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void): Promise<void>;\n\n  /**\n   * @param next a handler for each value emitted by the observable\n   * @param promiseCtor a constructor function used to instantiate the Promise\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   * @deprecated Passing a Promise constructor will no longer be available\n   * in upcoming versions of RxJS. This is because it adds weight to the library, for very\n   * little benefit. If you need this functionality, it is recommended that you either\n   * polyfill Promise, or you create an adapter to convert the returned native promise\n   * to whatever promise implementation you wanted. Will be removed in v8.\n   */\n  forEach(next: (value: T) => void, promiseCtor: PromiseConstructorLike): Promise<void>;\n\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a ReferenceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe(\n        (value) => {\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription?.unsubscribe();\n          }\n        },\n        reject,\n        resolve\n      );\n    }) as Promise<void>;\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source?.subscribe(subscriber);\n  }\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>\n  ): Observable<D>;\n  pipe<A, B, C, D, E>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>\n  ): Observable<E>;\n  pipe<A, B, C, D, E, F>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>\n  ): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>\n  ): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>\n  ): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>\n  ): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>,\n    ...operations: OperatorFunction<any, any>[]\n  ): Observable<unknown>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```ts\n   * import { interval } from 'rxjs';\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    return operations.length ? pipeFromArray(operations)(this) : this;\n  }\n\n  /* tslint:disable:max-line-length */\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. */\n  toPromise(): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. */\n  toPromise(PromiseCtor: typeof Promise): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. */\n  toPromise(PromiseCtor: PromiseConstructorLike): Promise<T | undefined>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Subscribe to this Observable and get a Promise resolving on\n   * `complete` with the last emission (if any).\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * @method toPromise\n   * @param [promiseCtor] a constructor function used to instantiate\n   * the Promise\n   * @return A Promise that resolves with the last value emit, or\n   * rejects on an error. If there were no emissions, Promise\n   * resolves with undefined.\n   * @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8.\n   */\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T | undefined> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: T | undefined;\n      this.subscribe(\n        (x: T) => (value = x),\n        (err: any) => reject(err),\n        () => resolve(value)\n      );\n    }) as Promise<T | undefined>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  return promiseCtor ?? config.Promise ?? Promise;\n}\n\nfunction isObserver<T>(value: any): value is Observer<T> {\n  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\n\nfunction isSubscriber<T>(value: any): value is Subscriber<T> {\n  return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}