{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function sequenceEqual(compareTo, comparator) {\n  return function (source) {\n    return source.lift(new SequenceEqualOperator(compareTo, comparator));\n  };\n}\nvar SequenceEqualOperator = /*@__PURE__*/function () {\n  function SequenceEqualOperator(compareTo, comparator) {\n    this.compareTo = compareTo;\n    this.comparator = comparator;\n  }\n  SequenceEqualOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));\n  };\n  return SequenceEqualOperator;\n}();\nexport { SequenceEqualOperator };\nvar SequenceEqualSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SequenceEqualSubscriber, _super);\n  function SequenceEqualSubscriber(destination, compareTo, comparator) {\n    var _this = _super.call(this, destination) || this;\n    _this.compareTo = compareTo;\n    _this.comparator = comparator;\n    _this._a = [];\n    _this._b = [];\n    _this._oneComplete = false;\n    _this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));\n    return _this;\n  }\n  SequenceEqualSubscriber.prototype._next = function (value) {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  };\n  SequenceEqualSubscriber.prototype._complete = function () {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n    this.unsubscribe();\n  };\n  SequenceEqualSubscriber.prototype.checkValues = function () {\n    var _c = this,\n      _a = _c._a,\n      _b = _c._b,\n      comparator = _c.comparator;\n    while (_a.length > 0 && _b.length > 0) {\n      var a = _a.shift();\n      var b = _b.shift();\n      var areEqual = false;\n      try {\n        areEqual = comparator ? comparator(a, b) : a === b;\n      } catch (e) {\n        this.destination.error(e);\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  };\n  SequenceEqualSubscriber.prototype.emit = function (value) {\n    var destination = this.destination;\n    destination.next(value);\n    destination.complete();\n  };\n  SequenceEqualSubscriber.prototype.nextB = function (value) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  };\n  SequenceEqualSubscriber.prototype.completeB = function () {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  };\n  return SequenceEqualSubscriber;\n}(Subscriber);\nexport { SequenceEqualSubscriber };\nvar SequenceEqualCompareToSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SequenceEqualCompareToSubscriber, _super);\n  function SequenceEqualCompareToSubscriber(destination, parent) {\n    var _this = _super.call(this, destination) || this;\n    _this.parent = parent;\n    return _this;\n  }\n  SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n    this.parent.nextB(value);\n  };\n  SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n    this.parent.error(err);\n    this.unsubscribe();\n  };\n  SequenceEqualCompareToSubscriber.prototype._complete = function () {\n    this.parent.completeB();\n    this.unsubscribe();\n  };\n  return SequenceEqualCompareToSubscriber;\n}(Subscriber);","map":{"version":3,"names":["tslib_1","Subscriber","sequenceEqual","compareTo","comparator","source","lift","SequenceEqualOperator","prototype","call","subscriber","subscribe","SequenceEqualSubscriber","_super","__extends","destination","_this","_a","_b","_oneComplete","_next","value","length","emit","push","checkValues","_complete","unsubscribe","_c","a","shift","b","areEqual","e","error","next","complete","nextB","completeB","SequenceEqualCompareToSubscriber","parent","_error","err"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/sequenceEqual.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { Observer, OperatorFunction } from '../types';\n\n/**\n * Compares all values of two observables in sequence using an optional comparator function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * ![](sequenceEqual.png)\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * ## Example\n * figure out if the Konami code matches\n * ```ts\n * import { from, fromEvent } from 'rxjs';\n * import { sequenceEqual, bufferCount, mergeMap, map } from 'rxjs/operators';\n *\n * const codes = from([\n *   'ArrowUp',\n *   'ArrowUp',\n *   'ArrowDown',\n *   'ArrowDown',\n *   'ArrowLeft',\n *   'ArrowRight',\n *   'ArrowLeft',\n *   'ArrowRight',\n *   'KeyB',\n *   'KeyA',\n *   'Enter', // no start key, clearly.\n * ]);\n *\n * const keys = fromEvent(document, 'keyup').pipe(map(e => e.code));\n * const matches = keys.pipe(\n *   bufferCount(11, 1),\n *   mergeMap(\n *     last11 => from(last11).pipe(sequenceEqual(codes)),\n *   ),\n * );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparator] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparator?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparator));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparator: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparator: (a: T, b: T) => boolean) {\n    super(destination);\n    (this.destination as Subscription).add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n    this.unsubscribe();\n  }\n\n  checkValues() {\n    const { _a, _b, comparator } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      try {\n        areEqual = comparator ? comparator(a, b) : a === b;\n      } catch (e) {\n        this.destination.error(e);\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n\n  completeB() {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.completeB();\n    this.unsubscribe();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}