{"ast":null,"code":"var _jsxFileName = \"/Users/mdabdurrazzak/RadInsu/src/Profile.js\";\nimport React from 'react';\nimport { RadixSimpleIdentity } from 'radixdlt';\nimport { RadixTransactionBuilder } from 'radixdlt/build/main/transactions/RadixTransactionBuilder';\nimport { RadixAccountAddress } from 'radixdlt/build/main/account/RadixAccountAddress';\nimport { RadixAddress } from 'radixdlt/build/main/account/RadixAddress';\nimport { RadixUInt256 } from 'radixdlt/build/main/primitives/RadixUInt256';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignUp = ({\n  username,\n  password,\n  premiumAmount,\n  payoutAmount,\n  riskLevel,\n  rdt\n}) => {\n  const signUp = async () => {\n    try {\n      // Validate input values (username, password, etc.) here\n\n      // Create a new Radix identity\n      const identity = RadixSimpleIdentity.fromRandom();\n\n      // Create a new Radix account address\n      const accountAddress = RadixAccountAddress.fromPublic(identity.getPublic());\n\n      // Define parameters for the new insurance contract\n      const insuredDomain = username; // Assuming username is the insured domain\n      // Use the premiumAmount, payoutAmount, and riskLevel from the props\n      const premiumAmountValue = new RadixUInt256(premiumAmount); // Assuming premiumAmount is a RadixUInt256\n      const payoutAmountValue = new RadixUInt256(payoutAmount); // Assuming payoutAmount is a RadixUInt256\n      const riskLevelValue = new RadixUInt256(riskLevel); // Assuming riskLevel is a RadixUInt256\n\n      // Create a new transaction to call the insurance contract creation function\n      const transaction = RadixTransactionBuilder.createPayloadAtom(accountAddress, RadixAddress.ROOT, 'parametric_insurance::ParametricInsurance', 'new', insuredDomain, premiumAmountValue, payoutAmountValue, riskLevelValue);\n\n      // Sign the transaction with the user's identity\n      transaction.sign(identity);\n\n      // Send the transaction to the network\n      const result = await rdt.transaction.submitAtom(transaction);\n\n      // Handle success\n      console.log('Insurance contract creation transaction submitted:', result);\n    } catch (error) {\n      // Handle error\n      console.error('Error creating insurance contract:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: signUp,\n    children: \"Sign Up\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_c = SignUp;\nexport default SignUp;\nvar _c;\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"names":["React","RadixSimpleIdentity","RadixTransactionBuilder","RadixAccountAddress","RadixAddress","RadixUInt256","jsxDEV","_jsxDEV","SignUp","username","password","premiumAmount","payoutAmount","riskLevel","rdt","signUp","identity","fromRandom","accountAddress","fromPublic","getPublic","insuredDomain","premiumAmountValue","payoutAmountValue","riskLevelValue","transaction","createPayloadAtom","ROOT","sign","result","submitAtom","console","log","error","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mdabdurrazzak/RadInsu/src/Profile.js"],"sourcesContent":["import React from 'react';\nimport { RadixSimpleIdentity } from 'radixdlt';\nimport { RadixTransactionBuilder } from 'radixdlt/build/main/transactions/RadixTransactionBuilder';\nimport { RadixAccountAddress } from 'radixdlt/build/main/account/RadixAccountAddress';\nimport { RadixAddress } from 'radixdlt/build/main/account/RadixAddress';\nimport { RadixUInt256 } from 'radixdlt/build/main/primitives/RadixUInt256';\n\nconst SignUp = ({ username, password, premiumAmount, payoutAmount, riskLevel, rdt }) => {\n  const signUp = async () => {\n    try {\n      // Validate input values (username, password, etc.) here\n\n      // Create a new Radix identity\n      const identity = RadixSimpleIdentity.fromRandom();\n\n      // Create a new Radix account address\n      const accountAddress = RadixAccountAddress.fromPublic(identity.getPublic());\n\n      // Define parameters for the new insurance contract\n      const insuredDomain = username; // Assuming username is the insured domain\n      // Use the premiumAmount, payoutAmount, and riskLevel from the props\n      const premiumAmountValue = new RadixUInt256(premiumAmount); // Assuming premiumAmount is a RadixUInt256\n      const payoutAmountValue = new RadixUInt256(payoutAmount); // Assuming payoutAmount is a RadixUInt256\n      const riskLevelValue = new RadixUInt256(riskLevel); // Assuming riskLevel is a RadixUInt256\n\n      // Create a new transaction to call the insurance contract creation function\n      const transaction = RadixTransactionBuilder.createPayloadAtom(\n        accountAddress,\n        RadixAddress.ROOT,\n        'parametric_insurance::ParametricInsurance',\n        'new',\n        insuredDomain,\n        premiumAmountValue,\n        payoutAmountValue,\n        riskLevelValue\n      );\n\n      // Sign the transaction with the user's identity\n      transaction.sign(identity);\n\n      // Send the transaction to the network\n      const result = await rdt.transaction.submitAtom(transaction);\n\n      // Handle success\n      console.log('Insurance contract creation transaction submitted:', result);\n    } catch (error) {\n      // Handle error\n      console.error('Error creating insurance contract:', error);\n    }\n  };\n\n  return (\n    <button onClick={signUp}>Sign Up</button>\n  );\n};\n\nexport default SignUp;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,mBAAmB,QAAQ,UAAU;AAC9C,SAASC,uBAAuB,QAAQ,0DAA0D;AAClG,SAASC,mBAAmB,QAAQ,iDAAiD;AACrF,SAASC,YAAY,QAAQ,0CAA0C;AACvE,SAASC,YAAY,QAAQ,6CAA6C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3E,MAAMC,MAAM,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC,aAAa;EAAEC,YAAY;EAAEC,SAAS;EAAEC;AAAI,CAAC,KAAK;EACtF,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF;;MAEA;MACA,MAAMC,QAAQ,GAAGf,mBAAmB,CAACgB,UAAU,CAAC,CAAC;;MAEjD;MACA,MAAMC,cAAc,GAAGf,mBAAmB,CAACgB,UAAU,CAACH,QAAQ,CAACI,SAAS,CAAC,CAAC,CAAC;;MAE3E;MACA,MAAMC,aAAa,GAAGZ,QAAQ,CAAC,CAAC;MAChC;MACA,MAAMa,kBAAkB,GAAG,IAAIjB,YAAY,CAACM,aAAa,CAAC,CAAC,CAAC;MAC5D,MAAMY,iBAAiB,GAAG,IAAIlB,YAAY,CAACO,YAAY,CAAC,CAAC,CAAC;MAC1D,MAAMY,cAAc,GAAG,IAAInB,YAAY,CAACQ,SAAS,CAAC,CAAC,CAAC;;MAEpD;MACA,MAAMY,WAAW,GAAGvB,uBAAuB,CAACwB,iBAAiB,CAC3DR,cAAc,EACdd,YAAY,CAACuB,IAAI,EACjB,2CAA2C,EAC3C,KAAK,EACLN,aAAa,EACbC,kBAAkB,EAClBC,iBAAiB,EACjBC,cACF,CAAC;;MAED;MACAC,WAAW,CAACG,IAAI,CAACZ,QAAQ,CAAC;;MAE1B;MACA,MAAMa,MAAM,GAAG,MAAMf,GAAG,CAACW,WAAW,CAACK,UAAU,CAACL,WAAW,CAAC;;MAE5D;MACAM,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAEH,MAAM,CAAC;IAC3E,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd;MACAF,OAAO,CAACE,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC5D;EACF,CAAC;EAED,oBACE1B,OAAA;IAAQ2B,OAAO,EAAEnB,MAAO;IAAAoB,QAAA,EAAC;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAE7C,CAAC;AAACC,EAAA,GA/CIhC,MAAM;AAiDZ,eAAeA,MAAM;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}