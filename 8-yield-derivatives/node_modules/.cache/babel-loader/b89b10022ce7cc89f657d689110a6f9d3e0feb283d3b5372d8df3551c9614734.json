{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.radixCoreAPI = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst actions_1 = require(\"../actions\");\nconst util_1 = require(\"../../../util\");\nconst radixCoreAPI = (node, api) => {\n  let headers;\n  const toObs = (pickFn, input) =>\n  // @ts-ignore\n  (0, rxjs_1.defer)(() => {\n    const fn = pickFn(api);\n    // @ts-ignore\n    return (0, util_1.toObservable)(fn(input, headers));\n  });\n  const toObsMap = (pickFn, mapOutput, input) => toObs(pickFn, input).pipe((0, operators_1.map)(o => mapOutput(o)));\n  return {\n    setHeaders: newHeaders => headers = newHeaders,\n    node,\n    validators: input => toObs(a => a['validators'], {\n      network_identifier: {\n        network: input\n      }\n    }),\n    lookupValidator: input => toObs(a => a['validator'], {\n      network_identifier: {\n        network: input.network\n      },\n      validator_identifier: {\n        address: input.toString()\n      }\n    }),\n    networkId: () => toObsMap(a => a['gateway'], m => m.network, {\n      body: {}\n    }),\n    tokenBalancesForAddress: address => toObs(a => a['accountBalances'], {\n      network_identifier: {\n        network: address.network\n      },\n      account_identifier: {\n        address: address.toString()\n      }\n    }),\n    transactionHistory: input => {\n      var _a;\n      return toObs(a => a['accountTransactions'], {\n        account_identifier: {\n          address: input.address.toString()\n        },\n        network_identifier: {\n          network: input.address.network\n        },\n        limit: input.size,\n        cursor: (_a = input.cursor) === null || _a === void 0 ? void 0 : _a.toString()\n      });\n    },\n    recentTransactions: input => {\n      var _a;\n      return toObs(a => a['recentTransactions'], {\n        cursor: (_a = input.cursor) === null || _a === void 0 ? void 0 : _a.toString(),\n        network_identifier: {\n          network: input.network\n        }\n      });\n    },\n    nativeToken: network => toObs(a => a['nativeTokenInfo'], {\n      network_identifier: {\n        network\n      }\n    }),\n    tokenInfo: rri => toObs(a => a['tokenInfo'], {\n      network_identifier: {\n        network: rri.network\n      },\n      token_identifier: {\n        rri: rri.toString()\n      }\n    }),\n    stakesForAddress: address => toObs(a => a['stakePositions'], {\n      network_identifier: {\n        network: address.network\n      },\n      account_identifier: {\n        address: address.toString()\n      }\n    }),\n    unstakesForAddress: address => toObs(a => a['unstakePositions'], {\n      network_identifier: {\n        network: address.network\n      },\n      account_identifier: {\n        address: address.toString()\n      }\n    }),\n    transactionStatus: (txID, network) => toObs(a => a['getTransaction'], {\n      network_identifier: {\n        network\n      },\n      transaction_identifier: {\n        hash: txID.toString()\n      }\n    }),\n    buildTransaction: (transactionIntent, from) => toObs(a => a['buildTransaction'], {\n      network_identifier: {\n        network: from.network\n      },\n      actions: transactionIntent.actions.map(action => action.type === actions_1.ActionType.TOKEN_TRANSFER ? {\n        type: 'TransferTokens',\n        from_account: {\n          address: action.from_account.toString()\n        },\n        to_account: {\n          address: action.to_account.toString()\n        },\n        amount: {\n          value: action.amount.toString(),\n          token_identifier: {\n            rri: action.rri.toString()\n          }\n        }\n      } : action.type === actions_1.ActionType.STAKE_TOKENS ? {\n        type: 'StakeTokens',\n        from_account: {\n          address: action.from_account.toString()\n        },\n        to_validator: {\n          address: action.to_validator.toString()\n        },\n        amount: {\n          value: action.amount.toString(),\n          token_identifier: {\n            rri: action.rri.toString()\n          }\n        }\n      } : Object.assign({\n        type: 'UnstakeTokens',\n        from_validator: {\n          address: action.from_validator.toString()\n        },\n        to_account: {\n          address: action.to_account.toString()\n        }\n      }, action.amount.valueOf() != 0 ? {\n        amount: {\n          value: action.amount.toString(),\n          token_identifier: {\n            rri: action.rri.toString()\n          }\n        }\n      } : {\n        unstake_percentage: action.unstake_percentage.valueOf()\n      })),\n      fee_payer: {\n        address: from.toString()\n      },\n      message: transactionIntent.message ? transactionIntent.message.toString('hex') : undefined,\n      disable_token_mint_and_burn: true\n    }),\n    finalizeTransaction: (network, signedTransaction) => toObs(a => a['finalizeTransaction'], {\n      network_identifier: {\n        network\n      },\n      unsigned_transaction: signedTransaction.transaction.blob,\n      signature: {\n        bytes: signedTransaction.signature.toDER(),\n        public_key: {\n          hex: signedTransaction.publicKeyOfSigner.toString()\n        }\n      }\n    }),\n    submitSignedTransaction: (network, finalizedTx) => toObs(a => a['submitTransaction'], {\n      network_identifier: {\n        network\n      },\n      signed_transaction: finalizedTx.blob\n    })\n  };\n};\nexports.radixCoreAPI = radixCoreAPI;","map":{"version":3,"names":["Object","defineProperty","exports","value","radixCoreAPI","rxjs_1","require","operators_1","actions_1","util_1","node","api","headers","toObs","pickFn","input","defer","fn","toObservable","toObsMap","mapOutput","pipe","map","o","setHeaders","newHeaders","validators","a","network_identifier","network","lookupValidator","validator_identifier","address","toString","networkId","m","body","tokenBalancesForAddress","account_identifier","transactionHistory","_a","limit","size","cursor","recentTransactions","nativeToken","tokenInfo","rri","token_identifier","stakesForAddress","unstakesForAddress","transactionStatus","txID","transaction_identifier","hash","buildTransaction","transactionIntent","from","actions","action","type","ActionType","TOKEN_TRANSFER","from_account","to_account","amount","STAKE_TOKENS","to_validator","assign","from_validator","valueOf","unstake_percentage","fee_payer","message","undefined","disable_token_mint_and_burn","finalizeTransaction","signedTransaction","unsigned_transaction","transaction","blob","signature","bytes","toDER","public_key","hex","publicKeyOfSigner","submitSignedTransaction","finalizedTx","signed_transaction"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/application/dist/api/radixCoreAPI.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.radixCoreAPI = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst actions_1 = require(\"../actions\");\nconst util_1 = require(\"../../../util\");\nconst radixCoreAPI = (node, api) => {\n    let headers;\n    const toObs = (pickFn, input) => \n    // @ts-ignore\n    (0, rxjs_1.defer)(() => {\n        const fn = pickFn(api);\n        // @ts-ignore\n        return (0, util_1.toObservable)(fn(input, headers));\n    });\n    const toObsMap = (pickFn, mapOutput, input) => toObs(pickFn, input).pipe((0, operators_1.map)(o => mapOutput(o)));\n    return {\n        setHeaders: (newHeaders) => (headers = newHeaders),\n        node,\n        validators: (input) => toObs(a => a['validators'], {\n            network_identifier: { network: input },\n        }),\n        lookupValidator: (input) => toObs(a => a['validator'], {\n            network_identifier: { network: input.network },\n            validator_identifier: {\n                address: input.toString(),\n            },\n        }),\n        networkId: () => toObsMap(a => a['gateway'], m => m.network, {\n            body: {},\n        }),\n        tokenBalancesForAddress: (address) => toObs(a => a['accountBalances'], {\n            network_identifier: { network: address.network },\n            account_identifier: {\n                address: address.toString(),\n            },\n        }),\n        transactionHistory: (input) => {\n            var _a;\n            return toObs(a => a['accountTransactions'], {\n                account_identifier: {\n                    address: input.address.toString(),\n                },\n                network_identifier: { network: input.address.network },\n                limit: input.size,\n                cursor: (_a = input.cursor) === null || _a === void 0 ? void 0 : _a.toString(),\n            });\n        },\n        recentTransactions: (input) => {\n            var _a;\n            return toObs(a => a['recentTransactions'], {\n                cursor: (_a = input.cursor) === null || _a === void 0 ? void 0 : _a.toString(),\n                network_identifier: { network: input.network },\n            });\n        },\n        nativeToken: (network) => toObs(a => a['nativeTokenInfo'], {\n            network_identifier: { network },\n        }),\n        tokenInfo: (rri) => toObs(a => a['tokenInfo'], {\n            network_identifier: { network: rri.network },\n            token_identifier: {\n                rri: rri.toString(),\n            },\n        }),\n        stakesForAddress: (address) => toObs(a => a['stakePositions'], {\n            network_identifier: { network: address.network },\n            account_identifier: {\n                address: address.toString(),\n            },\n        }),\n        unstakesForAddress: (address) => toObs(a => a['unstakePositions'], {\n            network_identifier: { network: address.network },\n            account_identifier: {\n                address: address.toString(),\n            },\n        }),\n        transactionStatus: (txID, network) => toObs(a => a['getTransaction'], {\n            network_identifier: { network },\n            transaction_identifier: {\n                hash: txID.toString(),\n            },\n        }),\n        buildTransaction: (transactionIntent, from) => toObs(a => a['buildTransaction'], {\n            network_identifier: { network: from.network },\n            actions: transactionIntent.actions.map(action => action.type === actions_1.ActionType.TOKEN_TRANSFER\n                ? {\n                    type: 'TransferTokens',\n                    from_account: {\n                        address: action.from_account.toString(),\n                    },\n                    to_account: {\n                        address: action.to_account.toString(),\n                    },\n                    amount: {\n                        value: action.amount.toString(),\n                        token_identifier: {\n                            rri: action.rri.toString(),\n                        },\n                    },\n                }\n                : action.type === actions_1.ActionType.STAKE_TOKENS\n                    ? {\n                        type: 'StakeTokens',\n                        from_account: {\n                            address: action.from_account.toString(),\n                        },\n                        to_validator: {\n                            address: action.to_validator.toString(),\n                        },\n                        amount: {\n                            value: action.amount.toString(),\n                            token_identifier: {\n                                rri: action.rri.toString(),\n                            },\n                        },\n                    }\n                    : Object.assign({\n                        type: 'UnstakeTokens',\n                        from_validator: {\n                            address: action.from_validator.toString(),\n                        },\n                        to_account: {\n                            address: action.to_account.toString(),\n                        },\n                    }, action.amount.valueOf() != 0\n                        ? {\n                            amount: {\n                                value: action.amount.toString(),\n                                token_identifier: {\n                                    rri: action.rri.toString(),\n                                },\n                            },\n                        }\n                        : {\n                            unstake_percentage: action.unstake_percentage.valueOf(),\n                        })),\n            fee_payer: {\n                address: from.toString(),\n            },\n            message: transactionIntent.message\n                ? transactionIntent.message.toString('hex')\n                : undefined,\n            disable_token_mint_and_burn: true,\n        }),\n        finalizeTransaction: (network, signedTransaction) => toObs(a => a['finalizeTransaction'], {\n            network_identifier: { network },\n            unsigned_transaction: signedTransaction.transaction.blob,\n            signature: {\n                bytes: signedTransaction.signature.toDER(),\n                public_key: {\n                    hex: signedTransaction.publicKeyOfSigner.toString(),\n                },\n            },\n        }),\n        submitSignedTransaction: (network, finalizedTx) => toObs(a => a['submitTransaction'], {\n            network_identifier: { network },\n            signed_transaction: finalizedTx.blob,\n        }),\n    };\n};\nexports.radixCoreAPI = radixCoreAPI;\n//# sourceMappingURL=radixCoreAPI.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}