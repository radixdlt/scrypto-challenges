{"ast":null,"code":"/**\n * Base-N/Base-X encoding/decoding functions.\n *\n * Original implementation from base-x:\n * https://github.com/cryptocoinjs/base-x\n *\n * Which is MIT licensed:\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nvar api = {};\nmodule.exports = api;\n\n// baseN alphabet indexes\nvar _reverseAlphabets = {};\n\n/**\n * BaseN-encodes a Uint8Array using the given alphabet.\n *\n * @param input the Uint8Array to encode.\n * @param maxline the maximum number of encoded characters per line to use,\n *          defaults to none.\n *\n * @return the baseN-encoded output string.\n */\napi.encode = function (input, alphabet, maxline) {\n  if (typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n  if (maxline !== undefined && typeof maxline !== 'number') {\n    throw new TypeError('\"maxline\" must be a number.');\n  }\n  var output = '';\n  if (!(input instanceof Uint8Array)) {\n    // assume forge byte buffer\n    output = _encodeWithByteBuffer(input, alphabet);\n  } else {\n    var i = 0;\n    var base = alphabet.length;\n    var first = alphabet.charAt(0);\n    var digits = [0];\n    for (i = 0; i < input.length; ++i) {\n      for (var j = 0, carry = input[i]; j < digits.length; ++j) {\n        carry += digits[j] << 8;\n        digits[j] = carry % base;\n        carry = carry / base | 0;\n      }\n      while (carry > 0) {\n        digits.push(carry % base);\n        carry = carry / base | 0;\n      }\n    }\n\n    // deal with leading zeros\n    for (i = 0; input[i] === 0 && i < input.length - 1; ++i) {\n      output += first;\n    }\n    // convert digits to a string\n    for (i = digits.length - 1; i >= 0; --i) {\n      output += alphabet[digits[i]];\n    }\n  }\n  if (maxline) {\n    var regex = new RegExp('.{1,' + maxline + '}', 'g');\n    output = output.match(regex).join('\\r\\n');\n  }\n  return output;\n};\n\n/**\n * Decodes a baseN-encoded (using the given alphabet) string to a\n * Uint8Array.\n *\n * @param input the baseN-encoded input string.\n *\n * @return the Uint8Array.\n */\napi.decode = function (input, alphabet) {\n  if (typeof input !== 'string') {\n    throw new TypeError('\"input\" must be a string.');\n  }\n  if (typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n  var table = _reverseAlphabets[alphabet];\n  if (!table) {\n    // compute reverse alphabet\n    table = _reverseAlphabets[alphabet] = [];\n    for (var i = 0; i < alphabet.length; ++i) {\n      table[alphabet.charCodeAt(i)] = i;\n    }\n  }\n\n  // remove whitespace characters\n  input = input.replace(/\\s/g, '');\n  var base = alphabet.length;\n  var first = alphabet.charAt(0);\n  var bytes = [0];\n  for (var i = 0; i < input.length; i++) {\n    var value = table[input.charCodeAt(i)];\n    if (value === undefined) {\n      return;\n    }\n    for (var j = 0, carry = value; j < bytes.length; ++j) {\n      carry += bytes[j] * base;\n      bytes[j] = carry & 0xff;\n      carry >>= 8;\n    }\n    while (carry > 0) {\n      bytes.push(carry & 0xff);\n      carry >>= 8;\n    }\n  }\n\n  // deal with leading zeros\n  for (var k = 0; input[k] === first && k < input.length - 1; ++k) {\n    bytes.push(0);\n  }\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(bytes.reverse());\n  }\n  return new Uint8Array(bytes.reverse());\n};\nfunction _encodeWithByteBuffer(input, alphabet) {\n  var i = 0;\n  var base = alphabet.length;\n  var first = alphabet.charAt(0);\n  var digits = [0];\n  for (i = 0; i < input.length(); ++i) {\n    for (var j = 0, carry = input.at(i); j < digits.length; ++j) {\n      carry += digits[j] << 8;\n      digits[j] = carry % base;\n      carry = carry / base | 0;\n    }\n    while (carry > 0) {\n      digits.push(carry % base);\n      carry = carry / base | 0;\n    }\n  }\n  var output = '';\n\n  // deal with leading zeros\n  for (i = 0; input.at(i) === 0 && i < input.length() - 1; ++i) {\n    output += first;\n  }\n  // convert digits to a string\n  for (i = digits.length - 1; i >= 0; --i) {\n    output += alphabet[digits[i]];\n  }\n  return output;\n}","map":{"version":3,"names":["api","module","exports","_reverseAlphabets","encode","input","alphabet","maxline","TypeError","undefined","output","Uint8Array","_encodeWithByteBuffer","i","base","length","first","charAt","digits","j","carry","push","regex","RegExp","match","join","decode","table","charCodeAt","replace","bytes","value","k","Buffer","from","reverse","at"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/node-forge/lib/baseN.js"],"sourcesContent":["/**\n * Base-N/Base-X encoding/decoding functions.\n *\n * Original implementation from base-x:\n * https://github.com/cryptocoinjs/base-x\n *\n * Which is MIT licensed:\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nvar api = {};\nmodule.exports = api;\n\n// baseN alphabet indexes\nvar _reverseAlphabets = {};\n\n/**\n * BaseN-encodes a Uint8Array using the given alphabet.\n *\n * @param input the Uint8Array to encode.\n * @param maxline the maximum number of encoded characters per line to use,\n *          defaults to none.\n *\n * @return the baseN-encoded output string.\n */\napi.encode = function(input, alphabet, maxline) {\n  if(typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n  if(maxline !== undefined && typeof maxline !== 'number') {\n    throw new TypeError('\"maxline\" must be a number.');\n  }\n\n  var output = '';\n\n  if(!(input instanceof Uint8Array)) {\n    // assume forge byte buffer\n    output = _encodeWithByteBuffer(input, alphabet);\n  } else {\n    var i = 0;\n    var base = alphabet.length;\n    var first = alphabet.charAt(0);\n    var digits = [0];\n    for(i = 0; i < input.length; ++i) {\n      for(var j = 0, carry = input[i]; j < digits.length; ++j) {\n        carry += digits[j] << 8;\n        digits[j] = carry % base;\n        carry = (carry / base) | 0;\n      }\n\n      while(carry > 0) {\n        digits.push(carry % base);\n        carry = (carry / base) | 0;\n      }\n    }\n\n    // deal with leading zeros\n    for(i = 0; input[i] === 0 && i < input.length - 1; ++i) {\n      output += first;\n    }\n    // convert digits to a string\n    for(i = digits.length - 1; i >= 0; --i) {\n      output += alphabet[digits[i]];\n    }\n  }\n\n  if(maxline) {\n    var regex = new RegExp('.{1,' + maxline + '}', 'g');\n    output = output.match(regex).join('\\r\\n');\n  }\n\n  return output;\n};\n\n/**\n * Decodes a baseN-encoded (using the given alphabet) string to a\n * Uint8Array.\n *\n * @param input the baseN-encoded input string.\n *\n * @return the Uint8Array.\n */\napi.decode = function(input, alphabet) {\n  if(typeof input !== 'string') {\n    throw new TypeError('\"input\" must be a string.');\n  }\n  if(typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n\n  var table = _reverseAlphabets[alphabet];\n  if(!table) {\n    // compute reverse alphabet\n    table = _reverseAlphabets[alphabet] = [];\n    for(var i = 0; i < alphabet.length; ++i) {\n      table[alphabet.charCodeAt(i)] = i;\n    }\n  }\n\n  // remove whitespace characters\n  input = input.replace(/\\s/g, '');\n\n  var base = alphabet.length;\n  var first = alphabet.charAt(0);\n  var bytes = [0];\n  for(var i = 0; i < input.length; i++) {\n    var value = table[input.charCodeAt(i)];\n    if(value === undefined) {\n      return;\n    }\n\n    for(var j = 0, carry = value; j < bytes.length; ++j) {\n      carry += bytes[j] * base;\n      bytes[j] = carry & 0xff;\n      carry >>= 8;\n    }\n\n    while(carry > 0) {\n      bytes.push(carry & 0xff);\n      carry >>= 8;\n    }\n  }\n\n  // deal with leading zeros\n  for(var k = 0; input[k] === first && k < input.length - 1; ++k) {\n    bytes.push(0);\n  }\n\n  if(typeof Buffer !== 'undefined') {\n    return Buffer.from(bytes.reverse());\n  }\n\n  return new Uint8Array(bytes.reverse());\n};\n\nfunction _encodeWithByteBuffer(input, alphabet) {\n  var i = 0;\n  var base = alphabet.length;\n  var first = alphabet.charAt(0);\n  var digits = [0];\n  for(i = 0; i < input.length(); ++i) {\n    for(var j = 0, carry = input.at(i); j < digits.length; ++j) {\n      carry += digits[j] << 8;\n      digits[j] = carry % base;\n      carry = (carry / base) | 0;\n    }\n\n    while(carry > 0) {\n      digits.push(carry % base);\n      carry = (carry / base) | 0;\n    }\n  }\n\n  var output = '';\n\n  // deal with leading zeros\n  for(i = 0; input.at(i) === 0 && i < input.length() - 1; ++i) {\n    output += first;\n  }\n  // convert digits to a string\n  for(i = digits.length - 1; i >= 0; --i) {\n    output += alphabet[digits[i]];\n  }\n\n  return output;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}