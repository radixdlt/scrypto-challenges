{"ast":null,"code":"var _jsxFileName = \"/Users/mdabdurrazzak/RadInsu/src/Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DataRequestBuilder, RadixDappToolkit, RadixNetwork } from '@radixdlt/radix-dapp-toolkit';\nimport './profile.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const [accountAddress, setAccountAddress] = useState('');\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [error, setError] = useState('');\n  const [insuranceContract, setInsuranceContract] = useState(null);\n  const [rdt, setRdt] = useState(null);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [additionalData, setAdditionalData] = useState('');\n  const [claimStatus, setClaimStatus] = useState('');\n  const [stalkingInput, setStalkingInput] = useState('');\n  const [stalkingResult, setStalkingResult] = useState('');\n  const [premiumAmount, setPremiumAmount] = useState(0);\n  const [payoutAmount, setPayoutAmount] = useState(0);\n  const [riskLevel, setRiskLevel] = useState(0);\n  useEffect(() => {\n    const dAppDefinitionAddress = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz';\n\n    // Create a dapp configuration object for the Radix Dapp Toolkit\n    const dappConfig = {\n      networkId: RadixNetwork.Stokenet,\n      applicationVersion: '1.0.0',\n      applicationName: 'Infix',\n      applicationDappDefinitionAddress: dAppDefinitionAddress,\n      dAppDefinitionAddress\n    };\n\n    // Instantiate DappToolkit to connect to the Radix wallet and network\n    const rdtInstance = RadixDappToolkit(dappConfig);\n    setRdt(rdtInstance);\n\n    // Connect a user account when wallet is connected\n    rdtInstance.walletApi.setRequestData(DataRequestBuilder.accounts().exactly(1));\n\n    // Subscribe to updates to the user's shared wallet data\n    const subscription = rdtInstance.walletApi.walletData$.subscribe({\n      next: walletData => {\n        if (walletData && walletData.accounts && walletData.accounts.length > 0) {\n          setAccountAddress(walletData.accounts[0].address);\n          setWalletConnected(true);\n        } else {\n          setError('No account data found.');\n        }\n      },\n      error: err => {\n        setError('Error connecting to wallet: ' + err.message);\n      }\n    });\n\n    // Cleanup subscription on unmount\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  // Function to connect to the wallet\n  const connectToWallet = async () => {\n    try {\n      // Request the wallet to connect\n      await rdt.walletApi.connectWallet();\n    } catch (error) {\n      setError('Error connecting to wallet: ' + error.message);\n    }\n  };\n\n  // Function to create the insurance contract\n  const createInsuranceContract = async (insuredDomain, premiumAmount, payoutAmount, riskLevel) => {\n    const dAppDefinitionAddress = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz';\n    const result = await rdt.walletApi.sendTransaction({\n      transactionManifest: `\n            CALL_FUNCTION\n                Address(\"${dAppDefinitionAddress}\")\n                \"parametric_insurance::ParametricInsurance\"\n                \"new\"\n                String(\"${insuredDomain}\")\n                Decimal(\"${premiumAmount}\")\n                Decimal(\"${payoutAmount}\")\n                Decimal(\"${riskLevel}\");\n        `,\n      version: 1\n    });\n    if (result.isErr()) {\n      console.error('Error creating insurance contract:', result.error);\n      return null;\n    }\n    setInsuranceContract(result.value.global);\n    console.log('Insurance contract created:', result.value.global);\n    return result.value.global;\n  };\n\n  // Function to make a claim on the insurance contract\n  const makeClaim = async () => {\n    if (!insuranceContract) {\n      console.error('Insurance contract not created yet');\n      return;\n    }\n    const result = await insuranceContract.call({\n      method: 'make_claim',\n      args: []\n    });\n    if (result.isErr()) {\n      console.error('Error making claim:', result.error);\n      return;\n    }\n    console.log('Claim made successfully:', result.value);\n  };\n\n  // Function to check if the insurance contract has been claimed\n  const isClaimed = async () => {\n    if (!insuranceContract) {\n      console.error('Insurance contract not created yet');\n      return;\n    }\n    const result = await insuranceContract.call({\n      method: 'is_claimed',\n      args: []\n    });\n    if (result.isErr()) {\n      console.error('Error checking claim status:', result.error);\n      return;\n    }\n    console.log('Is claimed:', result.value);\n  };\n\n  // Function to cancel the insurance contract\n  const cancelContract = async () => {\n    if (!insuranceContract) {\n      console.error('Insurance contract not created yet');\n      return;\n    }\n    const result = await insuranceContract.call({\n      method: 'cancel_contract',\n      args: []\n    });\n    if (result.isErr()) {\n      console.error('Error canceling contract:', result.error);\n      return;\n    }\n    console.log('Contract canceled successfully:', result.value);\n  };\n\n  // Function to trigger insurance payout based on predefined conditions\n  const triggerPayout = async conditionMet => {\n    if (!insuranceContract) {\n      console.error('Insurance contract not created yet');\n      return;\n    }\n    const result = await insuranceContract.call({\n      method: 'trigger_payout',\n      args: [conditionMet]\n    });\n    if (result.isErr()) {\n      console.error('Error triggering payout:', result.error);\n      return;\n    }\n    console.log('Payout triggered successfully:', result.value);\n  };\n\n  // Function to monitor liquidity and trigger insurance payout if a significant drop is detected\n  const monitorLiquidity = async (liquidityDropThreshold, timeFrameHours, currentLiquidity) => {\n    if (!insuranceContract) {\n      console.error('Insurance contract not created yet');\n      return;\n    }\n    const result = await insuranceContract.call({\n      method: 'monitor_liquidity',\n      args: [liquidityDropThreshold, timeFrameHours, currentLiquidity]\n    });\n    if (result.isErr()) {\n      console.error('Error monitoring liquidity:', result.error);\n      return;\n    }\n    console.log('Liquidity monitored successfully:', result.value);\n  };\n\n  // Function to monitor market volatility and trigger insurance payout if volatility exceeds threshold\n  const monitorMarketVolatility = async (volatilityThreshold, currentVolatility) => {\n    if (!insuranceContract) {\n      console.error('Insurance contract not created yet');\n      return;\n    }\n    const result = await insuranceContract.call({\n      method: 'monitor_market_volatility',\n      args: [volatilityThreshold, currentVolatility]\n    });\n    if (result.isErr()) {\n      console.error('Error monitoring market volatility:', result.error);\n      return;\n    }\n    console.log('Market volatility monitored successfully:', result.value);\n  };\n\n  // Function to update the premium amount of the insurance contract\n  const updatePremiumAmount = async newPremiumAmount => {\n    if (!insuranceContract) {\n      console.error('Insurance contract not created yet');\n      return;\n    }\n    const result = await insuranceContract.call({\n      method: 'update_premium_amount',\n      args: [newPremiumAmount]\n    });\n    if (result.isErr()) {\n      console.error('Error updating premium amount:', result.error);\n      return;\n    }\n    console.log('Premium amount updated successfully:', result.value);\n  };\n\n  // Function to update the payout amount of the insurance contract\n  const updatePayoutAmount = async newPayoutAmount => {\n    if (!insuranceContract) {\n      console.error('Insurance contract not created yet');\n      return;\n    }\n    const result = await insuranceContract.call({\n      method: 'update_payout_amount',\n      args: [newPayoutAmount]\n    });\n    if (result.isErr()) {\n      console.error('Error updating payout amount:', result.error);\n      return;\n    }\n    console.log('Payout amount updated successfully:', result.value);\n  };\n\n  // Function to automate claim processing if conditions are met\n  const automateClaimProcessing = async autoClaimCondition => {\n    if (!insuranceContract) {\n      console.error('Insurance contract not created yet');\n      return;\n    }\n    const result = await insuranceContract.call({\n      method: 'automate_claim_processing',\n      args: [autoClaimCondition]\n    });\n    if (result.isErr()) {\n      console.error('Error automating claim processing:', result.error);\n      return;\n    }\n    console.log('Claim processing automated successfully:', result.value);\n  };\n\n  // Function to handle sign up\n  const signUp = async () => {\n    try {\n      // Code to create a new insurance contract\n      const result = await createInsuranceContract(username, premiumAmount, payoutAmount, riskLevel);\n      // Handle success\n      console.log('Insurance contract created:', result);\n    } catch (error) {\n      // Handle error\n      console.error('Error creating insurance contract:', error);\n    }\n  };\n\n  // Function to handle claiming money\n  const claimMoney = async () => {\n    try {\n      // Code to trigger the claim process\n      // For example:\n      const result = await insuranceContract.call({\n        method: 'make_claim',\n        args: []\n      });\n      // Handle success\n      console.log('Claim made successfully:', result.value);\n      setClaimStatus('Claim made successfully');\n    } catch (error) {\n      // Handle error\n      console.error('Error making claim:', error);\n      setClaimStatus('Error making claim');\n    }\n  };\n\n  // Function to handle stalking\n  const stalk = async id => {\n    try {\n      // Code to fetch and display information about the specified ID\n      // For example:\n      const info = await fetchInformation(id);\n      // Handle success\n      console.log('Stalking result:', info);\n      setStalkingResult(info);\n    } catch (error) {\n      // Handle error\n      console.error('Error stalking:', error);\n      setStalkingResult('Error stalking');\n    }\n  };\n\n  // Function to handle change in stalking input\n  const handleStalkInputChange = event => {\n    // Update the state with the input value\n    // For example:\n    setStalkingInput(event.target.value);\n  };\n  // Define fetchInformation function\n  const fetchInformation = async id => {\n    // Implementation of fetchInformation function\n  };\n\n  // Define handleContractInteractions function\n  const handleContractInteractions = () => {\n    // Implementation of handleContractInteractions function\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 17\n    }, this), walletConnected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Wallet Connected Successfully\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Account Address: \", accountAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleContractInteractions,\n        children: \"Interact with Contract\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Connect to Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectToWallet,\n        children: \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Your xrd Domain\",\n      value: username,\n      onChange: e => setUsername(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Premium Amount\",\n      value: premiumAmount,\n      onChange: e => setPremiumAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Payout Amount\",\n      value: payoutAmount,\n      onChange: e => setPayoutAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Risk Level\",\n      value: riskLevel,\n      onChange: e => setRiskLevel(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: signUp,\n      children: \"Create Insurance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: claimMoney,\n      children: \"Claim Money\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this), claimStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: claimStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter ID to stalk\",\n      onChange: handleStalkInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => stalk(stalkingInput),\n      children: \"Stalk\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 7\n    }, this), stalkingResult && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: stalkingResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 351,\n    columnNumber: 5\n  }, this);\n};\n_s(Profile, \"TGzKb0HL8D2Tq0VW1rxsLiKUlDk=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useState","useEffect","DataRequestBuilder","RadixDappToolkit","RadixNetwork","jsxDEV","_jsxDEV","Profile","_s","accountAddress","setAccountAddress","walletConnected","setWalletConnected","error","setError","insuranceContract","setInsuranceContract","rdt","setRdt","username","setUsername","password","setPassword","additionalData","setAdditionalData","claimStatus","setClaimStatus","stalkingInput","setStalkingInput","stalkingResult","setStalkingResult","premiumAmount","setPremiumAmount","payoutAmount","setPayoutAmount","riskLevel","setRiskLevel","dAppDefinitionAddress","dappConfig","networkId","Stokenet","applicationVersion","applicationName","applicationDappDefinitionAddress","rdtInstance","walletApi","setRequestData","accounts","exactly","subscription","walletData$","subscribe","next","walletData","length","address","err","message","unsubscribe","connectToWallet","connectWallet","createInsuranceContract","insuredDomain","result","sendTransaction","transactionManifest","version","isErr","console","value","global","log","makeClaim","call","method","args","isClaimed","cancelContract","triggerPayout","conditionMet","monitorLiquidity","liquidityDropThreshold","timeFrameHours","currentLiquidity","monitorMarketVolatility","volatilityThreshold","currentVolatility","updatePremiumAmount","newPremiumAmount","updatePayoutAmount","newPayoutAmount","automateClaimProcessing","autoClaimCondition","signUp","claimMoney","stalk","id","info","fetchInformation","handleStalkInputChange","event","target","handleContractInteractions","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","onChange","e","_c","$RefreshReg$"],"sources":["/Users/mdabdurrazzak/RadInsu/src/Profile.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  DataRequestBuilder,\n  RadixDappToolkit,\n  RadixNetwork,\n} from '@radixdlt/radix-dapp-toolkit';\nimport './profile.css';\n\n\n\nconst Profile = () => {\n  const [accountAddress, setAccountAddress] = useState('');\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [error, setError] = useState('');\n  const [insuranceContract, setInsuranceContract] = useState(null);\n  const [rdt, setRdt] = useState(null);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [additionalData, setAdditionalData] = useState('');\n  const [claimStatus, setClaimStatus] = useState('');\n  const [stalkingInput, setStalkingInput] = useState('');\n  const [stalkingResult, setStalkingResult] = useState('');\n  const [premiumAmount, setPremiumAmount] = useState(0);\n  const [payoutAmount, setPayoutAmount] = useState(0);\n  const [riskLevel, setRiskLevel] = useState(0);\n\n\n  useEffect(() => {\n    const dAppDefinitionAddress = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz';\n    \n    // Create a dapp configuration object for the Radix Dapp Toolkit\n    const dappConfig = {\n      networkId: RadixNetwork.Stokenet,\n      applicationVersion: '1.0.0',\n      applicationName: 'Infix',\n      applicationDappDefinitionAddress: dAppDefinitionAddress,\n      dAppDefinitionAddress,\n    };\n\n    // Instantiate DappToolkit to connect to the Radix wallet and network\n    const rdtInstance = RadixDappToolkit(dappConfig);\n    setRdt(rdtInstance);\n\n    // Connect a user account when wallet is connected\n    rdtInstance.walletApi.setRequestData(DataRequestBuilder.accounts().exactly(1));\n\n    // Subscribe to updates to the user's shared wallet data\n    const subscription = rdtInstance.walletApi.walletData$.subscribe({\n      next: (walletData) => {\n        if (walletData && walletData.accounts && walletData.accounts.length > 0) {\n          setAccountAddress(walletData.accounts[0].address);\n          setWalletConnected(true);\n        } else {\n          setError('No account data found.');\n        }\n      },\n      error: (err) => {\n        setError('Error connecting to wallet: ' + err.message);\n      }\n    });\n\n    // Cleanup subscription on unmount\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  // Function to connect to the wallet\n  const connectToWallet = async () => {\n    try {\n      // Request the wallet to connect\n      await rdt.walletApi.connectWallet();\n    } catch (error) {\n      setError('Error connecting to wallet: ' + error.message);\n    }\n  };\n\n  // Function to create the insurance contract\n  const createInsuranceContract = async (insuredDomain, premiumAmount, payoutAmount, riskLevel) => {\n    const dAppDefinitionAddress = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz';\n\n    const result = await rdt.walletApi.sendTransaction({\n        transactionManifest: `\n            CALL_FUNCTION\n                Address(\"${dAppDefinitionAddress}\")\n                \"parametric_insurance::ParametricInsurance\"\n                \"new\"\n                String(\"${insuredDomain}\")\n                Decimal(\"${premiumAmount}\")\n                Decimal(\"${payoutAmount}\")\n                Decimal(\"${riskLevel}\");\n        `,\n        version: 1,\n    });\n\n    if (result.isErr()) {\n        console.error('Error creating insurance contract:', result.error);\n        return null;\n    }\n\n    setInsuranceContract(result.value.global);\n    console.log('Insurance contract created:', result.value.global);\n    return result.value.global;\n  };\n\n  // Function to make a claim on the insurance contract\n  const makeClaim = async () => {\n    if (!insuranceContract) {\n        console.error('Insurance contract not created yet');\n        return;\n    }\n\n    const result = await insuranceContract.call({\n        method: 'make_claim',\n        args: [],\n    });\n\n    if (result.isErr()) {\n        console.error('Error making claim:', result.error);\n        return;\n    }\n\n    console.log('Claim made successfully:', result.value);\n  };\n\n  // Function to check if the insurance contract has been claimed\n  const isClaimed = async () => {\n    if (!insuranceContract) {\n        console.error('Insurance contract not created yet');\n        return;\n    }\n\n    const result = await insuranceContract.call({\n        method: 'is_claimed',\n        args: [],\n    });\n\n    if (result.isErr()) {\n        console.error('Error checking claim status:', result.error);\n        return;\n    }\n\n    console.log('Is claimed:', result.value);\n  };\n\n  // Function to cancel the insurance contract\n  const cancelContract = async () => {\n    if (!insuranceContract) {\n        console.error('Insurance contract not created yet');\n        return;\n    }\n\n    const result = await insuranceContract.call({\n        method: 'cancel_contract',\n        args: [],\n    });\n\n    if (result.isErr()) {\n        console.error('Error canceling contract:', result.error);\n        return;\n    }\n\n    console.log('Contract canceled successfully:', result.value);\n  };\n\n  // Function to trigger insurance payout based on predefined conditions\n  const triggerPayout = async (conditionMet) => {\n    if (!insuranceContract) {\n        console.error('Insurance contract not created yet');\n        return;\n    }\n\n    const result = await insuranceContract.call({\n        method: 'trigger_payout',\n        args: [conditionMet],\n    });\n\n    if (result.isErr()) {\n        console.error('Error triggering payout:', result.error);\n        return;\n    }\n\n    console.log('Payout triggered successfully:', result.value);\n  };\n\n  // Function to monitor liquidity and trigger insurance payout if a significant drop is detected\n  const monitorLiquidity = async (liquidityDropThreshold, timeFrameHours, currentLiquidity) => {\n    if (!insuranceContract) {\n        console.error('Insurance contract not created yet');\n        return;\n    }\n\n    const result = await insuranceContract.call({\n        method: 'monitor_liquidity',\n        args: [liquidityDropThreshold, timeFrameHours, currentLiquidity],\n    });\n\n    if (result.isErr()) {\n        console.error('Error monitoring liquidity:', result.error);\n        return;\n    }\n\n    console.log('Liquidity monitored successfully:', result.value);\n  };\n\n  // Function to monitor market volatility and trigger insurance payout if volatility exceeds threshold\n  const monitorMarketVolatility = async (volatilityThreshold, currentVolatility) => {\n    if (!insuranceContract) {\n        console.error('Insurance contract not created yet');\n        return;\n    }\n\n    const result = await insuranceContract.call({\n        method: 'monitor_market_volatility',\n        args: [volatilityThreshold, currentVolatility],\n    });\n\n    if (result.isErr()) {\n        console.error('Error monitoring market volatility:', result.error);\n        return;\n    }\n\n    console.log('Market volatility monitored successfully:', result.value);\n  };\n\n  // Function to update the premium amount of the insurance contract\n  const updatePremiumAmount = async (newPremiumAmount) => {\n    if (!insuranceContract) {\n        console.error('Insurance contract not created yet');\n        return;\n    }\n\n    const result = await insuranceContract.call({\n        method: 'update_premium_amount',\n        args: [newPremiumAmount],\n    });\n\n    if (result.isErr()) {\n        console.error('Error updating premium amount:', result.error);\n        return;\n    }\n\n    console.log('Premium amount updated successfully:', result.value);\n  };\n\n  // Function to update the payout amount of the insurance contract\n  const updatePayoutAmount = async (newPayoutAmount) => {\n    if (!insuranceContract) {\n        console.error('Insurance contract not created yet');\n        return;\n    }\n\n    const result = await insuranceContract.call({\n        method: 'update_payout_amount',\n        args: [newPayoutAmount],\n    });\n\n    if (result.isErr()) {\n        console.error('Error updating payout amount:', result.error);\n        return;\n    }\n\n    console.log('Payout amount updated successfully:', result.value);\n  };\n\n  // Function to automate claim processing if conditions are met\n  const automateClaimProcessing = async (autoClaimCondition) => {\n    if (!insuranceContract) {\n        console.error('Insurance contract not created yet');\n        return;\n    }\n\n    const result = await insuranceContract.call({\n        method: 'automate_claim_processing',\n        args: [autoClaimCondition],\n    });\n\n    if (result.isErr()) {\n        console.error('Error automating claim processing:', result.error);\n        return;\n    }\n\n    console.log('Claim processing automated successfully:', result.value);\n  };\n\n  // Function to handle sign up\n  const signUp = async () => {\n    try {\n      // Code to create a new insurance contract\n      const result = await createInsuranceContract(username, premiumAmount, payoutAmount, riskLevel);\n      // Handle success\n      console.log('Insurance contract created:', result);\n    } catch (error) {\n      // Handle error\n      console.error('Error creating insurance contract:', error);\n    }\n  };\n\n  // Function to handle claiming money\n  const claimMoney = async () => {\n    try {\n      // Code to trigger the claim process\n      // For example:\n      const result = await insuranceContract.call({\n        method: 'make_claim',\n        args: [],\n      });\n      // Handle success\n      console.log('Claim made successfully:', result.value);\n      setClaimStatus('Claim made successfully');\n    } catch (error) {\n      // Handle error\n      console.error('Error making claim:', error);\n      setClaimStatus('Error making claim');\n    }\n  };\n\n  // Function to handle stalking\n  const stalk = async (id) => {\n    try {\n      // Code to fetch and display information about the specified ID\n      // For example:\n      const info = await fetchInformation(id);\n      // Handle success\n      console.log('Stalking result:', info);\n      setStalkingResult(info);\n    } catch (error) {\n      // Handle error\n      console.error('Error stalking:', error);\n      setStalkingResult('Error stalking');\n    }\n  };\n\n  // Function to handle change in stalking input\n  const handleStalkInputChange = (event) => {\n    // Update the state with the input value\n    // For example:\n    setStalkingInput(event.target.value);\n  };\n// Define fetchInformation function\nconst fetchInformation = async (id) => {\n  // Implementation of fetchInformation function\n};\n\n// Define handleContractInteractions function\nconst handleContractInteractions = () => {\n  // Implementation of handleContractInteractions function\n};\n\n  return (\n    <div>\n      {error && <p>Error: {error}</p>}\n      {walletConnected ? (\n        <div>\n          <p>Wallet Connected Successfully</p>\n          <p>Account Address: {accountAddress}</p>\n          {/* Add additional wallet details here */}\n          <button onClick={handleContractInteractions}>Interact with Contract</button>\n        </div>\n      ) : (\n        <div>\n          <p>Connect to Wallet</p>\n          <button onClick={connectToWallet}>Connect</button>\n        </div>\n      )}\n\n     {/* Sign Up For Insurance Form */}\n     <input type=\"text\" placeholder=\"Your xrd Domain\" value={username} onChange={(e) => setUsername(e.target.value)} />\n      <input type=\"number\" placeholder=\"Premium Amount\" value={premiumAmount} onChange={(e) => setPremiumAmount(e.target.value)} />\n      <input type=\"number\" placeholder=\"Payout Amount\" value={payoutAmount} onChange={(e) => setPayoutAmount(e.target.value)} />\n      <input type=\"number\" placeholder=\"Risk Level\" value={riskLevel} onChange={(e) => setRiskLevel(e.target.value)} />\n      <button onClick={signUp}>Create Insurance</button>\n\n\n      {/* Claim Money Button */}\n      <button onClick={claimMoney}>Claim Money</button>\n      {claimStatus && <p>{claimStatus}</p>}\n\n      {/* Stalk Input and Button */}\n      <input type=\"text\" placeholder=\"Enter ID to stalk\" onChange={handleStalkInputChange} />\n      <button onClick={() => stalk(stalkingInput)}>Stalk</button>\n      {stalkingResult && <p>{stalkingResult}</p>}\n    </div>\n  );\n};\n\nexport default Profile;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,kBAAkB,EAClBC,gBAAgB,EAChBC,YAAY,QACP,8BAA8B;AACrC,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIvB,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAM,CAACiB,GAAG,EAAEC,MAAM,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EACpC,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACqB,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACuB,cAAc,EAAEC,iBAAiB,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACyB,WAAW,EAAEC,cAAc,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC2B,aAAa,EAAEC,gBAAgB,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAAC6B,cAAc,EAAEC,iBAAiB,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAAC+B,aAAa,EAAEC,gBAAgB,CAAC,GAAGhC,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACiC,YAAY,EAAEC,eAAe,CAAC,GAAGlC,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACmC,SAAS,EAAEC,YAAY,CAAC,GAAGpC,QAAQ,CAAC,CAAC,CAAC;EAG7CC,SAAS,CAAC,MAAM;IACd,MAAMoC,qBAAqB,GAAG,uEAAuE;;IAErG;IACA,MAAMC,UAAU,GAAG;MACjBC,SAAS,EAAEnC,YAAY,CAACoC,QAAQ;MAChCC,kBAAkB,EAAE,OAAO;MAC3BC,eAAe,EAAE,OAAO;MACxBC,gCAAgC,EAAEN,qBAAqB;MACvDA;IACF,CAAC;;IAED;IACA,MAAMO,WAAW,GAAGzC,gBAAgB,CAACmC,UAAU,CAAC;IAChDpB,MAAM,CAAC0B,WAAW,CAAC;;IAEnB;IACAA,WAAW,CAACC,SAAS,CAACC,cAAc,CAAC5C,kBAAkB,CAAC6C,QAAQ,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;;IAE9E;IACA,MAAMC,YAAY,GAAGL,WAAW,CAACC,SAAS,CAACK,WAAW,CAACC,SAAS,CAAC;MAC/DC,IAAI,EAAGC,UAAU,IAAK;QACpB,IAAIA,UAAU,IAAIA,UAAU,CAACN,QAAQ,IAAIM,UAAU,CAACN,QAAQ,CAACO,MAAM,GAAG,CAAC,EAAE;UACvE5C,iBAAiB,CAAC2C,UAAU,CAACN,QAAQ,CAAC,CAAC,CAAC,CAACQ,OAAO,CAAC;UACjD3C,kBAAkB,CAAC,IAAI,CAAC;QAC1B,CAAC,MAAM;UACLE,QAAQ,CAAC,wBAAwB,CAAC;QACpC;MACF,CAAC;MACDD,KAAK,EAAG2C,GAAG,IAAK;QACd1C,QAAQ,CAAC,8BAA8B,GAAG0C,GAAG,CAACC,OAAO,CAAC;MACxD;IACF,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXR,YAAY,CAACS,WAAW,CAAC,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF;MACA,MAAM1C,GAAG,CAAC4B,SAAS,CAACe,aAAa,CAAC,CAAC;IACrC,CAAC,CAAC,OAAO/C,KAAK,EAAE;MACdC,QAAQ,CAAC,8BAA8B,GAAGD,KAAK,CAAC4C,OAAO,CAAC;IAC1D;EACF,CAAC;;EAED;EACA,MAAMI,uBAAuB,GAAG,MAAAA,CAAOC,aAAa,EAAE/B,aAAa,EAAEE,YAAY,EAAEE,SAAS,KAAK;IAC/F,MAAME,qBAAqB,GAAG,uEAAuE;IAErG,MAAM0B,MAAM,GAAG,MAAM9C,GAAG,CAAC4B,SAAS,CAACmB,eAAe,CAAC;MAC/CC,mBAAmB,EAAG;AAC9B;AACA,2BAA2B5B,qBAAsB;AACjD;AACA;AACA,0BAA0ByB,aAAc;AACxC,2BAA2B/B,aAAc;AACzC,2BAA2BE,YAAa;AACxC,2BAA2BE,SAAU;AACrC,SAAS;MACD+B,OAAO,EAAE;IACb,CAAC,CAAC;IAEF,IAAIH,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACvD,KAAK,CAAC,oCAAoC,EAAEkD,MAAM,CAAClD,KAAK,CAAC;MACjE,OAAO,IAAI;IACf;IAEAG,oBAAoB,CAAC+C,MAAM,CAACM,KAAK,CAACC,MAAM,CAAC;IACzCF,OAAO,CAACG,GAAG,CAAC,6BAA6B,EAAER,MAAM,CAACM,KAAK,CAACC,MAAM,CAAC;IAC/D,OAAOP,MAAM,CAACM,KAAK,CAACC,MAAM;EAC5B,CAAC;;EAED;EACA,MAAME,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI,CAACzD,iBAAiB,EAAE;MACpBqD,OAAO,CAACvD,KAAK,CAAC,oCAAoC,CAAC;MACnD;IACJ;IAEA,MAAMkD,MAAM,GAAG,MAAMhD,iBAAiB,CAAC0D,IAAI,CAAC;MACxCC,MAAM,EAAE,YAAY;MACpBC,IAAI,EAAE;IACV,CAAC,CAAC;IAEF,IAAIZ,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACvD,KAAK,CAAC,qBAAqB,EAAEkD,MAAM,CAAClD,KAAK,CAAC;MAClD;IACJ;IAEAuD,OAAO,CAACG,GAAG,CAAC,0BAA0B,EAAER,MAAM,CAACM,KAAK,CAAC;EACvD,CAAC;;EAED;EACA,MAAMO,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI,CAAC7D,iBAAiB,EAAE;MACpBqD,OAAO,CAACvD,KAAK,CAAC,oCAAoC,CAAC;MACnD;IACJ;IAEA,MAAMkD,MAAM,GAAG,MAAMhD,iBAAiB,CAAC0D,IAAI,CAAC;MACxCC,MAAM,EAAE,YAAY;MACpBC,IAAI,EAAE;IACV,CAAC,CAAC;IAEF,IAAIZ,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACvD,KAAK,CAAC,8BAA8B,EAAEkD,MAAM,CAAClD,KAAK,CAAC;MAC3D;IACJ;IAEAuD,OAAO,CAACG,GAAG,CAAC,aAAa,EAAER,MAAM,CAACM,KAAK,CAAC;EAC1C,CAAC;;EAED;EACA,MAAMQ,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAAC9D,iBAAiB,EAAE;MACpBqD,OAAO,CAACvD,KAAK,CAAC,oCAAoC,CAAC;MACnD;IACJ;IAEA,MAAMkD,MAAM,GAAG,MAAMhD,iBAAiB,CAAC0D,IAAI,CAAC;MACxCC,MAAM,EAAE,iBAAiB;MACzBC,IAAI,EAAE;IACV,CAAC,CAAC;IAEF,IAAIZ,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACvD,KAAK,CAAC,2BAA2B,EAAEkD,MAAM,CAAClD,KAAK,CAAC;MACxD;IACJ;IAEAuD,OAAO,CAACG,GAAG,CAAC,iCAAiC,EAAER,MAAM,CAACM,KAAK,CAAC;EAC9D,CAAC;;EAED;EACA,MAAMS,aAAa,GAAG,MAAOC,YAAY,IAAK;IAC5C,IAAI,CAAChE,iBAAiB,EAAE;MACpBqD,OAAO,CAACvD,KAAK,CAAC,oCAAoC,CAAC;MACnD;IACJ;IAEA,MAAMkD,MAAM,GAAG,MAAMhD,iBAAiB,CAAC0D,IAAI,CAAC;MACxCC,MAAM,EAAE,gBAAgB;MACxBC,IAAI,EAAE,CAACI,YAAY;IACvB,CAAC,CAAC;IAEF,IAAIhB,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACvD,KAAK,CAAC,0BAA0B,EAAEkD,MAAM,CAAClD,KAAK,CAAC;MACvD;IACJ;IAEAuD,OAAO,CAACG,GAAG,CAAC,gCAAgC,EAAER,MAAM,CAACM,KAAK,CAAC;EAC7D,CAAC;;EAED;EACA,MAAMW,gBAAgB,GAAG,MAAAA,CAAOC,sBAAsB,EAAEC,cAAc,EAAEC,gBAAgB,KAAK;IAC3F,IAAI,CAACpE,iBAAiB,EAAE;MACpBqD,OAAO,CAACvD,KAAK,CAAC,oCAAoC,CAAC;MACnD;IACJ;IAEA,MAAMkD,MAAM,GAAG,MAAMhD,iBAAiB,CAAC0D,IAAI,CAAC;MACxCC,MAAM,EAAE,mBAAmB;MAC3BC,IAAI,EAAE,CAACM,sBAAsB,EAAEC,cAAc,EAAEC,gBAAgB;IACnE,CAAC,CAAC;IAEF,IAAIpB,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACvD,KAAK,CAAC,6BAA6B,EAAEkD,MAAM,CAAClD,KAAK,CAAC;MAC1D;IACJ;IAEAuD,OAAO,CAACG,GAAG,CAAC,mCAAmC,EAAER,MAAM,CAACM,KAAK,CAAC;EAChE,CAAC;;EAED;EACA,MAAMe,uBAAuB,GAAG,MAAAA,CAAOC,mBAAmB,EAAEC,iBAAiB,KAAK;IAChF,IAAI,CAACvE,iBAAiB,EAAE;MACpBqD,OAAO,CAACvD,KAAK,CAAC,oCAAoC,CAAC;MACnD;IACJ;IAEA,MAAMkD,MAAM,GAAG,MAAMhD,iBAAiB,CAAC0D,IAAI,CAAC;MACxCC,MAAM,EAAE,2BAA2B;MACnCC,IAAI,EAAE,CAACU,mBAAmB,EAAEC,iBAAiB;IACjD,CAAC,CAAC;IAEF,IAAIvB,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACvD,KAAK,CAAC,qCAAqC,EAAEkD,MAAM,CAAClD,KAAK,CAAC;MAClE;IACJ;IAEAuD,OAAO,CAACG,GAAG,CAAC,2CAA2C,EAAER,MAAM,CAACM,KAAK,CAAC;EACxE,CAAC;;EAED;EACA,MAAMkB,mBAAmB,GAAG,MAAOC,gBAAgB,IAAK;IACtD,IAAI,CAACzE,iBAAiB,EAAE;MACpBqD,OAAO,CAACvD,KAAK,CAAC,oCAAoC,CAAC;MACnD;IACJ;IAEA,MAAMkD,MAAM,GAAG,MAAMhD,iBAAiB,CAAC0D,IAAI,CAAC;MACxCC,MAAM,EAAE,uBAAuB;MAC/BC,IAAI,EAAE,CAACa,gBAAgB;IAC3B,CAAC,CAAC;IAEF,IAAIzB,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACvD,KAAK,CAAC,gCAAgC,EAAEkD,MAAM,CAAClD,KAAK,CAAC;MAC7D;IACJ;IAEAuD,OAAO,CAACG,GAAG,CAAC,sCAAsC,EAAER,MAAM,CAACM,KAAK,CAAC;EACnE,CAAC;;EAED;EACA,MAAMoB,kBAAkB,GAAG,MAAOC,eAAe,IAAK;IACpD,IAAI,CAAC3E,iBAAiB,EAAE;MACpBqD,OAAO,CAACvD,KAAK,CAAC,oCAAoC,CAAC;MACnD;IACJ;IAEA,MAAMkD,MAAM,GAAG,MAAMhD,iBAAiB,CAAC0D,IAAI,CAAC;MACxCC,MAAM,EAAE,sBAAsB;MAC9BC,IAAI,EAAE,CAACe,eAAe;IAC1B,CAAC,CAAC;IAEF,IAAI3B,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACvD,KAAK,CAAC,+BAA+B,EAAEkD,MAAM,CAAClD,KAAK,CAAC;MAC5D;IACJ;IAEAuD,OAAO,CAACG,GAAG,CAAC,qCAAqC,EAAER,MAAM,CAACM,KAAK,CAAC;EAClE,CAAC;;EAED;EACA,MAAMsB,uBAAuB,GAAG,MAAOC,kBAAkB,IAAK;IAC5D,IAAI,CAAC7E,iBAAiB,EAAE;MACpBqD,OAAO,CAACvD,KAAK,CAAC,oCAAoC,CAAC;MACnD;IACJ;IAEA,MAAMkD,MAAM,GAAG,MAAMhD,iBAAiB,CAAC0D,IAAI,CAAC;MACxCC,MAAM,EAAE,2BAA2B;MACnCC,IAAI,EAAE,CAACiB,kBAAkB;IAC7B,CAAC,CAAC;IAEF,IAAI7B,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;MAChBC,OAAO,CAACvD,KAAK,CAAC,oCAAoC,EAAEkD,MAAM,CAAClD,KAAK,CAAC;MACjE;IACJ;IAEAuD,OAAO,CAACG,GAAG,CAAC,0CAA0C,EAAER,MAAM,CAACM,KAAK,CAAC;EACvE,CAAC;;EAED;EACA,MAAMwB,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF;MACA,MAAM9B,MAAM,GAAG,MAAMF,uBAAuB,CAAC1C,QAAQ,EAAEY,aAAa,EAAEE,YAAY,EAAEE,SAAS,CAAC;MAC9F;MACAiC,OAAO,CAACG,GAAG,CAAC,6BAA6B,EAAER,MAAM,CAAC;IACpD,CAAC,CAAC,OAAOlD,KAAK,EAAE;MACd;MACAuD,OAAO,CAACvD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC5D;EACF,CAAC;;EAED;EACA,MAAMiF,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF;MACA;MACA,MAAM/B,MAAM,GAAG,MAAMhD,iBAAiB,CAAC0D,IAAI,CAAC;QAC1CC,MAAM,EAAE,YAAY;QACpBC,IAAI,EAAE;MACR,CAAC,CAAC;MACF;MACAP,OAAO,CAACG,GAAG,CAAC,0BAA0B,EAAER,MAAM,CAACM,KAAK,CAAC;MACrD3C,cAAc,CAAC,yBAAyB,CAAC;IAC3C,CAAC,CAAC,OAAOb,KAAK,EAAE;MACd;MACAuD,OAAO,CAACvD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3Ca,cAAc,CAAC,oBAAoB,CAAC;IACtC;EACF,CAAC;;EAED;EACA,MAAMqE,KAAK,GAAG,MAAOC,EAAE,IAAK;IAC1B,IAAI;MACF;MACA;MACA,MAAMC,IAAI,GAAG,MAAMC,gBAAgB,CAACF,EAAE,CAAC;MACvC;MACA5B,OAAO,CAACG,GAAG,CAAC,kBAAkB,EAAE0B,IAAI,CAAC;MACrCnE,iBAAiB,CAACmE,IAAI,CAAC;IACzB,CAAC,CAAC,OAAOpF,KAAK,EAAE;MACd;MACAuD,OAAO,CAACvD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvCiB,iBAAiB,CAAC,gBAAgB,CAAC;IACrC;EACF,CAAC;;EAED;EACA,MAAMqE,sBAAsB,GAAIC,KAAK,IAAK;IACxC;IACA;IACAxE,gBAAgB,CAACwE,KAAK,CAACC,MAAM,CAAChC,KAAK,CAAC;EACtC,CAAC;EACH;EACA,MAAM6B,gBAAgB,GAAG,MAAOF,EAAE,IAAK;IACrC;EAAA,CACD;;EAED;EACA,MAAMM,0BAA0B,GAAGA,CAAA,KAAM;IACvC;EAAA,CACD;EAEC,oBACEhG,OAAA;IAAAiG,QAAA,GACG1F,KAAK,iBAAIP,OAAA;MAAAiG,QAAA,GAAG,SAAO,EAAC1F,KAAK;IAAA;MAAA2F,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC9BhG,eAAe,gBACdL,OAAA;MAAAiG,QAAA,gBACEjG,OAAA;QAAAiG,QAAA,EAAG;MAA6B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACpCrG,OAAA;QAAAiG,QAAA,GAAG,mBAAiB,EAAC9F,cAAc;MAAA;QAAA+F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAExCrG,OAAA;QAAQsG,OAAO,EAAEN,0BAA2B;QAAAC,QAAA,EAAC;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzE,CAAC,gBAENrG,OAAA;MAAAiG,QAAA,gBACEjG,OAAA;QAAAiG,QAAA,EAAG;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACxBrG,OAAA;QAAQsG,OAAO,EAAEjD,eAAgB;QAAA4C,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CACN,eAGFrG,OAAA;MAAOuG,IAAI,EAAC,MAAM;MAACC,WAAW,EAAC,iBAAiB;MAACzC,KAAK,EAAElD,QAAS;MAAC4F,QAAQ,EAAGC,CAAC,IAAK5F,WAAW,CAAC4F,CAAC,CAACX,MAAM,CAAChC,KAAK;IAAE;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjHrG,OAAA;MAAOuG,IAAI,EAAC,QAAQ;MAACC,WAAW,EAAC,gBAAgB;MAACzC,KAAK,EAAEtC,aAAc;MAACgF,QAAQ,EAAGC,CAAC,IAAKhF,gBAAgB,CAACgF,CAAC,CAACX,MAAM,CAAChC,KAAK;IAAE;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7HrG,OAAA;MAAOuG,IAAI,EAAC,QAAQ;MAACC,WAAW,EAAC,eAAe;MAACzC,KAAK,EAAEpC,YAAa;MAAC8E,QAAQ,EAAGC,CAAC,IAAK9E,eAAe,CAAC8E,CAAC,CAACX,MAAM,CAAChC,KAAK;IAAE;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1HrG,OAAA;MAAOuG,IAAI,EAAC,QAAQ;MAACC,WAAW,EAAC,YAAY;MAACzC,KAAK,EAAElC,SAAU;MAAC4E,QAAQ,EAAGC,CAAC,IAAK5E,YAAY,CAAC4E,CAAC,CAACX,MAAM,CAAChC,KAAK;IAAE;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjHrG,OAAA;MAAQsG,OAAO,EAAEf,MAAO;MAAAU,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAIlDrG,OAAA;MAAQsG,OAAO,EAAEd,UAAW;MAAAS,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAChDlF,WAAW,iBAAInB,OAAA;MAAAiG,QAAA,EAAI9E;IAAW;MAAA+E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGpCrG,OAAA;MAAOuG,IAAI,EAAC,MAAM;MAACC,WAAW,EAAC,mBAAmB;MAACC,QAAQ,EAAEZ;IAAuB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvFrG,OAAA;MAAQsG,OAAO,EAAEA,CAAA,KAAMb,KAAK,CAACpE,aAAa,CAAE;MAAA4E,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC1D9E,cAAc,iBAAIvB,OAAA;MAAAiG,QAAA,EAAI1E;IAAc;MAAA2E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEV,CAAC;AAACnG,EAAA,CAtXID,OAAO;AAAA0G,EAAA,GAAP1G,OAAO;AAwXb,eAAeA,OAAO;AAAC,IAAA0G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}