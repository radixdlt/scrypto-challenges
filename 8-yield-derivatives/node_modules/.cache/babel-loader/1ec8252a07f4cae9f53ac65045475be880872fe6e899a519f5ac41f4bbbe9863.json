{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from 'openai/resource';\nimport { isRequestOptions } from 'openai/core';\nimport { sleep } from 'openai/core';\nimport { allSettledWithThrow } from 'openai/lib/Util';\nimport { VectorStoreFilesPage } from 'openai/resources/beta/vector-stores/files';\nexport class FileBatches extends APIResource {\n  /**\n   * Create a vector store file batch.\n   */\n  create(vectorStoreId, body, options) {\n    return this._client.post(`/vector_stores/${vectorStoreId}/file_batches`, {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Retrieves a vector store file batch.\n   */\n  retrieve(vectorStoreId, batchId, options) {\n    return this._client.get(`/vector_stores/${vectorStoreId}/file_batches/${batchId}`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Cancel a vector store file batch. This attempts to cancel the processing of\n   * files in this batch as soon as possible.\n   */\n  cancel(vectorStoreId, batchId, options) {\n    return this._client.post(`/vector_stores/${vectorStoreId}/file_batches/${batchId}/cancel`, {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Create a vector store batch and poll until all files have been processed.\n   */\n  async createAndPoll(vectorStoreId, body, options) {\n    const batch = await this.create(vectorStoreId, body);\n    return await this.poll(vectorStoreId, batch.id, options);\n  }\n  listFiles(vectorStoreId, batchId, query = {}, options) {\n    if (isRequestOptions(query)) {\n      return this.listFiles(vectorStoreId, batchId, {}, query);\n    }\n    return this._client.getAPIList(`/vector_stores/${vectorStoreId}/file_batches/${batchId}/files`, VectorStoreFilesPage, {\n      query,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v2',\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Wait for the given file batch to be processed.\n   *\n   * Note: this will return even if one of the files failed to process, you need to\n   * check batch.file_counts.failed_count to handle this case.\n   */\n  async poll(vectorStoreId, batchId, options) {\n    const headers = {\n      ...options?.headers,\n      'X-Stainless-Poll-Helper': 'true'\n    };\n    if (options?.pollIntervalMs) {\n      headers['X-Stainless-Custom-Poll-Interval'] = options.pollIntervalMs.toString();\n    }\n    while (true) {\n      const {\n        data: batch,\n        response\n      } = await this.retrieve(vectorStoreId, batchId, {\n        ...options,\n        headers\n      }).withResponse();\n      switch (batch.status) {\n        case 'in_progress':\n          let sleepInterval = 5000;\n          if (options?.pollIntervalMs) {\n            sleepInterval = options.pollIntervalMs;\n          } else {\n            const headerInterval = response.headers.get('openai-poll-after-ms');\n            if (headerInterval) {\n              const headerIntervalMs = parseInt(headerInterval);\n              if (!isNaN(headerIntervalMs)) {\n                sleepInterval = headerIntervalMs;\n              }\n            }\n          }\n          await sleep(sleepInterval);\n          break;\n        case 'failed':\n        case 'completed':\n          return batch;\n      }\n    }\n  }\n  /**\n   * Uploads the given files concurrently and then creates a vector store file batch.\n   *\n   * The concurrency limit is configurable using the `maxConcurrency` parameter.\n   */\n  async uploadAndPoll(vectorStoreId, {\n    files,\n    fileIds = []\n  }, options) {\n    if (files === null || files.length == 0) {\n      throw new Error('No files provided to process.');\n    }\n    const configuredConcurrency = options?.maxConcurrency ?? 5;\n    //We cap the number of workers at the number of files (so we don't start any unnecessary workers)\n    const concurrencyLimit = Math.min(configuredConcurrency, files.length);\n    const client = this._client;\n    const fileIterator = files.values();\n    const allFileIds = [...fileIds];\n    //This code is based on this design. The libraries don't accommodate our environment limits.\n    // https://stackoverflow.com/questions/40639432/what-is-the-best-way-to-limit-concurrency-when-using-es6s-promise-all\n    async function processFiles(iterator) {\n      for (let item of iterator) {\n        const fileObj = await client.files.create({\n          file: item,\n          purpose: 'assistants'\n        }, options);\n        allFileIds.push(fileObj.id);\n      }\n    }\n    //Start workers to process results\n    const workers = Array(concurrencyLimit).fill(fileIterator).map(processFiles);\n    //Wait for all processing to complete.\n    await allSettledWithThrow(workers);\n    return await this.createAndPoll(vectorStoreId, {\n      file_ids: allFileIds\n    });\n  }\n}\n(function (FileBatches) {})(FileBatches || (FileBatches = {}));\nexport { VectorStoreFilesPage };","map":{"version":3,"names":["APIResource","isRequestOptions","sleep","allSettledWithThrow","VectorStoreFilesPage","FileBatches","create","vectorStoreId","body","options","_client","post","headers","retrieve","batchId","get","cancel","createAndPoll","batch","poll","id","listFiles","query","getAPIList","pollIntervalMs","toString","data","response","withResponse","status","sleepInterval","headerInterval","headerIntervalMs","parseInt","isNaN","uploadAndPoll","files","fileIds","length","Error","configuredConcurrency","maxConcurrency","concurrencyLimit","Math","min","client","fileIterator","values","allFileIds","processFiles","iterator","item","fileObj","file","purpose","push","workers","Array","fill","map","file_ids"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/openai/src/resources/beta/vector-stores/file-batches.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport * as Core from \"../../../core\";\nimport { APIResource } from \"../../../resource\";\nimport { isRequestOptions } from \"../../../core\";\nimport { sleep } from \"../../../core\";\nimport { Uploadable } from \"../../../core\";\nimport { allSettledWithThrow } from \"../../../lib/Util\";\nimport * as FileBatchesAPI from \"./file-batches\";\nimport * as FilesAPI from \"./files\";\nimport { VectorStoreFilesPage } from \"./files\";\nimport { type CursorPageParams } from \"../../../pagination\";\n\nexport class FileBatches extends APIResource {\n  /**\n   * Create a vector store file batch.\n   */\n  create(\n    vectorStoreId: string,\n    body: FileBatchCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<VectorStoreFileBatch> {\n    return this._client.post(`/vector_stores/${vectorStoreId}/file_batches`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Retrieves a vector store file batch.\n   */\n  retrieve(\n    vectorStoreId: string,\n    batchId: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<VectorStoreFileBatch> {\n    return this._client.get(`/vector_stores/${vectorStoreId}/file_batches/${batchId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Cancel a vector store file batch. This attempts to cancel the processing of\n   * files in this batch as soon as possible.\n   */\n  cancel(\n    vectorStoreId: string,\n    batchId: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<VectorStoreFileBatch> {\n    return this._client.post(`/vector_stores/${vectorStoreId}/file_batches/${batchId}/cancel`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Create a vector store batch and poll until all files have been processed.\n   */\n  async createAndPoll(\n    vectorStoreId: string,\n    body: FileBatchCreateParams,\n    options?: Core.RequestOptions & { pollIntervalMs?: number },\n  ): Promise<VectorStoreFileBatch> {\n    const batch = await this.create(vectorStoreId, body);\n    return await this.poll(vectorStoreId, batch.id, options);\n  }\n\n  /**\n   * Returns a list of vector store files in a batch.\n   */\n  listFiles(\n    vectorStoreId: string,\n    batchId: string,\n    query?: FileBatchListFilesParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<VectorStoreFilesPage, FilesAPI.VectorStoreFile>;\n  listFiles(\n    vectorStoreId: string,\n    batchId: string,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<VectorStoreFilesPage, FilesAPI.VectorStoreFile>;\n  listFiles(\n    vectorStoreId: string,\n    batchId: string,\n    query: FileBatchListFilesParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<VectorStoreFilesPage, FilesAPI.VectorStoreFile> {\n    if (isRequestOptions(query)) {\n      return this.listFiles(vectorStoreId, batchId, {}, query);\n    }\n    return this._client.getAPIList(\n      `/vector_stores/${vectorStoreId}/file_batches/${batchId}/files`,\n      VectorStoreFilesPage,\n      { query, ...options, headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers } },\n    );\n  }\n\n  /**\n   * Wait for the given file batch to be processed.\n   *\n   * Note: this will return even if one of the files failed to process, you need to\n   * check batch.file_counts.failed_count to handle this case.\n   */\n  async poll(\n    vectorStoreId: string,\n    batchId: string,\n    options?: Core.RequestOptions & { pollIntervalMs?: number },\n  ): Promise<VectorStoreFileBatch> {\n    const headers: { [key: string]: string } = { ...options?.headers, 'X-Stainless-Poll-Helper': 'true' };\n    if (options?.pollIntervalMs) {\n      headers['X-Stainless-Custom-Poll-Interval'] = options.pollIntervalMs.toString();\n    }\n\n    while (true) {\n      const { data: batch, response } = await this.retrieve(vectorStoreId, batchId, {\n        ...options,\n        headers,\n      }).withResponse();\n\n      switch (batch.status) {\n        case 'in_progress':\n          let sleepInterval = 5000;\n\n          if (options?.pollIntervalMs) {\n            sleepInterval = options.pollIntervalMs;\n          } else {\n            const headerInterval = response.headers.get('openai-poll-after-ms');\n            if (headerInterval) {\n              const headerIntervalMs = parseInt(headerInterval);\n              if (!isNaN(headerIntervalMs)) {\n                sleepInterval = headerIntervalMs;\n              }\n            }\n          }\n          await sleep(sleepInterval);\n          break;\n        case 'failed':\n        case 'completed':\n          return batch;\n      }\n    }\n  }\n\n  /**\n   * Uploads the given files concurrently and then creates a vector store file batch.\n   *\n   * The concurrency limit is configurable using the `maxConcurrency` parameter.\n   */\n  async uploadAndPoll(\n    vectorStoreId: string,\n    { files, fileIds = [] }: { files: Uploadable[]; fileIds?: string[] },\n    options?: Core.RequestOptions & { pollIntervalMs?: number; maxConcurrency?: number },\n  ): Promise<VectorStoreFileBatch> {\n    if (files === null || files.length == 0) {\n      throw new Error('No files provided to process.');\n    }\n\n    const configuredConcurrency = options?.maxConcurrency ?? 5;\n    //We cap the number of workers at the number of files (so we don't start any unnecessary workers)\n    const concurrencyLimit = Math.min(configuredConcurrency, files.length);\n\n    const client = this._client;\n    const fileIterator = files.values();\n    const allFileIds: string[] = [...fileIds];\n\n    //This code is based on this design. The libraries don't accommodate our environment limits.\n    // https://stackoverflow.com/questions/40639432/what-is-the-best-way-to-limit-concurrency-when-using-es6s-promise-all\n    async function processFiles(iterator: IterableIterator<Uploadable>) {\n      for (let item of iterator) {\n        const fileObj = await client.files.create({ file: item, purpose: 'assistants' }, options);\n        allFileIds.push(fileObj.id);\n      }\n    }\n\n    //Start workers to process results\n    const workers = Array(concurrencyLimit).fill(fileIterator).map(processFiles);\n\n    //Wait for all processing to complete.\n    await allSettledWithThrow(workers);\n\n    return await this.createAndPoll(vectorStoreId, {\n      file_ids: allFileIds,\n    });\n  }\n}\n\n/**\n * A batch of files attached to a vector store.\n */\nexport interface VectorStoreFileBatch {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the vector store files batch was\n   * created.\n   */\n  created_at: number;\n\n  file_counts: VectorStoreFileBatch.FileCounts;\n\n  /**\n   * The object type, which is always `vector_store.file_batch`.\n   */\n  object: 'vector_store.files_batch';\n\n  /**\n   * The status of the vector store files batch, which can be either `in_progress`,\n   * `completed`, `cancelled` or `failed`.\n   */\n  status: 'in_progress' | 'completed' | 'cancelled' | 'failed';\n\n  /**\n   * The ID of the\n   * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n   * that the [File](https://platform.openai.com/docs/api-reference/files) is\n   * attached to.\n   */\n  vector_store_id: string;\n}\n\nexport namespace VectorStoreFileBatch {\n  export interface FileCounts {\n    /**\n     * The number of files that where cancelled.\n     */\n    cancelled: number;\n\n    /**\n     * The number of files that have been processed.\n     */\n    completed: number;\n\n    /**\n     * The number of files that have failed to process.\n     */\n    failed: number;\n\n    /**\n     * The number of files that are currently being processed.\n     */\n    in_progress: number;\n\n    /**\n     * The total number of files.\n     */\n    total: number;\n  }\n}\n\nexport interface FileBatchCreateParams {\n  /**\n   * A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that\n   * the vector store should use. Useful for tools like `file_search` that can access\n   * files.\n   */\n  file_ids: Array<string>;\n}\n\nexport interface FileBatchListFilesParams extends CursorPageParams {\n  /**\n   * A cursor for use in pagination. `before` is an object ID that defines your place\n   * in the list. For instance, if you make a list request and receive 100 objects,\n   * ending with obj_foo, your subsequent call can include before=obj_foo in order to\n   * fetch the previous page of the list.\n   */\n  before?: string;\n\n  /**\n   * Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.\n   */\n  filter?: 'in_progress' | 'completed' | 'failed' | 'cancelled';\n\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nexport namespace FileBatches {\n  export import VectorStoreFileBatch = FileBatchesAPI.VectorStoreFileBatch;\n  export import FileBatchCreateParams = FileBatchesAPI.FileBatchCreateParams;\n  export import FileBatchListFilesParams = FileBatchesAPI.FileBatchListFilesParams;\n}\n\nexport { VectorStoreFilesPage };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}