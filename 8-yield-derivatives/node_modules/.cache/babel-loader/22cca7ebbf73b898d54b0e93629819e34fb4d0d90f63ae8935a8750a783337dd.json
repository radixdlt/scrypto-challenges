{"ast":null,"code":"import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { caughtSchedule } from '../util/caughtSchedule';\nexport function scheduleIterable(input, scheduler) {\n  return new Observable(function (subscriber) {\n    var iterator;\n    subscriber.add(scheduler.schedule(function () {\n      iterator = input[Symbol_iterator]();\n      caughtSchedule(subscriber, scheduler, function () {\n        var _a = iterator.next(),\n          value = _a.value,\n          done = _a.done;\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      });\n    }));\n    return function () {\n      return isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();\n    };\n  });\n}","map":{"version":3,"names":["Observable","iterator","Symbol_iterator","isFunction","caughtSchedule","scheduleIterable","input","scheduler","subscriber","add","schedule","_a","next","value","done","complete","return"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/rxjs/src/internal/scheduled/scheduleIterable.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { caughtSchedule } from '../util/caughtSchedule';\n\n/**\n * Used in {@link scheduled} to create an observable from an Iterable.\n * @param input The iterable to create an observable from\n * @param scheduler The scheduler to use\n */\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    let iterator: Iterator<T, T>;\n\n    // Schedule the initial creation of the iterator from\n    // the iterable. This is so the code in the iterable is\n    // not called until the scheduled job fires.\n    subscriber.add(\n      scheduler.schedule(() => {\n        // Create the iterator.\n        iterator = (input as any)[Symbol_iterator]();\n\n        // Schedule the first iteration and emission.\n        caughtSchedule(subscriber, scheduler, function () {\n          // Pull the value out of the iterator\n          const { value, done } = iterator.next();\n          if (done) {\n            // If it is \"done\" we just complete. This mimics the\n            // behavior of JavaScript's `for..of` consumption of\n            // iterables, which will not emit the value from an iterator\n            // result of `{ done: true: value: 'here' }`.\n            subscriber.complete();\n          } else {\n            // The iterable is not done, emit the value.\n            subscriber.next(value);\n            // Reschedule. This will cause this function to be\n            // called again on the same scheduled delay.\n            this.schedule();\n          }\n        });\n      })\n    );\n\n    // During teardown, if we see this iterator has a `return` method,\n    // then we know it is a Generator, and not just an Iterator. So we call\n    // the `return()` function. This will ensure that any `finally { }` blocks\n    // inside of the generator we can hit will be hit properly.\n    return () => isFunction(iterator?.return) && iterator.return();\n  });\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAE1C,SAASC,QAAQ,IAAIC,eAAe,QAAQ,oBAAoB;AAChE,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,cAAc,QAAQ,wBAAwB;AAOvD,OAAM,SAAUC,gBAAgBA,CAAIC,KAAkB,EAAEC,SAAwB;EAC9E,OAAO,IAAIP,UAAU,CAAI,UAACQ,UAAU;IAClC,IAAIP,QAAwB;IAK5BO,UAAU,CAACC,GAAG,CACZF,SAAS,CAACG,QAAQ,CAAC;MAEjBT,QAAQ,GAAIK,KAAa,CAACJ,eAAe,CAAC,EAAE;MAG5CE,cAAc,CAACI,UAAU,EAAED,SAAS,EAAE;QAE9B,IAAAI,EAAA,GAAkBV,QAAQ,CAACW,IAAI,EAAE;UAA/BC,KAAK,GAAAF,EAAA,CAAAE,KAAA;UAAEC,IAAI,GAAAH,EAAA,CAAAG,IAAoB;QACvC,IAAIA,IAAI,EAAE;UAKRN,UAAU,CAACO,QAAQ,EAAE;SACtB,MAAM;UAELP,UAAU,CAACI,IAAI,CAACC,KAAK,CAAC;UAGtB,IAAI,CAACH,QAAQ,EAAE;;MAEnB,CAAC,CAAC;IACJ,CAAC,CAAC,CACH;IAMD,OAAO;MAAM,OAAAP,UAAU,CAACF,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEe,MAAM,CAAC,IAAIf,QAAQ,CAACe,MAAM,EAAE;IAAjD,CAAiD;EAChE,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}