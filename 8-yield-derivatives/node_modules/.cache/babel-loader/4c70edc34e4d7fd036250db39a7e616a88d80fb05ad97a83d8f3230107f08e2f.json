{"ast":null,"code":"'use strict';\n\nvar MissingRefError = require('./error_classes').MissingRef;\nmodule.exports = compileAsync;\n\n/**\n * Creates validating function for passed schema with asynchronous loading of missing schemas.\n * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.\n * @this  Ajv\n * @param {Object}   schema schema object\n * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped\n * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.\n * @return {Promise} promise that resolves with a validating function.\n */\nfunction compileAsync(schema, meta, callback) {\n  /* eslint no-shadow: 0 */\n  /* global Promise */\n  /* jshint validthis: true */\n  var self = this;\n  if (typeof this._opts.loadSchema != 'function') throw new Error('options.loadSchema should be a function');\n  if (typeof meta == 'function') {\n    callback = meta;\n    meta = undefined;\n  }\n  var p = loadMetaSchemaOf(schema).then(function () {\n    var schemaObj = self._addSchema(schema, undefined, meta);\n    return schemaObj.validate || _compileAsync(schemaObj);\n  });\n  if (callback) {\n    p.then(function (v) {\n      callback(null, v);\n    }, callback);\n  }\n  return p;\n  function loadMetaSchemaOf(sch) {\n    var $schema = sch.$schema;\n    return $schema && !self.getSchema($schema) ? compileAsync.call(self, {\n      $ref: $schema\n    }, true) : Promise.resolve();\n  }\n  function _compileAsync(schemaObj) {\n    try {\n      return self._compile(schemaObj);\n    } catch (e) {\n      if (e instanceof MissingRefError) return loadMissingSchema(e);\n      throw e;\n    }\n    function loadMissingSchema(e) {\n      var ref = e.missingSchema;\n      if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');\n      var schemaPromise = self._loadingSchemas[ref];\n      if (!schemaPromise) {\n        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);\n        schemaPromise.then(removePromise, removePromise);\n      }\n      return schemaPromise.then(function (sch) {\n        if (!added(ref)) {\n          return loadMetaSchemaOf(sch).then(function () {\n            if (!added(ref)) self.addSchema(sch, ref, undefined, meta);\n          });\n        }\n      }).then(function () {\n        return _compileAsync(schemaObj);\n      });\n      function removePromise() {\n        delete self._loadingSchemas[ref];\n      }\n      function added(ref) {\n        return self._refs[ref] || self._schemas[ref];\n      }\n    }\n  }\n}","map":{"version":3,"names":["MissingRefError","require","MissingRef","module","exports","compileAsync","schema","meta","callback","self","_opts","loadSchema","Error","undefined","p","loadMetaSchemaOf","then","schemaObj","_addSchema","validate","_compileAsync","v","sch","$schema","getSchema","call","$ref","Promise","resolve","_compile","e","loadMissingSchema","ref","missingSchema","added","missingRef","schemaPromise","_loadingSchemas","removePromise","addSchema","_refs","_schemas"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/ajv/lib/compile/async.js"],"sourcesContent":["'use strict';\n\nvar MissingRefError = require('./error_classes').MissingRef;\n\nmodule.exports = compileAsync;\n\n\n/**\n * Creates validating function for passed schema with asynchronous loading of missing schemas.\n * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.\n * @this  Ajv\n * @param {Object}   schema schema object\n * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped\n * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.\n * @return {Promise} promise that resolves with a validating function.\n */\nfunction compileAsync(schema, meta, callback) {\n  /* eslint no-shadow: 0 */\n  /* global Promise */\n  /* jshint validthis: true */\n  var self = this;\n  if (typeof this._opts.loadSchema != 'function')\n    throw new Error('options.loadSchema should be a function');\n\n  if (typeof meta == 'function') {\n    callback = meta;\n    meta = undefined;\n  }\n\n  var p = loadMetaSchemaOf(schema).then(function () {\n    var schemaObj = self._addSchema(schema, undefined, meta);\n    return schemaObj.validate || _compileAsync(schemaObj);\n  });\n\n  if (callback) {\n    p.then(\n      function(v) { callback(null, v); },\n      callback\n    );\n  }\n\n  return p;\n\n\n  function loadMetaSchemaOf(sch) {\n    var $schema = sch.$schema;\n    return $schema && !self.getSchema($schema)\n            ? compileAsync.call(self, { $ref: $schema }, true)\n            : Promise.resolve();\n  }\n\n\n  function _compileAsync(schemaObj) {\n    try { return self._compile(schemaObj); }\n    catch(e) {\n      if (e instanceof MissingRefError) return loadMissingSchema(e);\n      throw e;\n    }\n\n\n    function loadMissingSchema(e) {\n      var ref = e.missingSchema;\n      if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');\n\n      var schemaPromise = self._loadingSchemas[ref];\n      if (!schemaPromise) {\n        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);\n        schemaPromise.then(removePromise, removePromise);\n      }\n\n      return schemaPromise.then(function (sch) {\n        if (!added(ref)) {\n          return loadMetaSchemaOf(sch).then(function () {\n            if (!added(ref)) self.addSchema(sch, ref, undefined, meta);\n          });\n        }\n      }).then(function() {\n        return _compileAsync(schemaObj);\n      });\n\n      function removePromise() {\n        delete self._loadingSchemas[ref];\n      }\n\n      function added(ref) {\n        return self._refs[ref] || self._schemas[ref];\n      }\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}