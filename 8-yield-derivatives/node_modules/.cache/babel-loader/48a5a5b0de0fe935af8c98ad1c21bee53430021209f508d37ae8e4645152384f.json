{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { noChange } from '../lit-html.js';\nimport { directive, Directive, PartType } from '../directive.js';\nconst important = 'important';\n// The leading space is important\nconst importantFlag = ' !' + important;\n// How many characters to remove from a value, as a negative number\nconst flagTrim = 0 - importantFlag.length;\nclass StyleMapDirective extends Directive {\n  constructor(partInfo) {\n    var _a;\n    super(partInfo);\n    if (partInfo.type !== PartType.ATTRIBUTE || partInfo.name !== 'style' || ((_a = partInfo.strings) === null || _a === void 0 ? void 0 : _a.length) > 2) {\n      throw new Error('The `styleMap` directive must be used in the `style` attribute ' + 'and must be the only part in the attribute.');\n    }\n  }\n  render(styleInfo) {\n    return Object.keys(styleInfo).reduce((style, prop) => {\n      const value = styleInfo[prop];\n      if (value == null) {\n        return style;\n      }\n      // Convert property names from camel-case to dash-case, i.e.:\n      //  `backgroundColor` -> `background-color`\n      // Vendor-prefixed names need an extra `-` appended to front:\n      //  `webkitAppearance` -> `-webkit-appearance`\n      // Exception is any property name containing a dash, including\n      // custom properties; we assume these are already dash-cased i.e.:\n      //  `--my-button-color` --> `--my-button-color`\n      prop = prop.includes('-') ? prop : prop.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, '-$&').toLowerCase();\n      return style + `${prop}:${value};`;\n    }, '');\n  }\n  update(part, [styleInfo]) {\n    const {\n      style\n    } = part.element;\n    if (this._previousStyleProperties === undefined) {\n      this._previousStyleProperties = new Set();\n      for (const name in styleInfo) {\n        this._previousStyleProperties.add(name);\n      }\n      return this.render(styleInfo);\n    }\n    // Remove old properties that no longer exist in styleInfo\n    // We use forEach() instead of for-of so that re don't require down-level\n    // iteration.\n    this._previousStyleProperties.forEach(name => {\n      // If the name isn't in styleInfo or it's null/undefined\n      if (styleInfo[name] == null) {\n        this._previousStyleProperties.delete(name);\n        if (name.includes('-')) {\n          style.removeProperty(name);\n        } else {\n          // Note reset using empty string (vs null) as IE11 does not always\n          // reset via null (https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style#setting_styles)\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          style[name] = '';\n        }\n      }\n    });\n    // Add or update properties\n    for (const name in styleInfo) {\n      const value = styleInfo[name];\n      if (value != null) {\n        this._previousStyleProperties.add(name);\n        const isImportant = typeof value === 'string' && value.endsWith(importantFlag);\n        if (name.includes('-') || isImportant) {\n          style.setProperty(name, isImportant ? value.slice(0, flagTrim) : value, isImportant ? important : '');\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          style[name] = value;\n        }\n      }\n    }\n    return noChange;\n  }\n}\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the\n * {@link StyleInfo styleInfo} object and adds the properties to the inline\n * style of the element.\n *\n * Property names with dashes (`-`) are assumed to be valid CSS\n * property names and set on the element's style object using `setProperty()`.\n * Names without dashes are assumed to be camelCased JavaScript property names\n * and set on the element's style object using property assignment, allowing the\n * style object to translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo\n * @see {@link https://lit.dev/docs/templates/directives/#stylemap styleMap code samples on Lit.dev}\n */\nexport const styleMap = directive(StyleMapDirective);","map":{"version":3,"names":["noChange","directive","Directive","PartType","important","importantFlag","flagTrim","length","StyleMapDirective","constructor","partInfo","type","ATTRIBUTE","name","_a","strings","Error","render","styleInfo","Object","keys","reduce","style","prop","value","includes","replace","toLowerCase","update","part","element","_previousStyleProperties","undefined","Set","add","forEach","delete","removeProperty","isImportant","endsWith","setProperty","slice","styleMap"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/lit-html/src/directives/style-map.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\n\n/**\n * A key-value set of CSS properties and values.\n *\n * The key should be either a valid CSS property name string, like\n * `'background-color'`, or a valid JavaScript camel case property name\n * for CSSStyleDeclaration like `backgroundColor`.\n */\nexport interface StyleInfo {\n  [name: string]: string | number | undefined | null;\n}\n\nconst important = 'important';\n// The leading space is important\nconst importantFlag = ' !' + important;\n// How many characters to remove from a value, as a negative number\nconst flagTrim = 0 - importantFlag.length;\n\nclass StyleMapDirective extends Directive {\n  _previousStyleProperties?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'style' ||\n      (partInfo.strings?.length as number) > 2\n    ) {\n      throw new Error(\n        'The `styleMap` directive must be used in the `style` attribute ' +\n          'and must be the only part in the attribute.'\n      );\n    }\n  }\n\n  render(styleInfo: Readonly<StyleInfo>) {\n    return Object.keys(styleInfo).reduce((style, prop) => {\n      const value = styleInfo[prop];\n      if (value == null) {\n        return style;\n      }\n      // Convert property names from camel-case to dash-case, i.e.:\n      //  `backgroundColor` -> `background-color`\n      // Vendor-prefixed names need an extra `-` appended to front:\n      //  `webkitAppearance` -> `-webkit-appearance`\n      // Exception is any property name containing a dash, including\n      // custom properties; we assume these are already dash-cased i.e.:\n      //  `--my-button-color` --> `--my-button-color`\n      prop = prop.includes('-')\n        ? prop\n        : prop\n            .replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, '-$&')\n            .toLowerCase();\n      return style + `${prop}:${value};`;\n    }, '');\n  }\n\n  override update(part: AttributePart, [styleInfo]: DirectiveParameters<this>) {\n    const {style} = part.element as HTMLElement;\n\n    if (this._previousStyleProperties === undefined) {\n      this._previousStyleProperties = new Set();\n      for (const name in styleInfo) {\n        this._previousStyleProperties.add(name);\n      }\n      return this.render(styleInfo);\n    }\n\n    // Remove old properties that no longer exist in styleInfo\n    // We use forEach() instead of for-of so that re don't require down-level\n    // iteration.\n    this._previousStyleProperties!.forEach((name) => {\n      // If the name isn't in styleInfo or it's null/undefined\n      if (styleInfo[name] == null) {\n        this._previousStyleProperties!.delete(name);\n        if (name.includes('-')) {\n          style.removeProperty(name);\n        } else {\n          // Note reset using empty string (vs null) as IE11 does not always\n          // reset via null (https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style#setting_styles)\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (style as any)[name] = '';\n        }\n      }\n    });\n\n    // Add or update properties\n    for (const name in styleInfo) {\n      const value = styleInfo[name];\n      if (value != null) {\n        this._previousStyleProperties.add(name);\n        const isImportant =\n          typeof value === 'string' && value.endsWith(importantFlag);\n        if (name.includes('-') || isImportant) {\n          style.setProperty(\n            name,\n            isImportant\n              ? (value as string).slice(0, flagTrim)\n              : (value as string),\n            isImportant ? important : ''\n          );\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (style as any)[name] = value;\n        }\n      }\n    }\n    return noChange;\n  }\n}\n\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the\n * {@link StyleInfo styleInfo} object and adds the properties to the inline\n * style of the element.\n *\n * Property names with dashes (`-`) are assumed to be valid CSS\n * property names and set on the element's style object using `setProperty()`.\n * Names without dashes are assumed to be camelCased JavaScript property names\n * and set on the element's style object using property assignment, allowing the\n * style object to translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo\n * @see {@link https://lit.dev/docs/templates/directives/#stylemap styleMap code samples on Lit.dev}\n */\nexport const styleMap = directive(StyleMapDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {StyleMapDirective};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}