{"ast":null,"code":"var _jsxFileName = \"/Users/mdabdurrazzak/RadInsu/src/Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { RadixDappToolkit, DataRequestBuilder, RadixNetwork } from '@radixdlt/radix-dapp-toolkit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const [rdt, setRdt] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [accountAddress, setAccountAddress] = useState('');\n  const [connected, setConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState('');\n  const [smartContract, setSmartContract] = useState(null);\n  const connectWallet = async () => {\n    try {\n      const dAppId = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz';\n      const newRdt = RadixDappToolkit({\n        dAppDefinitionAddress: dAppId,\n        networkId: RadixNetwork.Stokenet,\n        applicationName: 'Infinx',\n        applicationVersion: '1.0.0',\n        modules: {\n          atomService: true\n        }\n      });\n      setRdt(newRdt);\n      setLoading(true); // Set loading to true when initiating connection\n      console.log('Connected to wallet successfully');\n      setConnected(true);\n      newRdt.walletApi.setRequestData(DataRequestBuilder.accounts().atLeast(1));\n      newRdt.walletApi.walletData$.subscribe(walletData => {\n        console.log(\"Subscription wallet data: \", walletData);\n        if (walletData && walletData.accounts && walletData.accounts.length > 0) {\n          setAccountAddress(walletData.accounts[0].address);\n          setWalletAddress(walletData.accounts[0].address);\n          setLoading(false); // Set loading to false once wallet data is received\n        }\n      });\n      const atomService = newRdt.atomService;\n      if (atomService) {\n        const contract = await atomService.getAtomById('your_transaction_id');\n        setSmartContract(contract);\n      } else {\n        console.error('Atom service is not available');\n      }\n    } catch (error) {\n      console.error('Error connecting to Radix Wallet Connector:', error);\n    }\n  };\n  useEffect(() => {\n    connectWallet();\n  }, []);\n  const instantiateComponent = async () => {\n    try {\n      // Your instantiation logic here\n    } catch (error) {\n      console.error('Error instantiating component:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!connected && !loading && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWallet,\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 34\n    }, this), !connected && loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 33\n    }, this), \" \", connected && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"You are connected. Wallet Address: \", walletAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: instantiateComponent,\n      children: \"Instantiate Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), accountAddress && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Account Address: \", accountAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), smartContract && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Smart Contract: \", JSON.stringify(smartContract)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(Profile, \"YJSeTJ6ogcSJn0vkGhRIg8hXXoo=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useState","useEffect","RadixDappToolkit","DataRequestBuilder","RadixNetwork","jsxDEV","_jsxDEV","Profile","_s","rdt","setRdt","loading","setLoading","accountAddress","setAccountAddress","connected","setConnected","walletAddress","setWalletAddress","smartContract","setSmartContract","connectWallet","dAppId","newRdt","dAppDefinitionAddress","networkId","Stokenet","applicationName","applicationVersion","modules","atomService","console","log","walletApi","setRequestData","accounts","atLeast","walletData$","subscribe","walletData","length","address","contract","getAtomById","error","instantiateComponent","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/mdabdurrazzak/RadInsu/src/Profile.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { RadixDappToolkit, DataRequestBuilder, RadixNetwork } from '@radixdlt/radix-dapp-toolkit';\n\nconst Profile = () => {\n  const [rdt, setRdt] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [accountAddress, setAccountAddress] = useState('');\n  const [connected, setConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState('');\n  const [smartContract, setSmartContract] = useState(null);\n\n  const connectWallet = async () => {\n    try {\n      const dAppId = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz';\n      const newRdt = RadixDappToolkit({\n        dAppDefinitionAddress: dAppId,\n        networkId: RadixNetwork.Stokenet,\n        applicationName: 'Infinx',\n        applicationVersion: '1.0.0',\n        modules: {\n          atomService: true,\n        },\n      });\n      setRdt(newRdt);\n      setLoading(true); // Set loading to true when initiating connection\n      console.log('Connected to wallet successfully');\n      setConnected(true);\n  \n      newRdt.walletApi.setRequestData(DataRequestBuilder.accounts().atLeast(1));\n      newRdt.walletApi.walletData$.subscribe((walletData) => {\n        console.log(\"Subscription wallet data: \", walletData);\n        if (walletData && walletData.accounts && walletData.accounts.length > 0) {\n          setAccountAddress(walletData.accounts[0].address);\n          setWalletAddress(walletData.accounts[0].address);\n          setLoading(false); // Set loading to false once wallet data is received\n        }\n      });\n  \n      const atomService = newRdt.atomService;\n      if (atomService) {\n        const contract = await atomService.getAtomById('your_transaction_id');\n        setSmartContract(contract);\n      } else {\n        console.error('Atom service is not available');\n      }\n    } catch (error) {\n      console.error('Error connecting to Radix Wallet Connector:', error);\n    }\n  };\n\n  useEffect(() => {\n    connectWallet();\n  }, []);\n\n  const instantiateComponent = async () => {\n    try {\n      // Your instantiation logic here\n    } catch (error) {\n      console.error('Error instantiating component:', error);\n    }\n  };\n\n  return (\n    <div>\n      {!connected && !loading && <button onClick={connectWallet}>Connect Wallet</button>}\n      {!connected && loading && <div>Loading...</div>} {/* Show loading indicator */}\n      {connected && <div>You are connected. Wallet Address: {walletAddress}</div>}\n\n      <button onClick={instantiateComponent}>Instantiate Component</button>\n  \n      {accountAddress && (\n        <div>\n          <div>Account Address: {accountAddress}</div>\n        </div>\n      )}\n\n      {smartContract && <div>Smart Contract: {JSON.stringify(smartContract)}</div>}\n    </div>\n  );\n};\n\nexport default Profile;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}