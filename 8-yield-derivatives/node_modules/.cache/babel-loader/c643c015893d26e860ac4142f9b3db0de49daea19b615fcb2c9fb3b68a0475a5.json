{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function isEmpty() {\n  return function (source) {\n    return source.lift(new IsEmptyOperator());\n  };\n}\nvar IsEmptyOperator = /*@__PURE__*/function () {\n  function IsEmptyOperator() {}\n  IsEmptyOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  };\n  return IsEmptyOperator;\n}();\nvar IsEmptySubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(IsEmptySubscriber, _super);\n  function IsEmptySubscriber(destination) {\n    return _super.call(this, destination) || this;\n  }\n  IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n    var destination = this.destination;\n    destination.next(isEmpty);\n    destination.complete();\n  };\n  IsEmptySubscriber.prototype._next = function (value) {\n    this.notifyComplete(false);\n  };\n  IsEmptySubscriber.prototype._complete = function () {\n    this.notifyComplete(true);\n  };\n  return IsEmptySubscriber;\n}(Subscriber);","map":{"version":3,"names":["tslib_1","Subscriber","isEmpty","source","lift","IsEmptyOperator","prototype","call","observer","subscribe","IsEmptySubscriber","_super","__extends","destination","notifyComplete","next","complete","_next","value","_complete"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/isEmpty.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Emits false if the input observable emits any values, or emits true if the\n * input observable completes without emitting any values.\n *\n * <span class=\"informal\">Tells whether any values are emitted by an observable</span>\n *\n * ![](isEmpty.png)\n *\n * `isEmpty` transforms an Observable that emits values into an Observable that\n * emits a single boolean value representing whether or not any values were\n * emitted by the source Observable. As soon as the source Observable emits a\n * value, `isEmpty` will emit a `false` and complete.  If the source Observable\n * completes having not emitted anything, `isEmpty` will emit a `true` and\n * complete.\n *\n * A similar effect could be achieved with {@link count}, but `isEmpty` can emit\n * a `false` value sooner.\n *\n * ## Examples\n *\n * Emit `false` for a non-empty Observable\n * ```javascript\n * import { Subject } from 'rxjs';\n * import { isEmpty } from 'rxjs/operators';\n *\n * const source = new Subject<string>();\n * const result = source.pipe(isEmpty());\n * source.subscribe(x => console.log(x));\n * result.subscribe(x => console.log(x));\n * source.next('a');\n * source.next('b');\n * source.next('c');\n * source.complete();\n *\n * // Results in:\n * // a\n * // false\n * // b\n * // c\n * ```\n *\n * Emit `true` for an empty Observable\n * ```javascript\n * import { EMPTY } from 'rxjs';\n * import { isEmpty } from 'rxjs/operators';\n *\n * const result = EMPTY.pipe(isEmpty());\n * result.subscribe(x => console.log(x));\n * // Results in:\n * // true\n * ```\n *\n * @see {@link count}\n * @see {@link EMPTY}\n *\n * @return {OperatorFunction<T, boolean>} An Observable of a boolean value indicating whether observable was empty or not\n * @method isEmpty\n * @owner Observable\n */\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n"],"mappings":";AACA,OAAO,KAAEA,OAAU,MAAE,OAAM;AAgE3B,SAAMC,UAAU,QAAO;OACrB,SAAOC,OAACA,CAAA;EACT,iBAAAC,MAAA;IAAA,OAAAA,MAAA,CAAAC,IAAA,KAAAC,eAAA;EAAA;AAED;IAAAA,eAAA;EAIA,SAACA,gBAAA,GAHC;iBACS,CAAAC,SAAO,CAAAC,IAAU,GAAI,UAAAC,QAAkB,EAAAL,MAAS,EAAE;IAC1D,OAAAA,MAAA,CAAAM,SAAA,KAAAC,iBAAA,CAAAF,QAAA;EACH;EAJA,OAICH,eAAA;AAOD;IAAgCK,iBAAA,0BAAeC,MAAA;EAC7CX,OAAA,CAAAY,SAAA,CAAAF,iBAAY,EAAAC,MAAgC;4BAC1CD,CAAAG,WAAM,EAAW;IAClB,OAAAF,MAAA,CAAAJ,IAAA,OAAAM,WAAA;EAEO;mBACA,CAAAP,SAAmB,CAAAQ,cAAY,aAAAZ,OAAA;IAErC,IAAAW,WAAY,GAAK,KAAAA,WAAS;IAC1BA,WAAW,CAACE,IAAA,CAAAb,OAAW;IACxBW,WAAA,CAAAG,QAAA;EAES;mBACH,CAAAV,SAAe,CAAAW,KAAO,aAAAC,KAAA;IAC5B,KAAAJ,cAAA;EAES;mBACH,CAAAR,SAAe,CAAIa,SAAE;IAC3B,KAAAL,cAAA;EACH;EAnBgC,OAAAJ,iBAmB/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}