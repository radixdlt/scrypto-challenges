{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n  return function refCountOperatorFunction(source) {\n    return source.lift(new RefCountOperator(source));\n  };\n}\nvar RefCountOperator = /*@__PURE__*/function () {\n  function RefCountOperator(connectable) {\n    this.connectable = connectable;\n  }\n  RefCountOperator.prototype.call = function (subscriber, source) {\n    var connectable = this.connectable;\n    connectable._refCount++;\n    var refCounter = new RefCountSubscriber(subscriber, connectable);\n    var subscription = source.subscribe(refCounter);\n    if (!refCounter.closed) {\n      refCounter.connection = connectable.connect();\n    }\n    return subscription;\n  };\n  return RefCountOperator;\n}();\nvar RefCountSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RefCountSubscriber, _super);\n  function RefCountSubscriber(destination, connectable) {\n    var _this = _super.call(this, destination) || this;\n    _this.connectable = connectable;\n    return _this;\n  }\n  RefCountSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n    this.connectable = null;\n    var refCount = connectable._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n    connectable._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n    var connection = this.connection;\n    var sharedConnection = connectable._connection;\n    this.connection = null;\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  };\n  return RefCountSubscriber;\n}(Subscriber);","map":{"version":3,"names":["tslib_1","Subscriber","refCount","refCountOperatorFunction","source","lift","RefCountOperator","connectable","prototype","call","subscriber","_refCount","refCounter","RefCountSubscriber","subscription","subscribe","closed","connection","connect","_super","__extends","destination","_this","_unsubscribe","sharedConnection","_connection","unsubscribe"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/refCount.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\n/**\n * Make a {@link ConnectableObservable} behave like a ordinary observable and automates the way\n * you can connect to it.\n *\n * Internally it counts the subscriptions to the observable and subscribes (only once) to the source if\n * the number of subscriptions is larger than 0. If the number of subscriptions is smaller than 1, it\n * unsubscribes from the source. This way you can make sure that everything before the *published*\n * refCount has only a single subscription independently of the number of subscribers to the target\n * observable.\n *\n * Note that using the {@link share} operator is exactly the same as using the *publish* operator\n * (making the observable hot) and the *refCount* operator in a sequence.\n *\n * ![](refCount.png)\n *\n * ## Example\n *\n * In the following example there are two intervals turned into connectable observables\n * by using the *publish* operator. The first one uses the *refCount* operator, the\n * second one does not use it. You will notice that a connectable observable does nothing\n * until you call its connect function.\n *\n * ```ts\n * import { interval } from 'rxjs';\n * import { tap, publish, refCount } from 'rxjs/operators';\n *\n * // Turn the interval observable into a ConnectableObservable (hot)\n * const refCountInterval = interval(400).pipe(\n *   tap((num) => console.log(`refCount ${num}`)),\n *   publish(),\n *   refCount()\n * );\n *\n * const publishedInterval = interval(400).pipe(\n *   tap((num) => console.log(`publish ${num}`)),\n *   publish()\n * );\n *\n * refCountInterval.subscribe();\n * refCountInterval.subscribe();\n * // 'refCount 0' -----> 'refCount 1' -----> etc\n * // All subscriptions will receive the same value and the tap (and\n * // every other operator) before the publish operator will be executed\n * // only once per event independently of the number of subscriptions.\n *\n * publishedInterval.subscribe();\n * // Nothing happens until you call .connect() on the observable.\n * ```\n *\n * @see {@link ConnectableObservable}\n * @see {@link share}\n * @see {@link publish}\n */\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  } as MonoTypeOperatorFunction<T>;\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // )\n    // .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n"],"mappings":";AACA,OAAO,KAAEA,OAAU,MAAE,OAAM;AA2D3B,SAAMC,UAAU,QAAQ;OACtB,SAAOC,QAASA,CAAA;SACd,SAAOC,wBAAgBA,CAAAC,MAAiB;IACT,OAAAA,MAAA,CAAAC,IAAA,KAAAC,gBAAA,CAAAF,MAAA;EAClC;AAED;IACEE,gBAAA,gBAAoB,YAAqC;WAArCA,iBAAAC,WAAqC;IACxD,KAAAA,WAAA,GAAAA,WAAA;EACD;kBAEU,CAAAC,SAAA,CAAAC,IAAA,aAAqBC,UAAA,EAAAN,MAAA;IACtB,IAAAG,WAAa,OAAS,CAAEA,WAAC;IAEhCA,WAAM,CAAAI,SAAiB;IACvB,IAAMC,UAAA,GAAY,IAAGC,kBAAiB,CAAAH,UAAY,EAAAH,WAAA;IAElD,IAAIO,YAAY,GAAAV,MAAQ,CAAAW,SAAA,CAAAH,UAAA;QACf,CAAAA,UAAY,CAAAI,MAAA;MACpBJ,UAAA,CAAAK,UAAA,GAAAV,WAAA,CAAAW,OAAA;IAED;IACD,OAAAJ,YAAA;EACH;EAjBA,OAiBCR,gBAAA;AAED;IAAoCO,kBAAA,0BAAaM,MAAA;EAI/CnB,OAAA,CAAAoB,SAAA,CAAAP,kBAAY,EAAAM,MACQ;WADpBN,kBAEEA,CAAAQ,WAAM,EAAAd,WAAY;IADA,IAAAe,KAAA,GAAAH,MAAW,CAAAV,IAAX,OAAAY,WAAqC;;IAExD,OAAAC,KAAA;EAES;oBAEA,CAAAd,SAAA,CAAAe,YAAqB;IAC7B,IAAIhB,WAAC,GAAa,KAAAA,WAAA;QAChB,CAAAA,WAAK;MACL,KAAAU,UAAO;MACR;IAED;IACA,IAAM,CAAAV,WAAkB;IACxB,IAAIL,QAAQ,GAAAK,WAAO,CAAAI,SAAA;QACjBT,QAAK,OAAU;MACf,KAAAe,UAAO;MACR;IAEM;IACPV,WAAI,CAAQI,SAAM,GAAAT,QAAA;QAChBA,QAAK;MACL,KAAAe,UAAO;MACR;IA0BO;IACR,IAAMA,UAAA,OAAgB,CAAAA,UAAU;IAChC,IAAIO,gBAAc,GAAKjB,WAAA,CAAAkB,WAAA;IAEvB,IAAI,CAAAR,UAAA,OAAgB;QAClBO,gBAAgB,KAAC,CAAAP,UAAc,IAAAO,gBAAA,KAAAP,UAAA;MAChCO,gBAAA,CAAAE,WAAA;IACF;EACH;EA9DoC,OAAAb,kBA8DnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}