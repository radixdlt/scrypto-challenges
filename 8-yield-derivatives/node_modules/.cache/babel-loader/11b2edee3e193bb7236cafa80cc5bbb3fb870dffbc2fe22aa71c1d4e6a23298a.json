{"ast":null,"code":"var _jsxFileName = \"/Users/mdabdurrazzak/RadInsu/src/Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { RadixDappToolkit, DataRequestBuilder, RadixNetwork } from '@radixdlt/radix-dapp-toolkit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const [rdt, setRdt] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [accountAddress, setAccountAddress] = useState('');\n  const [componentAddress, setComponentAddress] = useState('');\n  const [adminBadge, setAdminBadge] = useState('');\n  const [ownerBadge, setOwnerBadge] = useState('');\n  const [gumResourceAddress, setGumResourceAddress] = useState('');\n  const [connected, setConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState('');\n  const [smartContract, setSmartContract] = useState(null); // Add smartContract state\n\n  const connectWallet = async () => {\n    try {\n      const dAppId = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz';\n      const newRdt = RadixDappToolkit({\n        dAppDefinitionAddress: dAppId,\n        networkId: RadixNetwork.Stokenet,\n        applicationName: 'Infinx',\n        applicationVersion: '1.0.0',\n        modules: {\n          atomService: true // Enable Atom Service module\n        }\n      });\n      setRdt(newRdt);\n      setLoading(false);\n      console.log('Connected to wallet successfully');\n      setConnected(true);\n      newRdt.walletApi.setRequestData(DataRequestBuilder.accounts().atLeast(1));\n      newRdt.walletApi.walletData$.subscribe(walletData => {\n        console.log(\"Subscription wallet data: \", walletData);\n        if (walletData && walletData.accounts && walletData.accounts.length > 0) {\n          setAccountAddress(walletData.accounts[0].address);\n          setWalletAddress(walletData.accounts[0].address); // Set the wallet address state\n        }\n      });\n\n      // Fetch additional information after connecting wallet\n      const atomService = newRdt.atomService;\n      if (atomService) {\n        const contract = await atomService.getAtomById('your_transaction_id');\n        setSmartContract(contract);\n\n        // Assuming you have functions to fetch component address, admin badge, owner badge, and gumball resource address\n        const componentAddr = await fetchComponentAddress(); // Implement this function\n        const adminBadge = await fetchAdminBadge(); // Implement this function\n        const ownerBadge = await fetchOwnerBadge(); // Implement this function\n        const gumResourceAddr = await fetchGumballResourceAddress(); // Implement this function\n\n        // Update state variables with fetched data\n        setComponentAddress(componentAddr);\n        setAdminBadge(adminBadge);\n        setOwnerBadge(ownerBadge);\n        setGumResourceAddress(gumResourceAddr);\n      } else {\n        console.error('Atom service is not available');\n      }\n    } catch (error) {\n      console.error('Error connecting to Radix Wallet Connector:', error);\n    }\n  };\n  const instantiateComponent = async () => {\n    try {\n      // Your instantiation logic here\n    } catch (error) {\n      console.error('Error instantiating component:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!connected && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => connectWallet(),\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 22\n    }, this), connected && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"You are connected. Wallet Address: \", walletAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: instantiateComponent,\n      children: \"Instantiate Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), accountAddress && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Account Address: \", accountAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 26\n    }, this), accountAddress && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Component Address: \", componentAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Admin Badge: \", adminBadge]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Owner Badge: \", ownerBadge]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Gumball Resource Address: \", gumResourceAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), smartContract && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Smart Contract: \", JSON.stringify(smartContract)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(Profile, \"x52Wh2iMetuRHaIyNghfYNWmXS8=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useState","useEffect","RadixDappToolkit","DataRequestBuilder","RadixNetwork","jsxDEV","_jsxDEV","Profile","_s","rdt","setRdt","loading","setLoading","accountAddress","setAccountAddress","componentAddress","setComponentAddress","adminBadge","setAdminBadge","ownerBadge","setOwnerBadge","gumResourceAddress","setGumResourceAddress","connected","setConnected","walletAddress","setWalletAddress","smartContract","setSmartContract","connectWallet","dAppId","newRdt","dAppDefinitionAddress","networkId","Stokenet","applicationName","applicationVersion","modules","atomService","console","log","walletApi","setRequestData","accounts","atLeast","walletData$","subscribe","walletData","length","address","contract","getAtomById","componentAddr","fetchComponentAddress","fetchAdminBadge","fetchOwnerBadge","gumResourceAddr","fetchGumballResourceAddress","error","instantiateComponent","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/mdabdurrazzak/RadInsu/src/Profile.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { RadixDappToolkit, DataRequestBuilder, RadixNetwork } from '@radixdlt/radix-dapp-toolkit';\n\nconst Profile = () => {\n  const [rdt, setRdt] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [accountAddress, setAccountAddress] = useState('');\n  const [componentAddress, setComponentAddress] = useState('');\n  const [adminBadge, setAdminBadge] = useState('');\n  const [ownerBadge, setOwnerBadge] = useState('');\n  const [gumResourceAddress, setGumResourceAddress] = useState('');\n  const [connected, setConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState('');\n  const [smartContract, setSmartContract] = useState(null); // Add smartContract state\n\nconst connectWallet = async () => {\n  try {\n    const dAppId = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz';\n    const newRdt = RadixDappToolkit({\n      dAppDefinitionAddress: dAppId,\n      networkId: RadixNetwork.Stokenet,\n      applicationName: 'Infinx',\n      applicationVersion: '1.0.0',\n      modules: {\n        atomService: true, // Enable Atom Service module\n      },\n    });\n    setRdt(newRdt);\n    setLoading(false);\n    console.log('Connected to wallet successfully');\n    setConnected(true);\n\n    newRdt.walletApi.setRequestData(DataRequestBuilder.accounts().atLeast(1));\n    newRdt.walletApi.walletData$.subscribe((walletData) => {\n      console.log(\"Subscription wallet data: \", walletData);\n      if (walletData && walletData.accounts && walletData.accounts.length > 0) {\n        setAccountAddress(walletData.accounts[0].address);\n        setWalletAddress(walletData.accounts[0].address); // Set the wallet address state\n      }\n    });\n\n    // Fetch additional information after connecting wallet\n    const atomService = newRdt.atomService;\n    if (atomService) {\n      const contract = await atomService.getAtomById('your_transaction_id');\n      setSmartContract(contract);\n\n      // Assuming you have functions to fetch component address, admin badge, owner badge, and gumball resource address\n      const componentAddr = await fetchComponentAddress(); // Implement this function\n      const adminBadge = await fetchAdminBadge(); // Implement this function\n      const ownerBadge = await fetchOwnerBadge(); // Implement this function\n      const gumResourceAddr = await fetchGumballResourceAddress(); // Implement this function\n\n      // Update state variables with fetched data\n      setComponentAddress(componentAddr);\n      setAdminBadge(adminBadge);\n      setOwnerBadge(ownerBadge);\n      setGumResourceAddress(gumResourceAddr);\n    } else {\n      console.error('Atom service is not available');\n    }\n  } catch (error) {\n    console.error('Error connecting to Radix Wallet Connector:', error);\n  }\n};\n\n\n  const instantiateComponent = async () => {\n    try {\n      // Your instantiation logic here\n    } catch (error) {\n      console.error('Error instantiating component:', error);\n    }\n  };\n\n  return (\n    <div>\n      {!connected && <button onClick={() => connectWallet()}>Connect Wallet</button>}\n      {connected && <div>You are connected. Wallet Address: {walletAddress}</div>}\n\n      <button onClick={instantiateComponent}>Instantiate Component</button>\n  \n      {accountAddress && <div>Account Address: {accountAddress}</div>}\n      {accountAddress && (\n        <div>\n          <div>Component Address: {componentAddress}</div>\n          <div>Admin Badge: {adminBadge}</div>\n          <div>Owner Badge: {ownerBadge}</div>\n          <div>Gumball Resource Address: {gumResourceAddress}</div>\n        </div>\n      )}\n      {/* Display smart contract data */}\n      {smartContract && <div>Smart Contract: {JSON.stringify(smartContract)}</div>}\n    </div>\n  );\n};\n\nexport default Profile;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}