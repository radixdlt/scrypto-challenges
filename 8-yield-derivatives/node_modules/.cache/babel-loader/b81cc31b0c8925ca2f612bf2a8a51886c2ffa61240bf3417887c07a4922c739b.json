{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar rxjs_1 = require(\"rxjs\");\nvar typescript_map_1 = require(\"typescript-map\");\nvar operators_1 = require(\"rxjs/operators\");\nvar atommodel_1 = require(\"../atommodel\");\nvar RadixDataAccountSystem = /** @class */function () {\n  function RadixDataAccountSystem(address) {\n    this.address = address;\n    this.name = 'DATA';\n    this.applicationDataSubject = new rxjs_1.Subject();\n    this.applicationData = new typescript_map_1.TSMap();\n  }\n  RadixDataAccountSystem.prototype.processAtomUpdate = function (atomUpdate) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        if (!('decryptedData' in atomUpdate.processedData)) {\n          return [2 /*return*/];\n        }\n        if (atomUpdate.action === 'STORE') {\n          this.processStoreAtom(atomUpdate);\n        } else if (atomUpdate.action === 'DELETE') {\n          this.processDeleteAtom(atomUpdate);\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n  RadixDataAccountSystem.prototype.processStoreAtom = function (atomUpdate) {\n    var atom = atomUpdate.atom;\n    var aid = atom.getAidString();\n    var signatures = atom.signatures;\n    var applicationId = atomUpdate.processedData.decryptedData.application;\n    // Skip existing atoms\n    if (this.applicationData.has(applicationId) && this.applicationData.get(applicationId).has(aid)) {\n      return;\n    }\n    var applicationData = {\n      aid: aid,\n      payload: atomUpdate.processedData.decryptedData,\n      timestamp: atom.getTimestamp(),\n      signatures: signatures\n    };\n    var applicationDataUpdate = {\n      action: 'STORE',\n      aid: aid,\n      applicationId: applicationId,\n      data: applicationData,\n      signatures: signatures\n    };\n    if (!this.applicationData.has(applicationId)) {\n      this.applicationData.set(applicationId, new typescript_map_1.TSMap());\n    }\n    this.applicationData.get(applicationId).set(aid, applicationData);\n    this.applicationDataSubject.next(applicationDataUpdate);\n  };\n  RadixDataAccountSystem.prototype.processDeleteAtom = function (atomUpdate) {\n    var atom = atomUpdate.atom;\n    var aid = atom.getAidString();\n    var signatures = atom.signatures;\n    var applicationId = atomUpdate.processedData.decryptedData.application;\n    // Skip nonexisting atoms\n    if (!this.applicationData.has(applicationId) || !this.applicationData.get(applicationId).has(aid)) {\n      return;\n    }\n    var applicationData = this.applicationData.get(applicationId).get(aid);\n    var applicationDataUpdate = {\n      action: 'DELETE',\n      aid: aid,\n      applicationId: applicationId,\n      data: applicationData,\n      signatures: signatures\n    };\n    this.applicationData.get(applicationId).delete(aid);\n    this.applicationDataSubject.next(applicationDataUpdate);\n  };\n  /**\n   * Gets application data messages by application id and optionally by signer\n   *\n   * @param applicationId - Application id of the payload atoms\n   * @param [addresses] - List of account addreses to filter application messages by signer\n   * @returns An observable subscribed to old and new application messages that met the filter requirements\n   */\n  RadixDataAccountSystem.prototype.getApplicationData = function (applicationId, addresses) {\n    var _this = this;\n    // Pre-calculate signatureIds\n    var signatureIds = !addresses ? undefined : addresses.map(function (a) {\n      return atommodel_1.RadixAddress.fromAddress(a).getUID().toString();\n    });\n    return rxjs_1.Observable.create(function (observer) {\n      var e_1, _a;\n      // Send all old data\n      if (_this.applicationData.has(applicationId)) {\n        var _loop_1 = function (applicationData) {\n          if (!signatureIds || signatureIds.length === 0 || signatureIds.some(function (s) {\n            return Object.keys(applicationData.signatures).includes(s);\n          })) {\n            var applicationDataUpdate = {\n              action: 'STORE',\n              aid: applicationData.aid,\n              applicationId: applicationId,\n              data: applicationData,\n              signatures: applicationData.signatures\n            };\n            observer.next(applicationDataUpdate);\n          }\n        };\n        try {\n          for (var _b = tslib_1.__values(_this.applicationData.get(applicationId).values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var applicationData = _c.value;\n            _loop_1(applicationData);\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      }\n      // Subscribe for new ones\n      _this.applicationDataSubject.pipe(operators_1.filter(function (update) {\n        return update.applicationId === applicationId && (!signatureIds || signatureIds.length === 0 || signatureIds.some(function (s) {\n          return Object.keys(update.signatures).includes(s);\n        }));\n      })).subscribe(observer);\n    });\n  };\n  return RadixDataAccountSystem;\n}();\nexports.default = RadixDataAccountSystem;","map":{"version":3,"names":["rxjs_1","require","typescript_map_1","operators_1","atommodel_1","RadixDataAccountSystem","address","name","applicationDataSubject","Subject","applicationData","TSMap","prototype","processAtomUpdate","atomUpdate","processedData","action","processStoreAtom","processDeleteAtom","atom","aid","getAidString","signatures","applicationId","decryptedData","application","has","get","payload","timestamp","getTimestamp","applicationDataUpdate","data","set","next","delete","getApplicationData","addresses","_this","signatureIds","undefined","map","a","RadixAddress","fromAddress","getUID","toString","Observable","create","observer","length","some","s","Object","keys","includes","_b","tslib_1","__values","values","_c","done","value","pipe","filter","update","subscribe"],"sources":["../../../../src/modules/account/RadixDataAccountSystem.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}