{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RPCClient = void 0;\nconst tslib_1 = require(\"tslib\");\nconst client_js_1 = require(\"@open-rpc/client-js\");\nconst util_1 = require(\"@radixdlt/util\");\nconst open_rpc_utils_1 = require(\"open-rpc-utils\");\nconst uuid_1 = require(\"uuid\");\nconst spec = require('@radixdlt/open-rpc-spec');\nconst validateMethod = open_rpc_utils_1.validate.bind(null, spec);\nconst defaultHeaders = ['X-Radixdlt-Method', 'X-Radixdlt-Correlation-Id'];\nvar Endpoint;\n(function (Endpoint) {\n  Endpoint[\"NETWORK_ID\"] = \"network.get_id\";\n  Endpoint[\"TOKEN_BALANCES\"] = \"account.get_balances\";\n  Endpoint[\"TRANSACTION_HISTORY\"] = \"account.get_transaction_history\";\n  Endpoint[\"STAKES\"] = \"account.get_stake_positions\";\n  Endpoint[\"UNSTAKES\"] = \"account.get_unstake_positions\";\n  Endpoint[\"TX_STATUS\"] = \"transactions.get_transaction_status\";\n  Endpoint[\"NETWORK_TX_THROUGHPUT\"] = \"network.get_throughput\";\n  Endpoint[\"NETWORK_TX_DEMAND\"] = \"network.get_demand\";\n  Endpoint[\"VALIDATORS\"] = \"validators.get_next_epoch_set\";\n  Endpoint[\"LOOKUP_TX\"] = \"transactions.lookup_transaction\";\n  Endpoint[\"LOOKUP_VALIDATOR\"] = \"validators.lookup_validator\";\n  Endpoint[\"NATIVE_TOKEN\"] = \"tokens.get_native_token\";\n  Endpoint[\"TOKEN_INFO\"] = \"tokens.get_info\";\n  Endpoint[\"BUILD_TX_FROM_INTENT\"] = \"construction.build_transaction\";\n  Endpoint[\"SUBMIT_TX\"] = \"construction.submit_transaction\";\n  Endpoint[\"FINALIZE_TX\"] = \"construction.finalize_transaction\";\n})(Endpoint || (Endpoint = {}));\nvar MethodLocation;\n(function (MethodLocation) {\n  MethodLocation[\"ARCHIVE\"] = \"archive\";\n  MethodLocation[\"CONSTRUCTION\"] = \"construction\";\n})(MethodLocation || (MethodLocation = {}));\nconst MethodEndpoints = {\n  [Endpoint.NETWORK_ID]: MethodLocation.ARCHIVE,\n  [Endpoint.TOKEN_BALANCES]: MethodLocation.ARCHIVE,\n  [Endpoint.TRANSACTION_HISTORY]: MethodLocation.ARCHIVE,\n  [Endpoint.STAKES]: MethodLocation.ARCHIVE,\n  [Endpoint.UNSTAKES]: MethodLocation.ARCHIVE,\n  [Endpoint.TX_STATUS]: MethodLocation.ARCHIVE,\n  [Endpoint.NETWORK_TX_THROUGHPUT]: MethodLocation.ARCHIVE,\n  [Endpoint.NETWORK_TX_DEMAND]: MethodLocation.ARCHIVE,\n  [Endpoint.VALIDATORS]: MethodLocation.ARCHIVE,\n  [Endpoint.LOOKUP_TX]: MethodLocation.ARCHIVE,\n  [Endpoint.LOOKUP_VALIDATOR]: MethodLocation.ARCHIVE,\n  [Endpoint.NATIVE_TOKEN]: MethodLocation.ARCHIVE,\n  [Endpoint.TOKEN_INFO]: MethodLocation.ARCHIVE,\n  [Endpoint.BUILD_TX_FROM_INTENT]: MethodLocation.CONSTRUCTION,\n  [Endpoint.SUBMIT_TX]: MethodLocation.CONSTRUCTION,\n  [Endpoint.FINALIZE_TX]: MethodLocation.CONSTRUCTION\n};\nconst correlationID = (0, uuid_1.v4)();\nconst RPCClient = url => {\n  const call = (method, params, headers) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    // @ts-ignore\n    const endpoint = `${url.toString()}${MethodEndpoints[method]}`;\n    const transport = new client_js_1.HTTPTransport(endpoint, {\n      headers: Object.assign({\n        [defaultHeaders[0]]: method,\n        [defaultHeaders[1]]: correlationID\n      }, headers)\n    });\n    const requestManager = new client_js_1.RequestManager([transport]);\n    const client = new client_js_1.Client(requestManager);\n    const filteredParams = (0, util_1.isArray)(params) ? params.filter(item => !!item) : params;\n    util_1.log.info(`Sending RPC request with method ${method}. ${JSON.stringify(filteredParams, null, 2)}`);\n    const result = yield validateMethod(method, filteredParams);\n    result.mapErr(err => {\n      // need to disable this until rpc spec is fixed with the latest addresses and RRI's\n      //\tthrow err\n    });\n    /*\n    console.log(\n        `calling ${method} at ${endpoint} with: ${JSON.stringify(\n            filteredParams,\n            null,\n            2,\n        )}`,\n    )*/\n    const response = yield client.request({\n      method: method,\n      params: filteredParams\n    });\n    util_1.log.info(`Response from ${method} call: ${JSON.stringify(response, null, 2)}`);\n    //console.log(`response for ${method} at ${endpoint}`, JSON.stringify(response, null, 2))\n    // TODO validate response\n    return response;\n  });\n  return {\n    type: 'json-rpc',\n    call\n  };\n};\nexports.RPCClient = RPCClient;","map":{"version":3,"names":["client_js_1","require","util_1","open_rpc_utils_1","uuid_1","spec","validateMethod","validate","bind","defaultHeaders","Endpoint","MethodLocation","MethodEndpoints","NETWORK_ID","ARCHIVE","TOKEN_BALANCES","TRANSACTION_HISTORY","STAKES","UNSTAKES","TX_STATUS","NETWORK_TX_THROUGHPUT","NETWORK_TX_DEMAND","VALIDATORS","LOOKUP_TX","LOOKUP_VALIDATOR","NATIVE_TOKEN","TOKEN_INFO","BUILD_TX_FROM_INTENT","CONSTRUCTION","SUBMIT_TX","FINALIZE_TX","correlationID","v4","RPCClient","url","call","method","params","headers","tslib_1","__awaiter","endpoint","toString","transport","HTTPTransport","Object","assign","requestManager","RequestManager","client","Client","filteredParams","isArray","filter","item","log","info","JSON","stringify","result","mapErr","err","response","request","type","exports"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/networking/src/open-rpc-client.ts"],"sourcesContent":["import {\n\tRequestManager,\n\tClient as OpenRPCClient,\n\tHTTPTransport,\n} from '@open-rpc/client-js'\nimport { Transport, Client } from './_types'\nimport { isArray, log } from '@radixdlt/util'\nimport { validate } from 'open-rpc-utils'\nimport { v4 as uuid } from 'uuid'\nconst spec = require('@radixdlt/open-rpc-spec')\n\nconst validateMethod = validate.bind(null, spec)\n\nconst defaultHeaders = ['X-Radixdlt-Method', 'X-Radixdlt-Correlation-Id']\n\nenum Endpoint {\n\tNETWORK_ID = 'network.get_id',\n\tTOKEN_BALANCES = 'account.get_balances',\n\tTRANSACTION_HISTORY = 'account.get_transaction_history',\n\tSTAKES = 'account.get_stake_positions',\n\tUNSTAKES = 'account.get_unstake_positions',\n\tTX_STATUS = 'transactions.get_transaction_status',\n\tNETWORK_TX_THROUGHPUT = 'network.get_throughput',\n\tNETWORK_TX_DEMAND = 'network.get_demand',\n\tVALIDATORS = 'validators.get_next_epoch_set',\n\tLOOKUP_TX = 'transactions.lookup_transaction',\n\tLOOKUP_VALIDATOR = 'validators.lookup_validator',\n\tNATIVE_TOKEN = 'tokens.get_native_token',\n\tTOKEN_INFO = 'tokens.get_info',\n\tBUILD_TX_FROM_INTENT = 'construction.build_transaction',\n\tSUBMIT_TX = 'construction.submit_transaction',\n\tFINALIZE_TX = 'construction.finalize_transaction',\n}\n\nenum MethodLocation {\n\tARCHIVE = 'archive',\n\tCONSTRUCTION = 'construction',\n}\n\nconst MethodEndpoints = {\n\t[Endpoint.NETWORK_ID]: MethodLocation.ARCHIVE,\n\t[Endpoint.TOKEN_BALANCES]: MethodLocation.ARCHIVE,\n\t[Endpoint.TRANSACTION_HISTORY]: MethodLocation.ARCHIVE,\n\t[Endpoint.STAKES]: MethodLocation.ARCHIVE,\n\t[Endpoint.UNSTAKES]: MethodLocation.ARCHIVE,\n\t[Endpoint.TX_STATUS]: MethodLocation.ARCHIVE,\n\t[Endpoint.NETWORK_TX_THROUGHPUT]: MethodLocation.ARCHIVE,\n\t[Endpoint.NETWORK_TX_DEMAND]: MethodLocation.ARCHIVE,\n\t[Endpoint.VALIDATORS]: MethodLocation.ARCHIVE,\n\t[Endpoint.LOOKUP_TX]: MethodLocation.ARCHIVE,\n\t[Endpoint.LOOKUP_VALIDATOR]: MethodLocation.ARCHIVE,\n\t[Endpoint.NATIVE_TOKEN]: MethodLocation.ARCHIVE,\n\t[Endpoint.TOKEN_INFO]: MethodLocation.ARCHIVE,\n\t[Endpoint.BUILD_TX_FROM_INTENT]: MethodLocation.CONSTRUCTION,\n\t[Endpoint.SUBMIT_TX]: MethodLocation.CONSTRUCTION,\n\t[Endpoint.FINALIZE_TX]: MethodLocation.CONSTRUCTION,\n}\n\nconst correlationID = uuid()\n\nexport type OpenRPCClientCall = (\n\tendpoint: string,\n\tparams: unknown[] | Record<string, unknown>,\n\theaders?: Record<string, string>,\n) => Promise<unknown>\n\nexport const RPCClient: Client<'json-rpc'> = (url: URL) => {\n\tconst call = async (\n\t\tmethod: string,\n\t\tparams: unknown[] | Record<string, unknown>,\n\t\theaders?: Record<string, string>,\n\t): Promise<unknown> => {\n\t\t// @ts-ignore\n\t\tconst endpoint = `${url.toString()}${MethodEndpoints[method]}`\n\n\t\tconst transport = new HTTPTransport(endpoint, {\n\t\t\theaders: {\n\t\t\t\t[defaultHeaders[0]]: method,\n\t\t\t\t[defaultHeaders[1]]: correlationID,\n\t\t\t\t...headers,\n\t\t\t},\n\t\t})\n\n\t\tconst requestManager = new RequestManager([transport])\n\t\tconst client = new OpenRPCClient(requestManager)\n\n\t\tconst filteredParams = isArray(params)\n\t\t\t? params.filter(item => !!item)\n\t\t\t: params\n\n\t\tlog.info(\n\t\t\t`Sending RPC request with method ${method}. ${JSON.stringify(\n\t\t\t\tfilteredParams,\n\t\t\t\tnull,\n\t\t\t\t2,\n\t\t\t)}`,\n\t\t)\n\n\t\tconst result = await validateMethod(method, filteredParams)\n\t\tresult.mapErr(err => {\n\t\t\t// need to disable this until rpc spec is fixed with the latest addresses and RRI's\n\t\t\t//\tthrow err\n\t\t})\n\n\t\t/*\n\t\tconsole.log(\n\t\t\t`calling ${method} at ${endpoint} with: ${JSON.stringify(\n\t\t\t\tfilteredParams,\n\t\t\t\tnull,\n\t\t\t\t2,\n\t\t\t)}`,\n\t\t)*/\n\n\t\tconst response:\n\t\t\t| Record<string, unknown>\n\t\t\t| unknown[] = await client.request({\n\t\t\tmethod: method,\n\t\t\tparams: filteredParams,\n\t\t})\n\n\t\tlog.info(\n\t\t\t`Response from ${method} call: ${JSON.stringify(\n\t\t\t\tresponse,\n\t\t\t\tnull,\n\t\t\t\t2,\n\t\t\t)}`,\n\t\t)\n\n\t\t//console.log(`response for ${method} at ${endpoint}`, JSON.stringify(response, null, 2))\n\t\t// TODO validate response\n\n\t\treturn response\n\t}\n\n\treturn {\n\t\ttype: 'json-rpc',\n\t\tcall,\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}