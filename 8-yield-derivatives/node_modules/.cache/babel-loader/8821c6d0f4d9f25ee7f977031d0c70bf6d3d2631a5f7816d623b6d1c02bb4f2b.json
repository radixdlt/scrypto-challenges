{"ast":null,"code":"/** PURE_IMPORTS_START _scheduler_async,_scan,_observable_defer,_map PURE_IMPORTS_END */\nimport { async } from '../scheduler/async';\nimport { scan } from './scan';\nimport { defer } from '../observable/defer';\nimport { map } from './map';\nexport function timeInterval(scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async;\n  }\n  return function (source) {\n    return defer(function () {\n      return source.pipe(scan(function (_a, value) {\n        var current = _a.current;\n        return {\n          value: value,\n          current: scheduler.now(),\n          last: current\n        };\n      }, {\n        current: scheduler.now(),\n        value: undefined,\n        last: undefined\n      }), map(function (_a) {\n        var current = _a.current,\n          last = _a.last,\n          value = _a.value;\n        return new TimeInterval(value, current - last);\n      }));\n    });\n  };\n}\nvar TimeInterval = /*@__PURE__*/function () {\n  function TimeInterval(value, interval) {\n    this.value = value;\n    this.interval = interval;\n  }\n  return TimeInterval;\n}();\nexport { TimeInterval };","map":{"version":3,"names":["async","scan","defer","map","timeInterval","scheduler","source","pipe","_a","value","current","now","last","undefined","TimeInterval","interval"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/timeInterval.ts"],"sourcesContent":["\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { SchedulerLike, OperatorFunction } from '../types';\nimport { scan } from './scan';\nimport { defer } from '../observable/defer';\nimport { map } from './map';\n\n/**\n *\n * Emits an object containing the current value, and the time that has\n * passed between emitting the current value and the previous value, which is\n * calculated by using the provided `scheduler`'s `now()` method to retrieve\n * the current time at each emission, then calculating the difference. The `scheduler`\n * defaults to {@link asyncScheduler}, so by default, the `interval` will be in\n * milliseconds.\n *\n * <span class=\"informal\">Convert an Observable that emits items into one that\n * emits indications of the amount of time elapsed between those emissions.</span>\n *\n * ![](timeinterval.png)\n *\n * ## Examples\n * Emit inteval between current value with the last value\n *\n * ```ts\n * const seconds = interval(1000);\n *\n * seconds.pipe(timeInterval())\n * .subscribe(\n *     value => console.log(value),\n *     err => console.log(err),\n * );\n *\n * seconds.pipe(timeout(900))\n * .subscribe(\n *     value => console.log(value),\n *     err => console.log(err),\n * );\n *\n * // NOTE: The values will never be this precise,\n * // intervals created with `interval` or `setInterval`\n * // are non-deterministic.\n *\n * // {value: 0, interval: 1000}\n * // {value: 1, interval: 1000}\n * // {value: 2, interval: 1000}\n * ```\n *\n * @param {SchedulerLike} [scheduler] Scheduler used to get the current time.\n * @return {Observable<{ interval: number, value: T }>} Observable that emit infomation about value and interval\n * @method timeInterval\n */\nexport function timeInterval<T>(scheduler: SchedulerLike = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => defer(() => {\n    return source.pipe(\n      // TODO(benlesh): correct these typings.\n      scan(\n        ({ current }, value) => ({ value, current: scheduler.now(), last: current }),\n        { current: scheduler.now(), value: undefined,  last: undefined }\n      ) as any,\n      map<any, TimeInterval<T>>(({ current, last, value }) => new TimeInterval(value, current - last)),\n    );\n  });\n}\n\n// TODO(benlesh): make this an interface, export the interface, but not the implemented class,\n// there's no reason users should be manually creating this type.\n\n/**\n * @deprecated exposed API, use as interface only.\n */\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {}\n}\n"],"mappings":"AAEA;AAEA,SAASA,KAAI,QAAQ,oBAAS;AAC9B,SAASC,IAAA,QAAO,QAAM;AACtB,SAASC,KAAK,QAAM,qBAAQ;AA+C5B,SAAMC,GAAA,QAAU;OAAgB,SAAAC,aAAAC,SAAA;EAC9B,IAAAA,SAAO,KAAC,KAAqB;IAC3BA,SAAO,GAAAL,KAAO;;mBAGeM,MAAO;IAAR,OACtBJ,KAAO,aAAY;aAEMI,MAAA,CAAAC,IAAA,CAAAN,IAAA,CAAO,UAAEO,EAAA,EAAAC,KAAM;QAAY,IAAAC,OAAI,GAAAF,EAAA,CAAAE,OAAa;QACzE;UAAAD,KAAA,EAAAA,KAAA;UAAAC,OAAA,EAAAL,SAAA,CAAAM,GAAA;UAAAC,IAAA,EAAAF;QAAA;MACD;QAAAA,OAAA,EAAAL,SAAA,CAAAM,GAAA;QAAAF,KAAA,EAAAI,SAAA;QAAAD,IAAA,EAAAC;MAAA,IAAAV,GAAA,WAAAK,EAAA;QACJ,IAAAE,OAAA,GAAAF,EAAA,CAAAE,OAAA;UAAAE,IAAA,GAAAJ,EAAA,CAAAI,IAAA;UAAAH,KAAA,GAAAD,EAAA,CAAAC,KAAA;QAQD,WAAAK,YAAA,CAAAL,KAAA,EAAAC,OAAA,GAAAE,IAAA;MACE;IAAmB;;;IACrBE,YAAA,gBAAC;EAFD,SAECA,aAAAL,KAAA,EAAAM,QAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}