{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.retryOnErrorCode = exports.hasRequiredProps = void 0;\nconst util_1 = require(\"@radixdlt/util\");\nconst neverthrow_1 = require(\"neverthrow\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst hasRequiredProps = (methodName, obj, props) => {\n  for (const prop of props) {\n    if (obj[prop] === undefined) {\n      return (0, neverthrow_1.err)([Error(`Prop validation failed for ${methodName} response. ${prop} was undefined.`)]);\n    }\n  }\n  return (0, neverthrow_1.ok)(obj);\n};\nexports.hasRequiredProps = hasRequiredProps;\nconst retryOnErrorCode = ({\n  maxRetryAttempts = 3,\n  scalingDuration = 1000,\n  errorCodes = []\n} = {}) => attempts => attempts.pipe((0, operators_1.mergeMap)(({\n  error\n}, i) => {\n  const retryAttempt = i + 1;\n  const foundErrorCode = errorCodes.some(e => e === error.code);\n  // if maximum number of retries have been met\n  // or response is a error code we don't wish to retry, throw error\n  if (retryAttempt > maxRetryAttempts || !foundErrorCode) {\n    return (0, rxjs_1.throwError)(() => error);\n  }\n  util_1.log.debug(`Attempt ${retryAttempt}: retrying in ${retryAttempt * scalingDuration}ms`);\n  return (0, rxjs_1.timer)(retryAttempt * scalingDuration);\n}));\nexports.retryOnErrorCode = retryOnErrorCode;","map":{"version":3,"names":["Object","defineProperty","exports","value","retryOnErrorCode","hasRequiredProps","util_1","require","neverthrow_1","rxjs_1","operators_1","methodName","obj","props","prop","undefined","err","Error","ok","maxRetryAttempts","scalingDuration","errorCodes","attempts","pipe","mergeMap","error","i","retryAttempt","foundErrorCode","some","e","code","throwError","log","debug","timer"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/application/dist/api/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.retryOnErrorCode = exports.hasRequiredProps = void 0;\nconst util_1 = require(\"@radixdlt/util\");\nconst neverthrow_1 = require(\"neverthrow\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst hasRequiredProps = (methodName, obj, props) => {\n    for (const prop of props) {\n        if (obj[prop] === undefined) {\n            return (0, neverthrow_1.err)([\n                Error(`Prop validation failed for ${methodName} response. ${prop} was undefined.`),\n            ]);\n        }\n    }\n    return (0, neverthrow_1.ok)(obj);\n};\nexports.hasRequiredProps = hasRequiredProps;\nconst retryOnErrorCode = ({ maxRetryAttempts = 3, scalingDuration = 1000, errorCodes = [], } = {}) => (attempts) => attempts.pipe((0, operators_1.mergeMap)(({ error }, i) => {\n    const retryAttempt = i + 1;\n    const foundErrorCode = errorCodes.some(e => e === error.code);\n    // if maximum number of retries have been met\n    // or response is a error code we don't wish to retry, throw error\n    if (retryAttempt > maxRetryAttempts || !foundErrorCode) {\n        return (0, rxjs_1.throwError)(() => error);\n    }\n    util_1.log.debug(`Attempt ${retryAttempt}: retrying in ${retryAttempt * scalingDuration}ms`);\n    return (0, rxjs_1.timer)(retryAttempt * scalingDuration);\n}));\nexports.retryOnErrorCode = retryOnErrorCode;\n//# sourceMappingURL=utils.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAGF,OAAO,CAACG,gBAAgB,GAAG,KAAK,CAAC;AAC5D,MAAMC,MAAM,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACxC,MAAMC,YAAY,GAAGD,OAAO,CAAC,YAAY,CAAC;AAC1C,MAAME,MAAM,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC9B,MAAMG,WAAW,GAAGH,OAAO,CAAC,gBAAgB,CAAC;AAC7C,MAAMF,gBAAgB,GAAGA,CAACM,UAAU,EAAEC,GAAG,EAAEC,KAAK,KAAK;EACjD,KAAK,MAAMC,IAAI,IAAID,KAAK,EAAE;IACtB,IAAID,GAAG,CAACE,IAAI,CAAC,KAAKC,SAAS,EAAE;MACzB,OAAO,CAAC,CAAC,EAAEP,YAAY,CAACQ,GAAG,EAAE,CACzBC,KAAK,CAAE,8BAA6BN,UAAW,cAAaG,IAAK,iBAAgB,CAAC,CACrF,CAAC;IACN;EACJ;EACA,OAAO,CAAC,CAAC,EAAEN,YAAY,CAACU,EAAE,EAAEN,GAAG,CAAC;AACpC,CAAC;AACDV,OAAO,CAACG,gBAAgB,GAAGA,gBAAgB;AAC3C,MAAMD,gBAAgB,GAAGA,CAAC;EAAEe,gBAAgB,GAAG,CAAC;EAAEC,eAAe,GAAG,IAAI;EAAEC,UAAU,GAAG;AAAI,CAAC,GAAG,CAAC,CAAC,KAAMC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,EAAEb,WAAW,CAACc,QAAQ,EAAE,CAAC;EAAEC;AAAM,CAAC,EAAEC,CAAC,KAAK;EAC1K,MAAMC,YAAY,GAAGD,CAAC,GAAG,CAAC;EAC1B,MAAME,cAAc,GAAGP,UAAU,CAACQ,IAAI,CAACC,CAAC,IAAIA,CAAC,KAAKL,KAAK,CAACM,IAAI,CAAC;EAC7D;EACA;EACA,IAAIJ,YAAY,GAAGR,gBAAgB,IAAI,CAACS,cAAc,EAAE;IACpD,OAAO,CAAC,CAAC,EAAEnB,MAAM,CAACuB,UAAU,EAAE,MAAMP,KAAK,CAAC;EAC9C;EACAnB,MAAM,CAAC2B,GAAG,CAACC,KAAK,CAAE,WAAUP,YAAa,iBAAgBA,YAAY,GAAGP,eAAgB,IAAG,CAAC;EAC5F,OAAO,CAAC,CAAC,EAAEX,MAAM,CAAC0B,KAAK,EAAER,YAAY,GAAGP,eAAe,CAAC;AAC5D,CAAC,CAAC,CAAC;AACHlB,OAAO,CAACE,gBAAgB,GAAGA,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}