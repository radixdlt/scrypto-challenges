{"ast":null,"code":"import { DataRequestBuilder, RadixDappToolkit, RadixNetwork } from \"@radixdlt/radix-dapp-toolkit\";\n\n// Replace with your dApp definition address and component address\nconst dAppDefinitionAddress = \"account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz\";\nconst componentAddress = \"package_tdx_2_1pkqs4w05uxmthjg5zrqyag40gaqsjkntw7utk7p8vcmht3ju4e2k0v\";\n\n// Create a dapp configuration object for the Radix Dapp Toolkit\nconst dappConfig = {\n  networkId: RadixNetwork.Stokenet,\n  applicationVersion: \"1.0.0\",\n  applicationName: \"YourApp\",\n  applicationDappDefinitionAddress: dAppDefinitionAddress,\n  dAppDefinitionAddress // This field will be updated and removed soon\n};\n\n// Instantiate DappToolkit to connect to the Radix wallet and network\nconst rdt = RadixDappToolkit(dappConfig);\n\n// Connect a user account when wallet is connected\nrdt.walletApi.setRequestData(DataRequestBuilder.accounts().exactly(1));\n\n// Handle the button click event to fetch wallet data and perform actions\ndocument.getElementById(\"free_token\").onclick = async function () {\n  try {\n    // Get the user's connected account address\n    const accountAddress = rdt.walletApi.getWalletData().accounts[0].address;\n\n    // Log the account address\n    console.log(\"Account Address:\", accountAddress);\n\n    // Perform additional actions using the wallet data if needed\n    // For example, you can use the account address to interact with smart contracts\n  } catch (error) {\n    console.error(\"Error fetching wallet data:\", error);\n  }\n};","map":{"version":3,"names":["DataRequestBuilder","RadixDappToolkit","RadixNetwork","dAppDefinitionAddress","componentAddress","dappConfig","networkId","Stokenet","applicationVersion","applicationName","applicationDappDefinitionAddress","rdt","walletApi","setRequestData","accounts","exactly","document","getElementById","onclick","accountAddress","getWalletData","address","console","log","error"],"sources":["/Users/mdabdurrazzak/RadInsu/src/Profile.js"],"sourcesContent":["import {\n  DataRequestBuilder,\n  RadixDappToolkit,\n  RadixNetwork,\n} from \"@radixdlt/radix-dapp-toolkit\";\n\n// Replace with your dApp definition address and component address\nconst dAppDefinitionAddress = \"account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz\";\nconst componentAddress = \"package_tdx_2_1pkqs4w05uxmthjg5zrqyag40gaqsjkntw7utk7p8vcmht3ju4e2k0v\";\n\n// Create a dapp configuration object for the Radix Dapp Toolkit\nconst dappConfig = {\n  networkId: RadixNetwork.Stokenet,\n  applicationVersion: \"1.0.0\",\n  applicationName: \"YourApp\",\n  applicationDappDefinitionAddress: dAppDefinitionAddress,\n  dAppDefinitionAddress, // This field will be updated and removed soon\n};\n\n// Instantiate DappToolkit to connect to the Radix wallet and network\nconst rdt = RadixDappToolkit(dappConfig);\n\n// Connect a user account when wallet is connected\nrdt.walletApi.setRequestData(DataRequestBuilder.accounts().exactly(1));\n\n// Handle the button click event to fetch wallet data and perform actions\ndocument.getElementById(\"free_token\").onclick = async function () {\n  try {\n    // Get the user's connected account address\n    const accountAddress = rdt.walletApi.getWalletData().accounts[0].address;\n\n    // Log the account address\n    console.log(\"Account Address:\", accountAddress);\n\n    // Perform additional actions using the wallet data if needed\n    // For example, you can use the account address to interact with smart contracts\n\n  } catch (error) {\n    console.error(\"Error fetching wallet data:\", error);\n  }\n};\n"],"mappings":"AAAA,SACEA,kBAAkB,EAClBC,gBAAgB,EAChBC,YAAY,QACP,8BAA8B;;AAErC;AACA,MAAMC,qBAAqB,GAAG,uEAAuE;AACrG,MAAMC,gBAAgB,GAAG,uEAAuE;;AAEhG;AACA,MAAMC,UAAU,GAAG;EACjBC,SAAS,EAAEJ,YAAY,CAACK,QAAQ;EAChCC,kBAAkB,EAAE,OAAO;EAC3BC,eAAe,EAAE,SAAS;EAC1BC,gCAAgC,EAAEP,qBAAqB;EACvDA,qBAAqB,CAAE;AACzB,CAAC;;AAED;AACA,MAAMQ,GAAG,GAAGV,gBAAgB,CAACI,UAAU,CAAC;;AAExC;AACAM,GAAG,CAACC,SAAS,CAACC,cAAc,CAACb,kBAAkB,CAACc,QAAQ,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;;AAEtE;AACAC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACC,OAAO,GAAG,kBAAkB;EAChE,IAAI;IACF;IACA,MAAMC,cAAc,GAAGR,GAAG,CAACC,SAAS,CAACQ,aAAa,CAAC,CAAC,CAACN,QAAQ,CAAC,CAAC,CAAC,CAACO,OAAO;;IAExE;IACAC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEJ,cAAc,CAAC;;IAE/C;IACA;EAEF,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;EACrD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}