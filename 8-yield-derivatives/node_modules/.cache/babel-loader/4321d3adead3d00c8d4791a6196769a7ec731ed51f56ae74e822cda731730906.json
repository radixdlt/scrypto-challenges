{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function repeatWhen(notifier) {\n  return function (source) {\n    return source.lift(new RepeatWhenOperator(notifier));\n  };\n}\nvar RepeatWhenOperator = /*@__PURE__*/function () {\n  function RepeatWhenOperator(notifier) {\n    this.notifier = notifier;\n  }\n  RepeatWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  };\n  return RepeatWhenOperator;\n}();\nvar RepeatWhenSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RepeatWhenSubscriber, _super);\n  function RepeatWhenSubscriber(destination, notifier, source) {\n    var _this = _super.call(this, destination) || this;\n    _this.notifier = notifier;\n    _this.source = source;\n    _this.sourceIsBeingSubscribedTo = true;\n    return _this;\n  }\n  RepeatWhenSubscriber.prototype.notifyNext = function () {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  };\n  RepeatWhenSubscriber.prototype.notifyComplete = function () {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return _super.prototype.complete.call(this);\n    }\n  };\n  RepeatWhenSubscriber.prototype.complete = function () {\n    this.sourceIsBeingSubscribedTo = false;\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return _super.prototype.complete.call(this);\n      }\n      this._unsubscribeAndRecycle();\n      this.notifications.next(undefined);\n    }\n  };\n  RepeatWhenSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n      notifications = _a.notifications,\n      retriesSubscription = _a.retriesSubscription;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = undefined;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = undefined;\n    }\n    this.retries = undefined;\n  };\n  RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n    var _unsubscribe = this._unsubscribe;\n    this._unsubscribe = null;\n    _super.prototype._unsubscribeAndRecycle.call(this);\n    this._unsubscribe = _unsubscribe;\n    return this;\n  };\n  RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n    this.notifications = new Subject();\n    var retries;\n    try {\n      var notifier = this.notifier;\n      retries = notifier(this.notifications);\n    } catch (e) {\n      return _super.prototype.complete.call(this);\n    }\n    this.retries = retries;\n    this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n  };\n  return RepeatWhenSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"names":["tslib_1","Subject","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","repeatWhen","notifier","source","lift","RepeatWhenOperator","prototype","call","subscriber","subscribe","RepeatWhenSubscriber","_super","__extends","destination","_this","notifyNext","sourceIsBeingSubscribedTo","notifyComplete","complete","isStopped","retries","subscribeToRetries","retriesSubscription","closed","_unsubscribeAndRecycle","notifications","next","undefined","_unsubscribe","_a","unsubscribe","e"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/repeatWhen.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * ![](repeatWhen.png)\n *\n * ## Example\n * Repeat a message stream on click\n * ```ts\n * import { of, fromEvent } from 'rxjs';\n * import { repeatWhen } from 'rxjs/operators';\n *\n * const source = of('Repeat message');\n * const documentClick$ = fromEvent(document, 'click');\n *\n * source.pipe(repeatWhen(() => documentClick$)\n * ).subscribe(data => console.log(data))\n * ```\n * @see {@link repeat}\n * @see {@link retry}\n * @see {@link retryWhen}\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n\n  private notifications?: Subject<any>;\n  private retries?: Observable<any>;\n  private retriesSubscription?: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications!.next(undefined);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = undefined;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = undefined;\n    }\n    this.retries = undefined;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _unsubscribe } = this;\n\n    this._unsubscribe = null!;\n    super._unsubscribeAndRecycle();\n    this._unsubscribe = _unsubscribe;\n\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    let retries;\n    try {\n      const { notifier } = this;\n      retries = notifier(this.notifications);\n    } catch (e) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}