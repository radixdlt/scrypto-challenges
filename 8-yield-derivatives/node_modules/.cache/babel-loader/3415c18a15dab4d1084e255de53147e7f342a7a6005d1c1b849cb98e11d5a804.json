{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function race() {\n  var observables = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = observables[0];\n    } else {\n      return observables[0];\n    }\n  }\n  return fromArray(observables, undefined).lift(new RaceOperator());\n}\nvar RaceOperator = /*@__PURE__*/function () {\n  function RaceOperator() {}\n  RaceOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  };\n  return RaceOperator;\n}();\nexport { RaceOperator };\nvar RaceSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RaceSubscriber, _super);\n  function RaceSubscriber(destination) {\n    var _this = _super.call(this, destination) || this;\n    _this.hasFirst = false;\n    _this.observables = [];\n    _this.subscriptions = [];\n    return _this;\n  }\n  RaceSubscriber.prototype._next = function (observable) {\n    this.observables.push(observable);\n  };\n  RaceSubscriber.prototype._complete = function () {\n    var observables = this.observables;\n    var len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (var i = 0; i < len && !this.hasFirst; i++) {\n        var observable = observables[i];\n        var subscription = subscribeToResult(this, observable, undefined, i);\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  };\n  RaceSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n      for (var i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          var subscription = this.subscriptions[i];\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n      this.subscriptions = null;\n    }\n    this.destination.next(innerValue);\n  };\n  return RaceSubscriber;\n}(OuterSubscriber);\nexport { RaceSubscriber };","map":{"version":3,"names":["tslib_1","isArray","fromArray","OuterSubscriber","subscribeToResult","race","_i","arguments","length","observables","undefined","lift","RaceOperator","prototype","call","subscriber","source","subscribe","RaceSubscriber","_super","__extends","destination","_this","hasFirst","_next","observable","push","_complete","len","complete","i","subscription","subscriptions","add","notifyNext","_outerValue","innerValue","outerIndex","unsubscribe","remove","next"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/observable/race.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic, ObservableInput } from '../types';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n// tslint:disable:max-line-length\nexport function race<A>(arg: [ObservableInput<A>]): Observable<A>;\nexport function race<A, B>(arg: [ObservableInput<A>, ObservableInput<B>]): Observable<A | B>;\nexport function race<A, B, C>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>]): Observable<A | B | C>;\nexport function race<A, B, C, D>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>]): Observable<A | B | C | D>;\nexport function race<A, B, C, D, E>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>, ObservableInput<E>]): Observable<A | B | C | D | E>;\nexport function race<T>(arg: ObservableInput<T>[]): Observable<T>;\nexport function race(arg: ObservableInput<any>[]): Observable<{}>;\n\nexport function race<A>(a: ObservableInput<A>): Observable<A>;\nexport function race<A, B>(a: ObservableInput<A>, b: ObservableInput<B>): Observable<A | B>;\nexport function race<A, B, C>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>): Observable<A | B | C>;\nexport function race<A, B, C, D>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>, d: ObservableInput<D>): Observable<A | B | C | D>;\nexport function race<A, B, C, D, E>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>, d: ObservableInput<D>, e: ObservableInput<E>): Observable<A | B | C | D | E>;\n// tslint:enable:max-line-length\n\nexport function race<T>(observables: ObservableInput<T>[]): Observable<T>;\nexport function race(observables: ObservableInput<any>[]): Observable<{}>;\nexport function race<T>(...observables: ObservableInput<T>[]): Observable<T>;\nexport function race(...observables: ObservableInput<any>[]): Observable<{}>;\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n *\n * ## Example\n * ### Subscribes to the observable that was the first to start emitting.\n *\n * ```ts\n * import { race, interval } from 'rxjs';\n * import { mapTo } from 'rxjs/operators';\n *\n * const obs1 = interval(1000).pipe(mapTo('fast one'));\n * const obs2 = interval(3000).pipe(mapTo('medium one'));\n * const obs3 = interval(5000).pipe(mapTo('slow one'));\n *\n * race(obs3, obs1, obs2)\n * .subscribe(\n *   winner => console.log(winner)\n * );\n *\n * // result:\n * // a series of 'fast one'\n * ```\n *\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(...observables: ObservableInput<any>[]): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = observables[0] as Observable<any>[];\n    } else {\n      return observables[0] as Observable<T>;\n    }\n  }\n\n  return fromArray(observables, undefined).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete!();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        const observable = observables[i];\n        const subscription = subscribeToResult(this, observable, undefined, i)!;\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null!;\n    }\n  }\n\n  notifyNext(_outerValue: T, innerValue: T,\n             outerIndex: number): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null!;\n    }\n\n    this.destination.next!(innerValue);\n  }\n}\n"],"mappings":";AACA,OAAO,KAAEA,OAAS,MAAM;AACxB,SAASC,OAAA,QAAW,iBAAoB;AAKxC,SAASC,SAAA,QAAiB,aAAM;AAEhC,SAASC,eAAA,QAAmB,oBAAM;AAoDlC,SAAMC,iBAAc;OAAI,SAAAC,KAAA;iBAAsC,GAAtC;OAAA,IAAAC,EAAA,MAAAA,EAAA,GAAAC,SAAA,CAAAC,MAAsC,EAAAF,EAAA;;EAG5D;MACEG,WAAW,CAACD,MAAA,KAAW,CAAC,EAAE;QACxBP,OAAA,CAAAQ,WAAc,MAAW;MAC1BA,WAAA,GAAAA,WAAA;WACC;MACD,OAAAA,WAAA;IACF;EAED;EACD,OAAAP,SAAA,CAAAO,WAAA,EAAAC,SAAA,EAAAC,IAAA,KAAAC,YAAA;AAED;IAAAA,YAAA;EAIA,SAACA,aAAA,GAHC;cACS,CAAAC,SAAO,CAAAC,IAAS,GAAC,UAAIC,UAAe,EAAAC,MAAW,EAAE;IACzD,OAAAA,MAAA,CAAAC,SAAA,KAAAC,cAAA,CAAAH,UAAA;EACH;EAJA,OAICH,YAAA;;AAOD,SAAAA,YAAA;IAAuCM,cAAA,0BAAqBC,MAAA;EAK1DnB,OAAA,CAAAoB,SAAA,CAAAF,cAAY,EAAAC,MAA0B;WAAtCD,cACEA,CAAAG,WAAM;IALA,IAAAC,KAAA,GAAAH,MAAoB,CAAAL,IAAM,OAAAO,WAAA;IAC1BC,KAAA,CAAAC,QAAA,GAAW,KAAwB;IACnCD,KAAA,CAAAb,WAAA,GAAa,EAAmB;;IAIvC,OAAAa,KAAA;EAES;gBACH,CAAAT,SAAY,CAAIW,KAAC,aAAYC,UAAA;IACnC,KAAAhB,WAAA,CAAAiB,IAAA,CAAAD,UAAA;EAES;gBACF,CAAAZ,SAAc,CAAAc,SAAK,eAAY;IACrC,IAAMlB,WAAM,OAAY,CAAAA,WAAO;IAE/B,IAAImB,GAAG,GAAAnB,WAAQ,CAAAD,MAAA;QACboB,GAAA,KAAK;MACN,KAAAP,WAAA,CAAAQ,QAAA;WACC;WACE,IAAMC,CAAA,MAAAA,CAAA,GAAUF,GAAG,SAAW,CAACL,QAAG,EAAAO,CAAA;QAClC,IAAML,UAAA,GAAYhB,WAAG,CAAAqB,CAAA;QAErB,IAAIC,YAAK,GAAA3B,iBAAe,OAAAqB,UAAA,EAAAf,SAAA,EAAAoB,CAAA;YACtB,IAAI,CAACE,aAAa,EAAC;UACpB,KAAAA,aAAA,CAAAN,IAAA,CAAAK,YAAA;QACD;QACD,KAAAE,GAAA,CAAAF,YAAA;MACD;MACD,KAAAtB,WAAA;IACF;EAED;gBAEY,CAAAI,SAAU,CAAAqB,UAAA,aAAAC,WAAA,EAAAC,UAAA,EAAAC,UAAA;QAClB,KAAK,CAAAd,QAAQ,EAAG;MAEhB,KAAKA,QAAQ,GAAG,IAAI;WAClB,IAAKO,CAAA,IAAK,EAAAA,CAAA,OAAU,CAAAE,aAAE,CAAAxB,MAAA,EAAAsB,CAAA;YACpBA,CAAA,KAAIO,UAAY;UAEhB,IAAAN,YAAa,QAAWC,aAAG,CAAAF,CAAA;UAC3BC,YAAY,CAAAO,WAAY,CAAC,CAAC;UAC3B,KAAAC,MAAA,CAAAR,YAAA;QACF;MAED;MACD,KAAAC,aAAA;IAED;IACD,KAAAX,WAAA,CAAAmB,IAAA,CAAAJ,UAAA;EACH;EApDuC,OAAAlB,cAoDtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}