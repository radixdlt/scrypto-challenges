{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.msgFromError = void 0;\nconst _1 = require(\"./\");\n// type ErrorNotificationIsh = {\n// \terrors: Error[]\n// }\nconst isString = something => typeof something === 'string';\nconst isNonEmptyString = something => isString(something) && something.length > 0;\nconst isMessageOwner = something => {\n  const inspection = something;\n  return inspection.message !== undefined && isNonEmptyString(inspection.message);\n};\nconst isErrorsOwner = something => {\n  const inspection = something;\n  return inspection.errors !== undefined && _1.isArray(inspection.errors);\n};\nconst isFailureOwner = something => {\n  const inspection = something;\n  return inspection.failure !== undefined && isNonEmptyString(inspection.failure);\n};\nconst isErrorMessageOwner = something => {\n  const inspection = something;\n  return inspection.error !== undefined && isNonEmptyString(inspection.error);\n};\nconst isErrorCodeOwner = something => {\n  const inspection = something;\n  return inspection.code !== undefined && isNonEmptyString(inspection.code);\n};\nconst isNestedErrorOwner = something => {\n  const inspection = something;\n  if (!inspection.error) {\n    return false;\n  }\n  const err = inspection.error;\n  return isMessageOwner(err) || isFailureOwner(err) || isErrorMessageOwner(err) || isErrorCodeOwner(err) || isErrorsOwner(err);\n};\nconst msgFromError = (e, dumpJSON = true) => {\n  if (isNonEmptyString(e)) return e;\n  if (isMessageOwner(e)) return e.message;\n  if (isFailureOwner(e)) return e.failure;\n  if (isErrorMessageOwner(e)) return e.error;\n  if (isErrorCodeOwner(e)) return e.code;\n  if (isErrorsOwner(e)) {\n    return e.errors.map(inner => exports.msgFromError(inner)).join(`, `);\n  }\n  if (isNestedErrorOwner(e)) {\n    const inner = e.error;\n    return exports.msgFromError(inner);\n  }\n  if (_1.isArray(e)) {\n    return e.map(inner => exports.msgFromError(inner)).join(`, `);\n  } else {\n    if (dumpJSON) {\n      const dump = JSON.stringify(e, null, 4);\n      return `Unknown (json: ${dump})`;\n    } else {\n      return 'Unknown (maybe not an error?)';\n    }\n  }\n};\nexports.msgFromError = msgFromError;","map":{"version":3,"names":["_1","require","isString","something","isNonEmptyString","length","isMessageOwner","inspection","message","undefined","isErrorsOwner","errors","isArray","isFailureOwner","failure","isErrorMessageOwner","error","isErrorCodeOwner","code","isNestedErrorOwner","err","msgFromError","e","dumpJSON","map","inner","exports","join","dump","JSON","stringify"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/util/src/extractErrorMessage.ts"],"sourcesContent":["import { isArray } from './'\n\ntype MessageOwner = {\n\tmessage: string\n}\n\ntype FailureOwner = {\n\tfailure: string\n}\n\ntype ErrorMessageOwner = {\n\terror: string\n}\n\ntype ErrorCodeOwner = {\n\tcode: string\n}\n\ntype ErrorIsh = MessageOwner | FailureOwner | ErrorMessageOwner | ErrorCodeOwner\n\ntype ErrorsOwner = {\n\terrors: ErrorIsh[]\n}\n\ntype NestedErrorOwner = {\n\terror:\n\t\t| MessageOwner\n\t\t| FailureOwner\n\t\t| ErrorMessageOwner\n\t\t| ErrorCodeOwner\n\t\t| ErrorsOwner\n}\n\n// type ErrorNotificationIsh = {\n// \terrors: Error[]\n// }\n\nconst isString = (something: unknown): something is string =>\n\ttypeof something === 'string'\n\nconst isNonEmptyString = (something: unknown): boolean =>\n\tisString(something) && something.length > 0\n\nconst isMessageOwner = (something: unknown): something is MessageOwner => {\n\tconst inspection = something as MessageOwner\n\treturn (\n\t\tinspection.message !== undefined && isNonEmptyString(inspection.message)\n\t)\n}\n\nconst isErrorsOwner = (something: unknown): something is ErrorsOwner => {\n\tconst inspection = something as ErrorsOwner\n\treturn inspection.errors !== undefined && isArray(inspection.errors)\n}\n\nconst isFailureOwner = (something: unknown): something is FailureOwner => {\n\tconst inspection = something as FailureOwner\n\treturn (\n\t\tinspection.failure !== undefined && isNonEmptyString(inspection.failure)\n\t)\n}\n\nconst isErrorMessageOwner = (\n\tsomething: unknown,\n): something is ErrorMessageOwner => {\n\tconst inspection = something as ErrorMessageOwner\n\treturn inspection.error !== undefined && isNonEmptyString(inspection.error)\n}\n\nconst isErrorCodeOwner = (something: unknown): something is ErrorCodeOwner => {\n\tconst inspection = something as ErrorCodeOwner\n\treturn inspection.code !== undefined && isNonEmptyString(inspection.code)\n}\n\nconst isNestedErrorOwner = (\n\tsomething: unknown,\n): something is NestedErrorOwner => {\n\tconst inspection = something as NestedErrorOwner\n\tif (!inspection.error) {\n\t\treturn false\n\t}\n\tconst err = inspection.error\n\treturn (\n\t\tisMessageOwner(err) ||\n\t\tisFailureOwner(err) ||\n\t\tisErrorMessageOwner(err) ||\n\t\tisErrorCodeOwner(err) ||\n\t\tisErrorsOwner(err)\n\t)\n}\n\nexport const msgFromError = (e: unknown, dumpJSON: boolean = true): string => {\n\tif (isNonEmptyString(e)) return e as string\n\tif (isMessageOwner(e)) return e.message\n\tif (isFailureOwner(e)) return e.failure\n\tif (isErrorMessageOwner(e)) return e.error\n\tif (isErrorCodeOwner(e)) return e.code\n\tif (isErrorsOwner(e)) {\n\t\treturn e.errors.map(inner => msgFromError(inner)).join(`, `)\n\t}\n\tif (isNestedErrorOwner(e)) {\n\t\tconst inner = e.error\n\t\treturn msgFromError(inner)\n\t}\n\tif (isArray(e)) {\n\t\treturn e.map(inner => msgFromError(inner)).join(`, `)\n\t} else {\n\t\tif (dumpJSON) {\n\t\t\tconst dump = JSON.stringify(e, null, 4)\n\t\t\treturn `Unknown (json: ${dump})`\n\t\t} else {\n\t\t\treturn 'Unknown (maybe not an error?)'\n\t\t}\n\t}\n}\n"],"mappings":";;;;;;AAAA,MAAAA,EAAA,GAAAC,OAAA;AAiCA;AACA;AACA;AAEA,MAAMC,QAAQ,GAAIC,SAAkB,IACnC,OAAOA,SAAS,KAAK,QAAQ;AAE9B,MAAMC,gBAAgB,GAAID,SAAkB,IAC3CD,QAAQ,CAACC,SAAS,CAAC,IAAIA,SAAS,CAACE,MAAM,GAAG,CAAC;AAE5C,MAAMC,cAAc,GAAIH,SAAkB,IAA+B;EACxE,MAAMI,UAAU,GAAGJ,SAAyB;EAC5C,OACCI,UAAU,CAACC,OAAO,KAAKC,SAAS,IAAIL,gBAAgB,CAACG,UAAU,CAACC,OAAO,CAAC;AAE1E,CAAC;AAED,MAAME,aAAa,GAAIP,SAAkB,IAA8B;EACtE,MAAMI,UAAU,GAAGJ,SAAwB;EAC3C,OAAOI,UAAU,CAACI,MAAM,KAAKF,SAAS,IAAIT,EAAA,CAAAY,OAAO,CAACL,UAAU,CAACI,MAAM,CAAC;AACrE,CAAC;AAED,MAAME,cAAc,GAAIV,SAAkB,IAA+B;EACxE,MAAMI,UAAU,GAAGJ,SAAyB;EAC5C,OACCI,UAAU,CAACO,OAAO,KAAKL,SAAS,IAAIL,gBAAgB,CAACG,UAAU,CAACO,OAAO,CAAC;AAE1E,CAAC;AAED,MAAMC,mBAAmB,GACxBZ,SAAkB,IACiB;EACnC,MAAMI,UAAU,GAAGJ,SAA8B;EACjD,OAAOI,UAAU,CAACS,KAAK,KAAKP,SAAS,IAAIL,gBAAgB,CAACG,UAAU,CAACS,KAAK,CAAC;AAC5E,CAAC;AAED,MAAMC,gBAAgB,GAAId,SAAkB,IAAiC;EAC5E,MAAMI,UAAU,GAAGJ,SAA2B;EAC9C,OAAOI,UAAU,CAACW,IAAI,KAAKT,SAAS,IAAIL,gBAAgB,CAACG,UAAU,CAACW,IAAI,CAAC;AAC1E,CAAC;AAED,MAAMC,kBAAkB,GACvBhB,SAAkB,IACgB;EAClC,MAAMI,UAAU,GAAGJ,SAA6B;EAChD,IAAI,CAACI,UAAU,CAACS,KAAK,EAAE;IACtB,OAAO,KAAK;;EAEb,MAAMI,GAAG,GAAGb,UAAU,CAACS,KAAK;EAC5B,OACCV,cAAc,CAACc,GAAG,CAAC,IACnBP,cAAc,CAACO,GAAG,CAAC,IACnBL,mBAAmB,CAACK,GAAG,CAAC,IACxBH,gBAAgB,CAACG,GAAG,CAAC,IACrBV,aAAa,CAACU,GAAG,CAAC;AAEpB,CAAC;AAEM,MAAMC,YAAY,GAAGA,CAACC,CAAU,EAAEC,QAAA,GAAoB,IAAI,KAAY;EAC5E,IAAInB,gBAAgB,CAACkB,CAAC,CAAC,EAAE,OAAOA,CAAW;EAC3C,IAAIhB,cAAc,CAACgB,CAAC,CAAC,EAAE,OAAOA,CAAC,CAACd,OAAO;EACvC,IAAIK,cAAc,CAACS,CAAC,CAAC,EAAE,OAAOA,CAAC,CAACR,OAAO;EACvC,IAAIC,mBAAmB,CAACO,CAAC,CAAC,EAAE,OAAOA,CAAC,CAACN,KAAK;EAC1C,IAAIC,gBAAgB,CAACK,CAAC,CAAC,EAAE,OAAOA,CAAC,CAACJ,IAAI;EACtC,IAAIR,aAAa,CAACY,CAAC,CAAC,EAAE;IACrB,OAAOA,CAAC,CAACX,MAAM,CAACa,GAAG,CAACC,KAAK,IAAIC,OAAA,CAAAL,YAAY,CAACI,KAAK,CAAC,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC;;EAE7D,IAAIR,kBAAkB,CAACG,CAAC,CAAC,EAAE;IAC1B,MAAMG,KAAK,GAAGH,CAAC,CAACN,KAAK;IACrB,OAAOU,OAAA,CAAAL,YAAY,CAACI,KAAK,CAAC;;EAE3B,IAAIzB,EAAA,CAAAY,OAAO,CAACU,CAAC,CAAC,EAAE;IACf,OAAOA,CAAC,CAACE,GAAG,CAACC,KAAK,IAAIC,OAAA,CAAAL,YAAY,CAACI,KAAK,CAAC,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC;GACrD,MAAM;IACN,IAAIJ,QAAQ,EAAE;MACb,MAAMK,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACR,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;MACvC,OAAO,kBAAkBM,IAAI,GAAG;KAChC,MAAM;MACN,OAAO,+BAA+B;;;AAGzC,CAAC;AAvBYF,OAAA,CAAAL,YAAY,GAAAA,YAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}