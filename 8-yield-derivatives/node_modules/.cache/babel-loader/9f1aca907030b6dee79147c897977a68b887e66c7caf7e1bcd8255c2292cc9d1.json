{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validatorsErr = exports.lookupValidatorErr = exports.lookupTxErr = exports.networkIdErr = exports.finalizeTxErr = exports.submitSignedTxErr = exports.buildTxFromIntentErr = exports.NetworkTxDemandErr = exports.NetworkTxThroughputErr = exports.txStatusErr = exports.unstakesForAddressErr = exports.stakesForAddressErr = exports.tokenInfoErr = exports.nativeTokenErr = exports.recentTransactionsErr = exports.transactionHistoryErr = exports.tokenBalancesErr = exports.walletError = exports.nodeError = exports.APIErrorCause = exports.NodeErrorCause = exports.WalletErrorCause = exports.ErrorCategory = void 0;\nvar ErrorCategory;\n(function (ErrorCategory) {\n  ErrorCategory[\"NODE\"] = \"node\";\n  ErrorCategory[\"WALLET\"] = \"wallet\";\n  ErrorCategory[\"API\"] = \"api\";\n})(ErrorCategory = exports.ErrorCategory || (exports.ErrorCategory = {}));\nvar WalletErrorCause;\n(function (WalletErrorCause) {\n  WalletErrorCause[\"LOAD_KEYSTORE_FAILED\"] = \"LOAD_KEYSTORE_FAILED\";\n})(WalletErrorCause = exports.WalletErrorCause || (exports.WalletErrorCause = {}));\nvar NodeErrorCause;\n(function (NodeErrorCause) {\n  NodeErrorCause[\"GET_NODE_FAILED\"] = \"GET_NODE_FAILED\";\n})(NodeErrorCause = exports.NodeErrorCause || (exports.NodeErrorCause = {}));\nvar APIErrorCause;\n(function (APIErrorCause) {\n  APIErrorCause[\"TOKEN_BALANCES_FAILED\"] = \"TOKEN_BALANCES_FAILED\";\n  APIErrorCause[\"TRANSACTION_HISTORY_FAILED\"] = \"TRANSACTION_HISTORY_FAILED\";\n  APIErrorCause[\"RECENT_TRANSACTIONS_FAILED\"] = \"RECENT_TRANSACTIONS_FAILED\";\n  APIErrorCause[\"NATIVE_TOKEN_FAILED\"] = \"NATIVE_TOKEN_FAILED\";\n  APIErrorCause[\"TOKEN_INFO_FAILED\"] = \"TOKEN_INFO_FAILED\";\n  APIErrorCause[\"STAKES_FOR_ADDRESS_FAILED\"] = \"STAKES_FOR_ADDRESS_FAILED\";\n  APIErrorCause[\"UNSTAKES_FOR_ADDRESS_FAILED\"] = \"UNSTAKES_FOR_ADDRESS_FAILED\";\n  APIErrorCause[\"TX_STATUS_FAILED\"] = \"TX_STATUS_FAILED\";\n  APIErrorCause[\"NETWORK_TX_THROUGHPUT_FAILED\"] = \"NETWORK_TX_THROUGHPUT_FAILED\";\n  APIErrorCause[\"NETWORK_TX_DEMAND_FAILED\"] = \"NETWORK_TX_DEMAND_FAILED\";\n  APIErrorCause[\"LOOKUP_TX_FAILED\"] = \"LOOKUP_TX_FAILED\";\n  APIErrorCause[\"LOOKUP_VALIDATOR_FAILED\"] = \"LOOKUP_VALIDATOR_FAILED\";\n  APIErrorCause[\"VALIDATORS_FAILED\"] = \"VALIDATORS_FAILED\";\n  APIErrorCause[\"BUILD_TRANSACTION_FAILED\"] = \"BUILD_TRANSACTION_FAILED\";\n  APIErrorCause[\"SUBMIT_SIGNED_TX_FAILED\"] = \"SUBMIT_SIGNED_TX_FAILED\";\n  APIErrorCause[\"FINALIZE_TX_FAILED\"] = \"FINALIZE_TX_FAILED\";\n  APIErrorCause[\"NETWORK_ID_FAILED\"] = \"NETWORK_ID_FAILED\";\n})(APIErrorCause = exports.APIErrorCause || (exports.APIErrorCause = {}));\nconst APIError = cause => error => Object.assign({\n  cause\n}, error);\nconst nodeError = error => ({\n  cause: NodeErrorCause.GET_NODE_FAILED,\n  category: ErrorCategory.NODE,\n  message: error.message\n});\nexports.nodeError = nodeError;\nconst walletError = error => ({\n  cause: WalletErrorCause.LOAD_KEYSTORE_FAILED,\n  category: ErrorCategory.WALLET,\n  message: error.message\n});\nexports.walletError = walletError;\nexports.tokenBalancesErr = APIError(APIErrorCause.TOKEN_BALANCES_FAILED);\nexports.transactionHistoryErr = APIError(APIErrorCause.TRANSACTION_HISTORY_FAILED);\nexports.recentTransactionsErr = APIError(APIErrorCause.RECENT_TRANSACTIONS_FAILED);\nexports.nativeTokenErr = APIError(APIErrorCause.NATIVE_TOKEN_FAILED);\nexports.tokenInfoErr = APIError(APIErrorCause.TOKEN_INFO_FAILED);\nexports.stakesForAddressErr = APIError(APIErrorCause.STAKES_FOR_ADDRESS_FAILED);\nexports.unstakesForAddressErr = APIError(APIErrorCause.UNSTAKES_FOR_ADDRESS_FAILED);\nexports.txStatusErr = APIError(APIErrorCause.TX_STATUS_FAILED);\nexports.NetworkTxThroughputErr = APIError(APIErrorCause.NETWORK_TX_THROUGHPUT_FAILED);\nexports.NetworkTxDemandErr = APIError(APIErrorCause.NETWORK_TX_DEMAND_FAILED);\nconst buildTxFromIntentErr = error => APIError(APIErrorCause.BUILD_TRANSACTION_FAILED)(error);\nexports.buildTxFromIntentErr = buildTxFromIntentErr;\nexports.submitSignedTxErr = APIError(APIErrorCause.SUBMIT_SIGNED_TX_FAILED);\nexports.finalizeTxErr = APIError(APIErrorCause.FINALIZE_TX_FAILED);\nexports.networkIdErr = APIError(APIErrorCause.NETWORK_ID_FAILED);\nexports.lookupTxErr = APIError(APIErrorCause.LOOKUP_TX_FAILED);\nexports.lookupValidatorErr = APIError(APIErrorCause.LOOKUP_VALIDATOR_FAILED);\nexports.validatorsErr = APIError(APIErrorCause.VALIDATORS_FAILED);","map":{"version":3,"names":["Object","defineProperty","exports","value","validatorsErr","lookupValidatorErr","lookupTxErr","networkIdErr","finalizeTxErr","submitSignedTxErr","buildTxFromIntentErr","NetworkTxDemandErr","NetworkTxThroughputErr","txStatusErr","unstakesForAddressErr","stakesForAddressErr","tokenInfoErr","nativeTokenErr","recentTransactionsErr","transactionHistoryErr","tokenBalancesErr","walletError","nodeError","APIErrorCause","NodeErrorCause","WalletErrorCause","ErrorCategory","APIError","cause","error","assign","GET_NODE_FAILED","category","NODE","message","LOAD_KEYSTORE_FAILED","WALLET","TOKEN_BALANCES_FAILED","TRANSACTION_HISTORY_FAILED","RECENT_TRANSACTIONS_FAILED","NATIVE_TOKEN_FAILED","TOKEN_INFO_FAILED","STAKES_FOR_ADDRESS_FAILED","UNSTAKES_FOR_ADDRESS_FAILED","TX_STATUS_FAILED","NETWORK_TX_THROUGHPUT_FAILED","NETWORK_TX_DEMAND_FAILED","BUILD_TRANSACTION_FAILED","SUBMIT_SIGNED_TX_FAILED","FINALIZE_TX_FAILED","NETWORK_ID_FAILED","LOOKUP_TX_FAILED","LOOKUP_VALIDATOR_FAILED","VALIDATORS_FAILED"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/application/dist/errors.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validatorsErr = exports.lookupValidatorErr = exports.lookupTxErr = exports.networkIdErr = exports.finalizeTxErr = exports.submitSignedTxErr = exports.buildTxFromIntentErr = exports.NetworkTxDemandErr = exports.NetworkTxThroughputErr = exports.txStatusErr = exports.unstakesForAddressErr = exports.stakesForAddressErr = exports.tokenInfoErr = exports.nativeTokenErr = exports.recentTransactionsErr = exports.transactionHistoryErr = exports.tokenBalancesErr = exports.walletError = exports.nodeError = exports.APIErrorCause = exports.NodeErrorCause = exports.WalletErrorCause = exports.ErrorCategory = void 0;\nvar ErrorCategory;\n(function (ErrorCategory) {\n    ErrorCategory[\"NODE\"] = \"node\";\n    ErrorCategory[\"WALLET\"] = \"wallet\";\n    ErrorCategory[\"API\"] = \"api\";\n})(ErrorCategory = exports.ErrorCategory || (exports.ErrorCategory = {}));\nvar WalletErrorCause;\n(function (WalletErrorCause) {\n    WalletErrorCause[\"LOAD_KEYSTORE_FAILED\"] = \"LOAD_KEYSTORE_FAILED\";\n})(WalletErrorCause = exports.WalletErrorCause || (exports.WalletErrorCause = {}));\nvar NodeErrorCause;\n(function (NodeErrorCause) {\n    NodeErrorCause[\"GET_NODE_FAILED\"] = \"GET_NODE_FAILED\";\n})(NodeErrorCause = exports.NodeErrorCause || (exports.NodeErrorCause = {}));\nvar APIErrorCause;\n(function (APIErrorCause) {\n    APIErrorCause[\"TOKEN_BALANCES_FAILED\"] = \"TOKEN_BALANCES_FAILED\";\n    APIErrorCause[\"TRANSACTION_HISTORY_FAILED\"] = \"TRANSACTION_HISTORY_FAILED\";\n    APIErrorCause[\"RECENT_TRANSACTIONS_FAILED\"] = \"RECENT_TRANSACTIONS_FAILED\";\n    APIErrorCause[\"NATIVE_TOKEN_FAILED\"] = \"NATIVE_TOKEN_FAILED\";\n    APIErrorCause[\"TOKEN_INFO_FAILED\"] = \"TOKEN_INFO_FAILED\";\n    APIErrorCause[\"STAKES_FOR_ADDRESS_FAILED\"] = \"STAKES_FOR_ADDRESS_FAILED\";\n    APIErrorCause[\"UNSTAKES_FOR_ADDRESS_FAILED\"] = \"UNSTAKES_FOR_ADDRESS_FAILED\";\n    APIErrorCause[\"TX_STATUS_FAILED\"] = \"TX_STATUS_FAILED\";\n    APIErrorCause[\"NETWORK_TX_THROUGHPUT_FAILED\"] = \"NETWORK_TX_THROUGHPUT_FAILED\";\n    APIErrorCause[\"NETWORK_TX_DEMAND_FAILED\"] = \"NETWORK_TX_DEMAND_FAILED\";\n    APIErrorCause[\"LOOKUP_TX_FAILED\"] = \"LOOKUP_TX_FAILED\";\n    APIErrorCause[\"LOOKUP_VALIDATOR_FAILED\"] = \"LOOKUP_VALIDATOR_FAILED\";\n    APIErrorCause[\"VALIDATORS_FAILED\"] = \"VALIDATORS_FAILED\";\n    APIErrorCause[\"BUILD_TRANSACTION_FAILED\"] = \"BUILD_TRANSACTION_FAILED\";\n    APIErrorCause[\"SUBMIT_SIGNED_TX_FAILED\"] = \"SUBMIT_SIGNED_TX_FAILED\";\n    APIErrorCause[\"FINALIZE_TX_FAILED\"] = \"FINALIZE_TX_FAILED\";\n    APIErrorCause[\"NETWORK_ID_FAILED\"] = \"NETWORK_ID_FAILED\";\n})(APIErrorCause = exports.APIErrorCause || (exports.APIErrorCause = {}));\nconst APIError = (cause) => (error) => (Object.assign({ cause }, error));\nconst nodeError = (error) => ({\n    cause: NodeErrorCause.GET_NODE_FAILED,\n    category: ErrorCategory.NODE,\n    message: error.message,\n});\nexports.nodeError = nodeError;\nconst walletError = (error) => ({\n    cause: WalletErrorCause.LOAD_KEYSTORE_FAILED,\n    category: ErrorCategory.WALLET,\n    message: error.message,\n});\nexports.walletError = walletError;\nexports.tokenBalancesErr = APIError(APIErrorCause.TOKEN_BALANCES_FAILED);\nexports.transactionHistoryErr = APIError(APIErrorCause.TRANSACTION_HISTORY_FAILED);\nexports.recentTransactionsErr = APIError(APIErrorCause.RECENT_TRANSACTIONS_FAILED);\nexports.nativeTokenErr = APIError(APIErrorCause.NATIVE_TOKEN_FAILED);\nexports.tokenInfoErr = APIError(APIErrorCause.TOKEN_INFO_FAILED);\nexports.stakesForAddressErr = APIError(APIErrorCause.STAKES_FOR_ADDRESS_FAILED);\nexports.unstakesForAddressErr = APIError(APIErrorCause.UNSTAKES_FOR_ADDRESS_FAILED);\nexports.txStatusErr = APIError(APIErrorCause.TX_STATUS_FAILED);\nexports.NetworkTxThroughputErr = APIError(APIErrorCause.NETWORK_TX_THROUGHPUT_FAILED);\nexports.NetworkTxDemandErr = APIError(APIErrorCause.NETWORK_TX_DEMAND_FAILED);\nconst buildTxFromIntentErr = (error) => APIError(APIErrorCause.BUILD_TRANSACTION_FAILED)(error);\nexports.buildTxFromIntentErr = buildTxFromIntentErr;\nexports.submitSignedTxErr = APIError(APIErrorCause.SUBMIT_SIGNED_TX_FAILED);\nexports.finalizeTxErr = APIError(APIErrorCause.FINALIZE_TX_FAILED);\nexports.networkIdErr = APIError(APIErrorCause.NETWORK_ID_FAILED);\nexports.lookupTxErr = APIError(APIErrorCause.LOOKUP_TX_FAILED);\nexports.lookupValidatorErr = APIError(APIErrorCause.LOOKUP_VALIDATOR_FAILED);\nexports.validatorsErr = APIError(APIErrorCause.VALIDATORS_FAILED);\n//# sourceMappingURL=errors.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAGF,OAAO,CAACG,kBAAkB,GAAGH,OAAO,CAACI,WAAW,GAAGJ,OAAO,CAACK,YAAY,GAAGL,OAAO,CAACM,aAAa,GAAGN,OAAO,CAACO,iBAAiB,GAAGP,OAAO,CAACQ,oBAAoB,GAAGR,OAAO,CAACS,kBAAkB,GAAGT,OAAO,CAACU,sBAAsB,GAAGV,OAAO,CAACW,WAAW,GAAGX,OAAO,CAACY,qBAAqB,GAAGZ,OAAO,CAACa,mBAAmB,GAAGb,OAAO,CAACc,YAAY,GAAGd,OAAO,CAACe,cAAc,GAAGf,OAAO,CAACgB,qBAAqB,GAAGhB,OAAO,CAACiB,qBAAqB,GAAGjB,OAAO,CAACkB,gBAAgB,GAAGlB,OAAO,CAACmB,WAAW,GAAGnB,OAAO,CAACoB,SAAS,GAAGpB,OAAO,CAACqB,aAAa,GAAGrB,OAAO,CAACsB,cAAc,GAAGtB,OAAO,CAACuB,gBAAgB,GAAGvB,OAAO,CAACwB,aAAa,GAAG,KAAK,CAAC;AACtmB,IAAIA,aAAa;AACjB,CAAC,UAAUA,aAAa,EAAE;EACtBA,aAAa,CAAC,MAAM,CAAC,GAAG,MAAM;EAC9BA,aAAa,CAAC,QAAQ,CAAC,GAAG,QAAQ;EAClCA,aAAa,CAAC,KAAK,CAAC,GAAG,KAAK;AAChC,CAAC,EAAEA,aAAa,GAAGxB,OAAO,CAACwB,aAAa,KAAKxB,OAAO,CAACwB,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC;AACzE,IAAID,gBAAgB;AACpB,CAAC,UAAUA,gBAAgB,EAAE;EACzBA,gBAAgB,CAAC,sBAAsB,CAAC,GAAG,sBAAsB;AACrE,CAAC,EAAEA,gBAAgB,GAAGvB,OAAO,CAACuB,gBAAgB,KAAKvB,OAAO,CAACuB,gBAAgB,GAAG,CAAC,CAAC,CAAC,CAAC;AAClF,IAAID,cAAc;AAClB,CAAC,UAAUA,cAAc,EAAE;EACvBA,cAAc,CAAC,iBAAiB,CAAC,GAAG,iBAAiB;AACzD,CAAC,EAAEA,cAAc,GAAGtB,OAAO,CAACsB,cAAc,KAAKtB,OAAO,CAACsB,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC;AAC5E,IAAID,aAAa;AACjB,CAAC,UAAUA,aAAa,EAAE;EACtBA,aAAa,CAAC,uBAAuB,CAAC,GAAG,uBAAuB;EAChEA,aAAa,CAAC,4BAA4B,CAAC,GAAG,4BAA4B;EAC1EA,aAAa,CAAC,4BAA4B,CAAC,GAAG,4BAA4B;EAC1EA,aAAa,CAAC,qBAAqB,CAAC,GAAG,qBAAqB;EAC5DA,aAAa,CAAC,mBAAmB,CAAC,GAAG,mBAAmB;EACxDA,aAAa,CAAC,2BAA2B,CAAC,GAAG,2BAA2B;EACxEA,aAAa,CAAC,6BAA6B,CAAC,GAAG,6BAA6B;EAC5EA,aAAa,CAAC,kBAAkB,CAAC,GAAG,kBAAkB;EACtDA,aAAa,CAAC,8BAA8B,CAAC,GAAG,8BAA8B;EAC9EA,aAAa,CAAC,0BAA0B,CAAC,GAAG,0BAA0B;EACtEA,aAAa,CAAC,kBAAkB,CAAC,GAAG,kBAAkB;EACtDA,aAAa,CAAC,yBAAyB,CAAC,GAAG,yBAAyB;EACpEA,aAAa,CAAC,mBAAmB,CAAC,GAAG,mBAAmB;EACxDA,aAAa,CAAC,0BAA0B,CAAC,GAAG,0BAA0B;EACtEA,aAAa,CAAC,yBAAyB,CAAC,GAAG,yBAAyB;EACpEA,aAAa,CAAC,oBAAoB,CAAC,GAAG,oBAAoB;EAC1DA,aAAa,CAAC,mBAAmB,CAAC,GAAG,mBAAmB;AAC5D,CAAC,EAAEA,aAAa,GAAGrB,OAAO,CAACqB,aAAa,KAAKrB,OAAO,CAACqB,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC;AACzE,MAAMI,QAAQ,GAAIC,KAAK,IAAMC,KAAK,IAAM7B,MAAM,CAAC8B,MAAM,CAAC;EAAEF;AAAM,CAAC,EAAEC,KAAK,CAAE;AACxE,MAAMP,SAAS,GAAIO,KAAK,KAAM;EAC1BD,KAAK,EAAEJ,cAAc,CAACO,eAAe;EACrCC,QAAQ,EAAEN,aAAa,CAACO,IAAI;EAC5BC,OAAO,EAAEL,KAAK,CAACK;AACnB,CAAC,CAAC;AACFhC,OAAO,CAACoB,SAAS,GAAGA,SAAS;AAC7B,MAAMD,WAAW,GAAIQ,KAAK,KAAM;EAC5BD,KAAK,EAAEH,gBAAgB,CAACU,oBAAoB;EAC5CH,QAAQ,EAAEN,aAAa,CAACU,MAAM;EAC9BF,OAAO,EAAEL,KAAK,CAACK;AACnB,CAAC,CAAC;AACFhC,OAAO,CAACmB,WAAW,GAAGA,WAAW;AACjCnB,OAAO,CAACkB,gBAAgB,GAAGO,QAAQ,CAACJ,aAAa,CAACc,qBAAqB,CAAC;AACxEnC,OAAO,CAACiB,qBAAqB,GAAGQ,QAAQ,CAACJ,aAAa,CAACe,0BAA0B,CAAC;AAClFpC,OAAO,CAACgB,qBAAqB,GAAGS,QAAQ,CAACJ,aAAa,CAACgB,0BAA0B,CAAC;AAClFrC,OAAO,CAACe,cAAc,GAAGU,QAAQ,CAACJ,aAAa,CAACiB,mBAAmB,CAAC;AACpEtC,OAAO,CAACc,YAAY,GAAGW,QAAQ,CAACJ,aAAa,CAACkB,iBAAiB,CAAC;AAChEvC,OAAO,CAACa,mBAAmB,GAAGY,QAAQ,CAACJ,aAAa,CAACmB,yBAAyB,CAAC;AAC/ExC,OAAO,CAACY,qBAAqB,GAAGa,QAAQ,CAACJ,aAAa,CAACoB,2BAA2B,CAAC;AACnFzC,OAAO,CAACW,WAAW,GAAGc,QAAQ,CAACJ,aAAa,CAACqB,gBAAgB,CAAC;AAC9D1C,OAAO,CAACU,sBAAsB,GAAGe,QAAQ,CAACJ,aAAa,CAACsB,4BAA4B,CAAC;AACrF3C,OAAO,CAACS,kBAAkB,GAAGgB,QAAQ,CAACJ,aAAa,CAACuB,wBAAwB,CAAC;AAC7E,MAAMpC,oBAAoB,GAAImB,KAAK,IAAKF,QAAQ,CAACJ,aAAa,CAACwB,wBAAwB,CAAC,CAAClB,KAAK,CAAC;AAC/F3B,OAAO,CAACQ,oBAAoB,GAAGA,oBAAoB;AACnDR,OAAO,CAACO,iBAAiB,GAAGkB,QAAQ,CAACJ,aAAa,CAACyB,uBAAuB,CAAC;AAC3E9C,OAAO,CAACM,aAAa,GAAGmB,QAAQ,CAACJ,aAAa,CAAC0B,kBAAkB,CAAC;AAClE/C,OAAO,CAACK,YAAY,GAAGoB,QAAQ,CAACJ,aAAa,CAAC2B,iBAAiB,CAAC;AAChEhD,OAAO,CAACI,WAAW,GAAGqB,QAAQ,CAACJ,aAAa,CAAC4B,gBAAgB,CAAC;AAC9DjD,OAAO,CAACG,kBAAkB,GAAGsB,QAAQ,CAACJ,aAAa,CAAC6B,uBAAuB,CAAC;AAC5ElD,OAAO,CAACE,aAAa,GAAGuB,QAAQ,CAACJ,aAAa,CAAC8B,iBAAiB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}