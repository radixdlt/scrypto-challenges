{"ast":null,"code":"import { noChange as t } from \"../lit-html.js\";\nimport { directive as e, Directive as r, PartType as s } from \"../directive.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst i = \"important\",\n  n = \" !\" + i,\n  o = e(class extends r {\n    constructor(t) {\n      var e;\n      if (super(t), t.type !== s.ATTRIBUTE || \"style\" !== t.name || (null === (e = t.strings) || void 0 === e ? void 0 : e.length) > 2) throw Error(\"The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.\");\n    }\n    render(t) {\n      return Object.keys(t).reduce((e, r) => {\n        const s = t[r];\n        return null == s ? e : e + \"\".concat(r = r.includes(\"-\") ? r : r.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, \"-$&\").toLowerCase(), \":\").concat(s, \";\");\n      }, \"\");\n    }\n    update(e, _ref) {\n      let [r] = _ref;\n      const {\n        style: s\n      } = e.element;\n      if (void 0 === this.ht) {\n        this.ht = new Set();\n        for (const t in r) this.ht.add(t);\n        return this.render(r);\n      }\n      this.ht.forEach(t => {\n        null == r[t] && (this.ht.delete(t), t.includes(\"-\") ? s.removeProperty(t) : s[t] = \"\");\n      });\n      for (const t in r) {\n        const e = r[t];\n        if (null != e) {\n          this.ht.add(t);\n          const r = \"string\" == typeof e && e.endsWith(n);\n          t.includes(\"-\") || r ? s.setProperty(t, r ? e.slice(0, -11) : e, r ? i : \"\") : s[t] = e;\n        }\n      }\n      return t;\n    }\n  });\nexport { o as styleMap };","map":{"version":3,"names":["i","n","o","e","r","constructor","t","type","s","ATTRIBUTE","name","strings","length","Error","render","Object","keys","reduce","concat","includes","replace","toLowerCase","update","_ref","style","element","ht","Set","add","forEach","delete","removeProperty","endsWith","setProperty","slice","styleMap"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/lit-html/src/directives/style-map.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\n\n/**\n * A key-value set of CSS properties and values.\n *\n * The key should be either a valid CSS property name string, like\n * `'background-color'`, or a valid JavaScript camel case property name\n * for CSSStyleDeclaration like `backgroundColor`.\n */\nexport interface StyleInfo {\n  [name: string]: string | number | undefined | null;\n}\n\nconst important = 'important';\n// The leading space is important\nconst importantFlag = ' !' + important;\n// How many characters to remove from a value, as a negative number\nconst flagTrim = 0 - importantFlag.length;\n\nclass StyleMapDirective extends Directive {\n  _previousStyleProperties?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'style' ||\n      (partInfo.strings?.length as number) > 2\n    ) {\n      throw new Error(\n        'The `styleMap` directive must be used in the `style` attribute ' +\n          'and must be the only part in the attribute.'\n      );\n    }\n  }\n\n  render(styleInfo: Readonly<StyleInfo>) {\n    return Object.keys(styleInfo).reduce((style, prop) => {\n      const value = styleInfo[prop];\n      if (value == null) {\n        return style;\n      }\n      // Convert property names from camel-case to dash-case, i.e.:\n      //  `backgroundColor` -> `background-color`\n      // Vendor-prefixed names need an extra `-` appended to front:\n      //  `webkitAppearance` -> `-webkit-appearance`\n      // Exception is any property name containing a dash, including\n      // custom properties; we assume these are already dash-cased i.e.:\n      //  `--my-button-color` --> `--my-button-color`\n      prop = prop.includes('-')\n        ? prop\n        : prop\n            .replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, '-$&')\n            .toLowerCase();\n      return style + `${prop}:${value};`;\n    }, '');\n  }\n\n  override update(part: AttributePart, [styleInfo]: DirectiveParameters<this>) {\n    const {style} = part.element as HTMLElement;\n\n    if (this._previousStyleProperties === undefined) {\n      this._previousStyleProperties = new Set();\n      for (const name in styleInfo) {\n        this._previousStyleProperties.add(name);\n      }\n      return this.render(styleInfo);\n    }\n\n    // Remove old properties that no longer exist in styleInfo\n    // We use forEach() instead of for-of so that re don't require down-level\n    // iteration.\n    this._previousStyleProperties!.forEach((name) => {\n      // If the name isn't in styleInfo or it's null/undefined\n      if (styleInfo[name] == null) {\n        this._previousStyleProperties!.delete(name);\n        if (name.includes('-')) {\n          style.removeProperty(name);\n        } else {\n          // Note reset using empty string (vs null) as IE11 does not always\n          // reset via null (https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style#setting_styles)\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (style as any)[name] = '';\n        }\n      }\n    });\n\n    // Add or update properties\n    for (const name in styleInfo) {\n      const value = styleInfo[name];\n      if (value != null) {\n        this._previousStyleProperties.add(name);\n        const isImportant =\n          typeof value === 'string' && value.endsWith(importantFlag);\n        if (name.includes('-') || isImportant) {\n          style.setProperty(\n            name,\n            isImportant\n              ? (value as string).slice(0, flagTrim)\n              : (value as string),\n            isImportant ? important : ''\n          );\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (style as any)[name] = value;\n        }\n      }\n    }\n    return noChange;\n  }\n}\n\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the\n * {@link StyleInfo styleInfo} object and adds the properties to the inline\n * style of the element.\n *\n * Property names with dashes (`-`) are assumed to be valid CSS\n * property names and set on the element's style object using `setProperty()`.\n * Names without dashes are assumed to be camelCased JavaScript property names\n * and set on the element's style object using property assignment, allowing the\n * style object to translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo\n * @see {@link https://lit.dev/docs/templates/directives/#stylemap styleMap code samples on Lit.dev}\n */\nexport const styleMap = directive(StyleMapDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {StyleMapDirective};\n"],"mappings":";;;;;;;AA0BA,MAAMA,CAAA,GAAY;EAEZC,CAAA,GAAgB,OAAOD,CAAA;EAqHhBE,CAAA,GAAWC,CAAA,CAjHxB,cAAgCC,CAAA;IAG9BC,YAAYC,CAAA;MAAA,IAAAH,CAAA;MAEV,IADA,MAAMG,CAAA,GAEJA,CAAA,CAASC,IAAA,KAASC,CAAA,CAASC,SAAA,IACT,YAAlBH,CAAA,CAASI,IAAA,eACRP,CAAA,GAAAG,CAAA,CAASK,OAAA,gBAAAR,CAAA,YAAAA,CAAA,CAASS,MAAA,IAAoB,GAEvC,MAAUC,KAAA,CACR,6GAIL;IAAA;IAEDC,OAAOR,CAAA;MACL,OAAOS,MAAA,CAAOC,IAAA,CAAKV,CAAA,EAAWW,MAAA,CAAO,CAACd,CAAA,EAAOC,CAAA;QAC3C,MAAMI,CAAA,GAAQF,CAAA,CAAUF,CAAA;QACxB,OAAa,QAATI,CAAA,GACKL,CAAA,GAcFA,CAAA,MAAAe,MAAA,CALPd,CAAA,GAAOA,CAAA,CAAKe,QAAA,CAAS,OACjBf,CAAA,GACAA,CAAA,CACGgB,OAAA,CAAQ,qCAAqC,OAC7CC,WAAA,SAAAH,MAAA,CACmBV,CAAA,MAAQ;MAAA,GACjC,GACJ;IAAA;IAEQc,OAAOnB,CAAA,EAAAoB,IAAA,EAAsB;MAAA,IAAtB,CAAsBnB,CAAA,IAAAmB,IAAA;MACpC;QAAMC,KAAA,EAAChB;MAAA,IAASL,CAAA,CAAKsB,OAAA;MAErB,SAAsC,MAAlC,KAAKC,EAAA,EAAwC;QAC/C,KAAKA,EAAA,GAA2B,IAAIC,GAAA;QACpC,KAAK,MAAMrB,CAAA,IAAQF,CAAA,EACjB,KAAKsB,EAAA,CAAyBE,GAAA,CAAItB,CAAA;QAEpC,OAAO,KAAKQ,MAAA,CAAOV,CAAA,CACpB;MAAA;MAKD,KAAKsB,EAAA,CAA0BG,OAAA,CAASvB,CAAA;QAEf,QAAnBF,CAAA,CAAUE,CAAA,MACZ,KAAKoB,EAAA,CAA0BI,MAAA,CAAOxB,CAAA,GAClCA,CAAA,CAAKa,QAAA,CAAS,OAChBX,CAAA,CAAMuB,cAAA,CAAezB,CAAA,IAKpBE,CAAA,CAAcF,CAAA,IAAQ,GAE1B;MAAA;MAIH,KAAK,MAAMA,CAAA,IAAQF,CAAA,EAAW;QAC5B,MAAMD,CAAA,GAAQC,CAAA,CAAUE,CAAA;QACxB,IAAa,QAATH,CAAA,EAAe;UACjB,KAAKuB,EAAA,CAAyBE,GAAA,CAAItB,CAAA;UAClC,MAAMF,CAAA,GACa,mBAAVD,CAAA,IAAsBA,CAAA,CAAM6B,QAAA,CAAS/B,CAAA;UAC1CK,CAAA,CAAKa,QAAA,CAAS,QAAQf,CAAA,GACxBI,CAAA,CAAMyB,WAAA,CACJ3B,CAAA,EACAF,CAAA,GACKD,CAAA,CAAiB+B,KAAA,CAAM,IAjFvB,MAkFA/B,CAAA,EACLC,CAAA,GAAcJ,CAAA,GAAY,MAI3BQ,CAAA,CAAcF,CAAA,IAAQH,CAE1B;QAAA;MACF;MACD,OAAOG,CACR;IAAA;EAAA;AAAA,SAAAJ,CAAA,IAAAiC,QAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}