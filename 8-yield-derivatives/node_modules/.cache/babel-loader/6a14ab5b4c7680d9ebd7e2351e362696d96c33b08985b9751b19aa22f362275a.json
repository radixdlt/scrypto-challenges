{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toPrivateKeyHex = exports.validateLength = exports.validateMinLength = exports.validateMaxLength = void 0;\nconst neverthrow_1 = require(\"neverthrow\");\nconst util_1 = require(\"@radixdlt/util\");\nconst ensureNum = num => {\n  if (!num || Number.isNaN(num)) {\n    util_1.log.error(`Expected number but got none or got NaN: ${num}`);\n    throw new Error('Incorrect implementation, must get a number');\n  }\n};\nconst validateMaxLength = (expectedMaxLength, name, buffer) => {\n  ensureNum(expectedMaxLength);\n  return buffer.length > expectedMaxLength ? (0, neverthrow_1.err)(new Error(`Incorrect length of ${name}, expected max: #${expectedMaxLength} bytes, but got: #${buffer.length}.`)) : (0, neverthrow_1.ok)(buffer);\n};\nexports.validateMaxLength = validateMaxLength;\nconst validateMinLength = (expectedMinLength, name, buffer) => {\n  ensureNum(expectedMinLength);\n  return buffer.length < expectedMinLength ? (0, neverthrow_1.err)(new Error(`Incorrect length of ${name}, expected min: #${expectedMinLength} bytes, but got: #${buffer.length}.`)) : (0, neverthrow_1.ok)(buffer);\n};\nexports.validateMinLength = validateMinLength;\nconst validateLength = (expectedLength, name, buffer) => {\n  ensureNum(expectedLength);\n  return buffer.length !== expectedLength ? (0, neverthrow_1.err)(new Error(`Incorrect length of ${name}, expected: #${expectedLength} bytes, but got: #${buffer.length}.`)) : (0, neverthrow_1.ok)(buffer);\n};\nexports.validateLength = validateLength;\nconst toPrivateKeyHex = function (scalar) {\n  return [...new Uint8Array(scalar.buffer)].reverse().map(x => x.toString(16).padStart(2, '0')).join('');\n};\nexports.toPrivateKeyHex = toPrivateKeyHex;","map":{"version":3,"names":["Object","defineProperty","exports","value","toPrivateKeyHex","validateLength","validateMinLength","validateMaxLength","neverthrow_1","require","util_1","ensureNum","num","Number","isNaN","log","error","Error","expectedMaxLength","name","buffer","length","err","ok","expectedMinLength","expectedLength","scalar","Uint8Array","reverse","map","x","toString","padStart","join"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/crypto/dist/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toPrivateKeyHex = exports.validateLength = exports.validateMinLength = exports.validateMaxLength = void 0;\nconst neverthrow_1 = require(\"neverthrow\");\nconst util_1 = require(\"@radixdlt/util\");\nconst ensureNum = (num) => {\n    if (!num || Number.isNaN(num)) {\n        util_1.log.error(`Expected number but got none or got NaN: ${num}`);\n        throw new Error('Incorrect implementation, must get a number');\n    }\n};\nconst validateMaxLength = (expectedMaxLength, name, buffer) => {\n    ensureNum(expectedMaxLength);\n    return buffer.length > expectedMaxLength\n        ? (0, neverthrow_1.err)(new Error(`Incorrect length of ${name}, expected max: #${expectedMaxLength} bytes, but got: #${buffer.length}.`))\n        : (0, neverthrow_1.ok)(buffer);\n};\nexports.validateMaxLength = validateMaxLength;\nconst validateMinLength = (expectedMinLength, name, buffer) => {\n    ensureNum(expectedMinLength);\n    return buffer.length < expectedMinLength\n        ? (0, neverthrow_1.err)(new Error(`Incorrect length of ${name}, expected min: #${expectedMinLength} bytes, but got: #${buffer.length}.`))\n        : (0, neverthrow_1.ok)(buffer);\n};\nexports.validateMinLength = validateMinLength;\nconst validateLength = (expectedLength, name, buffer) => {\n    ensureNum(expectedLength);\n    return buffer.length !== expectedLength\n        ? (0, neverthrow_1.err)(new Error(`Incorrect length of ${name}, expected: #${expectedLength} bytes, but got: #${buffer.length}.`))\n        : (0, neverthrow_1.ok)(buffer);\n};\nexports.validateLength = validateLength;\nconst toPrivateKeyHex = function (scalar) {\n    return [...new Uint8Array(scalar.buffer)]\n        .reverse()\n        .map(x => x.toString(16).padStart(2, '0'))\n        .join('');\n};\nexports.toPrivateKeyHex = toPrivateKeyHex;\n//# sourceMappingURL=utils.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAGF,OAAO,CAACG,cAAc,GAAGH,OAAO,CAACI,iBAAiB,GAAGJ,OAAO,CAACK,iBAAiB,GAAG,KAAK,CAAC;AACjH,MAAMC,YAAY,GAAGC,OAAO,CAAC,YAAY,CAAC;AAC1C,MAAMC,MAAM,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AACxC,MAAME,SAAS,GAAIC,GAAG,IAAK;EACvB,IAAI,CAACA,GAAG,IAAIC,MAAM,CAACC,KAAK,CAACF,GAAG,CAAC,EAAE;IAC3BF,MAAM,CAACK,GAAG,CAACC,KAAK,CAAE,4CAA2CJ,GAAI,EAAC,CAAC;IACnE,MAAM,IAAIK,KAAK,CAAC,6CAA6C,CAAC;EAClE;AACJ,CAAC;AACD,MAAMV,iBAAiB,GAAGA,CAACW,iBAAiB,EAAEC,IAAI,EAAEC,MAAM,KAAK;EAC3DT,SAAS,CAACO,iBAAiB,CAAC;EAC5B,OAAOE,MAAM,CAACC,MAAM,GAAGH,iBAAiB,GAClC,CAAC,CAAC,EAAEV,YAAY,CAACc,GAAG,EAAE,IAAIL,KAAK,CAAE,uBAAsBE,IAAK,oBAAmBD,iBAAkB,qBAAoBE,MAAM,CAACC,MAAO,GAAE,CAAC,CAAC,GACvI,CAAC,CAAC,EAAEb,YAAY,CAACe,EAAE,EAAEH,MAAM,CAAC;AACtC,CAAC;AACDlB,OAAO,CAACK,iBAAiB,GAAGA,iBAAiB;AAC7C,MAAMD,iBAAiB,GAAGA,CAACkB,iBAAiB,EAAEL,IAAI,EAAEC,MAAM,KAAK;EAC3DT,SAAS,CAACa,iBAAiB,CAAC;EAC5B,OAAOJ,MAAM,CAACC,MAAM,GAAGG,iBAAiB,GAClC,CAAC,CAAC,EAAEhB,YAAY,CAACc,GAAG,EAAE,IAAIL,KAAK,CAAE,uBAAsBE,IAAK,oBAAmBK,iBAAkB,qBAAoBJ,MAAM,CAACC,MAAO,GAAE,CAAC,CAAC,GACvI,CAAC,CAAC,EAAEb,YAAY,CAACe,EAAE,EAAEH,MAAM,CAAC;AACtC,CAAC;AACDlB,OAAO,CAACI,iBAAiB,GAAGA,iBAAiB;AAC7C,MAAMD,cAAc,GAAGA,CAACoB,cAAc,EAAEN,IAAI,EAAEC,MAAM,KAAK;EACrDT,SAAS,CAACc,cAAc,CAAC;EACzB,OAAOL,MAAM,CAACC,MAAM,KAAKI,cAAc,GACjC,CAAC,CAAC,EAAEjB,YAAY,CAACc,GAAG,EAAE,IAAIL,KAAK,CAAE,uBAAsBE,IAAK,gBAAeM,cAAe,qBAAoBL,MAAM,CAACC,MAAO,GAAE,CAAC,CAAC,GAChI,CAAC,CAAC,EAAEb,YAAY,CAACe,EAAE,EAAEH,MAAM,CAAC;AACtC,CAAC;AACDlB,OAAO,CAACG,cAAc,GAAGA,cAAc;AACvC,MAAMD,eAAe,GAAG,SAAAA,CAAUsB,MAAM,EAAE;EACtC,OAAO,CAAC,GAAG,IAAIC,UAAU,CAACD,MAAM,CAACN,MAAM,CAAC,CAAC,CACpCQ,OAAO,CAAC,CAAC,CACTC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CACzCC,IAAI,CAAC,EAAE,CAAC;AACjB,CAAC;AACD/B,OAAO,CAACE,eAAe,GAAGA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}