{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar typescript_map_1 = require(\"typescript-map\");\nvar RadixSimpleIdentity_1 = tslib_1.__importDefault(require(\"./RadixSimpleIdentity\"));\nvar RadixRemoteIdentity_1 = tslib_1.__importDefault(require(\"./RadixRemoteIdentity\"));\nvar atommodel_1 = require(\"../atommodel\");\nvar RadixUtil_1 = require(\"../common/RadixUtil\");\nvar RadixIdentityManager = /** @class */function () {\n  function RadixIdentityManager() {\n    this.identities = new typescript_map_1.TSMap();\n  }\n  /**\n   * Generates a new random RadixSimpleIdentity\n   *\n   * @returns An instance of a RadixSimpleIdentity\n   */\n  RadixIdentityManager.prototype.generateSimpleIdentity = function () {\n    var address = atommodel_1.RadixAddress.generateNew();\n    var identity = new RadixSimpleIdentity_1.default(address);\n    this.identities.set(address.getAddress(), identity);\n    return identity;\n  };\n  /**\n   * Generates a new RadixSimpleIdentity from an arbitrary byte buffer.\n   *\n   * @param seed Buffer seed for the address of the identity\n   * @returns An instance of a RadixSimpleIdentity\n   */\n  RadixIdentityManager.prototype.generateSimpleIdentityFromSeed = function (seed) {\n    var hash = RadixUtil_1.radixHash(seed);\n    var address = atommodel_1.RadixAddress.fromPrivate(hash);\n    var identity = new RadixSimpleIdentity_1.default(address);\n    this.identities.set(address.getAddress(), identity);\n    return identity;\n  };\n  /**\n   * Adds a new RadixSimpleIdentity\n   *\n   * @param address - The key pair of the identity(must have a private key)\n   * @returns An instance of a RadixSimpleIdentity\n   */\n  RadixIdentityManager.prototype.addSimpleIdentity = function (address) {\n    var identity = new RadixSimpleIdentity_1.default(address);\n    this.identities.set(address.getAddress(), identity);\n    return identity;\n  };\n  /**\n   * Generates a new RadixRemoteIdentity\n   *\n   * @param name - The name of the application that wants to use the remote identity\n   * @param description - The description of the application that wants to use the remote identity\n   * @param [host] - The host of the wallet\n   * @param [port] - The port in which the wallet server is being exposed\n   * @returns A promise with an instance of a RadixRemoteIdentity\n   */\n  RadixIdentityManager.prototype.generateRemoteIdentity = function (name, description, permissions, host, port) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var error_1;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, RadixRemoteIdentity_1.default.createNew(name, description, permissions, host, port)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n          case 2:\n            error_1 = _a.sent();\n            throw error_1;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Adds a new RadixIdentity to the set of available identities\n   *\n   * @returns A RadixIdentity\n   */\n  RadixIdentityManager.prototype.addIdentity = function (identity) {\n    this.identities.set(identity.account.getAddress(), identity);\n    return identity;\n  };\n  return RadixIdentityManager;\n}();\nexports.default = RadixIdentityManager;","map":{"version":3,"names":["typescript_map_1","require","RadixSimpleIdentity_1","tslib_1","__importDefault","RadixRemoteIdentity_1","atommodel_1","RadixUtil_1","RadixIdentityManager","identities","TSMap","prototype","generateSimpleIdentity","address","RadixAddress","generateNew","identity","default","set","getAddress","generateSimpleIdentityFromSeed","seed","hash","radixHash","fromPrivate","addSimpleIdentity","generateRemoteIdentity","name","description","permissions","host","port","createNew","_a","sent","error_1","addIdentity","account"],"sources":["../../../../src/modules/identity/RadixIdentityManager.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,IAAAA,gBAAA,GAAAC,OAAA;AAGA,IAAAC,qBAAA,GAAAC,OAAA,CAAAC,eAAA,CAAAH,OAAA;AACA,IAAAI,qBAAA,GAAAF,OAAA,CAAAC,eAAA,CAAAH,OAAA;AACA,IAAAK,WAAA,GAAAL,OAAA;AACA,IAAAM,WAAA,GAAAN,OAAA;AAEA,IAAAO,oBAAA;EAAA,SAAAA,qBAAA;IACW,KAAAC,UAAU,GAAiC,IAAIT,gBAAA,CAAAU,KAAK,EAAE;EA8EjE;EA5EI;;;;;EAKOF,oBAAA,CAAAG,SAAA,CAAAC,sBAAsB,GAA7B;IACI,IAAMC,OAAO,GAAGP,WAAA,CAAAQ,YAAY,CAACC,WAAW,EAAE;IAC1C,IAAMC,QAAQ,GAAG,IAAId,qBAAA,CAAAe,OAAmB,CAACJ,OAAO,CAAC;IAEjD,IAAI,CAACJ,UAAU,CAACS,GAAG,CAACL,OAAO,CAACM,UAAU,EAAE,EAAEH,QAAQ,CAAC;IAEnD,OAAOA,QAAQ;EACnB,CAAC;EAED;;;;;;EAMOR,oBAAA,CAAAG,SAAA,CAAAS,8BAA8B,GAArC,UAAsCC,IAAY;IAC9C,IAAMC,IAAI,GAAGf,WAAA,CAAAgB,SAAS,CAACF,IAAI,CAAC;IAC5B,IAAMR,OAAO,GAAGP,WAAA,CAAAQ,YAAY,CAACU,WAAW,CAACF,IAAI,CAAC;IAC9C,IAAMN,QAAQ,GAAG,IAAId,qBAAA,CAAAe,OAAmB,CAACJ,OAAO,CAAC;IAEjD,IAAI,CAACJ,UAAU,CAACS,GAAG,CAACL,OAAO,CAACM,UAAU,EAAE,EAAEH,QAAQ,CAAC;IAEnD,OAAOA,QAAQ;EACnB,CAAC;EAED;;;;;;EAMOR,oBAAA,CAAAG,SAAA,CAAAc,iBAAiB,GAAxB,UAAyBZ,OAAqB;IAC1C,IAAMG,QAAQ,GAAG,IAAId,qBAAA,CAAAe,OAAmB,CAACJ,OAAO,CAAC;IAEjD,IAAI,CAACJ,UAAU,CAACS,GAAG,CAACL,OAAO,CAACM,UAAU,EAAE,EAAEH,QAAQ,CAAC;IAEnD,OAAOA,QAAQ;EACnB,CAAC;EAED;;;;;;;;;EASaR,oBAAA,CAAAG,SAAA,CAAAe,sBAAsB,GAAnC,UACIC,IAAY,EACZC,WAAmB,EACnBC,WAAqB,EACrBC,IAAY,EACZC,IAAY;;;;;;;YAED,qBAAM1B,qBAAA,CAAAY,OAAmB,CAACe,SAAS,CAACL,IAAI,EAAEC,WAAW,EAAEC,WAAW,EAAEC,IAAI,EAAEC,IAAI,CAAC;;YAAtF,sBAAOE,EAAA,CAAAC,IAAA,EAA+E;;;YAEtF,MAAMC,OAAK;;;;;;GAElB;EAED;;;;;EAKO3B,oBAAA,CAAAG,SAAA,CAAAyB,WAAW,GAAlB,UAAmBpB,QAAuB;IACtC,IAAI,CAACP,UAAU,CAACS,GAAG,CAACF,QAAQ,CAACqB,OAAO,CAAClB,UAAU,EAAE,EAAEH,QAAQ,CAAC;IAE5D,OAAOA,QAAQ;EACnB,CAAC;EACL,OAAAR,oBAAC;AAAD,CAAC,CA/ED","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}