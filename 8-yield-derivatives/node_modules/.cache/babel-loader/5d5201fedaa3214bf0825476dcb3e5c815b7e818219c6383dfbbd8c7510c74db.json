{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar atommodel_1 = require(\"../atommodel\");\nvar RadixDecryptionState;\n(function (RadixDecryptionState) {\n  RadixDecryptionState[\"DECRYPTED\"] = \"DECRYPTED\";\n  RadixDecryptionState[\"NOT_ENCRYPTED\"] = \"NOT_ENCRYPTED\";\n  RadixDecryptionState[\"CANNOT_DECRYPT\"] = \"CANNOT_DECRYPT\";\n})(RadixDecryptionState = exports.RadixDecryptionState || (exports.RadixDecryptionState = {}));\nvar RadixDecryptionAccountSystem = /** @class */function () {\n  function RadixDecryptionAccountSystem(decryptionProvider) {\n    this.name = 'DECRYPTION';\n    if (decryptionProvider) {\n      this.decryptionProvider = decryptionProvider;\n    }\n  }\n  RadixDecryptionAccountSystem.prototype.processAtomUpdate = function (atomUpdate) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var atom, messageParticles, dataParticle, encryptorParticle, decryptedData, protectors, payload, decrypted, error_1;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            atom = atomUpdate.atom;\n            messageParticles = atom.getParticlesOfType(atommodel_1.RadixMessageParticle);\n            dataParticle = messageParticles.find(function (p) {\n              return p.getMetaData('application') !== 'encryptor';\n            });\n            encryptorParticle = messageParticles.find(function (p) {\n              return p.getMetaData('application') === 'encryptor';\n            });\n            if (!dataParticle) {\n              return [2 /*return*/];\n            }\n            if (!encryptorParticle) return [3 /*break*/, 5];\n            protectors = encryptorParticle.getData().asJSON().map(function (p) {\n              return Buffer.from(p, 'base64');\n            });\n            payload = dataParticle.getData().bytes;\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.decryptionProvider.decryptECIESPayloadWithProtectors(protectors, payload)];\n          case 2:\n            decrypted = _a.sent();\n            decryptedData = {\n              data: decrypted.toString(),\n              decryptionState: RadixDecryptionState.DECRYPTED,\n              application: dataParticle.getMetaData('application'),\n              from: dataParticle.from,\n              to: dataParticle.getAddresses()\n            };\n            return [3 /*break*/, 4];\n          case 3:\n            error_1 = _a.sent();\n            decryptedData = {\n              data: dataParticle.getData().toString(),\n              decryptionState: RadixDecryptionState.CANNOT_DECRYPT,\n              application: dataParticle.getMetaData('application'),\n              from: dataParticle.from,\n              to: dataParticle.getAddresses()\n            };\n            return [3 /*break*/, 4];\n          case 4:\n            return [3 /*break*/, 6];\n          case 5:\n            decryptedData = {\n              data: dataParticle.getData().bytes.toString(),\n              decryptionState: RadixDecryptionState.NOT_ENCRYPTED,\n              application: dataParticle.getMetaData('application'),\n              from: dataParticle.from,\n              to: dataParticle.getAddresses()\n            };\n            _a.label = 6;\n          case 6:\n            atomUpdate.processedData.decryptedData = decryptedData;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  return RadixDecryptionAccountSystem;\n}();\nexports.RadixDecryptionAccountSystem = RadixDecryptionAccountSystem;","map":{"version":3,"names":["atommodel_1","require","RadixDecryptionState","exports","RadixDecryptionAccountSystem","decryptionProvider","name","prototype","processAtomUpdate","atomUpdate","atom","messageParticles","getParticlesOfType","RadixMessageParticle","dataParticle","find","p","getMetaData","encryptorParticle","protectors","getData","asJSON","map","Buffer","from","payload","bytes","decryptECIESPayloadWithProtectors","decrypted","_a","sent","decryptedData","data","toString","decryptionState","DECRYPTED","application","to","getAddresses","CANNOT_DECRYPT","NOT_ENCRYPTED","processedData"],"sources":["../../../../src/modules/account/RadixDecryptionAccountSystem.ts"],"sourcesContent":[null],"mappings":";;;;;;AAIA,IAAAA,WAAA,GAAAC,OAAA;AAGA,IAAYC,oBAIX;AAJD,WAAYA,oBAAoB;EAC5BA,oBAAA,2BAAuB;EACvBA,oBAAA,mCAA+B;EAC/BA,oBAAA,qCAAiC;AACrC,CAAC,EAJWA,oBAAoB,GAApBC,OAAA,CAAAD,oBAAoB,KAApBC,OAAA,CAAAD,oBAAoB;AAchC,IAAAE,4BAAA;EAII,SAAAA,6BAAYC,kBAA4C;IAHjD,KAAAC,IAAI,GAAG,YAAY;IAItB,IAAID,kBAAkB,EAAE;MACpB,IAAI,CAACA,kBAAkB,GAAGA,kBAAkB;;EAEpD;EAEaD,4BAAA,CAAAG,SAAA,CAAAC,iBAAiB,GAA9B,UAA+BC,UAA2B;;;;;;YAChDC,IAAI,GAAGD,UAAU,CAACC,IAAI;YACtBC,gBAAgB,GAAGD,IAAI,CAACE,kBAAkB,CAACZ,WAAA,CAAAa,oBAAoB,CAAC;YAEhEC,YAAY,GAAGH,gBAAgB,CAACI,IAAI,CAAC,UAAAC,CAAC;cACxC,OAAOA,CAAC,CAACC,WAAW,CAAC,aAAa,CAAC,KAAK,WAAW;YACvD,CAAC,CAAC;YAEIC,iBAAiB,GAAGP,gBAAgB,CAACI,IAAI,CAAC,UAAAC,CAAC;cAC7C,OAAOA,CAAC,CAACC,WAAW,CAAC,aAAa,CAAC,KAAK,WAAW;YACvD,CAAC,CAAC;YAEF,IAAI,CAAEH,YAAa,EAAE;cACjB;;iBAMAI,iBAAiB,EAAjB;YACMC,UAAU,GAAID,iBAAiB,CAACE,OAAO,EAAE,CAACC,MAAM,EAAe,CAACC,GAAG,CAAC,UAAAN,CAAC;cAAI,OAAAO,MAAM,CAACC,IAAI,CAACR,CAAC,EAAE,QAAQ,CAAC;YAAxB,CAAwB,CAAC;YAClGS,OAAO,GAAGX,YAAY,CAACM,OAAO,EAAE,CAACM,KAAK;;;;YAGtB,qBAAM,IAAI,CAACrB,kBAAkB,CAACsB,iCAAiC,CAACR,UAAU,EAAEM,OAAO,CAAC;;YAAhGG,SAAS,GAAGC,EAAA,CAAAC,IAAA,EAAoF;YAEtGC,aAAa,GAAG;cACZC,IAAI,EAAEJ,SAAS,CAACK,QAAQ,EAAE;cAC1BC,eAAe,EAAEhC,oBAAoB,CAACiC,SAAS;cAC/CC,WAAW,EAAEtB,YAAY,CAACG,WAAW,CAAC,aAAa,CAAC;cACpDO,IAAI,EAAEV,YAAY,CAACU,IAAI;cACvBa,EAAE,EAAEvB,YAAY,CAACwB,YAAY;aAChC;;;;YAEDP,aAAa,GAAG;cACZC,IAAI,EAAElB,YAAY,CAACM,OAAO,EAAE,CAACa,QAAQ,EAAE;cACvCC,eAAe,EAAEhC,oBAAoB,CAACqC,cAAc;cACpDH,WAAW,EAAEtB,YAAY,CAACG,WAAW,CAAC,aAAa,CAAC;cACpDO,IAAI,EAAEV,YAAY,CAACU,IAAI;cACvBa,EAAE,EAAEvB,YAAY,CAACwB,YAAY;aAChC;;;;;YAGLP,aAAa,GAAG;cACZC,IAAI,EAAElB,YAAY,CAACM,OAAO,EAAE,CAACM,KAAK,CAACO,QAAQ,EAAE;cAC7CC,eAAe,EAAEhC,oBAAoB,CAACsC,aAAa;cACnDJ,WAAW,EAAEtB,YAAY,CAACG,WAAW,CAAC,aAAa,CAAC;cACpDO,IAAI,EAAEV,YAAY,CAACU,IAAI;cACvBa,EAAE,EAAEvB,YAAY,CAACwB,YAAY;aAChC;;;YAGL7B,UAAU,CAACgC,aAAa,CAACV,aAAa,GAAGA,aAAa;;;;;GAEzD;EACL,OAAA3B,4BAAC;AAAD,CAAC,CAjED;AAAaD,OAAA,CAAAC,4BAAA,GAAAA,4BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}