{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validatorsErr = exports.lookupValidatorErr = exports.lookupTxErr = exports.networkIdErr = exports.finalizeTxErr = exports.submitSignedTxErr = exports.buildTxFromIntentErr = exports.NetworkTxDemandErr = exports.NetworkTxThroughputErr = exports.txStatusErr = exports.unstakesForAddressErr = exports.stakesForAddressErr = exports.tokenInfoErr = exports.nativeTokenErr = exports.recentTransactionsErr = exports.transactionHistoryErr = exports.tokenBalancesErr = exports.walletError = exports.nodeError = exports.APIErrorCause = exports.NodeErrorCause = exports.WalletErrorCause = exports.ErrorCategory = void 0;\nvar ErrorCategory;\n(function (ErrorCategory) {\n  ErrorCategory[\"NODE\"] = \"node\";\n  ErrorCategory[\"WALLET\"] = \"wallet\";\n  ErrorCategory[\"API\"] = \"api\";\n})(ErrorCategory = exports.ErrorCategory || (exports.ErrorCategory = {}));\nvar WalletErrorCause;\n(function (WalletErrorCause) {\n  WalletErrorCause[\"LOAD_KEYSTORE_FAILED\"] = \"LOAD_KEYSTORE_FAILED\";\n})(WalletErrorCause = exports.WalletErrorCause || (exports.WalletErrorCause = {}));\nvar NodeErrorCause;\n(function (NodeErrorCause) {\n  NodeErrorCause[\"GET_NODE_FAILED\"] = \"GET_NODE_FAILED\";\n})(NodeErrorCause = exports.NodeErrorCause || (exports.NodeErrorCause = {}));\nvar APIErrorCause;\n(function (APIErrorCause) {\n  APIErrorCause[\"TOKEN_BALANCES_FAILED\"] = \"TOKEN_BALANCES_FAILED\";\n  APIErrorCause[\"TRANSACTION_HISTORY_FAILED\"] = \"TRANSACTION_HISTORY_FAILED\";\n  APIErrorCause[\"RECENT_TRANSACTIONS_FAILED\"] = \"RECENT_TRANSACTIONS_FAILED\";\n  APIErrorCause[\"NATIVE_TOKEN_FAILED\"] = \"NATIVE_TOKEN_FAILED\";\n  APIErrorCause[\"TOKEN_INFO_FAILED\"] = \"TOKEN_INFO_FAILED\";\n  APIErrorCause[\"STAKES_FOR_ADDRESS_FAILED\"] = \"STAKES_FOR_ADDRESS_FAILED\";\n  APIErrorCause[\"UNSTAKES_FOR_ADDRESS_FAILED\"] = \"UNSTAKES_FOR_ADDRESS_FAILED\";\n  APIErrorCause[\"TX_STATUS_FAILED\"] = \"TX_STATUS_FAILED\";\n  APIErrorCause[\"NETWORK_TX_THROUGHPUT_FAILED\"] = \"NETWORK_TX_THROUGHPUT_FAILED\";\n  APIErrorCause[\"NETWORK_TX_DEMAND_FAILED\"] = \"NETWORK_TX_DEMAND_FAILED\";\n  APIErrorCause[\"LOOKUP_TX_FAILED\"] = \"LOOKUP_TX_FAILED\";\n  APIErrorCause[\"LOOKUP_VALIDATOR_FAILED\"] = \"LOOKUP_VALIDATOR_FAILED\";\n  APIErrorCause[\"VALIDATORS_FAILED\"] = \"VALIDATORS_FAILED\";\n  APIErrorCause[\"BUILD_TRANSACTION_FAILED\"] = \"BUILD_TRANSACTION_FAILED\";\n  APIErrorCause[\"SUBMIT_SIGNED_TX_FAILED\"] = \"SUBMIT_SIGNED_TX_FAILED\";\n  APIErrorCause[\"FINALIZE_TX_FAILED\"] = \"FINALIZE_TX_FAILED\";\n  APIErrorCause[\"NETWORK_ID_FAILED\"] = \"NETWORK_ID_FAILED\";\n})(APIErrorCause = exports.APIErrorCause || (exports.APIErrorCause = {}));\nconst APIError = cause => error => Object.assign({\n  cause\n}, error);\nconst nodeError = error => ({\n  cause: NodeErrorCause.GET_NODE_FAILED,\n  category: ErrorCategory.NODE,\n  message: error.message\n});\nexports.nodeError = nodeError;\nconst walletError = error => ({\n  cause: WalletErrorCause.LOAD_KEYSTORE_FAILED,\n  category: ErrorCategory.WALLET,\n  message: error.message\n});\nexports.walletError = walletError;\nexports.tokenBalancesErr = APIError(APIErrorCause.TOKEN_BALANCES_FAILED);\nexports.transactionHistoryErr = APIError(APIErrorCause.TRANSACTION_HISTORY_FAILED);\nexports.recentTransactionsErr = APIError(APIErrorCause.RECENT_TRANSACTIONS_FAILED);\nexports.nativeTokenErr = APIError(APIErrorCause.NATIVE_TOKEN_FAILED);\nexports.tokenInfoErr = APIError(APIErrorCause.TOKEN_INFO_FAILED);\nexports.stakesForAddressErr = APIError(APIErrorCause.STAKES_FOR_ADDRESS_FAILED);\nexports.unstakesForAddressErr = APIError(APIErrorCause.UNSTAKES_FOR_ADDRESS_FAILED);\nexports.txStatusErr = APIError(APIErrorCause.TX_STATUS_FAILED);\nexports.NetworkTxThroughputErr = APIError(APIErrorCause.NETWORK_TX_THROUGHPUT_FAILED);\nexports.NetworkTxDemandErr = APIError(APIErrorCause.NETWORK_TX_DEMAND_FAILED);\nconst buildTxFromIntentErr = error => APIError(APIErrorCause.BUILD_TRANSACTION_FAILED)(error);\nexports.buildTxFromIntentErr = buildTxFromIntentErr;\nexports.submitSignedTxErr = APIError(APIErrorCause.SUBMIT_SIGNED_TX_FAILED);\nexports.finalizeTxErr = APIError(APIErrorCause.FINALIZE_TX_FAILED);\nexports.networkIdErr = APIError(APIErrorCause.NETWORK_ID_FAILED);\nexports.lookupTxErr = APIError(APIErrorCause.LOOKUP_TX_FAILED);\nexports.lookupValidatorErr = APIError(APIErrorCause.LOOKUP_VALIDATOR_FAILED);\nexports.validatorsErr = APIError(APIErrorCause.VALIDATORS_FAILED);","map":{"version":3,"names":["ErrorCategory","exports","WalletErrorCause","NodeErrorCause","APIErrorCause","APIError","cause","error","Object","assign","nodeError","GET_NODE_FAILED","category","NODE","message","walletError","LOAD_KEYSTORE_FAILED","WALLET","tokenBalancesErr","TOKEN_BALANCES_FAILED","transactionHistoryErr","TRANSACTION_HISTORY_FAILED","recentTransactionsErr","RECENT_TRANSACTIONS_FAILED","nativeTokenErr","NATIVE_TOKEN_FAILED","tokenInfoErr","TOKEN_INFO_FAILED","stakesForAddressErr","STAKES_FOR_ADDRESS_FAILED","unstakesForAddressErr","UNSTAKES_FOR_ADDRESS_FAILED","txStatusErr","TX_STATUS_FAILED","NetworkTxThroughputErr","NETWORK_TX_THROUGHPUT_FAILED","NetworkTxDemandErr","NETWORK_TX_DEMAND_FAILED","buildTxFromIntentErr","BUILD_TRANSACTION_FAILED","submitSignedTxErr","SUBMIT_SIGNED_TX_FAILED","finalizeTxErr","FINALIZE_TX_FAILED","networkIdErr","NETWORK_ID_FAILED","lookupTxErr","LOOKUP_TX_FAILED","lookupValidatorErr","LOOKUP_VALIDATOR_FAILED","validatorsErr","VALIDATORS_FAILED"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/application/src/errors.ts"],"sourcesContent":["import { Decoded } from './api/open-api/_types'\n\nexport type APIError = Decoded.TransactionBuildError\n\nexport type WalletError = ErrorT<'wallet'>\n\nexport type NodeError = ErrorT<'node'>\n\nexport type ErrorT<T extends 'api' | 'node' | 'wallet'> = {\n\tcause: T extends 'api'\n\t\t? APIErrorCause\n\t\t: T extends 'node'\n\t\t? NodeErrorCause\n\t\t: T extends 'wallet'\n\t\t? WalletErrorCause\n\t\t: unknown\n\tcategory: T extends 'api'\n\t\t? ErrorCategory.API\n\t\t: T extends 'node'\n\t\t? ErrorCategory.NODE\n\t\t: T extends 'wallet'\n\t\t? ErrorCategory.WALLET\n\t\t: unknown\n\tmessage: string | undefined\n}\n\nexport enum ErrorCategory {\n\tNODE = 'node',\n\tWALLET = 'wallet',\n\tAPI = 'api',\n}\n\nexport enum WalletErrorCause {\n\tLOAD_KEYSTORE_FAILED = 'LOAD_KEYSTORE_FAILED',\n}\n\nexport enum NodeErrorCause {\n\tGET_NODE_FAILED = 'GET_NODE_FAILED',\n}\n\nexport type APIErrorObject = { code: number; message: string }\n\nexport enum APIErrorCause {\n\tTOKEN_BALANCES_FAILED = 'TOKEN_BALANCES_FAILED',\n\tTRANSACTION_HISTORY_FAILED = 'TRANSACTION_HISTORY_FAILED',\n\tRECENT_TRANSACTIONS_FAILED = 'RECENT_TRANSACTIONS_FAILED',\n\tNATIVE_TOKEN_FAILED = 'NATIVE_TOKEN_FAILED',\n\tTOKEN_INFO_FAILED = 'TOKEN_INFO_FAILED',\n\tSTAKES_FOR_ADDRESS_FAILED = 'STAKES_FOR_ADDRESS_FAILED',\n\tUNSTAKES_FOR_ADDRESS_FAILED = 'UNSTAKES_FOR_ADDRESS_FAILED',\n\tTX_STATUS_FAILED = 'TX_STATUS_FAILED',\n\tNETWORK_TX_THROUGHPUT_FAILED = 'NETWORK_TX_THROUGHPUT_FAILED',\n\tNETWORK_TX_DEMAND_FAILED = 'NETWORK_TX_DEMAND_FAILED',\n\tLOOKUP_TX_FAILED = 'LOOKUP_TX_FAILED',\n\tLOOKUP_VALIDATOR_FAILED = 'LOOKUP_VALIDATOR_FAILED',\n\tVALIDATORS_FAILED = 'VALIDATORS_FAILED',\n\tBUILD_TRANSACTION_FAILED = 'BUILD_TRANSACTION_FAILED',\n\tSUBMIT_SIGNED_TX_FAILED = 'SUBMIT_SIGNED_TX_FAILED',\n\tFINALIZE_TX_FAILED = 'FINALIZE_TX_FAILED',\n\tNETWORK_ID_FAILED = 'NETWORK_ID_FAILED',\n}\n\nconst APIError = (cause: APIErrorCause) => (error: any): APIError => ({\n\tcause,\n\t...error,\n})\n\nexport const nodeError = (error: Error): ErrorT<'node'> => ({\n\tcause: NodeErrorCause.GET_NODE_FAILED,\n\tcategory: ErrorCategory.NODE,\n\tmessage: error.message,\n})\n\nexport const walletError = (error: Error): ErrorT<'wallet'> => ({\n\tcause: WalletErrorCause.LOAD_KEYSTORE_FAILED,\n\tcategory: ErrorCategory.WALLET,\n\tmessage: error.message,\n})\n\nexport const tokenBalancesErr = APIError(APIErrorCause.TOKEN_BALANCES_FAILED)\nexport const transactionHistoryErr = APIError(\n\tAPIErrorCause.TRANSACTION_HISTORY_FAILED,\n)\nexport const recentTransactionsErr = APIError(\n\tAPIErrorCause.RECENT_TRANSACTIONS_FAILED,\n)\nexport const nativeTokenErr = APIError(APIErrorCause.NATIVE_TOKEN_FAILED)\nexport const tokenInfoErr = APIError(APIErrorCause.TOKEN_INFO_FAILED)\nexport const stakesForAddressErr = APIError(\n\tAPIErrorCause.STAKES_FOR_ADDRESS_FAILED,\n)\nexport const unstakesForAddressErr = APIError(\n\tAPIErrorCause.UNSTAKES_FOR_ADDRESS_FAILED,\n)\nexport const txStatusErr = APIError(APIErrorCause.TX_STATUS_FAILED)\nexport const NetworkTxThroughputErr = APIError(\n\tAPIErrorCause.NETWORK_TX_THROUGHPUT_FAILED,\n)\nexport const NetworkTxDemandErr = APIError(\n\tAPIErrorCause.NETWORK_TX_DEMAND_FAILED,\n)\nexport const buildTxFromIntentErr = (error: APIErrorObject): APIError =>\n\tAPIError(APIErrorCause.BUILD_TRANSACTION_FAILED)(error)\n\nexport const submitSignedTxErr = APIError(APIErrorCause.SUBMIT_SIGNED_TX_FAILED)\nexport const finalizeTxErr = APIError(APIErrorCause.FINALIZE_TX_FAILED)\n\nexport const networkIdErr = APIError(APIErrorCause.NETWORK_ID_FAILED)\n\nexport const lookupTxErr = APIError(APIErrorCause.LOOKUP_TX_FAILED)\n\nexport const lookupValidatorErr = APIError(\n\tAPIErrorCause.LOOKUP_VALIDATOR_FAILED,\n)\n\nexport const validatorsErr = APIError(APIErrorCause.VALIDATORS_FAILED)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}