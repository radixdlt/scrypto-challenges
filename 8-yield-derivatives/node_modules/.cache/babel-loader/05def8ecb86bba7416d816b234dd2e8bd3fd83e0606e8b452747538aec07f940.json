{"ast":null,"code":"'use strict';\n\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer;\nfunction base(ALPHABET) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode(source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) {\n      source = _Buffer.from(source);\n    }\n    if (!_Buffer.isBuffer(source)) {\n      throw new TypeError('Expected Buffer');\n    }\n    if (source.length === 0) {\n      return '';\n    }\n    // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    // Allocate enough space in big-endian base58 representation.\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size);\n    // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n      // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      pbegin++;\n    }\n    // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n    if (source.length === 0) {\n      return _Buffer.alloc(0);\n    }\n    var psz = 0;\n    // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    // Allocate enough space in big-endian base256 representation.\n    var size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n    // Process the characters.\n    while (source[psz]) {\n      // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n      // Invalid character\n      if (carry === 255) {\n        return;\n      }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      psz++;\n    }\n    // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4));\n    vch.fill(0x00, 0, zeroes);\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error('Non-base' + BASE + ' character');\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\nmodule.exports = base;","map":{"version":3,"names":["_Buffer","require","Buffer","base","ALPHABET","length","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","encode","source","Array","isArray","from","isBuffer","zeroes","pbegin","pend","size","b58","carry","it1","Error","it2","str","repeat","decodeUnsafe","alloc","psz","b256","it3","it4","vch","allocUnsafe","fill","decode","string","buffer","module","exports"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/base-x/src/index.js"],"sourcesContent":["'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}