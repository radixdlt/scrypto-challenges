{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LanguageT = exports.StrengthT = void 0;\nvar StrengthT;\n(function (StrengthT) {\n  /// Entropy of 128 bits\n  StrengthT[StrengthT[\"WORD_COUNT_12\"] = 128] = \"WORD_COUNT_12\";\n  /// Entropy of 160 bits\n  StrengthT[StrengthT[\"WORD_COUNT_15\"] = 160] = \"WORD_COUNT_15\";\n  /// Entropy of 192 bits\n  StrengthT[StrengthT[\"WORD_COUNT_18\"] = 192] = \"WORD_COUNT_18\";\n  /// Entropy of 224 bits\n  StrengthT[StrengthT[\"WORD_COUNT_21\"] = 224] = \"WORD_COUNT_21\";\n  /// Entropy of 256 bits\n  StrengthT[StrengthT[\"WORD_COUNT_24\"] = 256] = \"WORD_COUNT_24\";\n})(StrengthT = exports.StrengthT || (exports.StrengthT = {}));\nvar LanguageT;\n(function (LanguageT) {\n  LanguageT[LanguageT[\"CZECH\"] = 0] = \"CZECH\";\n  LanguageT[LanguageT[\"CHINESE_SIMPLIFIED\"] = 1] = \"CHINESE_SIMPLIFIED\";\n  LanguageT[LanguageT[\"CHINESE_TRADITIONAL\"] = 2] = \"CHINESE_TRADITIONAL\";\n  LanguageT[LanguageT[\"KOREAN\"] = 3] = \"KOREAN\";\n  LanguageT[LanguageT[\"FRENCH\"] = 4] = \"FRENCH\";\n  LanguageT[LanguageT[\"ITALIAN\"] = 5] = \"ITALIAN\";\n  LanguageT[LanguageT[\"SPANISH\"] = 6] = \"SPANISH\";\n  LanguageT[LanguageT[\"JAPANESE\"] = 7] = \"JAPANESE\";\n  LanguageT[LanguageT[\"PORTUGUESE\"] = 8] = \"PORTUGUESE\";\n  LanguageT[LanguageT[\"ENGLISH\"] = 9] = \"ENGLISH\";\n})(LanguageT = exports.LanguageT || (exports.LanguageT = {}));","map":{"version":3,"names":["StrengthT","exports","LanguageT"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/crypto/src/elliptic-curve/hd/bip39/_types.ts"],"sourcesContent":["import { BIP32T } from '../bip32'\nimport { PrivateKeyT, PublicKeyT } from '../../_types'\n\nexport type HDNodeT = Readonly<{\n\tpublicKey: PublicKeyT\n\tprivateKey: PrivateKeyT\n\tchainCode: Buffer\n\tderive: (path: BIP32T) => HDNodeT\n\ttoJSON: () => Readonly<{\n\t\t// privateExtendedKey\n\t\txpriv: string\n\t\t// publicExtendedKey\n\t\txpub: string\n\t}>\n}>\n\nexport type HDMasterSeedT = Readonly<{\n\tseed: Buffer\n\tmasterNode: () => HDNodeT\n}>\n\nexport enum StrengthT {\n\t/// Entropy of 128 bits\n\tWORD_COUNT_12 = 128,\n\t/// Entropy of 160 bits\n\tWORD_COUNT_15 = 160,\n\t/// Entropy of 192 bits\n\tWORD_COUNT_18 = 192,\n\t/// Entropy of 224 bits\n\tWORD_COUNT_21 = 224,\n\t/// Entropy of 256 bits\n\tWORD_COUNT_24 = 256,\n}\n\nexport enum LanguageT {\n\tCZECH,\n\tCHINESE_SIMPLIFIED,\n\tCHINESE_TRADITIONAL,\n\tKOREAN,\n\tFRENCH,\n\tITALIAN,\n\tSPANISH,\n\tJAPANESE,\n\tPORTUGUESE,\n\tENGLISH,\n}\n\nexport type MnemonicProps = Readonly<{\n\tstrength: StrengthT\n\tentropy: Buffer\n\twords: string[]\n\tphrase: string\n\tlanguage: LanguageT\n}>\n\nexport type MnemomicT = MnemonicProps &\n\tReadonly<{\n\t\ttoString: () => string\n\t\tequals: (other: MnemomicT) => boolean\n\t}>\n"],"mappings":";;;;;;AAqBA,IAAYA,SAWX;AAXD,WAAYA,SAAS;EACpB;EACAA,SAAA,CAAAA,SAAA,0CAAmB;EACnB;EACAA,SAAA,CAAAA,SAAA,0CAAmB;EACnB;EACAA,SAAA,CAAAA,SAAA,0CAAmB;EACnB;EACAA,SAAA,CAAAA,SAAA,0CAAmB;EACnB;EACAA,SAAA,CAAAA,SAAA,0CAAmB;AACpB,CAAC,EAXWA,SAAS,GAATC,OAAA,CAAAD,SAAS,KAATC,OAAA,CAAAD,SAAS;AAarB,IAAYE,SAWX;AAXD,WAAYA,SAAS;EACpBA,SAAA,CAAAA,SAAA,wBAAK;EACLA,SAAA,CAAAA,SAAA,kDAAkB;EAClBA,SAAA,CAAAA,SAAA,oDAAmB;EACnBA,SAAA,CAAAA,SAAA,0BAAM;EACNA,SAAA,CAAAA,SAAA,0BAAM;EACNA,SAAA,CAAAA,SAAA,4BAAO;EACPA,SAAA,CAAAA,SAAA,4BAAO;EACPA,SAAA,CAAAA,SAAA,8BAAQ;EACRA,SAAA,CAAAA,SAAA,kCAAU;EACVA,SAAA,CAAAA,SAAA,4BAAO;AACR,CAAC,EAXWA,SAAS,GAATD,OAAA,CAAAC,SAAS,KAATD,OAAA,CAAAC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}