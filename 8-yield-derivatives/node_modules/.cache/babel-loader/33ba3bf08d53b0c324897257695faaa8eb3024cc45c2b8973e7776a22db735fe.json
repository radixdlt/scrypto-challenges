{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function takeWhile(predicate, inclusive) {\n  if (inclusive === void 0) {\n    inclusive = false;\n  }\n  return function (source) {\n    return source.lift(new TakeWhileOperator(predicate, inclusive));\n  };\n}\nvar TakeWhileOperator = /*@__PURE__*/function () {\n  function TakeWhileOperator(predicate, inclusive) {\n    this.predicate = predicate;\n    this.inclusive = inclusive;\n  }\n  TakeWhileOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\n  };\n  return TakeWhileOperator;\n}();\nvar TakeWhileSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(TakeWhileSubscriber, _super);\n  function TakeWhileSubscriber(destination, predicate, inclusive) {\n    var _this = _super.call(this, destination) || this;\n    _this.predicate = predicate;\n    _this.inclusive = inclusive;\n    _this.index = 0;\n    return _this;\n  }\n  TakeWhileSubscriber.prototype._next = function (value) {\n    var destination = this.destination;\n    var result;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  };\n  TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n    var destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      if (this.inclusive) {\n        destination.next(value);\n      }\n      destination.complete();\n    }\n  };\n  return TakeWhileSubscriber;\n}(Subscriber);","map":{"version":3,"names":["tslib_1","Subscriber","takeWhile","predicate","inclusive","source","lift","TakeWhileOperator","prototype","call","subscriber","subscribe","TakeWhileSubscriber","_super","__extends","destination","_this","index","_next","value","result","err","error","nextOrComplete","predicateResult","next","complete"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/takeWhile.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\nexport function takeWhile<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\nexport function takeWhile<T, S extends T>(predicate: (value: T, index: number) => value is S, inclusive: false): OperatorFunction<T, S>;\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean, inclusive?: boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * ![](takeWhile.png)\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * ## Example\n * Emit click events only while the clientX property is greater than 200\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { takeWhile } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(takeWhile(ev => ev.clientX > 200));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @param {boolean} inclusive When set to `true` the value that caused\n * `predicate` to return `false` will also be emitted.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(\n    predicate: (value: T, index: number) => boolean,\n    inclusive = false): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) =>\n             source.lift(new TakeWhileOperator(predicate, inclusive));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(\n      private predicate: (value: T, index: number) => boolean,\n      private inclusive: boolean) {}\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n        new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(\n      destination: Subscriber<T>,\n      private predicate: (value: T, index: number) => boolean,\n      private inclusive: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      if (this.inclusive) {\n        destination.next(value);\n      }\n      destination.complete();\n    }\n  }\n}\n"],"mappings":";AAEA,OAAO,KAAEA,OAAU,MAAE,OAAM;AAmD3B,SAAMC,UAAU,QACZ,eACA;OAAA,SAAAC,UAAAC,SAAA,EAAAC,SAAA;EACF,IAAAA,SAAO,KAAC,KAAqB;IAClBA,SAAA,QAAO;EAAP;EACZ,iBAAAC,MAAA;IAED,OAAAA,MAAA,CAAAC,IAAA,KAAAC,iBAAA,CAAAJ,SAAA,EAAAC,SAAA;EACE;;qBAEY,GAAS,aAAS;EAAG,SAACG,kBAAAJ,SAAA,EAAAC,SAAA;IAElC,KAAAD,SAAA,GAAAA,SAAA;IACE,KAAAC,SAAc,GAAAA,SACV;EACN;EACFG,iBAAA,CAAAC,SAAC,CAAAC,IAAA,aAAAC,UAAA,EAAAL,MAAA;IAAA,OAAAA,MAAA,CAAAM,SAAA,KAAAC,mBAAA,CAAAF,UAAA,OAAAP,SAAA,OAAAC,SAAA;EAOD;EAAqC,OAAAG,iBAAA;GAGnC;uBAIE,gBAAM,UAAYM,MAAA,EACnB;SAHW,CAAAC,SAAA,CAAAF,mBAA+C,EAAAC,MAAA;WAC/CD,oBAAAG,WAAkB,EAAAZ,SAAA,EAAAC,SAAA;IALtB,IAAAY,KAAA,GAAKH,MAAa,CAAAJ,IAAA,OAAAM,WAAA;;IAOzBC,KAAA,CAAAZ,SAAA,GAAAA,SAAA;IAESY,KAAA,CAAAC,KAAA;IACR,OAAMD,KAAA;;qBAEF,CAAAR,SAAA,CAAAU,KAAA,aAAAC,KAAA;QACFJ,WAAS,GAAK,KAAAA,WAAe;QAC9BK,MAAA;IAAC;MACAA,MAAA,OAAY,CAAAjB,SAAW,CAAAgB,KAAA,OAAAF,KAAA;aAExBI,GAAA;MACGN,WAAC,CAAAO,KAAe,CAAAD,GAAK;MAC1B;IAEO;IACN,IAAM,CAAAE,cAAc,CAAAJ,KAAK,EAAAC,MAAA,CAAW;;qBAEvB,CAACZ,SAAK,CAAKe,cAAE,aAAAJ,KAAA,EAAAK,eAAA;QACzBT,WAAA,QAAAA,WAAA;eAAM,CAAAS,eAAA;MACLT,WAAS,CAAAU,IAAA,CAAAN,KAAW;WAEnB;MACD,SAAAf,SAAY,EAAQ;QACrBW,WAAA,CAAAU,IAAA,CAAAN,KAAA;MACF;MACHJ,WAAA,CAAAW,QAAC;IAjCoC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}