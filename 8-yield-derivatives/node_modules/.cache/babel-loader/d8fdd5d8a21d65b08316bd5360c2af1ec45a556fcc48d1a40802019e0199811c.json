{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Keystore = void 0;\nconst neverthrow_1 = require(\"neverthrow\");\nconst symmetric_encryption_1 = require(\"../symmetric-encryption\");\nconst util_1 = require(\"@radixdlt/util\");\nconst key_derivation_functions_1 = require(\"../key-derivation-functions\");\nconst hash_1 = require(\"../hash\");\nconst validatePassword = password => (0, neverthrow_1.ok)(password); // no validation for now...\nconst encryptSecret = input => {\n  var _a, _b, _c, _d;\n  const secureRandom = (_a = input.secureRandom) !== null && _a !== void 0 ? _a : util_1.secureRandomGenerator;\n  const kdf = (_b = input.kdf) !== null && _b !== void 0 ? _b : 'scrypt';\n  const params = (_c = input.kdfParams) !== null && _c !== void 0 ? _c : key_derivation_functions_1.ScryptParams.create({\n    secureRandom\n  });\n  const memo = (_d = input.memo) !== null && _d !== void 0 ? _d : Date.now().toLocaleString();\n  return validatePassword(input.password).map(p => ({\n    kdf,\n    params,\n    password: Buffer.from(p)\n  })).asyncAndThen(inp => key_derivation_functions_1.Scrypt.deriveKey(inp)).map(derivedKey => ({\n    plaintext: input.secret,\n    symmetricKey: derivedKey\n  })).andThen(inp => symmetric_encryption_1.AES_GCM.seal(inp)).map(sealedBox => {\n    const cipherText = sealedBox.ciphertext;\n    const mac = sealedBox.authTag;\n    const id = (0, hash_1.sha256)(cipherText).toString('hex').slice(-16);\n    util_1.log.debug(`Created Keystore with id='${id}' and memo='${memo}' (non of these are sensisitve).`);\n    return {\n      memo,\n      crypto: {\n        cipher: symmetric_encryption_1.AES_GCM.algorithm,\n        cipherparams: {\n          nonce: sealedBox.nonce.toString('hex')\n        },\n        ciphertext: cipherText.toString('hex'),\n        kdf,\n        kdfparams: params,\n        mac: mac.toString('hex')\n      },\n      id,\n      version: 1\n    };\n  });\n};\nconst decrypt = input => {\n  const {\n    keystore,\n    password\n  } = input;\n  const kdf = keystore.crypto.kdf;\n  const encryptedPrivateKey = Buffer.from(keystore.crypto.ciphertext, 'hex');\n  const params = keystore.crypto.kdfparams;\n  return symmetric_encryption_1.AES_GCM_SealedBox.create({\n    nonce: Buffer.from(keystore.crypto.cipherparams.nonce, 'hex'),\n    authTag: Buffer.from(keystore.crypto.mac, 'hex'),\n    ciphertext: encryptedPrivateKey\n  }).asyncAndThen(aesSealBox => {\n    const aesOpenInput = Object.assign({}, aesSealBox);\n    return validatePassword(password).map(p => ({\n      kdf,\n      params,\n      password: Buffer.from(p)\n    })).asyncAndThen(inp => key_derivation_functions_1.Scrypt.deriveKey(inp)).map(derivedKey => {\n      util_1.log.info(`[Decrypting Keystore] successfully derived key using KDF ('${keystore.crypto.kdf}')`);\n      return Object.assign(Object.assign({}, aesOpenInput), {\n        symmetricKey: derivedKey\n      });\n    }).andThen(inp => symmetric_encryption_1.AES_GCM.open(inp).mapErr(e => {\n      const underlyingError = (0, util_1.msgFromError)(e);\n      const errMsg = `Failed to decrypt keystore, wrong password? Underlying error: '${underlyingError}'.`;\n      console.error(errMsg);\n      return new Error(errMsg);\n    })).map(decrypted => {\n      util_1.log.debug(`Successfully decrypted Keystore with id='${keystore.id}'`);\n      return decrypted;\n    });\n  });\n};\nconst fromBuffer = keystoreBuffer => {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call\n    const keystore = JSON.parse(keystoreBuffer.toString());\n    if (isKeystore(keystore)) return (0, neverthrow_1.ok)(keystore);\n    const errMsg = 'Parse object, but is not a keystore';\n    util_1.log.error(errMsg);\n    return (0, neverthrow_1.err)(new Error(errMsg));\n  } catch (e) {\n    const underlying = (0, util_1.msgFromError)(e);\n    const errMsg = `Failed to parse keystore from JSON data, underlying error: ${underlying}`;\n    util_1.log.error(errMsg);\n    return (0, neverthrow_1.err)(new Error(errMsg));\n  }\n};\nconst isScryptParams = something => {\n  const inspection = something;\n  return inspection.blockSize !== undefined && inspection.costParameterC !== undefined && inspection.costParameterN !== undefined && inspection.lengthOfDerivedKey !== undefined && inspection.parallelizationParameter !== undefined && inspection.salt !== undefined;\n};\nconst isKeystoreCrypto = something => {\n  const inspection = something;\n  return inspection.cipher !== undefined && inspection.cipherparams !== undefined && inspection.ciphertext !== undefined && inspection.kdf !== undefined && inspection.kdfparams !== undefined && isScryptParams(inspection.kdfparams);\n};\nconst isKeystore = something => {\n  const inspection = something;\n  return inspection.crypto !== undefined && isKeystoreCrypto(inspection.crypto) && inspection.id !== undefined && inspection.version !== undefined;\n};\nexports.Keystore = {\n  fromBuffer,\n  decrypt,\n  validatePassword,\n  encryptSecret\n};","map":{"version":3,"names":["neverthrow_1","require","symmetric_encryption_1","util_1","key_derivation_functions_1","hash_1","validatePassword","password","ok","encryptSecret","input","secureRandom","_a","secureRandomGenerator","kdf","_b","params","_c","kdfParams","ScryptParams","create","memo","_d","Date","now","toLocaleString","map","p","Buffer","from","asyncAndThen","inp","Scrypt","deriveKey","derivedKey","plaintext","secret","symmetricKey","andThen","AES_GCM","seal","sealedBox","cipherText","ciphertext","mac","authTag","id","sha256","toString","slice","log","debug","crypto","cipher","algorithm","cipherparams","nonce","kdfparams","version","decrypt","keystore","encryptedPrivateKey","AES_GCM_SealedBox","aesSealBox","aesOpenInput","Object","assign","info","open","mapErr","e","underlyingError","msgFromError","errMsg","console","error","Error","decrypted","fromBuffer","keystoreBuffer","JSON","parse","isKeystore","err","underlying","isScryptParams","something","inspection","blockSize","undefined","costParameterC","costParameterN","lengthOfDerivedKey","parallelizationParameter","salt","isKeystoreCrypto","exports","Keystore"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/crypto/src/keystore/keystore.ts"],"sourcesContent":["import { err, ResultAsync, ok, Result } from 'neverthrow'\nimport { KeystoreCryptoT, KeystoreT } from './_types'\nimport {\n\tAES_GCM,\n\tAES_GCM_SealedBox,\n\tAES_GCM_OPEN_Input,\n\tAES_GCM_SealedBoxT,\n} from '../symmetric-encryption'\nimport {\n\tSecureRandom,\n\tsecureRandomGenerator,\n\tlog,\n\tmsgFromError,\n} from '@radixdlt/util'\nimport {\n\tScrypt,\n\tScryptParams,\n\tScryptParamsT,\n} from '../key-derivation-functions'\nimport { sha256 } from '../hash'\n\nconst validatePassword = (password: string): Result<string, Error> =>\n\tok(password) // no validation for now...\n\nconst encryptSecret = (\n\tinput: Readonly<{\n\t\tsecret: Buffer\n\t\tpassword: string\n\t\tmemo?: string // e.g. 'Business wallet' or 'My husbands wallet' etc.\n\t\tkdf?: string\n\t\tkdfParams?: ScryptParamsT\n\t\tsecureRandom?: SecureRandom\n\t}>,\n): ResultAsync<KeystoreT, Error> => {\n\tconst secureRandom = input.secureRandom ?? secureRandomGenerator\n\n\tconst kdf = input.kdf ?? 'scrypt'\n\tconst params = input.kdfParams ?? ScryptParams.create({ secureRandom })\n\tconst memo = input.memo ?? Date.now().toLocaleString()\n\n\treturn validatePassword(input.password)\n\t\t.map(p => ({ kdf, params, password: Buffer.from(p) }))\n\t\t.asyncAndThen(inp => Scrypt.deriveKey(inp))\n\t\t.map(derivedKey => ({\n\t\t\tplaintext: input.secret,\n\t\t\tsymmetricKey: derivedKey,\n\t\t}))\n\t\t.andThen(inp => AES_GCM.seal(inp))\n\t\t.map(sealedBox => {\n\t\t\tconst cipherText = sealedBox.ciphertext\n\t\t\tconst mac = sealedBox.authTag\n\n\t\t\tconst id = sha256(cipherText).toString('hex').slice(-16)\n\n\t\t\tlog.debug(\n\t\t\t\t`Created Keystore with id='${id}' and memo='${memo}' (non of these are sensisitve).`,\n\t\t\t)\n\t\t\treturn {\n\t\t\t\tmemo,\n\t\t\t\tcrypto: {\n\t\t\t\t\tcipher: AES_GCM.algorithm,\n\t\t\t\t\tcipherparams: {\n\t\t\t\t\t\tnonce: sealedBox.nonce.toString('hex'),\n\t\t\t\t\t},\n\t\t\t\t\tciphertext: cipherText.toString('hex'),\n\t\t\t\t\tkdf,\n\t\t\t\t\tkdfparams: params,\n\t\t\t\t\tmac: mac.toString('hex'),\n\t\t\t\t},\n\t\t\t\tid,\n\t\t\t\tversion: 1,\n\t\t\t}\n\t\t})\n}\n\nconst decrypt = (\n\tinput: Readonly<{\n\t\tkeystore: KeystoreT\n\t\tpassword: string\n\t}>,\n): ResultAsync<Buffer, Error> => {\n\tconst { keystore, password } = input\n\tconst kdf = keystore.crypto.kdf\n\tconst encryptedPrivateKey = Buffer.from(keystore.crypto.ciphertext, 'hex')\n\tconst params = keystore.crypto.kdfparams\n\n\treturn AES_GCM_SealedBox.create({\n\t\tnonce: Buffer.from(keystore.crypto.cipherparams.nonce, 'hex'),\n\t\tauthTag: Buffer.from(keystore.crypto.mac, 'hex'),\n\t\tciphertext: encryptedPrivateKey,\n\t}).asyncAndThen((aesSealBox: AES_GCM_SealedBoxT) => {\n\t\tconst aesOpenInput: Omit<AES_GCM_OPEN_Input, 'symmetricKey'> = {\n\t\t\t...aesSealBox,\n\t\t}\n\n\t\treturn validatePassword(password)\n\t\t\t.map((p: string) => ({ kdf, params, password: Buffer.from(p) }))\n\t\t\t.asyncAndThen(inp => Scrypt.deriveKey(inp))\n\t\t\t.map(\n\t\t\t\t(derivedKey: Buffer): AES_GCM_OPEN_Input => {\n\t\t\t\t\tlog.info(\n\t\t\t\t\t\t`[Decrypting Keystore] successfully derived key using KDF ('${keystore.crypto.kdf}')`,\n\t\t\t\t\t)\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...aesOpenInput,\n\t\t\t\t\t\tsymmetricKey: derivedKey,\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t)\n\t\t\t.andThen(\n\t\t\t\t(inp): Result<Buffer, Error> =>\n\t\t\t\t\tAES_GCM.open(inp).mapErr(e => {\n\t\t\t\t\t\tconst underlyingError = msgFromError(e)\n\t\t\t\t\t\tconst errMsg = `Failed to decrypt keystore, wrong password? Underlying error: '${underlyingError}'.`\n\t\t\t\t\t\tconsole.error(errMsg)\n\t\t\t\t\t\treturn new Error(errMsg)\n\t\t\t\t\t}),\n\t\t\t)\n\t\t\t.map(decrypted => {\n\t\t\t\tlog.debug(\n\t\t\t\t\t`Successfully decrypted Keystore with id='${keystore.id}'`,\n\t\t\t\t)\n\t\t\t\treturn decrypted\n\t\t\t})\n\t})\n}\n\nconst fromBuffer = (keystoreBuffer: Buffer): Result<KeystoreT, Error> => {\n\ttry {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call\n\t\tconst keystore = JSON.parse(keystoreBuffer.toString())\n\t\tif (isKeystore(keystore)) return ok(keystore)\n\t\tconst errMsg = 'Parse object, but is not a keystore'\n\t\tlog.error(errMsg)\n\t\treturn err(new Error(errMsg))\n\t} catch (e: unknown) {\n\t\tconst underlying = msgFromError(e)\n\t\tconst errMsg = `Failed to parse keystore from JSON data, underlying error: ${underlying}`\n\t\tlog.error(errMsg)\n\t\treturn err(new Error(errMsg))\n\t}\n}\n\nconst isScryptParams = (something: unknown): something is ScryptParamsT => {\n\tconst inspection = something as ScryptParamsT\n\treturn (\n\t\tinspection.blockSize !== undefined &&\n\t\tinspection.costParameterC !== undefined &&\n\t\tinspection.costParameterN !== undefined &&\n\t\tinspection.lengthOfDerivedKey !== undefined &&\n\t\tinspection.parallelizationParameter !== undefined &&\n\t\tinspection.salt !== undefined\n\t)\n}\n\nconst isKeystoreCrypto = (something: unknown): something is KeystoreCryptoT => {\n\tconst inspection = something as KeystoreCryptoT\n\treturn (\n\t\tinspection.cipher !== undefined &&\n\t\tinspection.cipherparams !== undefined &&\n\t\tinspection.ciphertext !== undefined &&\n\t\tinspection.kdf !== undefined &&\n\t\tinspection.kdfparams !== undefined &&\n\t\tisScryptParams(inspection.kdfparams)\n\t)\n}\n\nconst isKeystore = (something: unknown): something is KeystoreT => {\n\tconst inspection = something as KeystoreT\n\treturn (\n\t\tinspection.crypto !== undefined &&\n\t\tisKeystoreCrypto(inspection.crypto) &&\n\t\tinspection.id !== undefined &&\n\t\tinspection.version !== undefined\n\t)\n}\n\nexport const Keystore = {\n\tfromBuffer,\n\tdecrypt,\n\tvalidatePassword,\n\tencryptSecret,\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}