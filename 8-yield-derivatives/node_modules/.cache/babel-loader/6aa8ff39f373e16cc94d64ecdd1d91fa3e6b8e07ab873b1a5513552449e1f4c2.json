{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function pairwise() {\n  return function (source) {\n    return source.lift(new PairwiseOperator());\n  };\n}\nvar PairwiseOperator = /*@__PURE__*/function () {\n  function PairwiseOperator() {}\n  PairwiseOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  };\n  return PairwiseOperator;\n}();\nvar PairwiseSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(PairwiseSubscriber, _super);\n  function PairwiseSubscriber(destination) {\n    var _this = _super.call(this, destination) || this;\n    _this.hasPrev = false;\n    return _this;\n  }\n  PairwiseSubscriber.prototype._next = function (value) {\n    var pair;\n    if (this.hasPrev) {\n      pair = [this.prev, value];\n    } else {\n      this.hasPrev = true;\n    }\n    this.prev = value;\n    if (pair) {\n      this.destination.next(pair);\n    }\n  };\n  return PairwiseSubscriber;\n}(Subscriber);","map":{"version":3,"names":["tslib_1","Subscriber","pairwise","source","lift","PairwiseOperator","prototype","call","subscriber","subscribe","PairwiseSubscriber","_super","__extends","destination","_this","_next","value","pair","hasPrev","prev","next"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/pairwise.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * ![](pairwise.png)\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * ## Example\n * On every click (starting from the second), emit the relative distance to the previous click\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { pairwise, map } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const pairs = clicks.pipe(pairwise());\n * const distance = pairs.pipe(\n *   map(pair => {\n *     const x0 = pair[0].clientX;\n *     const y0 = pair[0].clientY;\n *     const x1 = pair[1].clientX;\n *     const y1 = pair[1].clientY;\n *     return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n *   }),\n * );\n * distance.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    let pair: [T, T] | undefined;\n\n    if (this.hasPrev) {\n      pair = [this.prev, value];\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n\n    if (pair) {\n      this.destination.next(pair);\n    }\n  }\n}\n"],"mappings":";AAEA,OAAO,KAAEA,OAAU,MAAE,OAAM;AA8C3B,SAAMC,UAAU,QAAQ;OACtB,SAAOC,QAACA,CAAA,EAAqB;EAC9B,iBAAAC,MAAA;IAAA,OAAAA,MAAA,CAAAC,IAAA,KAAAC,gBAAA;EAAA;AAED;IAAAA,gBAAA;EAIA,SAACA,iBAAA,GAHC;kBACS,CAAMC,SAAC,CAASC,IAAC,GAAI,UAAAC,UAAmB,EAAAL,MAAW,EAAE;IAC7D,OAAAA,MAAA,CAAAM,SAAA,KAAAC,kBAAA,CAAAF,UAAA;EACH;EAJA,OAICH,gBAAA;AAOD;IAAoCK,kBAAA,0BAAaC,MAAA;EAI/CX,OAAA,CAAAY,SAAA,CAAAF,kBAAY,EAAAC,MAA+B;WAA3CD,kBACEA,CAAAG,WAAM;IAHA,IAAAC,KAAA,GAAAH,MAAmB,CAAAJ,IAAM,OAAAM,WAAA;;IAIhC,OAAAC,KAAA;EAED;oBAC+B,CAAAR,SAAA,CAAAS,KAAA,aAAAC,KAAA;IAE7B,IAAIC,IAAI;QACN,IAAI,CAAAC,OAAQ,EAAC;MACdD,IAAA,SAAAE,IAAA,EAAAH,KAAA;WACC;MACD,KAAAE,OAAA;IAED;IAEA,IAAI,CAAAC,IAAI,GAAEH,KAAA;QACRC,IAAI,EAAC;MACN,KAAAJ,WAAA,CAAAO,IAAA,CAAAH,IAAA;IACF;EACH;EAvBoC,OAAAP,kBAuBnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}