{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar rxjs_1 = require(\"rxjs\");\nvar internal_compatibility_1 = require(\"rxjs/internal-compatibility\");\nvar operators_1 = require(\"rxjs/operators\");\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=asyncScheduler] The {@link SchedulerLike} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nfunction throttleTime(duration, scheduler, config) {\n  if (scheduler === void 0) {\n    scheduler = rxjs_1.asyncScheduler;\n  }\n  if (config === void 0) {\n    config = internal_compatibility_1.defaultThrottleConfig;\n  }\n  return operators_1.throttleTime(duration, scheduler, config)(this);\n}\nexports.throttleTime = throttleTime;","map":{"version":3,"names":["rxjs_1","require","internal_compatibility_1","operators_1","throttleTime","duration","scheduler","config","asyncScheduler","defaultThrottleConfig","exports"],"sources":["../src/compat/operator/throttleTime.ts"],"sourcesContent":[null],"mappings":";;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,wBAAA,GAAAD,OAAA;AACA,IAAAE,WAAA,GAAAF,OAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,SAAgBG,YAAYA,CACIC,QAAgB,EAChBC,SAAyC,EACzCC,MAA8C;EAD9C,IAAAD,SAAA;IAAAA,SAAA,GAA2BN,MAAA,CAAAQ,cAAc;EAAA;EACzC,IAAAD,MAAA;IAAAA,MAAA,GAAyBL,wBAAA,CAAAO,qBAAqB;EAAA;EAC5E,OAAON,WAAA,CAAAC,YAAW,CAACC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,CAAC,CAAC,IAAI,CAAkB;AACxE;AALAG,OAAA,CAAAN,YAAA,GAAAA,YAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}