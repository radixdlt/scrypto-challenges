{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar operators_1 = require(\"rxjs/operators\");\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n  return operators_1.repeatWhen(notifier)(this);\n}\nexports.repeatWhen = repeatWhen;","map":{"version":3,"names":["operators_1","require","repeatWhen","notifier","exports"],"sources":["../src/compat/operator/repeatWhen.ts"],"sourcesContent":[null],"mappings":";;;;;AACA,IAAAA,WAAA,GAAAC,OAAA;AAEA;;;;;;;;;;;;;;AAcA,SAAgBC,UAAUA,CAAyBC,QAA6D;EAC9G,OAAOH,WAAA,CAAAE,UAAW,CAACC,QAAQ,CAAC,CAAC,IAAI,CAAkB;AACrD;AAFAC,OAAA,CAAAF,UAAA,GAAAA,UAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}