{"ast":null,"code":"var _jsxFileName = \"/Users/mdabdurrazzak/RadInsu/src/Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { DataRequestBuilder, RadixDappToolkit, RadixNetwork } from '@radixdlt/radix-dapp-toolkit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const [accountAddress, setAccountAddress] = useState('');\n  const [walletConnected, setWalletConnected] = useState(false);\n  const subscriptionRef = useRef(null);\n  const rdt = useRef(null);\n  useEffect(() => {\n    console.log('Effect hook triggered');\n\n    // Define your dApp definition address\n    const dAppDefinitionAddress = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz';\n\n    // Create a dapp configuration object for the Radix Dapp Toolkit\n    const dappConfig = {\n      networkId: RadixNetwork.Stokenet,\n      applicationVersion: '1.0.0',\n      applicationName: 'Infinix',\n      applicationDappDefinitionAddress: dAppDefinitionAddress,\n      dAppDefinitionAddress // This field will be updated and removed soon\n    };\n\n    // Instantiate DappToolkit to connect to the Radix wallet and network\n    rdt.current = RadixDappToolkit(dappConfig);\n\n    // Connect a user account when wallet is connected\n    rdt.current.walletApi.setRequestData(DataRequestBuilder.accounts().exactly(1));\n\n    // Subscribe to updates to the user's shared wallet data\n    subscriptionRef.current = rdt.current.walletApi.walletData$.subscribe(walletData => {\n      console.log('Received wallet data:', walletData);\n      if (walletData && walletData.accounts && walletData.accounts.length > 0) {\n        setAccountAddress(walletData.accounts[0].address);\n        setWalletConnected(true);\n      }\n    });\n\n    // Cleanup subscription on unmount\n    return () => {\n      console.log('Cleaning up subscription');\n      if (subscriptionRef.current) {\n        subscriptionRef.current.unsubscribe();\n      }\n    };\n  }, []); // Only run this effect once on component mount\n\n  console.log('Component rendered');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: walletConnected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Wallet Connected Successfully\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Account Address: \", accountAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Connecting to Wallet...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(Profile, \"FXGeUm3XUQiM1etFk4Vz19VP4yg=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useState","useEffect","useRef","DataRequestBuilder","RadixDappToolkit","RadixNetwork","jsxDEV","_jsxDEV","Profile","_s","accountAddress","setAccountAddress","walletConnected","setWalletConnected","subscriptionRef","rdt","console","log","dAppDefinitionAddress","dappConfig","networkId","Stokenet","applicationVersion","applicationName","applicationDappDefinitionAddress","current","walletApi","setRequestData","accounts","exactly","walletData$","subscribe","walletData","length","address","unsubscribe","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mdabdurrazzak/RadInsu/src/Profile.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport {\n  DataRequestBuilder,\n  RadixDappToolkit,\n  RadixNetwork,\n} from '@radixdlt/radix-dapp-toolkit';\n\nconst Profile = () => {\n  const [accountAddress, setAccountAddress] = useState('');\n  const [walletConnected, setWalletConnected] = useState(false);\n  const subscriptionRef = useRef(null);\n  const rdt = useRef(null);\n\n  useEffect(() => {\n    console.log('Effect hook triggered');\n\n    // Define your dApp definition address\n    const dAppDefinitionAddress = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz';\n\n    // Create a dapp configuration object for the Radix Dapp Toolkit\n    const dappConfig = {\n      networkId: RadixNetwork.Stokenet,\n      applicationVersion: '1.0.0',\n      applicationName: 'Infinix',\n      applicationDappDefinitionAddress: dAppDefinitionAddress,\n      dAppDefinitionAddress, // This field will be updated and removed soon\n    };\n\n    // Instantiate DappToolkit to connect to the Radix wallet and network\n    rdt.current = RadixDappToolkit(dappConfig);\n\n    // Connect a user account when wallet is connected\n    rdt.current.walletApi.setRequestData(DataRequestBuilder.accounts().exactly(1));\n\n    // Subscribe to updates to the user's shared wallet data\n    subscriptionRef.current = rdt.current.walletApi.walletData$.subscribe((walletData) => {\n      console.log('Received wallet data:', walletData);\n      if (walletData && walletData.accounts && walletData.accounts.length > 0) {\n        setAccountAddress(walletData.accounts[0].address);\n        setWalletConnected(true);\n      }\n    });\n\n    // Cleanup subscription on unmount\n    return () => {\n      console.log('Cleaning up subscription');\n      if (subscriptionRef.current) {\n        subscriptionRef.current.unsubscribe();\n      }\n    };\n  }, []); // Only run this effect once on component mount\n\n  console.log('Component rendered');\n\n  return (\n    <div>\n      {walletConnected ? (\n        <div>\n          <p>Wallet Connected Successfully</p>\n          <p>Account Address: {accountAddress}</p>\n          {/* Add additional wallet details here */}\n        </div>\n      ) : (\n        <p>Connecting to Wallet...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Profile;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}