{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function distinctUntilChanged(compare, keySelector) {\n  return function (source) {\n    return source.lift(new DistinctUntilChangedOperator(compare, keySelector));\n  };\n}\nvar DistinctUntilChangedOperator = /*@__PURE__*/function () {\n  function DistinctUntilChangedOperator(compare, keySelector) {\n    this.compare = compare;\n    this.keySelector = keySelector;\n  }\n  DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  };\n  return DistinctUntilChangedOperator;\n}();\nvar DistinctUntilChangedSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(DistinctUntilChangedSubscriber, _super);\n  function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n    var _this = _super.call(this, destination) || this;\n    _this.keySelector = keySelector;\n    _this.hasKey = false;\n    if (typeof compare === 'function') {\n      _this.compare = compare;\n    }\n    return _this;\n  }\n  DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n    return x === y;\n  };\n  DistinctUntilChangedSubscriber.prototype._next = function (value) {\n    var key;\n    try {\n      var keySelector = this.keySelector;\n      key = keySelector ? keySelector(value) : value;\n    } catch (err) {\n      return this.destination.error(err);\n    }\n    var result = false;\n    if (this.hasKey) {\n      try {\n        var compare = this.compare;\n        result = compare(this.key, key);\n      } catch (err) {\n        return this.destination.error(err);\n      }\n    } else {\n      this.hasKey = true;\n    }\n    if (!result) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  };\n  return DistinctUntilChangedSubscriber;\n}(Subscriber);","map":{"version":3,"names":["tslib_1","Subscriber","distinctUntilChanged","compare","keySelector","source","lift","DistinctUntilChangedOperator","prototype","call","subscriber","subscribe","DistinctUntilChangedSubscriber","_super","__extends","destination","_this","hasKey","x","y","_next","value","key","err","error","result","next"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/distinctUntilChanged.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * ## Example\n * A simple example with numbers\n * ```ts\n * import { of } from 'rxjs';\n * import { distinctUntilChanged } from 'rxjs/operators';\n *\n * of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4).pipe(\n *     distinctUntilChanged(),\n *   )\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n * ```\n *\n * An example using a compare function\n * ```typescript\n * import { of } from 'rxjs';\n * import { distinctUntilChanged } from 'rxjs/operators';\n *\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'},\n *   ).pipe(\n *     distinctUntilChanged((p: Person, q: Person) => p.name === q.name),\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n    let key: any;\n    try {\n      const { keySelector } = this;\n      key = keySelector ? keySelector(value) : value;\n    } catch (err) {\n      return this.destination.error(err);\n    }\n    let result = false;\n    if (this.hasKey) {\n      try {\n        const { compare } = this;\n        result = compare(this.key, key);\n      } catch (err) {\n        return this.destination.error(err);\n      }\n    } else {\n      this.hasKey = true;\n    }\n    if (!result) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n"],"mappings":";AACA,OAAO,KAAEA,OAAU,MAAE,OAAM;AA8D3B,SAAMC,UAAU,uBAA2B;OACzC,SAAOC,oBAA2BA,CAAAC,OAAM,EAACC,WAAS;EACnD,iBAAAC,MAAA;IAAA,OAAAA,MAAA,CAAAC,IAAA,KAAAC,4BAAA,CAAAJ,OAAA,EAAAC,WAAA;EAAA;AAED;IACEG,4BAAA,gBAAoD,YACR;WADxBA,4BAAgCA,CAAAJ,OAAA,EAAAC,WAAA;IAChC,KAAAD,OAAA,GAAAA,OAAA;IACnB,KAAAC,WAAA,GAAAA,WAAA;EAED;8BAC0B,CAAAI,SAAI,CAAAC,IAAA,aAAAC,UAA+B,EAAAL,MAAU,EAAE;IACxE,OAAAA,MAAA,CAAAM,SAAA,KAAAC,8BAAA,CAAAF,UAAA,OAAAP,OAAA,OAAAC,WAAA;EACH;EARA,OAQCG,4BAAA;AAOD;IAAmDK,8BAAA,0BAAaC,MAAA;EAI9Db,OAAA,CAAAc,SAAA,CAAAF,8BAAY,EAAAC,MACA;WADZD,8BAGQA,CAAAG,WAAY,EAAAZ,OAInB,EAAAC,WAAA;IALmB,IAAAY,KAAA,GAAAH,MAAW,CAAAJ,IAAX,OAAAM,WAAwB;IAJpCC,KAAA,CAAAZ,WAAkB,GAAKA,WAAC;IAM9BY,KAAI,CAAAC,MAAO,QAAO;QAChB,OAAKd,OAAO,KAAG,UAAQ;MACxBa,KAAA,CAAAb,OAAA,GAAAA,OAAA;;IACF,OAAAa,KAAA;EAEO;gCACS,CAAAR,SAAA,CAAAL,OAAA,aAAAe,CAAA,EAAAC,CAAA;IAChB,OAAAD,CAAA,KAAAC,CAAA;EAES;gCACK,CAAAX,SAAA,CAAAY,KAAA,aAAAC,KAAA;IACb,IAAIC,GAAA;QACM;MACR,IAAGlB,WAAG,GAAY,IAAE,CAAAA,WAAY;MACjCkB,GAAA,GAAAlB,WAAA,GAAAA,WAAA,CAAAiB,KAAA,IAAAA,KAAA;IAAC,E,OACAE,GAAA,EAAO;MACR,YAAAR,WAAA,CAAAS,KAAA,CAAAD,GAAA;IACD;IACA,IAAIE,MAAK,QAAQ;QACf,IAAI,CAAAR,MAAA;UACM;QACR,IAAAd,OAAS,OAAQ,CAAAA,OAAQ;QAC1BsB,MAAA,GAAAtB,OAAA,MAAAmB,GAAA,EAAAA,GAAA;MAAC,E,OACAC,GAAA,EAAO;QACR,YAAAR,WAAA,CAAAS,KAAA,CAAAD,GAAA;MACF;WACC;MACD,KAAAN,MAAA;IACD;QACE,CAAAQ,MAAK,EAAG;MACR,IAAI,CAACH,GAAA,GAAAA,GAAA;MACN,KAAAP,WAAA,CAAAW,IAAA,CAAAL,KAAA;IACF;EACH;EAzCmD,OAAAT,8BAyClD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}