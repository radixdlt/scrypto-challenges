{"ast":null,"code":"var compoundSubject = require('compound-subject');\nvar isEmpty = require('101/is-empty');\nvar isString = require('101/is-string');\nvar isFunction = require('101/is-function');\nvar assertType = require('./assert-type');\nvar isClass = require('./is-class.js');\nvar validate = require('./validate.js');\nvar startsWithVowel = require('./starts-with-vowel.js');\nmodule.exports = multiValidate;\n/**\n * validate an argument against multiple validators\n * @param  {string} key argument name\n * @param  {*} arg  argument value\n * @param  {array} validators array of validators\n */\nfunction multiValidate(key, arg, validators) {\n  var errMessage = '\"' + key + '\" must be ';\n  assertType(!isEmpty(validators), '\"validators\" cannot be empty');\n  var typeArr = validators.map(function (validator) {\n    if (isString(validator)) {\n      return validator;\n    } else if (isClass(validator)) {\n      return '\"' + validator.name + '\"';\n    } else if (isFunction(validator)) {\n      return 'pass \"' + (validator.name || 'anonymous') + '\"';\n    } else {\n      throw new TypeError('\"validators\" must be an array containing only strings, classes, or functions');\n    }\n  });\n  var typeStr = compoundSubject(typeArr).endWith('or').make();\n  var article = startsWithVowel(typeStr) ? 'an' : 'a';\n  errMessage += article + ' ' + typeStr;\n  var passedAnyValidator = validators.some(function (validator) {\n    try {\n      validate(key, arg, validator);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  });\n  if (!passedAnyValidator) {\n    throw new TypeError(errMessage);\n  }\n}","map":{"version":3,"names":["compoundSubject","require","isEmpty","isString","isFunction","assertType","isClass","validate","startsWithVowel","module","exports","multiValidate","key","arg","validators","errMessage","typeArr","map","validator","name","TypeError","typeStr","endWith","make","article","passedAnyValidator","some","e"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/assert-args/lib/multi-validate.js"],"sourcesContent":["var compoundSubject = require('compound-subject')\nvar isEmpty = require('101/is-empty')\nvar isString = require('101/is-string')\nvar isFunction = require('101/is-function')\n\nvar assertType = require('./assert-type')\nvar isClass = require('./is-class.js')\nvar validate = require('./validate.js')\nvar startsWithVowel = require('./starts-with-vowel.js')\n\nmodule.exports = multiValidate\n/**\n * validate an argument against multiple validators\n * @param  {string} key argument name\n * @param  {*} arg  argument value\n * @param  {array} validators array of validators\n */\nfunction multiValidate (key, arg, validators) {\n  var errMessage = '\"' + key + '\" must be '\n  assertType(!isEmpty(validators), '\"validators\" cannot be empty')\n  var typeArr = validators.map(function (validator) {\n    if (isString(validator)) {\n      return validator\n    } else if (isClass(validator)) {\n      return '\"' + validator.name + '\"'\n    } else if (isFunction(validator)) {\n      return 'pass \"' + (validator.name || 'anonymous') + '\"'\n    } else {\n      throw new TypeError('\"validators\" must be an array containing only strings, classes, or functions')\n    }\n  })\n  var typeStr = compoundSubject(typeArr)\n    .endWith('or')\n    .make()\n  var article = startsWithVowel(typeStr) ? 'an' : 'a'\n\n  errMessage += article + ' ' + typeStr\n\n  var passedAnyValidator = validators.some(function (validator) {\n    try {\n      validate(key, arg, validator)\n      return true\n    } catch (e) {\n      return false\n    }\n  })\n\n  if (!passedAnyValidator) {\n    throw new TypeError(errMessage)\n  }\n}\n"],"mappings":"AAAA,IAAIA,eAAe,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACjD,IAAIC,OAAO,GAAGD,OAAO,CAAC,cAAc,CAAC;AACrC,IAAIE,QAAQ,GAAGF,OAAO,CAAC,eAAe,CAAC;AACvC,IAAIG,UAAU,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAE3C,IAAII,UAAU,GAAGJ,OAAO,CAAC,eAAe,CAAC;AACzC,IAAIK,OAAO,GAAGL,OAAO,CAAC,eAAe,CAAC;AACtC,IAAIM,QAAQ,GAAGN,OAAO,CAAC,eAAe,CAAC;AACvC,IAAIO,eAAe,GAAGP,OAAO,CAAC,wBAAwB,CAAC;AAEvDQ,MAAM,CAACC,OAAO,GAAGC,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAaA,CAAEC,GAAG,EAAEC,GAAG,EAAEC,UAAU,EAAE;EAC5C,IAAIC,UAAU,GAAG,GAAG,GAAGH,GAAG,GAAG,YAAY;EACzCP,UAAU,CAAC,CAACH,OAAO,CAACY,UAAU,CAAC,EAAE,8BAA8B,CAAC;EAChE,IAAIE,OAAO,GAAGF,UAAU,CAACG,GAAG,CAAC,UAAUC,SAAS,EAAE;IAChD,IAAIf,QAAQ,CAACe,SAAS,CAAC,EAAE;MACvB,OAAOA,SAAS;IAClB,CAAC,MAAM,IAAIZ,OAAO,CAACY,SAAS,CAAC,EAAE;MAC7B,OAAO,GAAG,GAAGA,SAAS,CAACC,IAAI,GAAG,GAAG;IACnC,CAAC,MAAM,IAAIf,UAAU,CAACc,SAAS,CAAC,EAAE;MAChC,OAAO,QAAQ,IAAIA,SAAS,CAACC,IAAI,IAAI,WAAW,CAAC,GAAG,GAAG;IACzD,CAAC,MAAM;MACL,MAAM,IAAIC,SAAS,CAAC,8EAA8E,CAAC;IACrG;EACF,CAAC,CAAC;EACF,IAAIC,OAAO,GAAGrB,eAAe,CAACgB,OAAO,CAAC,CACnCM,OAAO,CAAC,IAAI,CAAC,CACbC,IAAI,CAAC,CAAC;EACT,IAAIC,OAAO,GAAGhB,eAAe,CAACa,OAAO,CAAC,GAAG,IAAI,GAAG,GAAG;EAEnDN,UAAU,IAAIS,OAAO,GAAG,GAAG,GAAGH,OAAO;EAErC,IAAII,kBAAkB,GAAGX,UAAU,CAACY,IAAI,CAAC,UAAUR,SAAS,EAAE;IAC5D,IAAI;MACFX,QAAQ,CAACK,GAAG,EAAEC,GAAG,EAAEK,SAAS,CAAC;MAC7B,OAAO,IAAI;IACb,CAAC,CAAC,OAAOS,CAAC,EAAE;MACV,OAAO,KAAK;IACd;EACF,CAAC,CAAC;EAEF,IAAI,CAACF,kBAAkB,EAAE;IACvB,MAAM,IAAIL,SAAS,CAACL,UAAU,CAAC;EACjC;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}