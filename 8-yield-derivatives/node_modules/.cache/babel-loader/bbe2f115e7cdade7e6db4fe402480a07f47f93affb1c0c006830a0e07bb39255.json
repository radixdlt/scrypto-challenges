{"ast":null,"code":"/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */\nimport { reduce } from './reduce';\nexport function min(comparer) {\n  var min = typeof comparer === 'function' ? function (x, y) {\n    return comparer(x, y) < 0 ? x : y;\n  } : function (x, y) {\n    return x < y ? x : y;\n  };\n  return reduce(min);\n}","map":{"version":3,"names":["reduce","min","comparer","x","y"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/min.ts"],"sourcesContent":["import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../types';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * ![](min.png)\n *\n * ## Examples\n * Get the minimal value of a series of numbers\n * ```ts\n * import { of } from 'rxjs';\n * import { min } from 'rxjs/operators';\n *\n * of(5, 4, 7, 2, 8).pipe(\n *   min(),\n * )\n * .subscribe(x => console.log(x)); // -> 2\n * ```\n *\n * Use a comparer function to get the minimal item\n * ```typescript\n * import { of } from 'rxjs';\n * import { min } from 'rxjs/operators';\n *\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * of<Person>(\n *   {age: 7, name: 'Foo'},\n *   {age: 5, name: 'Bar'},\n *   {age: 9, name: 'Beer'},\n * ).pipe(\n *   min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1),\n * )\n * .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * ```\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return reduce(min);\n}\n"],"mappings":"AAAA;AA+CA,SAAMA,MAAA,QAAiB,UAAiC;OACtD,SAAgCC,IAAAC,QAAO,EAAQ;MAC7CD,GAAE,UAAEC,QAAQ,eAAU,GACpB,UAACC,CAAC,EAAEC,CAAC;IAAK,OAAAF,QAAQ,CAACC,CAAC,EAAEC,CAAC,IAAC,IAAAD,CAAA,GAAAC,CAAA;EAAA,IAC5B,UAAcD,CAAG,EAAEC,CAAA;IAAA,OAAAD,CAAA,GAAAC,CAAA,GAAAD,CAAA,GAAAC,CAAA;EAAA;EACpB,OAAAJ,MAAA,CAAAC,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}