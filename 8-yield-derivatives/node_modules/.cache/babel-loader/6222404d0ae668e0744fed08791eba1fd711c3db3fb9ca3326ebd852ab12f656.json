{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { map } from '../operators/map';\nimport { Observable } from '../Observable';\nimport { AjaxResponse } from './AjaxResponse';\nimport { AjaxTimeoutError, AjaxError } from './errors';\nfunction ajaxGet(url, headers) {\n  return ajax({\n    method: 'GET',\n    url: url,\n    headers: headers\n  });\n}\nfunction ajaxPost(url, body, headers) {\n  return ajax({\n    method: 'POST',\n    url: url,\n    body: body,\n    headers: headers\n  });\n}\nfunction ajaxDelete(url, headers) {\n  return ajax({\n    method: 'DELETE',\n    url: url,\n    headers: headers\n  });\n}\nfunction ajaxPut(url, body, headers) {\n  return ajax({\n    method: 'PUT',\n    url: url,\n    body: body,\n    headers: headers\n  });\n}\nfunction ajaxPatch(url, body, headers) {\n  return ajax({\n    method: 'PATCH',\n    url: url,\n    body: body,\n    headers: headers\n  });\n}\nvar mapResponse = map(function (x) {\n  return x.response;\n});\nfunction ajaxGetJSON(url, headers) {\n  return mapResponse(ajax({\n    method: 'GET',\n    url: url,\n    headers: headers\n  }));\n}\nexport var ajax = function () {\n  var create = function (urlOrConfig) {\n    var config = typeof urlOrConfig === 'string' ? {\n      url: urlOrConfig\n    } : urlOrConfig;\n    return fromAjax(config);\n  };\n  create.get = ajaxGet;\n  create.post = ajaxPost;\n  create.delete = ajaxDelete;\n  create.put = ajaxPut;\n  create.patch = ajaxPatch;\n  create.getJSON = ajaxGetJSON;\n  return create;\n}();\nvar UPLOAD = 'upload';\nvar DOWNLOAD = 'download';\nvar LOADSTART = 'loadstart';\nvar PROGRESS = 'progress';\nvar LOAD = 'load';\nexport function fromAjax(config) {\n  return new Observable(function (destination) {\n    var _a, _b;\n    var queryParams = config.queryParams,\n      configuredBody = config.body,\n      configuredHeaders = config.headers,\n      remainingConfig = __rest(config, [\"queryParams\", \"body\", \"headers\"]);\n    var url = remainingConfig.url;\n    if (!url) {\n      throw new TypeError('url is required');\n    }\n    if (queryParams) {\n      var searchParams_1;\n      if (url.includes('?')) {\n        var parts = url.split('?');\n        if (2 < parts.length) {\n          throw new TypeError('invalid url');\n        }\n        searchParams_1 = new URLSearchParams(parts[1]);\n        new URLSearchParams(queryParams).forEach(function (value, key) {\n          return searchParams_1.set(key, value);\n        });\n        url = parts[0] + '?' + searchParams_1;\n      } else {\n        searchParams_1 = new URLSearchParams(queryParams);\n        url = url + '?' + searchParams_1;\n      }\n    }\n    var headers = {};\n    if (configuredHeaders) {\n      for (var key in configuredHeaders) {\n        if (configuredHeaders.hasOwnProperty(key)) {\n          headers[key.toLowerCase()] = configuredHeaders[key];\n        }\n      }\n    }\n    if (!config.crossDomain && !('x-requested-with' in headers)) {\n      headers['x-requested-with'] = 'XMLHttpRequest';\n    }\n    var withCredentials = remainingConfig.withCredentials,\n      xsrfCookieName = remainingConfig.xsrfCookieName,\n      xsrfHeaderName = remainingConfig.xsrfHeaderName;\n    if ((withCredentials || !remainingConfig.crossDomain) && xsrfCookieName && xsrfHeaderName) {\n      var xsrfCookie = (_b = (_a = document === null || document === void 0 ? void 0 : document.cookie.match(new RegExp(\"(^|;\\\\s*)(\" + xsrfCookieName + \")=([^;]*)\"))) === null || _a === void 0 ? void 0 : _a.pop()) !== null && _b !== void 0 ? _b : '';\n      if (xsrfCookie) {\n        headers[xsrfHeaderName] = xsrfCookie;\n      }\n    }\n    var body = extractContentTypeAndMaybeSerializeBody(configuredBody, headers);\n    var _request = __assign(__assign({\n      async: true,\n      crossDomain: true,\n      withCredentials: false,\n      method: 'GET',\n      timeout: 0,\n      responseType: 'json'\n    }, remainingConfig), {\n      url: url,\n      headers: headers,\n      body: body\n    });\n    var xhr;\n    xhr = config.createXHR ? config.createXHR() : new XMLHttpRequest();\n    {\n      var progressSubscriber_1 = config.progressSubscriber,\n        _c = config.includeDownloadProgress,\n        includeDownloadProgress = _c === void 0 ? false : _c,\n        _d = config.includeUploadProgress,\n        includeUploadProgress = _d === void 0 ? false : _d;\n      var addErrorEvent = function (type, errorFactory) {\n        xhr.addEventListener(type, function () {\n          var _a;\n          var error = errorFactory();\n          (_a = progressSubscriber_1 === null || progressSubscriber_1 === void 0 ? void 0 : progressSubscriber_1.error) === null || _a === void 0 ? void 0 : _a.call(progressSubscriber_1, error);\n          destination.error(error);\n        });\n      };\n      addErrorEvent('timeout', function () {\n        return new AjaxTimeoutError(xhr, _request);\n      });\n      addErrorEvent('abort', function () {\n        return new AjaxError('aborted', xhr, _request);\n      });\n      var createResponse_1 = function (direction, event) {\n        return new AjaxResponse(event, xhr, _request, direction + \"_\" + event.type);\n      };\n      var addProgressEvent_1 = function (target, type, direction) {\n        target.addEventListener(type, function (event) {\n          destination.next(createResponse_1(direction, event));\n        });\n      };\n      if (includeUploadProgress) {\n        [LOADSTART, PROGRESS, LOAD].forEach(function (type) {\n          return addProgressEvent_1(xhr.upload, type, UPLOAD);\n        });\n      }\n      if (progressSubscriber_1) {\n        [LOADSTART, PROGRESS].forEach(function (type) {\n          return xhr.upload.addEventListener(type, function (e) {\n            var _a;\n            return (_a = progressSubscriber_1 === null || progressSubscriber_1 === void 0 ? void 0 : progressSubscriber_1.next) === null || _a === void 0 ? void 0 : _a.call(progressSubscriber_1, e);\n          });\n        });\n      }\n      if (includeDownloadProgress) {\n        [LOADSTART, PROGRESS].forEach(function (type) {\n          return addProgressEvent_1(xhr, type, DOWNLOAD);\n        });\n      }\n      var emitError_1 = function (status) {\n        var msg = 'ajax error' + (status ? ' ' + status : '');\n        destination.error(new AjaxError(msg, xhr, _request));\n      };\n      xhr.addEventListener('error', function (e) {\n        var _a;\n        (_a = progressSubscriber_1 === null || progressSubscriber_1 === void 0 ? void 0 : progressSubscriber_1.error) === null || _a === void 0 ? void 0 : _a.call(progressSubscriber_1, e);\n        emitError_1();\n      });\n      xhr.addEventListener(LOAD, function (event) {\n        var _a, _b;\n        var status = xhr.status;\n        if (status < 400) {\n          (_a = progressSubscriber_1 === null || progressSubscriber_1 === void 0 ? void 0 : progressSubscriber_1.complete) === null || _a === void 0 ? void 0 : _a.call(progressSubscriber_1);\n          var response = void 0;\n          try {\n            response = createResponse_1(DOWNLOAD, event);\n          } catch (err) {\n            destination.error(err);\n            return;\n          }\n          destination.next(response);\n          destination.complete();\n        } else {\n          (_b = progressSubscriber_1 === null || progressSubscriber_1 === void 0 ? void 0 : progressSubscriber_1.error) === null || _b === void 0 ? void 0 : _b.call(progressSubscriber_1, event);\n          emitError_1(status);\n        }\n      });\n    }\n    var user = _request.user,\n      method = _request.method,\n      async = _request.async;\n    if (user) {\n      xhr.open(method, url, async, user, _request.password);\n    } else {\n      xhr.open(method, url, async);\n    }\n    if (async) {\n      xhr.timeout = _request.timeout;\n      xhr.responseType = _request.responseType;\n    }\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = _request.withCredentials;\n    }\n    for (var key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n    if (body) {\n      xhr.send(body);\n    } else {\n      xhr.send();\n    }\n    return function () {\n      if (xhr && xhr.readyState !== 4) {\n        xhr.abort();\n      }\n    };\n  });\n}\nfunction extractContentTypeAndMaybeSerializeBody(body, headers) {\n  var _a;\n  if (!body || typeof body === 'string' || isFormData(body) || isURLSearchParams(body) || isArrayBuffer(body) || isFile(body) || isBlob(body) || isReadableStream(body)) {\n    return body;\n  }\n  if (isArrayBufferView(body)) {\n    return body.buffer;\n  }\n  if (typeof body === 'object') {\n    headers['content-type'] = (_a = headers['content-type']) !== null && _a !== void 0 ? _a : 'application/json;charset=utf-8';\n    return JSON.stringify(body);\n  }\n  throw new TypeError('Unknown body type');\n}\nvar _toString = Object.prototype.toString;\nfunction toStringCheck(obj, name) {\n  return _toString.call(obj) === \"[object \" + name + \"]\";\n}\nfunction isArrayBuffer(body) {\n  return toStringCheck(body, 'ArrayBuffer');\n}\nfunction isFile(body) {\n  return toStringCheck(body, 'File');\n}\nfunction isBlob(body) {\n  return toStringCheck(body, 'Blob');\n}\nfunction isArrayBufferView(body) {\n  return typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView(body);\n}\nfunction isFormData(body) {\n  return typeof FormData !== 'undefined' && body instanceof FormData;\n}\nfunction isURLSearchParams(body) {\n  return typeof URLSearchParams !== 'undefined' && body instanceof URLSearchParams;\n}\nfunction isReadableStream(body) {\n  return typeof ReadableStream !== 'undefined' && body instanceof ReadableStream;\n}","map":{"version":3,"names":["map","Observable","AjaxResponse","AjaxTimeoutError","AjaxError","ajaxGet","url","headers","ajax","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxPatch","mapResponse","x","response","ajaxGetJSON","create","urlOrConfig","config","fromAjax","get","post","delete","put","patch","getJSON","UPLOAD","DOWNLOAD","LOADSTART","PROGRESS","LOAD","destination","queryParams","configuredBody","configuredHeaders","remainingConfig","__rest","TypeError","searchParams_1","includes","parts","split","length","URLSearchParams","forEach","value","key","set","hasOwnProperty","toLowerCase","crossDomain","withCredentials","xsrfCookieName","xsrfHeaderName","xsrfCookie","_b","_a","document","cookie","match","RegExp","pop","extractContentTypeAndMaybeSerializeBody","_request","__assign","async","timeout","responseType","xhr","createXHR","XMLHttpRequest","progressSubscriber_1","progressSubscriber","_c","includeDownloadProgress","_d","includeUploadProgress","addErrorEvent","type","errorFactory","addEventListener","error","call","createResponse_1","direction","event","addProgressEvent_1","target","next","upload","e","emitError_1","status","msg","complete","err","user","open","password","setRequestHeader","send","readyState","abort","isFormData","isURLSearchParams","isArrayBuffer","isFile","isBlob","isReadableStream","isArrayBufferView","buffer","JSON","stringify","_toString","Object","prototype","toString","toStringCheck","obj","name","ArrayBuffer","isView","FormData","ReadableStream"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/rxjs/src/internal/ajax/ajax.ts"],"sourcesContent":["import { map } from '../operators/map';\nimport { Observable } from '../Observable';\nimport { AjaxConfig, AjaxRequest, AjaxDirection, ProgressEventType } from './types';\nimport { AjaxResponse } from './AjaxResponse';\nimport { AjaxTimeoutError, AjaxError } from './errors';\n\nexport interface AjaxCreationMethod {\n  /**\n   * Creates an observable that will perform an AJAX request using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default.\n   *\n   * This is the most configurable option, and the basis for all other AJAX calls in the library.\n   *\n   * ### Example\n   * ```ts\n   * import { ajax } from 'rxjs/ajax';\n   * import { map, catchError } from 'rxjs/operators';\n   * import { of } from 'rxjs';\n   *\n   * const obs$ = ajax({\n   *    method: 'GET',\n   *    url: `https://api.github.com/users?per_page=5`,\n   *    responseType: 'json',\n   * }).pipe(\n   *   map(userResponse => console.log('users: ', userResponse)),\n   *   catchError(error => {\n   *     console.log('error: ', error);\n   *     return of(error);\n   *   })\n   * );\n   * ```\n   */\n  <T>(config: AjaxConfig): Observable<AjaxResponse<T>>;\n\n  /**\n   * Perform an HTTP GET using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope. Defaults to a `responseType` of `\"json\"`.\n   *\n   * ### Example\n   * ```ts\n   * import { ajax } from 'rxjs/ajax';\n   * import { map, catchError } from 'rxjs/operators';\n   * import { of } from 'rxjs';\n   *\n   * const obs$ = ajax(`https://api.github.com/users?per_page=5`).pipe(\n   *   map(userResponse => console.log('users: ', userResponse)),\n   *   catchError(error => {\n   *     console.log('error: ', error);\n   *     return of(error);\n   *   })\n   * );\n   * ```\n   */\n  <T>(url: string): Observable<AjaxResponse<T>>;\n\n  /**\n   * Performs an HTTP GET using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default, and a `responseType` of `\"json\"`.\n   *\n   * @param url The URL to get the resource from\n   * @param headers Optional headers. Case-Insensitive.\n   */\n  get<T>(url: string, headers?: Record<string, string>): Observable<AjaxResponse<T>>;\n\n  /**\n   * Performs an HTTP POST using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default, and a `responseType` of `\"json\"`.\n   *\n   * Before sending the value passed to the `body` argument, it is automatically serialized\n   * based on the specified `responseType`. By default, a JavaScript object will be serialized\n   * to JSON. A `responseType` of `application/x-www-form-urlencoded` will flatten any provided\n   * dictionary object to a url-encoded string.\n   *\n   * @param url The URL to get the resource from\n   * @param body The content to send. The body is automatically serialized.\n   * @param headers Optional headers. Case-Insensitive.\n   */\n  post<T>(url: string, body?: any, headers?: Record<string, string>): Observable<AjaxResponse<T>>;\n\n  /**\n   * Performs an HTTP PUT using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default, and a `responseType` of `\"json\"`.\n   *\n   * Before sending the value passed to the `body` argument, it is automatically serialized\n   * based on the specified `responseType`. By default, a JavaScript object will be serialized\n   * to JSON. A `responseType` of `application/x-www-form-urlencoded` will flatten any provided\n   * dictionary object to a url-encoded string.\n   *\n   * @param url The URL to get the resource from\n   * @param body The content to send. The body is automatically serialized.\n   * @param headers Optional headers. Case-Insensitive.\n   */\n  put<T>(url: string, body?: any, headers?: Record<string, string>): Observable<AjaxResponse<T>>;\n\n  /**\n   * Performs an HTTP PATCH using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default, and a `responseType` of `\"json\"`.\n   *\n   * Before sending the value passed to the `body` argument, it is automatically serialized\n   * based on the specified `responseType`. By default, a JavaScript object will be serialized\n   * to JSON. A `responseType` of `application/x-www-form-urlencoded` will flatten any provided\n   * dictionary object to a url-encoded string.\n   *\n   * @param url The URL to get the resource from\n   * @param body The content to send. The body is automatically serialized.\n   * @param headers Optional headers. Case-Insensitive.\n   */\n  patch<T>(url: string, body?: any, headers?: Record<string, string>): Observable<AjaxResponse<T>>;\n\n  /**\n   * Performs an HTTP DELETE using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default, and a `responseType` of `\"json\"`.\n   *\n   * @param url The URL to get the resource from\n   * @param headers Optional headers. Case-Insensitive.\n   */\n  delete<T>(url: string, headers?: Record<string, string>): Observable<AjaxResponse<T>>;\n\n  /**\n   * Performs an HTTP GET using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default, and returns the hydrated JavaScript object from the\n   * response.\n   *\n   * @param url The URL to get the resource from\n   * @param headers Optional headers. Case-Insensitive.\n   */\n  getJSON<T>(url: string, headers?: Record<string, string>): Observable<T>;\n}\n\nfunction ajaxGet<T>(url: string, headers?: Record<string, string>): Observable<AjaxResponse<T>> {\n  return ajax({ method: 'GET', url, headers });\n}\n\nfunction ajaxPost<T>(url: string, body?: any, headers?: Record<string, string>): Observable<AjaxResponse<T>> {\n  return ajax({ method: 'POST', url, body, headers });\n}\n\nfunction ajaxDelete<T>(url: string, headers?: Record<string, string>): Observable<AjaxResponse<T>> {\n  return ajax({ method: 'DELETE', url, headers });\n}\n\nfunction ajaxPut<T>(url: string, body?: any, headers?: Record<string, string>): Observable<AjaxResponse<T>> {\n  return ajax({ method: 'PUT', url, body, headers });\n}\n\nfunction ajaxPatch<T>(url: string, body?: any, headers?: Record<string, string>): Observable<AjaxResponse<T>> {\n  return ajax({ method: 'PATCH', url, body, headers });\n}\n\nconst mapResponse = map((x: AjaxResponse<any>) => x.response);\n\nfunction ajaxGetJSON<T>(url: string, headers?: Record<string, string>): Observable<T> {\n  return mapResponse(\n    ajax<T>({\n      method: 'GET',\n      url,\n      headers,\n    })\n  );\n}\n\n/**\n * There is an ajax operator on the Rx object.\n *\n * It creates an observable for an Ajax request with either a request object with\n * url, headers, etc or a string for a URL.\n *\n *\n * ## Using ajax() to fetch the response object that is being returned from API.\n * ```ts\n * import { ajax } from 'rxjs/ajax';\n * import { map, catchError } from 'rxjs/operators';\n * import { of } from 'rxjs';\n *\n * const obs$ = ajax(`https://api.github.com/users?per_page=5`).pipe(\n *   map(userResponse => console.log('users: ', userResponse)),\n *   catchError(error => {\n *     console.log('error: ', error);\n *     return of(error);\n *   })\n * );\n * ```\n *\n * ## Using ajax.getJSON() to fetch data from API.\n * ```ts\n * import { ajax } from 'rxjs/ajax';\n * import { map, catchError } from 'rxjs/operators';\n * import { of } from 'rxjs';\n *\n * const obs$ = ajax.getJSON(`https://api.github.com/users?per_page=5`).pipe(\n *   map(userResponse => console.log('users: ', userResponse)),\n *   catchError(error => {\n *     console.log('error: ', error);\n *     return of(error);\n *   })\n * );\n *\n * ```\n *\n * ## Using ajax() with object as argument and method POST with a two seconds delay.\n * ```ts\n * import { ajax } from 'rxjs/ajax';\n * import { map, catchError } from 'rxjs/operators';\n * import { of } from 'rxjs';\n *\n * const users = ajax({\n *   url: 'https://httpbin.org/delay/2',\n *   method: 'POST',\n *   headers: {\n *     'Content-Type': 'application/json',\n *     'rxjs-custom-header': 'Rxjs'\n *   },\n *   body: {\n *     rxjs: 'Hello World!'\n *   }\n * }).pipe(\n *   map(response => console.log('response: ', response)),\n *   catchError(error => {\n *     console.log('error: ', error);\n *     return of(error);\n *   })\n * );\n *\n * ```\n *\n * ## Using ajax() to fetch. An error object that is being returned from the request.\n * ```ts\n * import { ajax } from 'rxjs/ajax';\n * import { map, catchError } from 'rxjs/operators';\n * import { of } from 'rxjs';\n *\n * const obs$ = ajax(`https://api.github.com/404`).pipe(\n *   map(userResponse => console.log('users: ', userResponse)),\n *   catchError(error => {\n *     console.log('error: ', error);\n *     return of(error);\n *   })\n * );\n *\n * ```\n */\nexport const ajax: AjaxCreationMethod = (() => {\n  const create = <T>(urlOrConfig: string | AjaxConfig) => {\n    const config: AjaxConfig =\n      typeof urlOrConfig === 'string'\n        ? {\n            url: urlOrConfig,\n          }\n        : urlOrConfig;\n    return fromAjax<T>(config);\n  };\n\n  create.get = ajaxGet;\n  create.post = ajaxPost;\n  create.delete = ajaxDelete;\n  create.put = ajaxPut;\n  create.patch = ajaxPatch;\n  create.getJSON = ajaxGetJSON;\n\n  return create;\n})();\n\nconst UPLOAD = 'upload';\nconst DOWNLOAD = 'download';\nconst LOADSTART = 'loadstart';\nconst PROGRESS = 'progress';\nconst LOAD = 'load';\n\nexport function fromAjax<T>(config: AjaxConfig): Observable<AjaxResponse<T>> {\n  return new Observable((destination) => {\n    // Here we're pulling off each of the configuration arguments\n    // that we don't want to add to the request information we're\n    // passing around.\n    const { queryParams, body: configuredBody, headers: configuredHeaders, ...remainingConfig } = config;\n\n    let { url } = remainingConfig;\n    if (!url) {\n      throw new TypeError('url is required');\n    }\n\n    if (queryParams) {\n      let searchParams: URLSearchParams;\n      if (url.includes('?')) {\n        // If the user has passed a URL with a querystring already in it,\n        // we need to combine them. So we're going to split it. There\n        // should only be one `?` in a valid URL.\n        const parts = url.split('?');\n        if (2 < parts.length) {\n          throw new TypeError('invalid url');\n        }\n        // Add the passed queryParams to the params already in the url provided.\n        searchParams = new URLSearchParams(parts[1]);\n        // queryParams is converted to any because the runtime is *much* more permissive than\n        // the types are.\n        new URLSearchParams(queryParams as any).forEach((value, key) => searchParams.set(key, value));\n        // We have to do string concatenation here, because `new URL(url)` does\n        // not like relative URLs like `/this` without a base url, which we can't\n        // specify, nor can we assume `location` will exist, because of node.\n        url = parts[0] + '?' + searchParams;\n      } else {\n        // There is no pre-existing querystring, so we can just use URLSearchParams\n        // to convert the passed queryParams into the proper format and encodings.\n        // queryParams is converted to any because the runtime is *much* more permissive than\n        // the types are.\n        searchParams = new URLSearchParams(queryParams as any);\n        url = url + '?' + searchParams;\n      }\n    }\n\n    // Normalize the headers. We're going to make them all lowercase, since\n    // Headers are case insensitive by design. This makes it easier to verify\n    // that we aren't setting or sending duplicates.\n    const headers: Record<string, any> = {};\n    if (configuredHeaders) {\n      for (const key in configuredHeaders) {\n        if (configuredHeaders.hasOwnProperty(key)) {\n          headers[key.toLowerCase()] = configuredHeaders[key];\n        }\n      }\n    }\n\n    // Set the x-requested-with header. This is a non-standard header that has\n    // come to be a de facto standard for HTTP requests sent by libraries and frameworks\n    // using XHR. However, we DO NOT want to set this if it is a CORS request. This is\n    // because sometimes this header can cause issues with CORS. To be clear,\n    // None of this is necessary, it's only being set because it's \"the thing libraries do\"\n    // Starting back as far as JQuery, and continuing with other libraries such as Angular 1,\n    // Axios, et al.\n    if (!config.crossDomain && !('x-requested-with' in headers)) {\n      headers['x-requested-with'] = 'XMLHttpRequest';\n    }\n\n    // Allow users to provide their XSRF cookie name and the name of a custom header to use to\n    // send the cookie.\n    const { withCredentials, xsrfCookieName, xsrfHeaderName } = remainingConfig;\n    if ((withCredentials || !remainingConfig.crossDomain) && xsrfCookieName && xsrfHeaderName) {\n      const xsrfCookie = document?.cookie.match(new RegExp(`(^|;\\\\s*)(${xsrfCookieName})=([^;]*)`))?.pop() ?? '';\n      if (xsrfCookie) {\n        headers[xsrfHeaderName] = xsrfCookie;\n      }\n    }\n\n    // Examine the body and determine whether or not to serialize it\n    // and set the content-type in `headers`, if we're able.\n    const body = extractContentTypeAndMaybeSerializeBody(configuredBody, headers);\n\n    const _request: AjaxRequest = {\n      // Default values\n      async: true,\n      crossDomain: true,\n      withCredentials: false,\n      method: 'GET',\n      timeout: 0,\n      responseType: 'json' as XMLHttpRequestResponseType,\n\n      // Override with passed user values\n      ...remainingConfig,\n\n      // Set values we ensured above\n      url,\n      headers,\n      body,\n    };\n\n    let xhr: XMLHttpRequest;\n\n    // Create our XHR so we can get started.\n    xhr = config.createXHR ? config.createXHR() : new XMLHttpRequest();\n\n    {\n      ///////////////////////////////////////////////////\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      ///////////////////////////////////////////////////\n\n      const { progressSubscriber, includeDownloadProgress = false, includeUploadProgress = false } = config;\n\n      /**\n       * Wires up an event handler that will emit an error when fired. Used\n       * for timeout and abort events.\n       * @param type The type of event we're treating as an error\n       * @param errorFactory A function that creates the type of error to emit.\n       */\n      const addErrorEvent = (type: string, errorFactory: () => any) => {\n        xhr.addEventListener(type, () => {\n          const error = errorFactory();\n          progressSubscriber?.error?.(error);\n          destination.error(error);\n        });\n      };\n\n      // If the request times out, handle errors appropriately.\n      addErrorEvent('timeout', () => new AjaxTimeoutError(xhr, _request));\n\n      // If the request aborts (due to a network disconnection or the like), handle\n      // it as an error.\n      addErrorEvent('abort', () => new AjaxError('aborted', xhr, _request));\n\n      /**\n       * Creates a response object to emit to the consumer.\n       * @param direction the direction related to the event. Prefixes the event `type` in the\n       * `AjaxResponse` object with \"upload_\" for events related to uploading and \"download_\"\n       * for events related to downloading.\n       * @param event the actual event object.\n       */\n      const createResponse = (direction: AjaxDirection, event: ProgressEvent) =>\n        new AjaxResponse<T>(event, xhr, _request, `${direction}_${event.type as ProgressEventType}` as const);\n\n      /**\n       * Wires up an event handler that emits a Response object to the consumer, used for\n       * all events that emit responses, loadstart, progress, and load.\n       * Note that download load handling is a bit different below, because it has\n       * more logic it needs to run.\n       * @param target The target, either the XHR itself or the Upload object.\n       * @param type The type of event to wire up\n       * @param direction The \"direction\", used to prefix the response object that is\n       * emitted to the consumer. (e.g. \"upload_\" or \"download_\")\n       */\n      const addProgressEvent = (target: any, type: string, direction: AjaxDirection) => {\n        target.addEventListener(type, (event: ProgressEvent) => {\n          destination.next(createResponse(direction, event));\n        });\n      };\n\n      if (includeUploadProgress) {\n        [LOADSTART, PROGRESS, LOAD].forEach((type) => addProgressEvent(xhr.upload, type, UPLOAD));\n      }\n\n      if (progressSubscriber) {\n        [LOADSTART, PROGRESS].forEach((type) => xhr.upload.addEventListener(type, (e: any) => progressSubscriber?.next?.(e)));\n      }\n\n      if (includeDownloadProgress) {\n        [LOADSTART, PROGRESS].forEach((type) => addProgressEvent(xhr, type, DOWNLOAD));\n      }\n\n      const emitError = (status?: number) => {\n        const msg = 'ajax error' + (status ? ' ' + status : '');\n        destination.error(new AjaxError(msg, xhr, _request));\n      };\n\n      xhr.addEventListener('error', (e) => {\n        progressSubscriber?.error?.(e);\n        emitError();\n      });\n\n      xhr.addEventListener(LOAD, (event) => {\n        const { status } = xhr;\n        // 4xx and 5xx should error (https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)\n        if (status < 400) {\n          progressSubscriber?.complete?.();\n\n          let response: AjaxResponse<T>;\n          try {\n            // This can throw in IE, because we end up needing to do a JSON.parse\n            // of the response in some cases to produce object we'd expect from\n            // modern browsers.\n            response = createResponse(DOWNLOAD, event);\n          } catch (err) {\n            destination.error(err);\n            return;\n          }\n\n          destination.next(response);\n          destination.complete();\n        } else {\n          progressSubscriber?.error?.(event);\n          emitError(status);\n        }\n      });\n    }\n\n    const { user, method, async } = _request;\n    // open XHR\n    if (user) {\n      xhr.open(method, url, async, user, _request.password);\n    } else {\n      xhr.open(method, url, async);\n    }\n\n    // timeout, responseType and withCredentials can be set once the XHR is open\n    if (async) {\n      xhr.timeout = _request.timeout;\n      xhr.responseType = _request.responseType;\n    }\n\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = _request.withCredentials;\n    }\n\n    // set headers\n    for (const key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n\n    // finally send the request\n    if (body) {\n      xhr.send(body);\n    } else {\n      xhr.send();\n    }\n\n    return () => {\n      if (xhr && xhr.readyState !== 4 /*XHR done*/) {\n        xhr.abort();\n      }\n    };\n  });\n}\n\n/**\n * Examines the body to determine if we need to serialize it for them or not.\n * If the body is a type that XHR handles natively, we just allow it through,\n * otherwise, if the body is something that *we* can serialize for the user,\n * we will serialize it, and attempt to set the `content-type` header, if it's\n * not already set.\n * @param body The body passed in by the user\n * @param headers The normalized headers\n */\nfunction extractContentTypeAndMaybeSerializeBody(body: any, headers: Record<string, string>) {\n  if (\n    !body ||\n    typeof body === 'string' ||\n    isFormData(body) ||\n    isURLSearchParams(body) ||\n    isArrayBuffer(body) ||\n    isFile(body) ||\n    isBlob(body) ||\n    isReadableStream(body)\n  ) {\n    // The XHR instance itself can handle serializing these, and set the content-type for us\n    // so we don't need to do that. https://xhr.spec.whatwg.org/#the-send()-method\n    return body;\n  }\n\n  if (isArrayBufferView(body)) {\n    // This is a typed array (e.g. Float32Array or Uint8Array), or a DataView.\n    // XHR can handle this one too: https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n    return body.buffer;\n  }\n\n  if (typeof body === 'object') {\n    // If we have made it here, this is an object, probably a POJO, and we'll try\n    // to serialize it for them. If this doesn't work, it will throw, obviously, which\n    // is okay. The workaround for users would be to manually set the body to their own\n    // serialized string (accounting for circular references or whatever), then set\n    // the content-type manually as well.\n    headers['content-type'] = headers['content-type'] ?? 'application/json;charset=utf-8';\n    return JSON.stringify(body);\n  }\n\n  // If we've gotten past everything above, this is something we don't quite know how to\n  // handle. Throw an error. This will be caught and emitted from the observable.\n  throw new TypeError('Unknown body type');\n}\n\nconst _toString = Object.prototype.toString;\n\nfunction toStringCheck(obj: any, name: string): boolean {\n  return _toString.call(obj) === `[object ${name}]`;\n}\n\nfunction isArrayBuffer(body: any): body is ArrayBuffer {\n  return toStringCheck(body, 'ArrayBuffer');\n}\n\nfunction isFile(body: any): body is File {\n  return toStringCheck(body, 'File');\n}\n\nfunction isBlob(body: any): body is Blob {\n  return toStringCheck(body, 'Blob');\n}\n\nfunction isArrayBufferView(body: any): body is ArrayBufferView {\n  return typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView(body);\n}\n\nfunction isFormData(body: any): body is FormData {\n  return typeof FormData !== 'undefined' && body instanceof FormData;\n}\n\nfunction isURLSearchParams(body: any): body is URLSearchParams {\n  return typeof URLSearchParams !== 'undefined' && body instanceof URLSearchParams;\n}\n\nfunction isReadableStream(body: any): body is ReadableStream {\n  return typeof ReadableStream !== 'undefined' && body instanceof ReadableStream;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}