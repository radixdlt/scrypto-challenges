{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApiMethod = void 0;\nvar ApiMethod;\n(function (ApiMethod) {\n  ApiMethod[\"NETWORK_ID\"] = \"network.get_id\";\n  ApiMethod[\"TOKEN_BALANCES\"] = \"account.get_balances\";\n  ApiMethod[\"TRANSACTION_HISTORY\"] = \"account.get_transaction_history\";\n  ApiMethod[\"STAKES\"] = \"account.get_stake_positions\";\n  ApiMethod[\"UNSTAKES\"] = \"account.get_unstake_positions\";\n  ApiMethod[\"TX_STATUS\"] = \"transactions.get_transaction_status\";\n  ApiMethod[\"NETWORK_TX_THROUGHPUT\"] = \"network.get_throughput\";\n  ApiMethod[\"NETWORK_TX_DEMAND\"] = \"network.get_demand\";\n  ApiMethod[\"VALIDATORS\"] = \"validators.get_next_epoch_set\";\n  ApiMethod[\"LOOKUP_TX\"] = \"transactions.lookup_transaction\";\n  ApiMethod[\"LOOKUP_VALIDATOR\"] = \"validators.lookup_validator\";\n  ApiMethod[\"NATIVE_TOKEN\"] = \"tokens.get_native_token\";\n  ApiMethod[\"TOKEN_INFO\"] = \"tokens.get_info\";\n  ApiMethod[\"BUILD_TX_FROM_INTENT\"] = \"construction.build_transaction\";\n  ApiMethod[\"SUBMIT_TX\"] = \"construction.submit_transaction\";\n  ApiMethod[\"FINALIZE_TX\"] = \"construction.finalize_transaction\";\n})(ApiMethod = exports.ApiMethod || (exports.ApiMethod = {}));","map":{"version":3,"names":["ApiMethod","exports"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/application/src/api/json-rpc/_types.ts"],"sourcesContent":["import { Network } from '@radixdlt/primitives'\nimport { ActionType } from '../../actions'\nimport {\n\tSimpleExecutedTransaction,\n\tNetworkTransactionDemand,\n\tNetworkTransactionThroughput,\n\tPendingTransaction,\n\tRawExecutedTransaction,\n\tRawToken,\n\tFinalizedTransaction,\n\tStakePositions,\n\tStatusOfTransaction,\n\tToken,\n\tSimpleTransactionHistory,\n\tTransactionStatus,\n\tBuiltTransaction,\n\tUnstakePositions,\n\tValidators,\n\tSimpleTokenBalances,\n\tValidator,\n\tRawValidatorResponse,\n} from '../../dto'\n\nexport enum ApiMethod {\n\tNETWORK_ID = 'network.get_id',\n\tTOKEN_BALANCES = 'account.get_balances',\n\tTRANSACTION_HISTORY = 'account.get_transaction_history',\n\tSTAKES = 'account.get_stake_positions',\n\tUNSTAKES = 'account.get_unstake_positions',\n\tTX_STATUS = 'transactions.get_transaction_status',\n\tNETWORK_TX_THROUGHPUT = 'network.get_throughput',\n\tNETWORK_TX_DEMAND = 'network.get_demand',\n\tVALIDATORS = 'validators.get_next_epoch_set',\n\tLOOKUP_TX = 'transactions.lookup_transaction',\n\tLOOKUP_VALIDATOR = 'validators.lookup_validator',\n\tNATIVE_TOKEN = 'tokens.get_native_token',\n\tTOKEN_INFO = 'tokens.get_info',\n\tBUILD_TX_FROM_INTENT = 'construction.build_transaction',\n\tSUBMIT_TX = 'construction.submit_transaction',\n\tFINALIZE_TX = 'construction.finalize_transaction',\n}\n\nexport namespace NetworkIdEndpoint {\n\texport type Input = Record<string, never>\n\n\texport type Response = {\n\t\tnetworkId: number\n\t}\n\n\texport type DecodedResponse = {\n\t\tnetworkId: Network\n\t}\n}\n\nexport namespace TokenBalancesEndpoint {\n\texport type Input = {\n\t\taddress: string\n\t}\n\n\texport type Response = {\n\t\towner: string\n\t\ttokenBalances: {\n\t\t\trri: string\n\t\t\tamount: string\n\t\t}[]\n\t}\n\n\texport type DecodedResponse = SimpleTokenBalances\n}\n\nexport namespace TransactionHistoryEndpoint {\n\texport type Input = {\n\t\taddress: string\n\t\tsize: number // must be > 0\n\t\tcursor?: string\n\t}\n\n\texport type Response = Readonly<{\n\t\tcursor: string\n\t\ttransactions: RawExecutedTransaction[]\n\t}>\n\n\texport type DecodedResponse = SimpleTransactionHistory\n}\n\nexport namespace LookupTransactionEndpoint {\n\texport type Input = { txID: string }\n\texport type Response = RawExecutedTransaction\n\texport type DecodedResponse = SimpleExecutedTransaction\n}\n\nexport namespace TokenInfoEndpoint {\n\texport type Input = { rri: string }\n\texport type Response = RawToken\n\texport type DecodedResponse = Token\n}\n\nexport namespace NativeTokenEndpoint {\n\texport type Input = Record<string, never>\n\texport type Response = RawToken\n\texport type DecodedResponse = Token\n}\n\nexport namespace StakePositionsEndpoint {\n\texport type Input = { address: string }\n\n\texport type Response = {\n\t\tvalidator: string\n\t\tamount: string\n\t}[]\n\n\texport type DecodedResponse = StakePositions\n}\n\nexport namespace UnstakePositionsEndpoint {\n\texport type Input = { address: string }\n\n\texport type Response = {\n\t\tamount: string\n\t\tvalidator: string\n\t\tepochsUntil: number\n\t\twithdrawTxID: string\n\t}[]\n\n\texport type DecodedResponse = UnstakePositions\n}\n\nexport namespace TransactionStatusEndpoint {\n\texport type Input = { txID: string }\n\n\texport type Response = {\n\t\ttxID: string\n\t\tstatus: TransactionStatus\n\t\tfailure?: string\n\t}\n\n\texport type DecodedResponse = StatusOfTransaction\n}\n\nexport namespace NetworkTransactionThroughputEndpoint {\n\texport type Input = Record<string, never>\n\n\texport type Response = {\n\t\ttps: number\n\t}\n\n\texport type DecodedResponse = NetworkTransactionThroughput\n}\n\nexport namespace NetworkTransactionDemandEndpoint {\n\texport type Input = Record<string, never>\n\n\texport type Response = {\n\t\ttps: number\n\t}\n\n\texport type DecodedResponse = NetworkTransactionDemand\n}\n\nexport namespace ValidatorsEndpoint {\n\texport type Input = { size: number; cursor?: string }\n\n\texport type Response = Readonly<{\n\t\tcursor: string\n\t\tvalidators: RawValidatorResponse[]\n\t}>\n\texport type DecodedResponse = Validators\n}\n\nexport namespace LookupValidatorEndpoint {\n\texport type Input = { validatorAddress: string }\n\texport type Response = RawValidatorResponse\n\texport type DecodedResponse = Validator\n}\n\nexport namespace BuildTransactionEndpoint {\n\texport type Failure =\n\t\t| 'MALFORMED_TX'\n\t\t| 'INSUFFICIENT_FUNDS'\n\t\t| 'NOT_PERMITTED'\n\n\texport type Input = {\n\t\tactions: (\n\t\t\t| {\n\t\t\t\t\ttype: ActionType.TOKEN_TRANSFER\n\t\t\t\t\tfrom: string\n\t\t\t\t\tto: string\n\t\t\t\t\tamount: string\n\t\t\t\t\trri: string\n\t\t\t  }\n\t\t\t| {\n\t\t\t\t\ttype: ActionType.STAKE_TOKENS\n\t\t\t\t\tfrom: string\n\t\t\t\t\tvalidator: string\n\t\t\t\t\tamount: string\n\t\t\t  }\n\t\t\t| {\n\t\t\t\t\ttype: ActionType.UNSTAKE_TOKENS\n\t\t\t\t\tfrom: string\n\t\t\t\t\tvalidator: string\n\t\t\t\t\tamount: string\n\t\t\t  }\n\t\t)[]\n\t\tfeePayer: string\n\t\tdisableResourceAllocationAndDestroy?: boolean\n\t\tmessage?: string\n\t}\n\n\texport type Response = {\n\t\ttransaction: Readonly<{\n\t\t\tblob: string\n\t\t\thashOfBlobToSign: string\n\t\t}>\n\t\tfee: string\n\t}\n\n\texport type DecodedResponse = BuiltTransaction\n}\n\nexport namespace FinalizeTransactionEndpoint {\n\texport type Input = {\n\t\tblob: string\n\t\tpublicKeyOfSigner: string\n\t\tsignatureDER: string\n\t}\n\n\texport type Response = {\n\t\tblob: string\n\t\ttxID: string\n\t}\n\n\texport type DecodedResponse = FinalizedTransaction\n}\n\nexport namespace SubmitTransactionEndpoint {\n\texport type Input = {\n\t\tblob: string\n\t\ttxID: string\n\t}\n\n\texport type Response = {\n\t\ttxID: string\n\t}\n\n\texport type DecodedResponse = PendingTransaction\n}\n"],"mappings":";;;;;;AAuBA,IAAYA,SAiBX;AAjBD,WAAYA,SAAS;EACpBA,SAAA,iCAA6B;EAC7BA,SAAA,2CAAuC;EACvCA,SAAA,2DAAuD;EACvDA,SAAA,0CAAsC;EACtCA,SAAA,8CAA0C;EAC1CA,SAAA,qDAAiD;EACjDA,SAAA,oDAAgD;EAChDA,SAAA,4CAAwC;EACxCA,SAAA,gDAA4C;EAC5CA,SAAA,iDAA6C;EAC7CA,SAAA,oDAAgD;EAChDA,SAAA,4CAAwC;EACxCA,SAAA,kCAA8B;EAC9BA,SAAA,2DAAuD;EACvDA,SAAA,iDAA6C;EAC7CA,SAAA,qDAAiD;AAClD,CAAC,EAjBWA,SAAS,GAATC,OAAA,CAAAD,SAAS,KAATC,OAAA,CAAAD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}