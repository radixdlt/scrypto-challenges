{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { observeNotification } from '../Notification';\nvar ColdObservable = function (_super) {\n  __extends(ColdObservable, _super);\n  function ColdObservable(messages, scheduler) {\n    var _this = _super.call(this, function (subscriber) {\n      var observable = this;\n      var index = observable.logSubscribedFrame();\n      var subscription = new Subscription();\n      subscription.add(new Subscription(function () {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscription;\n    }) || this;\n    _this.messages = messages;\n    _this.subscriptions = [];\n    _this.scheduler = scheduler;\n    return _this;\n  }\n  ColdObservable.prototype.scheduleMessages = function (subscriber) {\n    var messagesLength = this.messages.length;\n    for (var i = 0; i < messagesLength; i++) {\n      var message = this.messages[i];\n      subscriber.add(this.scheduler.schedule(function (state) {\n        var _a = state,\n          notification = _a.message.notification,\n          destination = _a.subscriber;\n        observeNotification(notification, destination);\n      }, message.frame, {\n        message: message,\n        subscriber: subscriber\n      }));\n    }\n  };\n  return ColdObservable;\n}(Observable);\nexport { ColdObservable };\napplyMixins(ColdObservable, [SubscriptionLoggable]);","map":{"version":3,"names":["Observable","Subscription","SubscriptionLoggable","applyMixins","observeNotification","ColdObservable","_super","__extends","messages","scheduler","_this","call","subscriber","observable","index","logSubscribedFrame","subscription","add","logUnsubscribedFrame","scheduleMessages","subscriptions","prototype","messagesLength","length","i","message","schedule","state","_a","notification","destination","frame"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/rxjs/src/internal/testing/ColdObservable.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\nimport { observeNotification } from '../Notification';\n\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  // @ts-ignore: Property has no initializer and is not definitely assigned\n  logSubscribedFrame: () => number;\n  // @ts-ignore: Property has no initializer and is not definitely assigned\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[], scheduler: Scheduler) {\n    super(function (this: Observable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this as any;\n      const index = observable.logSubscribedFrame();\n      const subscription = new Subscription();\n      subscription.add(\n        new Subscription(() => {\n          observable.logUnsubscribedFrame(index);\n        })\n      );\n      observable.scheduleMessages(subscriber);\n      return subscription;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(\n          (state) => {\n            const { message: { notification }, subscriber: destination } = state!;\n            observeNotification(notification, destination);\n          },\n          message.frame,\n          { message, subscriber }\n        )\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,YAAY,QAAQ,iBAAiB;AAI9C,SAASC,oBAAoB,QAAQ,wBAAwB;AAC7D,SAASC,WAAW,QAAQ,qBAAqB;AAEjD,SAASC,mBAAmB,QAAQ,iBAAiB;AAErD,IAAAC,cAAA,aAAAC,MAAA;EAAuCC,SAAA,CAAAF,cAAA,EAAAC,MAAA;EAQrC,SAAAD,eAAmBG,QAAuB,EAAEC,SAAoB;IAAhE,IAAAC,KAAA,GACEJ,MAAA,CAAAK,IAAA,OAAM,UAA+BC,UAA2B;MAC9D,IAAMC,UAAU,GAAsB,IAAW;MACjD,IAAMC,KAAK,GAAGD,UAAU,CAACE,kBAAkB,EAAE;MAC7C,IAAMC,YAAY,GAAG,IAAIf,YAAY,EAAE;MACvCe,YAAY,CAACC,GAAG,CACd,IAAIhB,YAAY,CAAC;QACfY,UAAU,CAACK,oBAAoB,CAACJ,KAAK,CAAC;MACxC,CAAC,CAAC,CACH;MACDD,UAAU,CAACM,gBAAgB,CAACP,UAAU,CAAC;MACvC,OAAOI,YAAY;IACrB,CAAC,CAAC;IAZeN,KAAA,CAAAF,QAAQ,GAARA,QAAQ;IAPpBE,KAAA,CAAAU,aAAa,GAAsB,EAAE;IAoB1CV,KAAI,CAACD,SAAS,GAAGA,SAAS;;EAC5B;EAEAJ,cAAA,CAAAgB,SAAA,CAAAF,gBAAgB,GAAhB,UAAiBP,UAA2B;IAC1C,IAAMU,cAAc,GAAG,IAAI,CAACd,QAAQ,CAACe,MAAM;IAC3C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,cAAc,EAAEE,CAAC,EAAE,EAAE;MACvC,IAAMC,OAAO,GAAG,IAAI,CAACjB,QAAQ,CAACgB,CAAC,CAAC;MAChCZ,UAAU,CAACK,GAAG,CACZ,IAAI,CAACR,SAAS,CAACiB,QAAQ,CACrB,UAACC,KAAK;QACE,IAAAC,EAAA,GAAyDD,KAAM;UAAlDE,YAAY,GAAAD,EAAA,CAAAH,OAAA,CAAAI,YAAA;UAAgBC,WAAW,GAAAF,EAAA,CAAAhB,UAAW;QACrER,mBAAmB,CAACyB,YAAY,EAAEC,WAAW,CAAC;MAChD,CAAC,EACDL,OAAO,CAACM,KAAK,EACb;QAAEN,OAAO,EAAAA,OAAA;QAAEb,UAAU,EAAAA;MAAA,CAAE,CACxB,CACF;;EAEL,CAAC;EACH,OAAAP,cAAC;AAAD,CAAC,CAxCsCL,UAAU;;AAyCjDG,WAAW,CAACE,cAAc,EAAE,CAACH,oBAAoB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}