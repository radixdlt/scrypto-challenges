{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PrivateKey = exports.fromHex = exports.fromBuffer = void 0;\nconst primitives_1 = require(\"@radixdlt/primitives\");\nconst uint256_1 = require(\"@radixdlt/uint256\");\nconst neverthrow_1 = require(\"neverthrow\");\nconst util_1 = require(\"@radixdlt/util\");\nconst secp256k1_1 = require(\"./secp256k1\");\nconst hash_1 = require(\"../hash\");\nconst elliptic_1 = require(\"elliptic\");\nconst publicKey_1 = require(\"./publicKey\");\nconst signature_1 = require(\"./signature\");\nconst utils_1 = require(\"../utils\");\nconst __signDataWithPrivateKey = input => {\n  // log.info(`Signing ${input.data.toString()} with private key.`)\n  const thirdPartyLibEllipticSecp256k1 = new elliptic_1.ec('secp256k1');\n  const privateKey = thirdPartyLibEllipticSecp256k1.keyFromPrivate(input.privateKey.toString(16));\n  const ellipticSignature = privateKey.sign(input.data, {\n    canonical: true\n  });\n  return signature_1.Signature.fromIndutnyElliptic(ellipticSignature);\n};\nconst __privateKeyFromValidatedScalar = scalar => {\n  const sign = hashedMessage => {\n    if (hashedMessage.length !== 32) {\n      return (0, neverthrow_1.errAsync)(new Error('Incorrect length of message to sign, expected 32 bytes.'));\n    }\n    return (0, primitives_1.resultToAsync)(__signDataWithPrivateKey({\n      privateKey: scalar,\n      data: hashedMessage\n    }));\n  };\n  const diffieHellman = publicKeyOfOtherParty => (0, neverthrow_1.okAsync)(publicKeyOfOtherParty.decodeToPointOnCurve().multiplyWithPrivateKey(privateKey));\n  const privateKey = {\n    sign,\n    diffieHellman: diffieHellman,\n    signUnhashed: input => {\n      var _a;\n      const hasher = (_a = input.hasher) !== null && _a !== void 0 ? _a : hash_1.sha256Twice;\n      const hashedMessage = hasher(input.msgToHash);\n      return sign(hashedMessage);\n    },\n    publicKey: () => {\n      throw new Error('Overridden below.');\n    },\n    toString: () => (0, utils_1.toPrivateKeyHex)(scalar),\n    scalar: scalar\n  };\n  return Object.assign(Object.assign({}, privateKey), {\n    publicKey: () => publicKey_1.PublicKey.fromPrivateKey({\n      privateKey\n    })\n  });\n};\nconst fromBuffer = buffer => (0, exports.fromHex)(buffer.toString('hex'));\nexports.fromBuffer = fromBuffer;\nconst fromHex = privateKeyHexString => fromScalar(new uint256_1.UInt256(privateKeyHexString, 16));\nexports.fromHex = fromHex;\nconst fromScalar = scalar => {\n  if (!validateSecp256k1PrivateKey(scalar)) return (0, neverthrow_1.err)(new Error('Invalid private key scalar.'));\n  return (0, neverthrow_1.ok)(__privateKeyFromValidatedScalar(scalar));\n};\nconst validateSecp256k1PrivateKey = scalar => scalar.gte(uint256_1.UInt256.valueOf(1)) && scalar.lte(secp256k1_1.Secp256k1.order);\nconst generateNew = (secureRandom = util_1.secureRandomGenerator) => {\n  // eslint-disable-next-line functional/no-let\n  let scalar = primitives_1.uint256Max;\n  // eslint-disable-next-line functional/no-loop-statement\n  while (!validateSecp256k1PrivateKey(scalar)) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call\n    scalar = (0, primitives_1.secureRandomUInt256)(secureRandom);\n  }\n  return __privateKeyFromValidatedScalar(scalar);\n};\nexports.PrivateKey = {\n  generateNew,\n  fromScalar,\n  fromHex: exports.fromHex,\n  fromBuffer: exports.fromBuffer\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","PrivateKey","fromHex","fromBuffer","primitives_1","require","uint256_1","neverthrow_1","util_1","secp256k1_1","hash_1","elliptic_1","publicKey_1","signature_1","utils_1","__signDataWithPrivateKey","input","thirdPartyLibEllipticSecp256k1","ec","privateKey","keyFromPrivate","toString","ellipticSignature","sign","data","canonical","Signature","fromIndutnyElliptic","__privateKeyFromValidatedScalar","scalar","hashedMessage","length","errAsync","Error","resultToAsync","diffieHellman","publicKeyOfOtherParty","okAsync","decodeToPointOnCurve","multiplyWithPrivateKey","signUnhashed","_a","hasher","sha256Twice","msgToHash","publicKey","toPrivateKeyHex","assign","PublicKey","fromPrivateKey","buffer","privateKeyHexString","fromScalar","UInt256","validateSecp256k1PrivateKey","err","ok","gte","valueOf","lte","Secp256k1","order","generateNew","secureRandom","secureRandomGenerator","uint256Max","secureRandomUInt256"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/crypto/dist/elliptic-curve/privateKey.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PrivateKey = exports.fromHex = exports.fromBuffer = void 0;\nconst primitives_1 = require(\"@radixdlt/primitives\");\nconst uint256_1 = require(\"@radixdlt/uint256\");\nconst neverthrow_1 = require(\"neverthrow\");\nconst util_1 = require(\"@radixdlt/util\");\nconst secp256k1_1 = require(\"./secp256k1\");\nconst hash_1 = require(\"../hash\");\nconst elliptic_1 = require(\"elliptic\");\nconst publicKey_1 = require(\"./publicKey\");\nconst signature_1 = require(\"./signature\");\nconst utils_1 = require(\"../utils\");\nconst __signDataWithPrivateKey = (input) => {\n    // log.info(`Signing ${input.data.toString()} with private key.`)\n    const thirdPartyLibEllipticSecp256k1 = new elliptic_1.ec('secp256k1');\n    const privateKey = thirdPartyLibEllipticSecp256k1.keyFromPrivate(input.privateKey.toString(16));\n    const ellipticSignature = privateKey.sign(input.data, {\n        canonical: true,\n    });\n    return signature_1.Signature.fromIndutnyElliptic(ellipticSignature);\n};\nconst __privateKeyFromValidatedScalar = (scalar) => {\n    const sign = (hashedMessage) => {\n        if (hashedMessage.length !== 32) {\n            return (0, neverthrow_1.errAsync)(new Error('Incorrect length of message to sign, expected 32 bytes.'));\n        }\n        return (0, primitives_1.resultToAsync)(__signDataWithPrivateKey({\n            privateKey: scalar,\n            data: hashedMessage,\n        }));\n    };\n    const diffieHellman = (publicKeyOfOtherParty) => (0, neverthrow_1.okAsync)(publicKeyOfOtherParty\n        .decodeToPointOnCurve()\n        .multiplyWithPrivateKey(privateKey));\n    const privateKey = {\n        sign,\n        diffieHellman: diffieHellman,\n        signUnhashed: (input) => {\n            var _a;\n            const hasher = (_a = input.hasher) !== null && _a !== void 0 ? _a : hash_1.sha256Twice;\n            const hashedMessage = hasher(input.msgToHash);\n            return sign(hashedMessage);\n        },\n        publicKey: () => {\n            throw new Error('Overridden below.');\n        },\n        toString: () => (0, utils_1.toPrivateKeyHex)(scalar),\n        scalar: scalar,\n    };\n    return Object.assign(Object.assign({}, privateKey), { publicKey: () => publicKey_1.PublicKey.fromPrivateKey({ privateKey }) });\n};\nconst fromBuffer = (buffer) => (0, exports.fromHex)(buffer.toString('hex'));\nexports.fromBuffer = fromBuffer;\nconst fromHex = (privateKeyHexString) => fromScalar(new uint256_1.UInt256(privateKeyHexString, 16));\nexports.fromHex = fromHex;\nconst fromScalar = (scalar) => {\n    if (!validateSecp256k1PrivateKey(scalar))\n        return (0, neverthrow_1.err)(new Error('Invalid private key scalar.'));\n    return (0, neverthrow_1.ok)(__privateKeyFromValidatedScalar(scalar));\n};\nconst validateSecp256k1PrivateKey = (scalar) => scalar.gte(uint256_1.UInt256.valueOf(1)) && scalar.lte(secp256k1_1.Secp256k1.order);\nconst generateNew = (secureRandom = util_1.secureRandomGenerator) => {\n    // eslint-disable-next-line functional/no-let\n    let scalar = primitives_1.uint256Max;\n    // eslint-disable-next-line functional/no-loop-statement\n    while (!validateSecp256k1PrivateKey(scalar)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call\n        scalar = (0, primitives_1.secureRandomUInt256)(secureRandom);\n    }\n    return __privateKeyFromValidatedScalar(scalar);\n};\nexports.PrivateKey = {\n    generateNew,\n    fromScalar,\n    fromHex: exports.fromHex,\n    fromBuffer: exports.fromBuffer,\n};\n//# sourceMappingURL=privateKey.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}