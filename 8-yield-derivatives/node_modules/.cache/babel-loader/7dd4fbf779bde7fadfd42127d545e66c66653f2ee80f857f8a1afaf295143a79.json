{"ast":null,"code":"var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _AssistantStream_instances, _AssistantStream_events, _AssistantStream_runStepSnapshots, _AssistantStream_messageSnapshots, _AssistantStream_messageSnapshot, _AssistantStream_finalRun, _AssistantStream_currentContentIndex, _AssistantStream_currentContent, _AssistantStream_currentToolCallIndex, _AssistantStream_currentToolCall, _AssistantStream_currentEvent, _AssistantStream_currentRunSnapshot, _AssistantStream_currentRunStepSnapshot, _AssistantStream_addEvent, _AssistantStream_endRequest, _AssistantStream_handleMessage, _AssistantStream_handleRunStep, _AssistantStream_handleEvent, _AssistantStream_accumulateRunStep, _AssistantStream_accumulateMessage, _AssistantStream_accumulateContent, _AssistantStream_handleRun;\nimport * as Core from 'openai/core';\nimport { AbstractAssistantStreamRunner } from \"./AbstractAssistantStreamRunner.mjs\";\nimport { Stream } from 'openai/streaming';\nimport { APIUserAbortError, OpenAIError } from 'openai/error';\nexport class AssistantStream extends AbstractAssistantStreamRunner {\n  constructor() {\n    super(...arguments);\n    _AssistantStream_instances.add(this);\n    //Track all events in a single list for reference\n    _AssistantStream_events.set(this, []);\n    //Used to accumulate deltas\n    //We are accumulating many types so the value here is not strict\n    _AssistantStream_runStepSnapshots.set(this, {});\n    _AssistantStream_messageSnapshots.set(this, {});\n    _AssistantStream_messageSnapshot.set(this, void 0);\n    _AssistantStream_finalRun.set(this, void 0);\n    _AssistantStream_currentContentIndex.set(this, void 0);\n    _AssistantStream_currentContent.set(this, void 0);\n    _AssistantStream_currentToolCallIndex.set(this, void 0);\n    _AssistantStream_currentToolCall.set(this, void 0);\n    //For current snapshot methods\n    _AssistantStream_currentEvent.set(this, void 0);\n    _AssistantStream_currentRunSnapshot.set(this, void 0);\n    _AssistantStream_currentRunStepSnapshot.set(this, void 0);\n  }\n  [(_AssistantStream_events = new WeakMap(), _AssistantStream_runStepSnapshots = new WeakMap(), _AssistantStream_messageSnapshots = new WeakMap(), _AssistantStream_messageSnapshot = new WeakMap(), _AssistantStream_finalRun = new WeakMap(), _AssistantStream_currentContentIndex = new WeakMap(), _AssistantStream_currentContent = new WeakMap(), _AssistantStream_currentToolCallIndex = new WeakMap(), _AssistantStream_currentToolCall = new WeakMap(), _AssistantStream_currentEvent = new WeakMap(), _AssistantStream_currentRunSnapshot = new WeakMap(), _AssistantStream_currentRunStepSnapshot = new WeakMap(), _AssistantStream_instances = new WeakSet(), Symbol.asyncIterator)]() {\n    const pushQueue = [];\n    const readQueue = [];\n    let done = false;\n    //Catch all for passing along all events\n    this.on('event', event => {\n      const reader = readQueue.shift();\n      if (reader) {\n        reader.resolve(event);\n      } else {\n        pushQueue.push(event);\n      }\n    });\n    this.on('end', () => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.resolve(undefined);\n      }\n      readQueue.length = 0;\n    });\n    this.on('abort', err => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n    this.on('error', err => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n    return {\n      next: async () => {\n        if (!pushQueue.length) {\n          if (done) {\n            return {\n              value: undefined,\n              done: true\n            };\n          }\n          return new Promise((resolve, reject) => readQueue.push({\n            resolve,\n            reject\n          })).then(chunk => chunk ? {\n            value: chunk,\n            done: false\n          } : {\n            value: undefined,\n            done: true\n          });\n        }\n        const chunk = pushQueue.shift();\n        return {\n          value: chunk,\n          done: false\n        };\n      },\n      return: async () => {\n        this.abort();\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  static fromReadableStream(stream) {\n    const runner = new AssistantStream();\n    runner._run(() => runner._fromReadableStream(stream));\n    return runner;\n  }\n  async _fromReadableStream(readableStream, options) {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this._connected();\n    const stream = Stream.fromReadableStream(readableStream, this.controller);\n    for await (const event of stream) {\n      __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n  }\n  toReadableStream() {\n    const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n    return stream.toReadableStream();\n  }\n  static createToolAssistantStream(threadId, runId, runs, body, options) {\n    const runner = new AssistantStream();\n    runner._run(() => runner._runToolAssistantStream(threadId, runId, runs, body, {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'stream'\n      }\n    }));\n    return runner;\n  }\n  async _createToolAssistantStream(run, threadId, runId, params, options) {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    const body = {\n      ...params,\n      stream: true\n    };\n    const stream = await run.submitToolOutputs(threadId, runId, body, {\n      ...options,\n      signal: this.controller.signal\n    });\n    this._connected();\n    for await (const event of stream) {\n      __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n  }\n  static createThreadAssistantStream(body, thread, options) {\n    const runner = new AssistantStream();\n    runner._run(() => runner._threadAssistantStream(body, thread, {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'stream'\n      }\n    }));\n    return runner;\n  }\n  static createAssistantStream(threadId, runs, params, options) {\n    const runner = new AssistantStream();\n    runner._run(() => runner._runAssistantStream(threadId, runs, params, {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'stream'\n      }\n    }));\n    return runner;\n  }\n  currentEvent() {\n    return __classPrivateFieldGet(this, _AssistantStream_currentEvent, \"f\");\n  }\n  currentRun() {\n    return __classPrivateFieldGet(this, _AssistantStream_currentRunSnapshot, \"f\");\n  }\n  currentMessageSnapshot() {\n    return __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\");\n  }\n  currentRunStepSnapshot() {\n    return __classPrivateFieldGet(this, _AssistantStream_currentRunStepSnapshot, \"f\");\n  }\n  async finalRunSteps() {\n    await this.done();\n    return Object.values(__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\"));\n  }\n  async finalMessages() {\n    await this.done();\n    return Object.values(__classPrivateFieldGet(this, _AssistantStream_messageSnapshots, \"f\"));\n  }\n  async finalRun() {\n    await this.done();\n    if (!__classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\")) throw Error('Final run was not received.');\n    return __classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\");\n  }\n  async _createThreadAssistantStream(thread, params, options) {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    const body = {\n      ...params,\n      stream: true\n    };\n    const stream = await thread.createAndRun(body, {\n      ...options,\n      signal: this.controller.signal\n    });\n    this._connected();\n    for await (const event of stream) {\n      __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n  }\n  async _createAssistantStream(run, threadId, params, options) {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    const body = {\n      ...params,\n      stream: true\n    };\n    const stream = await run.create(threadId, body, {\n      ...options,\n      signal: this.controller.signal\n    });\n    this._connected();\n    for await (const event of stream) {\n      __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n  }\n  static accumulateDelta(acc, delta) {\n    for (const [key, deltaValue] of Object.entries(delta)) {\n      if (!acc.hasOwnProperty(key)) {\n        acc[key] = deltaValue;\n        continue;\n      }\n      let accValue = acc[key];\n      if (accValue === null || accValue === undefined) {\n        acc[key] = deltaValue;\n        continue;\n      }\n      // We don't accumulate these special properties\n      if (key === 'index' || key === 'type') {\n        acc[key] = deltaValue;\n        continue;\n      }\n      // Type-specific accumulation logic\n      if (typeof accValue === 'string' && typeof deltaValue === 'string') {\n        accValue += deltaValue;\n      } else if (typeof accValue === 'number' && typeof deltaValue === 'number') {\n        accValue += deltaValue;\n      } else if (Core.isObj(accValue) && Core.isObj(deltaValue)) {\n        accValue = this.accumulateDelta(accValue, deltaValue);\n      } else if (Array.isArray(accValue) && Array.isArray(deltaValue)) {\n        if (accValue.every(x => typeof x === 'string' || typeof x === 'number')) {\n          accValue.push(...deltaValue); // Use spread syntax for efficient addition\n          continue;\n        }\n      } else {\n        throw Error(`Unhandled record type: ${key}, deltaValue: ${deltaValue}, accValue: ${accValue}`);\n      }\n      acc[key] = accValue;\n    }\n    return acc;\n  }\n}\n_AssistantStream_addEvent = function _AssistantStream_addEvent(event) {\n  if (this.ended) return;\n  __classPrivateFieldSet(this, _AssistantStream_currentEvent, event, \"f\");\n  __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleEvent).call(this, event);\n  switch (event.event) {\n    case 'thread.created':\n      //No action on this event.\n      break;\n    case 'thread.run.created':\n    case 'thread.run.queued':\n    case 'thread.run.in_progress':\n    case 'thread.run.requires_action':\n    case 'thread.run.completed':\n    case 'thread.run.failed':\n    case 'thread.run.cancelling':\n    case 'thread.run.cancelled':\n    case 'thread.run.expired':\n      __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleRun).call(this, event);\n      break;\n    case 'thread.run.step.created':\n    case 'thread.run.step.in_progress':\n    case 'thread.run.step.delta':\n    case 'thread.run.step.completed':\n    case 'thread.run.step.failed':\n    case 'thread.run.step.cancelled':\n    case 'thread.run.step.expired':\n      __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleRunStep).call(this, event);\n      break;\n    case 'thread.message.created':\n    case 'thread.message.in_progress':\n    case 'thread.message.delta':\n    case 'thread.message.completed':\n    case 'thread.message.incomplete':\n      __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleMessage).call(this, event);\n      break;\n    case 'error':\n      //This is included for completeness, but errors are processed in the SSE event processing so this should not occur\n      throw new Error('Encountered an error event in event processing - errors should be processed earlier');\n  }\n}, _AssistantStream_endRequest = function _AssistantStream_endRequest() {\n  if (this.ended) {\n    throw new OpenAIError(`stream has ended, this shouldn't happen`);\n  }\n  if (!__classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\")) throw Error('Final run has not been received');\n  return __classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\");\n}, _AssistantStream_handleMessage = function _AssistantStream_handleMessage(event) {\n  const [accumulatedMessage, newContent] = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateMessage).call(this, event, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n  __classPrivateFieldSet(this, _AssistantStream_messageSnapshot, accumulatedMessage, \"f\");\n  __classPrivateFieldGet(this, _AssistantStream_messageSnapshots, \"f\")[accumulatedMessage.id] = accumulatedMessage;\n  for (const content of newContent) {\n    const snapshotContent = accumulatedMessage.content[content.index];\n    if (snapshotContent?.type == 'text') {\n      this._emit('textCreated', snapshotContent.text);\n    }\n  }\n  switch (event.event) {\n    case 'thread.message.created':\n      this._emit('messageCreated', event.data);\n      break;\n    case 'thread.message.in_progress':\n      break;\n    case 'thread.message.delta':\n      this._emit('messageDelta', event.data.delta, accumulatedMessage);\n      if (event.data.delta.content) {\n        for (const content of event.data.delta.content) {\n          //If it is text delta, emit a text delta event\n          if (content.type == 'text' && content.text) {\n            let textDelta = content.text;\n            let snapshot = accumulatedMessage.content[content.index];\n            if (snapshot && snapshot.type == 'text') {\n              this._emit('textDelta', textDelta, snapshot.text);\n            } else {\n              throw Error('The snapshot associated with this text delta is not text or missing');\n            }\n          }\n          if (content.index != __classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\")) {\n            //See if we have in progress content\n            if (__classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\")) {\n              switch (__classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").type) {\n                case 'text':\n                  this._emit('textDone', __classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").text, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                  break;\n                case 'image_file':\n                  this._emit('imageFileDone', __classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").image_file, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                  break;\n              }\n            }\n            __classPrivateFieldSet(this, _AssistantStream_currentContentIndex, content.index, \"f\");\n          }\n          __classPrivateFieldSet(this, _AssistantStream_currentContent, accumulatedMessage.content[content.index], \"f\");\n        }\n      }\n      break;\n    case 'thread.message.completed':\n    case 'thread.message.incomplete':\n      //We emit the latest content we were working on on completion (including incomplete)\n      if (__classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\") !== undefined) {\n        const currentContent = event.data.content[__classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\")];\n        if (currentContent) {\n          switch (currentContent.type) {\n            case 'image_file':\n              this._emit('imageFileDone', currentContent.image_file, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n              break;\n            case 'text':\n              this._emit('textDone', currentContent.text, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n              break;\n          }\n        }\n      }\n      if (__classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\")) {\n        this._emit('messageDone', event.data);\n      }\n      __classPrivateFieldSet(this, _AssistantStream_messageSnapshot, undefined, \"f\");\n  }\n}, _AssistantStream_handleRunStep = function _AssistantStream_handleRunStep(event) {\n  const accumulatedRunStep = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateRunStep).call(this, event);\n  __classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, accumulatedRunStep, \"f\");\n  switch (event.event) {\n    case 'thread.run.step.created':\n      this._emit('runStepCreated', event.data);\n      break;\n    case 'thread.run.step.delta':\n      const delta = event.data.delta;\n      if (delta.step_details && delta.step_details.type == 'tool_calls' && delta.step_details.tool_calls && accumulatedRunStep.step_details.type == 'tool_calls') {\n        for (const toolCall of delta.step_details.tool_calls) {\n          if (toolCall.index == __classPrivateFieldGet(this, _AssistantStream_currentToolCallIndex, \"f\")) {\n            this._emit('toolCallDelta', toolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index]);\n          } else {\n            if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n              this._emit('toolCallDone', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n            }\n            __classPrivateFieldSet(this, _AssistantStream_currentToolCallIndex, toolCall.index, \"f\");\n            __classPrivateFieldSet(this, _AssistantStream_currentToolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index], \"f\");\n            if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) this._emit('toolCallCreated', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n          }\n        }\n      }\n      this._emit('runStepDelta', event.data.delta, accumulatedRunStep);\n      break;\n    case 'thread.run.step.completed':\n    case 'thread.run.step.failed':\n    case 'thread.run.step.cancelled':\n    case 'thread.run.step.expired':\n      __classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, undefined, \"f\");\n      const details = event.data.step_details;\n      if (details.type == 'tool_calls') {\n        if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n          this._emit('toolCallDone', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n          __classPrivateFieldSet(this, _AssistantStream_currentToolCall, undefined, \"f\");\n        }\n      }\n      this._emit('runStepDone', event.data, accumulatedRunStep);\n      break;\n    case 'thread.run.step.in_progress':\n      break;\n  }\n}, _AssistantStream_handleEvent = function _AssistantStream_handleEvent(event) {\n  __classPrivateFieldGet(this, _AssistantStream_events, \"f\").push(event);\n  this._emit('event', event);\n}, _AssistantStream_accumulateRunStep = function _AssistantStream_accumulateRunStep(event) {\n  switch (event.event) {\n    case 'thread.run.step.created':\n      __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = event.data;\n      return event.data;\n    case 'thread.run.step.delta':\n      let snapshot = __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n      if (!snapshot) {\n        throw Error('Received a RunStepDelta before creation of a snapshot');\n      }\n      let data = event.data;\n      if (data.delta) {\n        const accumulated = AssistantStream.accumulateDelta(snapshot, data.delta);\n        __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = accumulated;\n      }\n      return __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n    case 'thread.run.step.completed':\n    case 'thread.run.step.failed':\n    case 'thread.run.step.cancelled':\n    case 'thread.run.step.expired':\n    case 'thread.run.step.in_progress':\n      __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = event.data;\n      break;\n  }\n  if (__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id]) return __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n  throw new Error('No snapshot available');\n}, _AssistantStream_accumulateMessage = function _AssistantStream_accumulateMessage(event, snapshot) {\n  let newContent = [];\n  switch (event.event) {\n    case 'thread.message.created':\n      //On creation the snapshot is just the initial message\n      return [event.data, newContent];\n    case 'thread.message.delta':\n      if (!snapshot) {\n        throw Error('Received a delta with no existing snapshot (there should be one from message creation)');\n      }\n      let data = event.data;\n      //If this delta does not have content, nothing to process\n      if (data.delta.content) {\n        for (const contentElement of data.delta.content) {\n          if (contentElement.index in snapshot.content) {\n            let currentContent = snapshot.content[contentElement.index];\n            snapshot.content[contentElement.index] = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateContent).call(this, contentElement, currentContent);\n          } else {\n            snapshot.content[contentElement.index] = contentElement;\n            //This is a new element\n            newContent.push(contentElement);\n          }\n        }\n      }\n      return [snapshot, newContent];\n    case 'thread.message.in_progress':\n    case 'thread.message.completed':\n    case 'thread.message.incomplete':\n      //No changes on other thread events\n      if (snapshot) {\n        return [snapshot, newContent];\n      } else {\n        throw Error('Received thread message event with no existing snapshot');\n      }\n  }\n  throw Error('Tried to accumulate a non-message event');\n}, _AssistantStream_accumulateContent = function _AssistantStream_accumulateContent(contentElement, currentContent) {\n  return AssistantStream.accumulateDelta(currentContent, contentElement);\n}, _AssistantStream_handleRun = function _AssistantStream_handleRun(event) {\n  __classPrivateFieldSet(this, _AssistantStream_currentRunSnapshot, event.data, \"f\");\n  switch (event.event) {\n    case 'thread.run.created':\n      break;\n    case 'thread.run.queued':\n      break;\n    case 'thread.run.in_progress':\n      break;\n    case 'thread.run.requires_action':\n    case 'thread.run.cancelled':\n    case 'thread.run.failed':\n    case 'thread.run.completed':\n    case 'thread.run.expired':\n      __classPrivateFieldSet(this, _AssistantStream_finalRun, event.data, \"f\");\n      if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n        this._emit('toolCallDone', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n        __classPrivateFieldSet(this, _AssistantStream_currentToolCall, undefined, \"f\");\n      }\n      break;\n    case 'thread.run.cancelling':\n      break;\n  }\n};","map":{"version":3,"names":["Core","AbstractAssistantStreamRunner","Stream","APIUserAbortError","OpenAIError","AssistantStream","constructor","_AssistantStream_events","set","_AssistantStream_runStepSnapshots","_AssistantStream_messageSnapshots","_AssistantStream_messageSnapshot","_AssistantStream_finalRun","_AssistantStream_currentContentIndex","_AssistantStream_currentContent","_AssistantStream_currentToolCallIndex","_AssistantStream_currentToolCall","_AssistantStream_currentEvent","_AssistantStream_currentRunSnapshot","_AssistantStream_currentRunStepSnapshot","WeakMap","_AssistantStream_instances","WeakSet","Symbol","asyncIterator","pushQueue","readQueue","done","on","event","reader","shift","resolve","push","undefined","length","err","reject","next","value","Promise","then","chunk","return","abort","fromReadableStream","stream","runner","_run","_fromReadableStream","readableStream","options","signal","aborted","controller","addEventListener","_connected","__classPrivateFieldGet","_AssistantStream_addEvent","call","_addRun","_AssistantStream_endRequest","toReadableStream","bind","createToolAssistantStream","threadId","runId","runs","body","_runToolAssistantStream","headers","_createToolAssistantStream","run","params","submitToolOutputs","createThreadAssistantStream","thread","_threadAssistantStream","createAssistantStream","_runAssistantStream","currentEvent","currentRun","currentMessageSnapshot","currentRunStepSnapshot","finalRunSteps","Object","values","finalMessages","finalRun","Error","_createThreadAssistantStream","createAndRun","_createAssistantStream","create","accumulateDelta","acc","delta","key","deltaValue","entries","hasOwnProperty","accValue","isObj","Array","isArray","every","x","ended","__classPrivateFieldSet","_AssistantStream_handleEvent","_AssistantStream_handleRun","_AssistantStream_handleRunStep","_AssistantStream_handleMessage","accumulatedMessage","newContent","_AssistantStream_accumulateMessage","id","content","snapshotContent","index","type","_emit","text","data","textDelta","snapshot","image_file","currentContent","accumulatedRunStep","_AssistantStream_accumulateRunStep","step_details","tool_calls","toolCall","details","accumulated","contentElement","_AssistantStream_accumulateContent"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/openai/src/lib/AssistantStream.ts"],"sourcesContent":["import {\n  TextContentBlock,\n  ImageFileContentBlock,\n  Message,\n  MessageContentDelta,\n  Text,\n  ImageFile,\n  TextDelta,\n  Messages,\n} from \"../resources/beta/threads/messages\";\nimport * as Core from \"../core\";\nimport { RequestOptions } from \"../core\";\nimport {\n  Run,\n  RunCreateParamsBase,\n  RunCreateParamsStreaming,\n  Runs,\n  RunSubmitToolOutputsParamsBase,\n  RunSubmitToolOutputsParamsStreaming,\n} from \"../resources/beta/threads/runs/runs\";\nimport {\n  AbstractAssistantRunnerEvents,\n  AbstractAssistantStreamRunner,\n} from './AbstractAssistantStreamRunner';\nimport { type ReadableStream } from \"../_shims/index\";\nimport { Stream } from \"../streaming\";\nimport { APIUserAbortError, OpenAIError } from \"../error\";\nimport {\n  AssistantStreamEvent,\n  MessageStreamEvent,\n  RunStepStreamEvent,\n  RunStreamEvent,\n} from \"../resources/beta/assistants\";\nimport { RunStep, RunStepDelta, ToolCall, ToolCallDelta } from \"../resources/beta/threads/runs/steps\";\nimport { ThreadCreateAndRunParamsBase, Threads } from \"../resources/beta/threads/threads\";\nimport MessageDelta = Messages.MessageDelta;\n\nexport interface AssistantStreamEvents extends AbstractAssistantRunnerEvents {\n  //New event structure\n  messageCreated: (message: Message) => void;\n  messageDelta: (message: MessageDelta, snapshot: Message) => void;\n  messageDone: (message: Message) => void;\n\n  runStepCreated: (runStep: RunStep) => void;\n  runStepDelta: (delta: RunStepDelta, snapshot: Runs.RunStep) => void;\n  runStepDone: (runStep: Runs.RunStep, snapshot: Runs.RunStep) => void;\n\n  toolCallCreated: (toolCall: ToolCall) => void;\n  toolCallDelta: (delta: ToolCallDelta, snapshot: ToolCall) => void;\n  toolCallDone: (toolCall: ToolCall) => void;\n\n  textCreated: (content: Text) => void;\n  textDelta: (delta: TextDelta, snapshot: Text) => void;\n  textDone: (content: Text, snapshot: Message) => void;\n\n  //No created or delta as this is not streamed\n  imageFileDone: (content: ImageFile, snapshot: Message) => void;\n\n  end: () => void;\n\n  event: (event: AssistantStreamEvent) => void;\n}\n\nexport type ThreadCreateAndRunParamsBaseStream = Omit<ThreadCreateAndRunParamsBase, 'stream'> & {\n  stream?: true;\n};\n\nexport type RunCreateParamsBaseStream = Omit<RunCreateParamsBase, 'stream'> & {\n  stream?: true;\n};\n\nexport type RunSubmitToolOutputsParamsStream = Omit<RunSubmitToolOutputsParamsBase, 'stream'> & {\n  stream?: true;\n};\n\nexport class AssistantStream\n  extends AbstractAssistantStreamRunner<AssistantStreamEvents>\n  implements AsyncIterable<AssistantStreamEvent>\n{\n  //Track all events in a single list for reference\n  #events: AssistantStreamEvent[] = [];\n\n  //Used to accumulate deltas\n  //We are accumulating many types so the value here is not strict\n  #runStepSnapshots: { [id: string]: Runs.RunStep } = {};\n  #messageSnapshots: { [id: string]: Message } = {};\n  #messageSnapshot: Message | undefined;\n  #finalRun: Run | undefined;\n  #currentContentIndex: number | undefined;\n  #currentContent: TextContentBlock | ImageFileContentBlock | undefined;\n  #currentToolCallIndex: number | undefined;\n  #currentToolCall: ToolCall | undefined;\n\n  //For current snapshot methods\n  #currentEvent: AssistantStreamEvent | undefined;\n  #currentRunSnapshot: Run | undefined;\n  #currentRunStepSnapshot: Runs.RunStep | undefined;\n\n  [Symbol.asyncIterator](): AsyncIterator<AssistantStreamEvent> {\n    const pushQueue: AssistantStreamEvent[] = [];\n    const readQueue: {\n      resolve: (chunk: AssistantStreamEvent | undefined) => void;\n      reject: (err: unknown) => void;\n    }[] = [];\n    let done = false;\n\n    //Catch all for passing along all events\n    this.on('event', (event) => {\n      const reader = readQueue.shift();\n      if (reader) {\n        reader.resolve(event);\n      } else {\n        pushQueue.push(event);\n      }\n    });\n\n    this.on('end', () => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.resolve(undefined);\n      }\n      readQueue.length = 0;\n    });\n\n    this.on('abort', (err) => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n\n    this.on('error', (err) => {\n      done = true;\n      for (const reader of readQueue) {\n        reader.reject(err);\n      }\n      readQueue.length = 0;\n    });\n\n    return {\n      next: async (): Promise<IteratorResult<AssistantStreamEvent>> => {\n        if (!pushQueue.length) {\n          if (done) {\n            return { value: undefined, done: true };\n          }\n          return new Promise<AssistantStreamEvent | undefined>((resolve, reject) =>\n            readQueue.push({ resolve, reject }),\n          ).then((chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }));\n        }\n        const chunk = pushQueue.shift()!;\n        return { value: chunk, done: false };\n      },\n      return: async () => {\n        this.abort();\n        return { value: undefined, done: true };\n      },\n    };\n  }\n\n  static fromReadableStream(stream: ReadableStream): AssistantStream {\n    const runner = new AssistantStream();\n    runner._run(() => runner._fromReadableStream(stream));\n    return runner;\n  }\n\n  protected async _fromReadableStream(\n    readableStream: ReadableStream,\n    options?: Core.RequestOptions,\n  ): Promise<Run> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this._connected();\n    const stream = Stream.fromReadableStream<AssistantStreamEvent>(readableStream, this.controller);\n    for await (const event of stream) {\n      this.#addEvent(event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n    return this._addRun(this.#endRequest());\n  }\n\n  toReadableStream(): ReadableStream {\n    const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n    return stream.toReadableStream();\n  }\n\n  static createToolAssistantStream(\n    threadId: string,\n    runId: string,\n    runs: Runs,\n    body: RunSubmitToolOutputsParamsStream,\n    options: RequestOptions | undefined,\n  ) {\n    const runner = new AssistantStream();\n    runner._run(() =>\n      runner._runToolAssistantStream(threadId, runId, runs, body, {\n        ...options,\n        headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\n      }),\n    );\n    return runner;\n  }\n\n  protected override async _createToolAssistantStream(\n    run: Runs,\n    threadId: string,\n    runId: string,\n    params: RunSubmitToolOutputsParamsStream,\n    options?: Core.RequestOptions,\n  ): Promise<Run> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n\n    const body: RunSubmitToolOutputsParamsStreaming = { ...params, stream: true };\n    const stream = await run.submitToolOutputs(threadId, runId, body, {\n      ...options,\n      signal: this.controller.signal,\n    });\n\n    this._connected();\n\n    for await (const event of stream) {\n      this.#addEvent(event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n\n    return this._addRun(this.#endRequest());\n  }\n\n  static createThreadAssistantStream(\n    body: ThreadCreateAndRunParamsBaseStream,\n    thread: Threads,\n    options?: RequestOptions,\n  ) {\n    const runner = new AssistantStream();\n    runner._run(() =>\n      runner._threadAssistantStream(body, thread, {\n        ...options,\n        headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\n      }),\n    );\n    return runner;\n  }\n\n  static createAssistantStream(\n    threadId: string,\n    runs: Runs,\n    params: RunCreateParamsBaseStream,\n    options?: RequestOptions,\n  ) {\n    const runner = new AssistantStream();\n    runner._run(() =>\n      runner._runAssistantStream(threadId, runs, params, {\n        ...options,\n        headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\n      }),\n    );\n    return runner;\n  }\n\n  currentEvent(): AssistantStreamEvent | undefined {\n    return this.#currentEvent;\n  }\n\n  currentRun(): Run | undefined {\n    return this.#currentRunSnapshot;\n  }\n\n  currentMessageSnapshot(): Message | undefined {\n    return this.#messageSnapshot;\n  }\n\n  currentRunStepSnapshot(): Runs.RunStep | undefined {\n    return this.#currentRunStepSnapshot;\n  }\n\n  async finalRunSteps(): Promise<Runs.RunStep[]> {\n    await this.done();\n\n    return Object.values(this.#runStepSnapshots);\n  }\n\n  async finalMessages(): Promise<Message[]> {\n    await this.done();\n\n    return Object.values(this.#messageSnapshots);\n  }\n\n  async finalRun(): Promise<Run> {\n    await this.done();\n    if (!this.#finalRun) throw Error('Final run was not received.');\n\n    return this.#finalRun;\n  }\n\n  protected override async _createThreadAssistantStream(\n    thread: Threads,\n    params: ThreadCreateAndRunParamsBase,\n    options?: Core.RequestOptions,\n  ): Promise<Run> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n\n    const body: RunCreateParamsStreaming = { ...params, stream: true };\n    const stream = await thread.createAndRun(body, { ...options, signal: this.controller.signal });\n\n    this._connected();\n\n    for await (const event of stream) {\n      this.#addEvent(event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n\n    return this._addRun(this.#endRequest());\n  }\n\n  protected override async _createAssistantStream(\n    run: Runs,\n    threadId: string,\n    params: RunCreateParamsBase,\n    options?: Core.RequestOptions,\n  ): Promise<Run> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n\n    const body: RunCreateParamsStreaming = { ...params, stream: true };\n    const stream = await run.create(threadId, body, { ...options, signal: this.controller.signal });\n\n    this._connected();\n\n    for await (const event of stream) {\n      this.#addEvent(event);\n    }\n    if (stream.controller.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n\n    return this._addRun(this.#endRequest());\n  }\n\n  #addEvent(event: AssistantStreamEvent) {\n    if (this.ended) return;\n\n    this.#currentEvent = event;\n\n    this.#handleEvent(event);\n\n    switch (event.event) {\n      case 'thread.created':\n        //No action on this event.\n        break;\n\n      case 'thread.run.created':\n      case 'thread.run.queued':\n      case 'thread.run.in_progress':\n      case 'thread.run.requires_action':\n      case 'thread.run.completed':\n      case 'thread.run.failed':\n      case 'thread.run.cancelling':\n      case 'thread.run.cancelled':\n      case 'thread.run.expired':\n        this.#handleRun(event);\n        break;\n\n      case 'thread.run.step.created':\n      case 'thread.run.step.in_progress':\n      case 'thread.run.step.delta':\n      case 'thread.run.step.completed':\n      case 'thread.run.step.failed':\n      case 'thread.run.step.cancelled':\n      case 'thread.run.step.expired':\n        this.#handleRunStep(event);\n        break;\n\n      case 'thread.message.created':\n      case 'thread.message.in_progress':\n      case 'thread.message.delta':\n      case 'thread.message.completed':\n      case 'thread.message.incomplete':\n        this.#handleMessage(event);\n        break;\n\n      case 'error':\n        //This is included for completeness, but errors are processed in the SSE event processing so this should not occur\n        throw new Error(\n          'Encountered an error event in event processing - errors should be processed earlier',\n        );\n    }\n  }\n\n  #endRequest(): Run {\n    if (this.ended) {\n      throw new OpenAIError(`stream has ended, this shouldn't happen`);\n    }\n\n    if (!this.#finalRun) throw Error('Final run has not been received');\n\n    return this.#finalRun;\n  }\n\n  #handleMessage(event: MessageStreamEvent) {\n    const [accumulatedMessage, newContent] = this.#accumulateMessage(event, this.#messageSnapshot);\n    this.#messageSnapshot = accumulatedMessage;\n    this.#messageSnapshots[accumulatedMessage.id] = accumulatedMessage;\n\n    for (const content of newContent) {\n      const snapshotContent = accumulatedMessage.content[content.index];\n      if (snapshotContent?.type == 'text') {\n        this._emit('textCreated', snapshotContent.text);\n      }\n    }\n\n    switch (event.event) {\n      case 'thread.message.created':\n        this._emit('messageCreated', event.data);\n        break;\n\n      case 'thread.message.in_progress':\n        break;\n\n      case 'thread.message.delta':\n        this._emit('messageDelta', event.data.delta, accumulatedMessage);\n\n        if (event.data.delta.content) {\n          for (const content of event.data.delta.content) {\n            //If it is text delta, emit a text delta event\n            if (content.type == 'text' && content.text) {\n              let textDelta = content.text;\n              let snapshot = accumulatedMessage.content[content.index];\n              if (snapshot && snapshot.type == 'text') {\n                this._emit('textDelta', textDelta, snapshot.text);\n              } else {\n                throw Error('The snapshot associated with this text delta is not text or missing');\n              }\n            }\n\n            if (content.index != this.#currentContentIndex) {\n              //See if we have in progress content\n              if (this.#currentContent) {\n                switch (this.#currentContent.type) {\n                  case 'text':\n                    this._emit('textDone', this.#currentContent.text, this.#messageSnapshot);\n                    break;\n                  case 'image_file':\n                    this._emit('imageFileDone', this.#currentContent.image_file, this.#messageSnapshot);\n                    break;\n                }\n              }\n\n              this.#currentContentIndex = content.index;\n            }\n\n            this.#currentContent = accumulatedMessage.content[content.index];\n          }\n        }\n\n        break;\n\n      case 'thread.message.completed':\n      case 'thread.message.incomplete':\n        //We emit the latest content we were working on on completion (including incomplete)\n        if (this.#currentContentIndex !== undefined) {\n          const currentContent = event.data.content[this.#currentContentIndex];\n          if (currentContent) {\n            switch (currentContent.type) {\n              case 'image_file':\n                this._emit('imageFileDone', currentContent.image_file, this.#messageSnapshot);\n                break;\n              case 'text':\n                this._emit('textDone', currentContent.text, this.#messageSnapshot);\n                break;\n            }\n          }\n        }\n\n        if (this.#messageSnapshot) {\n          this._emit('messageDone', event.data);\n        }\n\n        this.#messageSnapshot = undefined;\n    }\n  }\n\n  #handleRunStep(event: RunStepStreamEvent) {\n    const accumulatedRunStep = this.#accumulateRunStep(event);\n    this.#currentRunStepSnapshot = accumulatedRunStep;\n\n    switch (event.event) {\n      case 'thread.run.step.created':\n        this._emit('runStepCreated', event.data);\n        break;\n      case 'thread.run.step.delta':\n        const delta = event.data.delta;\n        if (\n          delta.step_details &&\n          delta.step_details.type == 'tool_calls' &&\n          delta.step_details.tool_calls &&\n          accumulatedRunStep.step_details.type == 'tool_calls'\n        ) {\n          for (const toolCall of delta.step_details.tool_calls) {\n            if (toolCall.index == this.#currentToolCallIndex) {\n              this._emit(\n                'toolCallDelta',\n                toolCall,\n                accumulatedRunStep.step_details.tool_calls[toolCall.index] as ToolCall,\n              );\n            } else {\n              if (this.#currentToolCall) {\n                this._emit('toolCallDone', this.#currentToolCall);\n              }\n\n              this.#currentToolCallIndex = toolCall.index;\n              this.#currentToolCall = accumulatedRunStep.step_details.tool_calls[toolCall.index];\n              if (this.#currentToolCall) this._emit('toolCallCreated', this.#currentToolCall);\n            }\n          }\n        }\n\n        this._emit('runStepDelta', event.data.delta, accumulatedRunStep);\n        break;\n      case 'thread.run.step.completed':\n      case 'thread.run.step.failed':\n      case 'thread.run.step.cancelled':\n      case 'thread.run.step.expired':\n        this.#currentRunStepSnapshot = undefined;\n        const details = event.data.step_details;\n        if (details.type == 'tool_calls') {\n          if (this.#currentToolCall) {\n            this._emit('toolCallDone', this.#currentToolCall as ToolCall);\n            this.#currentToolCall = undefined;\n          }\n        }\n        this._emit('runStepDone', event.data, accumulatedRunStep);\n        break;\n      case 'thread.run.step.in_progress':\n        break;\n    }\n  }\n\n  #handleEvent(event: AssistantStreamEvent) {\n    this.#events.push(event);\n    this._emit('event', event);\n  }\n\n  #accumulateRunStep(event: RunStepStreamEvent): Runs.RunStep {\n    switch (event.event) {\n      case 'thread.run.step.created':\n        this.#runStepSnapshots[event.data.id] = event.data;\n        return event.data;\n\n      case 'thread.run.step.delta':\n        let snapshot = this.#runStepSnapshots[event.data.id] as Runs.RunStep;\n        if (!snapshot) {\n          throw Error('Received a RunStepDelta before creation of a snapshot');\n        }\n\n        let data = event.data;\n\n        if (data.delta) {\n          const accumulated = AssistantStream.accumulateDelta(snapshot, data.delta) as Runs.RunStep;\n          this.#runStepSnapshots[event.data.id] = accumulated;\n        }\n\n        return this.#runStepSnapshots[event.data.id] as Runs.RunStep;\n\n      case 'thread.run.step.completed':\n      case 'thread.run.step.failed':\n      case 'thread.run.step.cancelled':\n      case 'thread.run.step.expired':\n      case 'thread.run.step.in_progress':\n        this.#runStepSnapshots[event.data.id] = event.data;\n        break;\n    }\n\n    if (this.#runStepSnapshots[event.data.id]) return this.#runStepSnapshots[event.data.id] as Runs.RunStep;\n    throw new Error('No snapshot available');\n  }\n\n  #accumulateMessage(\n    event: AssistantStreamEvent,\n    snapshot: Message | undefined,\n  ): [Message, MessageContentDelta[]] {\n    let newContent: MessageContentDelta[] = [];\n\n    switch (event.event) {\n      case 'thread.message.created':\n        //On creation the snapshot is just the initial message\n        return [event.data, newContent];\n\n      case 'thread.message.delta':\n        if (!snapshot) {\n          throw Error(\n            'Received a delta with no existing snapshot (there should be one from message creation)',\n          );\n        }\n\n        let data = event.data;\n\n        //If this delta does not have content, nothing to process\n        if (data.delta.content) {\n          for (const contentElement of data.delta.content) {\n            if (contentElement.index in snapshot.content) {\n              let currentContent = snapshot.content[contentElement.index];\n              snapshot.content[contentElement.index] = this.#accumulateContent(\n                contentElement,\n                currentContent,\n              );\n            } else {\n              snapshot.content[contentElement.index] = contentElement as\n                | TextContentBlock\n                | ImageFileContentBlock;\n              //This is a new element\n              newContent.push(contentElement);\n            }\n          }\n        }\n\n        return [snapshot, newContent];\n\n      case 'thread.message.in_progress':\n      case 'thread.message.completed':\n      case 'thread.message.incomplete':\n        //No changes on other thread events\n        if (snapshot) {\n          return [snapshot, newContent];\n        } else {\n          throw Error('Received thread message event with no existing snapshot');\n        }\n    }\n    throw Error('Tried to accumulate a non-message event');\n  }\n\n  #accumulateContent(\n    contentElement: MessageContentDelta,\n    currentContent: TextContentBlock | ImageFileContentBlock | undefined,\n  ): TextContentBlock | ImageFileContentBlock {\n    return AssistantStream.accumulateDelta(currentContent as unknown as Record<any, any>, contentElement) as\n      | TextContentBlock\n      | ImageFileContentBlock;\n  }\n\n  static accumulateDelta(acc: Record<string, any>, delta: Record<string, any>): Record<string, any> {\n    for (const [key, deltaValue] of Object.entries(delta)) {\n      if (!acc.hasOwnProperty(key)) {\n        acc[key] = deltaValue;\n        continue;\n      }\n\n      let accValue = acc[key];\n      if (accValue === null || accValue === undefined) {\n        acc[key] = deltaValue;\n        continue;\n      }\n\n      // We don't accumulate these special properties\n      if (key === 'index' || key === 'type') {\n        acc[key] = deltaValue;\n        continue;\n      }\n\n      // Type-specific accumulation logic\n      if (typeof accValue === 'string' && typeof deltaValue === 'string') {\n        accValue += deltaValue;\n      } else if (typeof accValue === 'number' && typeof deltaValue === 'number') {\n        accValue += deltaValue;\n      } else if (Core.isObj(accValue) && Core.isObj(deltaValue)) {\n        accValue = this.accumulateDelta(accValue as Record<string, any>, deltaValue as Record<string, any>);\n      } else if (Array.isArray(accValue) && Array.isArray(deltaValue)) {\n        if (accValue.every((x) => typeof x === 'string' || typeof x === 'number')) {\n          accValue.push(...deltaValue); // Use spread syntax for efficient addition\n          continue;\n        }\n      } else {\n        throw Error(`Unhandled record type: ${key}, deltaValue: ${deltaValue}, accValue: ${accValue}`);\n      }\n      acc[key] = accValue;\n    }\n\n    return acc;\n  }\n\n  #handleRun(event: RunStreamEvent) {\n    this.#currentRunSnapshot = event.data;\n    switch (event.event) {\n      case 'thread.run.created':\n        break;\n      case 'thread.run.queued':\n        break;\n      case 'thread.run.in_progress':\n        break;\n      case 'thread.run.requires_action':\n      case 'thread.run.cancelled':\n      case 'thread.run.failed':\n      case 'thread.run.completed':\n      case 'thread.run.expired':\n        this.#finalRun = event.data;\n        if (this.#currentToolCall) {\n          this._emit('toolCallDone', this.#currentToolCall);\n          this.#currentToolCall = undefined;\n        }\n        break;\n      case 'thread.run.cancelling':\n        break;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}