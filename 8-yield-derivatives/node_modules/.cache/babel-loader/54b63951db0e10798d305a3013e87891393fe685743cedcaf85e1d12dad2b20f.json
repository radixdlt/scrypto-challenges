{"ast":null,"code":"import { FormData, File, getMultipartRequestOptions, isFsReadStream } from \"./_shims/index.mjs\";\nexport { fileFromPath } from \"./_shims/index.mjs\";\nexport const isResponseLike = value => value != null && typeof value === 'object' && typeof value.url === 'string' && typeof value.blob === 'function';\nexport const isFileLike = value => value != null && typeof value === 'object' && typeof value.name === 'string' && typeof value.lastModified === 'number' && isBlobLike(value);\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */\nexport const isBlobLike = value => value != null && typeof value === 'object' && typeof value.size === 'number' && typeof value.type === 'string' && typeof value.text === 'function' && typeof value.slice === 'function' && typeof value.arrayBuffer === 'function';\nexport const isUploadable = value => {\n  return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);\n};\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */\nexport async function toFile(value, name, options) {\n  // If it's a promise, resolve it.\n  value = await value;\n  // Use the file's options if there isn't one provided\n  options ?? (options = isFileLike(value) ? {\n    lastModified: value.lastModified,\n    type: value.type\n  } : {});\n  if (isResponseLike(value)) {\n    const blob = await value.blob();\n    name || (name = new URL(value.url).pathname.split(/[\\\\/]/).pop() ?? 'unknown_file');\n    return new File([blob], name, options);\n  }\n  const bits = await getBytes(value);\n  name || (name = getName(value) ?? 'unknown_file');\n  if (!options.type) {\n    const type = bits[0]?.type;\n    if (typeof type === 'string') {\n      options = {\n        ...options,\n        type\n      };\n    }\n  }\n  return new File(bits, name, options);\n}\nasync function getBytes(value) {\n  let parts = [];\n  if (typeof value === 'string' || ArrayBuffer.isView(value) ||\n  // includes Uint8Array, Buffer, etc.\n  value instanceof ArrayBuffer) {\n    parts.push(value);\n  } else if (isBlobLike(value)) {\n    parts.push(await value.arrayBuffer());\n  } else if (isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n  ) {\n    for await (const chunk of value) {\n      parts.push(chunk); // TODO, consider validating?\n    }\n  } else {\n    throw new Error(`Unexpected data type: ${typeof value}; constructor: ${value?.constructor?.name}; props: ${propsForError(value)}`);\n  }\n  return parts;\n}\nfunction propsForError(value) {\n  const props = Object.getOwnPropertyNames(value);\n  return `[${props.map(p => `\"${p}\"`).join(', ')}]`;\n}\nfunction getName(value) {\n  return getStringFromMaybeBuffer(value.name) || getStringFromMaybeBuffer(value.filename) ||\n  // For fs.ReadStream\n  getStringFromMaybeBuffer(value.path)?.split(/[\\\\/]/).pop();\n}\nconst getStringFromMaybeBuffer = x => {\n  if (typeof x === 'string') return x;\n  if (typeof Buffer !== 'undefined' && x instanceof Buffer) return String(x);\n  return undefined;\n};\nconst isAsyncIterableIterator = value => value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\nexport const isMultipartBody = body => body && typeof body === 'object' && body.body && body[Symbol.toStringTag] === 'MultipartBody';\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */\nexport const maybeMultipartFormRequestOptions = async opts => {\n  if (!hasUploadableValue(opts.body)) return opts;\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\nexport const multipartFormRequestOptions = async opts => {\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\nexport const createForm = async body => {\n  const form = new FormData();\n  await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\n  return form;\n};\nconst hasUploadableValue = value => {\n  if (isUploadable(value)) return true;\n  if (Array.isArray(value)) return value.some(hasUploadableValue);\n  if (value && typeof value === 'object') {\n    for (const k in value) {\n      if (hasUploadableValue(value[k])) return true;\n    }\n  }\n  return false;\n};\nconst addFormValue = async (form, key, value) => {\n  if (value === undefined) return;\n  if (value == null) {\n    throw new TypeError(`Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`);\n  }\n  // TODO: make nested formats configurable\n  if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n    form.append(key, String(value));\n  } else if (isUploadable(value)) {\n    const file = await toFile(value);\n    form.append(key, file);\n  } else if (Array.isArray(value)) {\n    await Promise.all(value.map(entry => addFormValue(form, key + '[]', entry)));\n  } else if (typeof value === 'object') {\n    await Promise.all(Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)));\n  } else {\n    throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);\n  }\n};","map":{"version":3,"names":["FormData","File","getMultipartRequestOptions","isFsReadStream","fileFromPath","isResponseLike","value","url","blob","isFileLike","name","lastModified","isBlobLike","size","type","text","slice","arrayBuffer","isUploadable","toFile","options","URL","pathname","split","pop","bits","getBytes","getName","parts","ArrayBuffer","isView","push","isAsyncIterableIterator","chunk","Error","constructor","propsForError","props","Object","getOwnPropertyNames","map","p","join","getStringFromMaybeBuffer","filename","path","x","Buffer","String","undefined","Symbol","asyncIterator","isMultipartBody","body","toStringTag","maybeMultipartFormRequestOptions","opts","hasUploadableValue","form","createForm","multipartFormRequestOptions","Promise","all","entries","key","addFormValue","Array","isArray","some","k","TypeError","append","file","entry","prop"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/openai/src/uploads.ts"],"sourcesContent":["import { type RequestOptions } from './core';\nimport {\n  FormData,\n  File,\n  type Blob,\n  type FilePropertyBag,\n  getMultipartRequestOptions,\n  type FsReadStream,\n  isFsReadStream,\n} from './_shims/index';\nimport { MultipartBody } from './_shims/MultipartBody';\nexport { fileFromPath } from './_shims/index';\n\ntype BlobLikePart = string | ArrayBuffer | ArrayBufferView | BlobLike | Uint8Array | DataView;\nexport type BlobPart = string | ArrayBuffer | ArrayBufferView | Blob | Uint8Array | DataView;\n\n/**\n * Typically, this is a native \"File\" class.\n *\n * We provide the {@link toFile} utility to convert a variety of objects\n * into the File class.\n *\n * For convenience, you can also pass a fetch Response, or in Node,\n * the result of fs.createReadStream().\n */\nexport type Uploadable = FileLike | ResponseLike | FsReadStream;\n\n/**\n * Intended to match web.Blob, node.Blob, node-fetch.Blob, etc.\n */\nexport interface BlobLike {\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/size) */\n  readonly size: number;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/type) */\n  readonly type: string;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/text) */\n  text(): Promise<string>;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/slice) */\n  slice(start?: number, end?: number): BlobLike;\n  // unfortunately @types/node-fetch@^2.6.4 doesn't type the arrayBuffer method\n}\n\n/**\n * Intended to match web.File, node.File, node-fetch.File, etc.\n */\nexport interface FileLike extends BlobLike {\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/lastModified) */\n  readonly lastModified: number;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/name) */\n  readonly name: string;\n}\n\n/**\n * Intended to match web.Response, node.Response, node-fetch.Response, etc.\n */\nexport interface ResponseLike {\n  url: string;\n  blob(): Promise<BlobLike>;\n}\n\nexport const isResponseLike = (value: any): value is ResponseLike =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.url === 'string' &&\n  typeof value.blob === 'function';\n\nexport const isFileLike = (value: any): value is FileLike =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.name === 'string' &&\n  typeof value.lastModified === 'number' &&\n  isBlobLike(value);\n\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */\nexport const isBlobLike = (value: any): value is BlobLike & { arrayBuffer(): Promise<ArrayBuffer> } =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.size === 'number' &&\n  typeof value.type === 'string' &&\n  typeof value.text === 'function' &&\n  typeof value.slice === 'function' &&\n  typeof value.arrayBuffer === 'function';\n\nexport const isUploadable = (value: any): value is Uploadable => {\n  return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);\n};\n\nexport type ToFileInput = Uploadable | Exclude<BlobLikePart, string> | AsyncIterable<BlobLikePart>;\n\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */\nexport async function toFile(\n  value: ToFileInput | PromiseLike<ToFileInput>,\n  name?: string | null | undefined,\n  options?: FilePropertyBag | undefined,\n): Promise<FileLike> {\n  // If it's a promise, resolve it.\n  value = await value;\n\n  // Use the file's options if there isn't one provided\n  options ??= isFileLike(value) ? { lastModified: value.lastModified, type: value.type } : {};\n\n  if (isResponseLike(value)) {\n    const blob = await value.blob();\n    name ||= new URL(value.url).pathname.split(/[\\\\/]/).pop() ?? 'unknown_file';\n\n    return new File([blob as any], name, options);\n  }\n\n  const bits = await getBytes(value);\n\n  name ||= getName(value) ?? 'unknown_file';\n\n  if (!options.type) {\n    const type = (bits[0] as any)?.type;\n    if (typeof type === 'string') {\n      options = { ...options, type };\n    }\n  }\n\n  return new File(bits, name, options);\n}\n\nasync function getBytes(value: ToFileInput): Promise<Array<BlobPart>> {\n  let parts: Array<BlobPart> = [];\n  if (\n    typeof value === 'string' ||\n    ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n    value instanceof ArrayBuffer\n  ) {\n    parts.push(value);\n  } else if (isBlobLike(value)) {\n    parts.push(await value.arrayBuffer());\n  } else if (\n    isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n  ) {\n    for await (const chunk of value) {\n      parts.push(chunk as BlobPart); // TODO, consider validating?\n    }\n  } else {\n    throw new Error(\n      `Unexpected data type: ${typeof value}; constructor: ${value?.constructor\n        ?.name}; props: ${propsForError(value)}`,\n    );\n  }\n\n  return parts;\n}\n\nfunction propsForError(value: any): string {\n  const props = Object.getOwnPropertyNames(value);\n  return `[${props.map((p) => `\"${p}\"`).join(', ')}]`;\n}\n\nfunction getName(value: any): string | undefined {\n  return (\n    getStringFromMaybeBuffer(value.name) ||\n    getStringFromMaybeBuffer(value.filename) ||\n    // For fs.ReadStream\n    getStringFromMaybeBuffer(value.path)?.split(/[\\\\/]/).pop()\n  );\n}\n\nconst getStringFromMaybeBuffer = (x: string | Buffer | unknown): string | undefined => {\n  if (typeof x === 'string') return x;\n  if (typeof Buffer !== 'undefined' && x instanceof Buffer) return String(x);\n  return undefined;\n};\n\nconst isAsyncIterableIterator = (value: any): value is AsyncIterableIterator<unknown> =>\n  value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\n\nexport const isMultipartBody = (body: any): body is MultipartBody =>\n  body && typeof body === 'object' && body.body && body[Symbol.toStringTag] === 'MultipartBody';\n\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */\nexport const maybeMultipartFormRequestOptions = async <T = Record<string, unknown>>(\n  opts: RequestOptions<T>,\n): Promise<RequestOptions<T | MultipartBody>> => {\n  if (!hasUploadableValue(opts.body)) return opts;\n\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\n\nexport const multipartFormRequestOptions = async <T = Record<string, unknown>>(\n  opts: RequestOptions<T>,\n): Promise<RequestOptions<T | MultipartBody>> => {\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\n\nexport const createForm = async <T = Record<string, unknown>>(body: T | undefined): Promise<FormData> => {\n  const form = new FormData();\n  await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\n  return form;\n};\n\nconst hasUploadableValue = (value: unknown): boolean => {\n  if (isUploadable(value)) return true;\n  if (Array.isArray(value)) return value.some(hasUploadableValue);\n  if (value && typeof value === 'object') {\n    for (const k in value) {\n      if (hasUploadableValue((value as any)[k])) return true;\n    }\n  }\n  return false;\n};\n\nconst addFormValue = async (form: FormData, key: string, value: unknown): Promise<void> => {\n  if (value === undefined) return;\n  if (value == null) {\n    throw new TypeError(\n      `Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`,\n    );\n  }\n\n  // TODO: make nested formats configurable\n  if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n    form.append(key, String(value));\n  } else if (isUploadable(value)) {\n    const file = await toFile(value);\n    form.append(key, file as File);\n  } else if (Array.isArray(value)) {\n    await Promise.all(value.map((entry) => addFormValue(form, key + '[]', entry)));\n  } else if (typeof value === 'object') {\n    await Promise.all(\n      Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)),\n    );\n  } else {\n    throw new TypeError(\n      `Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`,\n    );\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}