{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar RadixIdentity_1 = tslib_1.__importDefault(require(\"./RadixIdentity\"));\nvar atommodel_1 = require(\"../atommodel\");\nvar RadixLogger_1 = require(\"../common/RadixLogger\");\nvar rpc_websockets_1 = require(\"rpc-websockets\");\nvar RadixRemoteIdentity = /** @class */function (_super) {\n  tslib_1.__extends(RadixRemoteIdentity, _super);\n  function RadixRemoteIdentity(address, token, remoteUrl) {\n    var _this = _super.call(this, address) || this;\n    _this.address = address;\n    _this.token = token;\n    _this.remoteUrl = remoteUrl;\n    return _this;\n  }\n  /**\n   * Checks if a given web socket connection is still alive, otherwise creates a new one\n   *\n   * @returns A WebSocket connection\n   */\n  RadixRemoteIdentity.prototype.getSocketConnection = function () {\n    this.socket = new rpc_websockets_1.Client(this.remoteUrl);\n    this.socket.on('error', function (error) {\n      return RadixLogger_1.logger.error(error);\n    });\n    this.socket.on('close', function () {\n      return RadixLogger_1.logger.info('Socket closed');\n    });\n    return this.socket;\n  };\n  /**\n   * Signs an atom with the wallet using the remote identity\n   *\n   * @param atom - The atom to be signed\n   * @returns A promise with the signed atom\n   */\n  RadixRemoteIdentity.prototype.signAtom = function (atom) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var socket = _this.getSocketConnection();\n      socket.on('open', function () {\n        socket.call('sign_atom', {\n          token: _this.token,\n          atom: atommodel_1.RadixSerializer.toJSON(atom)\n        }).then(function (response) {\n          atom.signatures = atommodel_1.RadixSerializer.fromJSON(response);\n          resolve(atom);\n        }).catch(function (error) {\n          reject(error);\n        }).finally(function () {\n          socket.close();\n        });\n      });\n    });\n  };\n  /**\n   * Decrypt the payload of an atom\n   *\n   * @param payload - The payload of the atom to be decrypted\n   * @returns A promise with the decrypted payload\n   */\n  RadixRemoteIdentity.prototype.decryptECIESPayload = function (payload) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return tslib_1.__generator(this, function (_a) {\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n          var socket = _this.getSocketConnection();\n          socket.on('open', function () {\n            socket.call('decrypt_ecies_payload', {\n              token: _this.token,\n              payload: payload\n            }).then(function (response) {\n              resolve(Buffer.from(response.data));\n            }).catch(function (error) {\n              reject(error);\n            }).finally(function () {\n              socket.close();\n            });\n          });\n        })];\n      });\n    });\n  };\n  RadixRemoteIdentity.prototype.decryptECIESPayloadWithProtectors = function (protectors, payload) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return tslib_1.__generator(this, function (_a) {\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n          var socket = _this.getSocketConnection();\n          socket.on('open', function () {\n            socket.call('decrypt_ecies_payload_with_protectors', {\n              token: _this.token,\n              protectors: protectors,\n              payload: payload\n            }).then(function (response) {\n              resolve(Buffer.from(response.data));\n            }).catch(function (error) {\n              reject(error);\n            }).finally(function () {\n              socket.close();\n            });\n          });\n        })];\n      });\n    });\n  };\n  /**\n   * Returns the public key of this identity synchronously\n   *\n   * @returns The public key of the identity\n   */\n  RadixRemoteIdentity.prototype.getPublicKey = function () {\n    return this.address.getPublic();\n  };\n  /**\n   * Creates a new instance of a RadixRemoteIdentity\n   *\n   * @param name - The name of the application that wants to use the remote identity\n   * @param description - The description of the application that wants to use the remote identity\n   * @param [host] - The host of the wallet\n   * @param [port] - The port in which the wallet server is being exposed\n   * @returns A promise with an instance of a RadixRemoteIdentity\n   */\n  RadixRemoteIdentity.createNew = function (name, description, permissions, host, port) {\n    if (permissions === void 0) {\n      permissions = ['sign_atom', 'decrypt_ecies_payload', 'get_public_key'];\n    }\n    if (host === void 0) {\n      host = 'localhost';\n    }\n    if (port === void 0) {\n      port = '54345';\n    }\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var token, publicKey, error_1;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n            return [4 /*yield*/, RadixRemoteIdentity.register(name, description, permissions, host, port)];\n          case 1:\n            token = _a.sent();\n            return [4 /*yield*/, RadixRemoteIdentity.getRemotePublicKey(token, host, port)];\n          case 2:\n            publicKey = _a.sent();\n            return [2 /*return*/, new RadixRemoteIdentity(atommodel_1.RadixAddress.fromPublic(publicKey), token, \"ws://\" + host + \":\" + port)];\n          case 3:\n            error_1 = _a.sent();\n            throw error_1;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Registers a RadixRemoteIdentity to the wallet\n   *\n   * @param name - The name of the application that wants to use the remote identity\n   * @param description - The description of the application that wants to use the remote identity\n   * @param [host] - The host of the wallet\n   * @param [port] - The port in which the wallet server is being exposed\n   * @returns A promise with a valid token to interact with the wallet\n   */\n  RadixRemoteIdentity.register = function (name, description, permissions, host, port) {\n    if (host === void 0) {\n      host = 'localhost';\n    }\n    if (port === void 0) {\n      port = '54345';\n    }\n    return new Promise(function (resolve, reject) {\n      // This is an independant websocket because 'register' is a static method\n      var socket = new rpc_websockets_1.Client(\"ws://\" + host + \":\" + port);\n      socket.on('open', function () {\n        socket.call('register', {\n          name: name,\n          description: description,\n          permissions: permissions\n        }).then(function (response) {\n          resolve(response.token);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    });\n  };\n  /**\n   * Returns the public key of this identity asynchronously\n   *\n   * @param [host] - The host of the wallet\n   * @param [port] - The port in which the wallet server is being exposed\n   * @returns A promise with the public key of the identity\n   */\n  RadixRemoteIdentity.getRemotePublicKey = function (token, host, port) {\n    if (host === void 0) {\n      host = 'localhost';\n    }\n    if (port === void 0) {\n      port = '54345';\n    }\n    return new Promise(function (resolve, reject) {\n      // This is an independant websocket because 'getRemotePublicKey' is a static method\n      var socket = new rpc_websockets_1.Client(\"ws://\" + host + \":\" + port);\n      socket.on('open', function () {\n        socket.call('get_public_key', {\n          token: token\n        }).then(function (response) {\n          resolve(response.data);\n        }).catch(function (error) {\n          reject(error);\n        }).finally(function () {\n          socket.close();\n        });\n      });\n    });\n  };\n  /**\n   * Determines whether the server is up or down\n   *\n   * @param [host] - The host of the wallet\n   * @param [port] - The port in which the wallet server is being exposed\n   * @returns A promise with true or false whether the server is up or down\n   */\n  RadixRemoteIdentity.isServerUp = function (host, port) {\n    if (host === void 0) {\n      host = 'localhost';\n    }\n    if (port === void 0) {\n      port = '54345';\n    }\n    return new Promise(function (resolve, reject) {\n      var socket = new rpc_websockets_1.Client(\"ws://\" + host + \":\" + port);\n      socket.on('open', function () {\n        return resolve(true);\n      });\n      setTimeout(function () {\n        if (socket && socket.ready) {\n          socket.close();\n          resolve(true);\n        } else {\n          socket.close();\n          resolve(false);\n        }\n      }, 2000);\n    });\n  };\n  return RadixRemoteIdentity;\n}(RadixIdentity_1.default);\nexports.default = RadixRemoteIdentity;","map":{"version":3,"names":["RadixIdentity_1","tslib_1","__importDefault","require","atommodel_1","RadixLogger_1","rpc_websockets_1","RadixRemoteIdentity","_super","__extends","address","token","remoteUrl","_this","call","prototype","getSocketConnection","socket","Client","on","error","logger","info","signAtom","atom","Promise","resolve","reject","RadixSerializer","toJSON","then","response","signatures","fromJSON","catch","finally","close","decryptECIESPayload","payload","Buffer","from","data","decryptECIESPayloadWithProtectors","protectors","getPublicKey","getPublic","createNew","name","description","permissions","host","port","register","_a","sent","getRemotePublicKey","publicKey","RadixAddress","fromPublic","error_1","isServerUp","setTimeout","ready","default"],"sources":["../../../../src/modules/identity/RadixRemoteIdentity.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}