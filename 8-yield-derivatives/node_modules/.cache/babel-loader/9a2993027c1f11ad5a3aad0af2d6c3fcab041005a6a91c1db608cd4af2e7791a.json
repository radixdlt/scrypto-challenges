{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar long_1 = tslib_1.__importDefault(require(\"long\"));\nvar __1 = require(\"..\");\nvar id = ':aid:';\nvar RadixAID = /** @class */function () {\n  function RadixAID(bytes) {\n    if (bytes.length !== RadixAID_1.BYTES) {\n      throw new Error(\"Bytest lenght must be \" + RadixAID_1.BYTES + \" but is \" + bytes.length);\n    }\n    this.bytes = Buffer.from(bytes);\n  }\n  RadixAID_1 = RadixAID;\n  RadixAID.from = function (hash, shards) {\n    if (shards.length === 0) {\n      throw new Error('Shards array cannot be empty');\n    }\n    var shardIndex = hash[0] % shards.length;\n    var selectedShard = shards.map(function (s) {\n      return s.toUnsigned();\n    }).sort(function (a, b) {\n      return a.compare(b);\n    }).map(function (s) {\n      return s.toSigned();\n    })[shardIndex];\n    var bytes = Buffer.alloc(this.BYTES);\n    hash.copy(bytes, 0, 0, this.HASH_BYTES);\n    Buffer.from(selectedShard.toBytes()).copy(bytes, this.HASH_BYTES);\n    return new this(bytes);\n  };\n  RadixAID.fromJSON = function (data) {\n    return new this(Buffer.from(data, 'hex'));\n  };\n  RadixAID.prototype.toJSON = function () {\n    return \"\" + id + this.bytes.toString('hex');\n  };\n  RadixAID.prototype.toDSON = function () {\n    return __1.RadixSerializer.toDSON(this);\n  };\n  RadixAID.prototype.encodeCBOR = function (encoder) {\n    var output = Buffer.alloc(this.bytes.length + 1);\n    output.writeInt8(0x08, 0);\n    this.bytes.copy(output, 1);\n    return encoder.pushAny(output);\n  };\n  RadixAID.prototype.equals = function (aid) {\n    return this.bytes.compare(aid.bytes) === 0;\n  };\n  RadixAID.prototype.toString = function () {\n    return this.bytes.toString('hex');\n  };\n  RadixAID.prototype.getShard = function () {\n    return long_1.default.fromBytes(Array.from(this.bytes.subarray(RadixAID_1.HASH_BYTES)));\n  };\n  var RadixAID_1;\n  RadixAID.BYTES = 32;\n  RadixAID.HASH_BYTES = 24;\n  RadixAID.SHARD_BYTES = 8;\n  RadixAID = RadixAID_1 = tslib_1.__decorate([__1.RadixSerializer.registerPrimitive(id), tslib_1.__metadata(\"design:paramtypes\", [Buffer])], RadixAID);\n  return RadixAID;\n}();\nexports.RadixAID = RadixAID;","map":{"version":3,"names":["long_1","tslib_1","__importDefault","require","__1","id","RadixAID","bytes","length","RadixAID_1","BYTES","Error","Buffer","from","hash","shards","shardIndex","selectedShard","map","s","toUnsigned","sort","a","b","compare","toSigned","alloc","copy","HASH_BYTES","toBytes","fromJSON","data","prototype","toJSON","toString","toDSON","RadixSerializer","encodeCBOR","encoder","output","writeInt8","pushAny","equals","aid","getShard","default","fromBytes","Array","subarray","SHARD_BYTES","__decorate","registerPrimitive","exports"],"sources":["../../../../../src/modules/atommodel/primitives/RadixAID.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}