{"ast":null,"code":"var _jsxFileName = \"/Users/mdabdurrazzak/RadInsu/src/Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DataRequestBuilder, RadixDappToolkit, RadixNetwork } from '@radixdlt/radix-dapp-toolkit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const [accountAddress, setAccountAddress] = useState('');\n  const [walletConnected, setWalletConnected] = useState(false);\n  useEffect(() => {\n    console.log('Effect hook triggered');\n\n    // Define your dApp definition address\n    const dAppDefinitionAddress = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz'; // Update with your dApp definition address\n\n    // Create a dapp configuration object for the Radix Dapp Toolkit\n    const dappConfig = {\n      networkId: RadixNetwork.Stokenet,\n      applicationVersion: '1.0.0',\n      applicationName: 'Infinix',\n      applicationDappDefinitionAddress: dAppDefinitionAddress,\n      dAppDefinitionAddress // This field will be updated and removed soon\n    };\n\n    // Instantiate DappToolkit to connect to the Radix wallet and network\n    const rdt = RadixDappToolkit(dappConfig);\n\n    // Connect a user account when wallet is connected\n    rdt.walletApi.setRequestData(DataRequestBuilder.accounts().exactly(1));\n\n    // Subscribe to updates to the user's shared wallet data\n    const subscription = rdt.walletApi.walletData$.subscribe(walletData => {\n      console.log('Received wallet data:', walletData);\n      if (walletData && walletData.accounts && walletData.accounts.length > 0) {\n        setAccountAddress(walletData.accounts[0].address);\n        setWalletConnected(true);\n      }\n    });\n\n    // Cleanup subscription on unmount\n    return () => {\n      console.log('Cleaning up subscription');\n      subscription.unsubscribe();\n    };\n  }, []); // Only run this effect once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: walletConnected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Wallet Connected Successfully\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Account Address: \", accountAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Connecting to Wallet...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(Profile, \"ZuUvQbccCtZxn3mKeysFMBXg9As=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useState","useEffect","DataRequestBuilder","RadixDappToolkit","RadixNetwork","jsxDEV","_jsxDEV","Profile","_s","accountAddress","setAccountAddress","walletConnected","setWalletConnected","console","log","dAppDefinitionAddress","dappConfig","networkId","Stokenet","applicationVersion","applicationName","applicationDappDefinitionAddress","rdt","walletApi","setRequestData","accounts","exactly","subscription","walletData$","subscribe","walletData","length","address","unsubscribe","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mdabdurrazzak/RadInsu/src/Profile.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  DataRequestBuilder,\n  RadixDappToolkit,\n  RadixNetwork,\n} from '@radixdlt/radix-dapp-toolkit';\n\nconst Profile = () => {\n  const [accountAddress, setAccountAddress] = useState('');\n  const [walletConnected, setWalletConnected] = useState(false);\n\n  useEffect(() => {\n    console.log('Effect hook triggered');\n\n    // Define your dApp definition address\n    const dAppDefinitionAddress = 'account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz'; // Update with your dApp definition address\n\n    // Create a dapp configuration object for the Radix Dapp Toolkit\n    const dappConfig = {\n      networkId: RadixNetwork.Stokenet,\n      applicationVersion: '1.0.0',\n      applicationName: 'Infinix',\n      applicationDappDefinitionAddress: dAppDefinitionAddress,\n      dAppDefinitionAddress, // This field will be updated and removed soon\n    };\n\n    // Instantiate DappToolkit to connect to the Radix wallet and network\n    const rdt = RadixDappToolkit(dappConfig);\n\n    // Connect a user account when wallet is connected\n    rdt.walletApi.setRequestData(DataRequestBuilder.accounts().exactly(1));\n\n    // Subscribe to updates to the user's shared wallet data\n    const subscription = rdt.walletApi.walletData$.subscribe((walletData) => {\n      console.log('Received wallet data:', walletData);\n      if (walletData && walletData.accounts && walletData.accounts.length > 0) {\n        setAccountAddress(walletData.accounts[0].address);\n        setWalletConnected(true);\n      }\n    });\n\n    // Cleanup subscription on unmount\n    return () => {\n      console.log('Cleaning up subscription');\n      subscription.unsubscribe();\n    };\n  }, []); // Only run this effect once on component mount\n\n  return (\n    <div>\n      {walletConnected ? (\n        <div>\n          <p>Wallet Connected Successfully</p>\n          <p>Account Address: {accountAddress}</p>\n          {/* Add additional wallet details here */}\n        </div>\n      ) : (\n        <p>Connecting to Wallet...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Profile;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,kBAAkB,EAClBC,gBAAgB,EAChBC,YAAY,QACP,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE7DC,SAAS,CAAC,MAAM;IACdY,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;;IAEpC;IACA,MAAMC,qBAAqB,GAAG,uEAAuE,CAAC,CAAC;;IAEvG;IACA,MAAMC,UAAU,GAAG;MACjBC,SAAS,EAAEb,YAAY,CAACc,QAAQ;MAChCC,kBAAkB,EAAE,OAAO;MAC3BC,eAAe,EAAE,SAAS;MAC1BC,gCAAgC,EAAEN,qBAAqB;MACvDA,qBAAqB,CAAE;IACzB,CAAC;;IAED;IACA,MAAMO,GAAG,GAAGnB,gBAAgB,CAACa,UAAU,CAAC;;IAExC;IACAM,GAAG,CAACC,SAAS,CAACC,cAAc,CAACtB,kBAAkB,CAACuB,QAAQ,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;;IAEtE;IACA,MAAMC,YAAY,GAAGL,GAAG,CAACC,SAAS,CAACK,WAAW,CAACC,SAAS,CAAEC,UAAU,IAAK;MACvEjB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEgB,UAAU,CAAC;MAChD,IAAIA,UAAU,IAAIA,UAAU,CAACL,QAAQ,IAAIK,UAAU,CAACL,QAAQ,CAACM,MAAM,GAAG,CAAC,EAAE;QACvErB,iBAAiB,CAACoB,UAAU,CAACL,QAAQ,CAAC,CAAC,CAAC,CAACO,OAAO,CAAC;QACjDpB,kBAAkB,CAAC,IAAI,CAAC;MAC1B;IACF,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvCa,YAAY,CAACM,WAAW,CAAC,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACE3B,OAAA;IAAA4B,QAAA,EACGvB,eAAe,gBACdL,OAAA;MAAA4B,QAAA,gBACE5B,OAAA;QAAA4B,QAAA,EAAG;MAA6B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACpChC,OAAA;QAAA4B,QAAA,GAAG,mBAAiB,EAACzB,cAAc;MAAA;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAErC,CAAC,gBAENhC,OAAA;MAAA4B,QAAA,EAAG;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAC9B;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC9B,EAAA,CAtDID,OAAO;AAAAgC,EAAA,GAAPhC,OAAO;AAwDb,eAAeA,OAAO;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}