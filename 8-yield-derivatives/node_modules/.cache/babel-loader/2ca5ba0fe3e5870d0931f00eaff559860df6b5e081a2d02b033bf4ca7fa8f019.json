{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateMethodResultId = exports.generateMethodParamId = exports.ContentDescriptorNotFoundInMethodError = void 0;\nvar helper_functions_1 = require(\"./helper-functions\");\n/**\n * Provides an error interface for handling when we are unable to find a contentDescriptor in a methodObject\n * when it is expected.\n *\n * @category Errors\n *\n */\nvar ContentDescriptorNotFoundInMethodError = /** @class */function () {\n  /**\n   * @param method OpenRPC Method which was used for the lookup\n   * @param contentDescriptor OpenRPC Content Descriptor that was expected to be in the method param.\n   */\n  function ContentDescriptorNotFoundInMethodError(method, contentDescriptor) {\n    this.method = method;\n    this.contentDescriptor = contentDescriptor;\n    this.name = \"OpenRPCDocumentDereferencingError\";\n    this.message = [\"Content Descriptor not found in method.\", \"Method: \" + JSON.stringify(method, undefined, \"  \"), \"ContentDescriptor: \" + JSON.stringify(contentDescriptor, undefined, \"  \")].join(\"\\n\");\n  }\n  return ContentDescriptorNotFoundInMethodError;\n}();\nexports.ContentDescriptorNotFoundInMethodError = ContentDescriptorNotFoundInMethodError;\n/**\n * Create a unique identifier for a parameter within a given method.\n * This is typically used to create hashmap keys for method to parameter mappings.\n *\n * @param method The OpenRPC Method which encloses the content descriptor\n * @param contentDescriptor The OpenRPC Content Descriptor that is a param in the method\n *\n * @returns an ID for the param/method combo.\n * It follows the format `{method.name}/{indexWithinParams}|{contentDescriptor.name}` where:\n *   1. if the method's parameter structure is \"by-name\", the format returned uses the contentDescriptor.name\n *   1. otherwise, the return value will use the params index in the list of params.\n *\n * @throws [[ContentDescriptorNotFoundInMethodError]]\n *\n * @example\n * ```typescript\n *\n * const { generateMethodParamId }\n * const methodObject = {\n *   name: \"foo\",\n *   params: [{\n *     name: \"fooParam\",\n *     schema: { type: \"integer\" }\n *   }],\n *   result: {}\n * };\n * const paramId = generateMethodParamId(methodObject, methodObject.params[0]);\n * console.log(paramId);\n * // outputs:\n * // \"foo/0/fooParam\"\n * ```\n *\n * @category GenerateID\n *\n */\nfunction generateMethodParamId(method, contentDescriptor) {\n  var pos = helper_functions_1.findIndex(method.params, function (o) {\n    return o.name == contentDescriptor.name;\n  });\n  if (pos === -1) {\n    throw new ContentDescriptorNotFoundInMethodError(method, contentDescriptor);\n  }\n  var paramId;\n  if (method.paramStructure === \"by-position\") {\n    paramId = pos.toString();\n  } else if (method.paramStructure === \"by-name\") {\n    var paramCD = method.params[pos];\n    paramId = paramCD.name;\n  } else {\n    var paramCD = method.params[pos];\n    paramId = paramCD.name + \"/\" + pos.toString();\n  }\n  return method.name + \"/\" + paramId;\n}\nexports.generateMethodParamId = generateMethodParamId;\n/**\n * Create a unique identifier for a result within a given method.\n * This is typically used to create hashmap keys for method to result mappings.\n *\n * @param method The OpenRPC Method which encloses the content descriptor\n * @param contentDescriptor The OpenRPC Content Descriptor (either a method param or the result).\n *\n * @returns an ID for the result/method combo.\n * It follows the format `{method.name}/result`.\n *\n * @throws [[ContentDescriptorNotFoundInMethodError]]\n *\n * @example\n * ```typescript\n *\n * const { generateMethodResultId }\n * const methodObject = {\n *   name: \"foo\",\n *   params: [],\n *   result: {\n *     name: \"fooResult\",\n *     schema: { type: \"string\" }\n *   }\n * };\n * const resultId = generateMethodResultId(methodObject, methodObject.result);\n * console.log(paramId);\n * // outputs:\n * // \"foo/result\"\n * ```\n *\n * @category GenerateID\n *\n */\nfunction generateMethodResultId(method, contentDescriptor) {\n  var result = method.result;\n  if (result.name !== contentDescriptor.name) {\n    throw new ContentDescriptorNotFoundInMethodError(method, contentDescriptor);\n  }\n  return method.name + \"/result\";\n}\nexports.generateMethodResultId = generateMethodResultId;","map":{"version":3,"names":["Object","defineProperty","exports","value","generateMethodResultId","generateMethodParamId","ContentDescriptorNotFoundInMethodError","helper_functions_1","require","method","contentDescriptor","name","message","JSON","stringify","undefined","join","pos","findIndex","params","o","paramId","paramStructure","toString","paramCD","result"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/open-rpc-utils/build/generate-method-id.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generateMethodResultId = exports.generateMethodParamId = exports.ContentDescriptorNotFoundInMethodError = void 0;\nvar helper_functions_1 = require(\"./helper-functions\");\n/**\n * Provides an error interface for handling when we are unable to find a contentDescriptor in a methodObject\n * when it is expected.\n *\n * @category Errors\n *\n */\nvar ContentDescriptorNotFoundInMethodError = /** @class */ (function () {\n    /**\n     * @param method OpenRPC Method which was used for the lookup\n     * @param contentDescriptor OpenRPC Content Descriptor that was expected to be in the method param.\n     */\n    function ContentDescriptorNotFoundInMethodError(method, contentDescriptor) {\n        this.method = method;\n        this.contentDescriptor = contentDescriptor;\n        this.name = \"OpenRPCDocumentDereferencingError\";\n        this.message = [\n            \"Content Descriptor not found in method.\",\n            \"Method: \" + JSON.stringify(method, undefined, \"  \"),\n            \"ContentDescriptor: \" + JSON.stringify(contentDescriptor, undefined, \"  \"),\n        ].join(\"\\n\");\n    }\n    return ContentDescriptorNotFoundInMethodError;\n}());\nexports.ContentDescriptorNotFoundInMethodError = ContentDescriptorNotFoundInMethodError;\n/**\n * Create a unique identifier for a parameter within a given method.\n * This is typically used to create hashmap keys for method to parameter mappings.\n *\n * @param method The OpenRPC Method which encloses the content descriptor\n * @param contentDescriptor The OpenRPC Content Descriptor that is a param in the method\n *\n * @returns an ID for the param/method combo.\n * It follows the format `{method.name}/{indexWithinParams}|{contentDescriptor.name}` where:\n *   1. if the method's parameter structure is \"by-name\", the format returned uses the contentDescriptor.name\n *   1. otherwise, the return value will use the params index in the list of params.\n *\n * @throws [[ContentDescriptorNotFoundInMethodError]]\n *\n * @example\n * ```typescript\n *\n * const { generateMethodParamId }\n * const methodObject = {\n *   name: \"foo\",\n *   params: [{\n *     name: \"fooParam\",\n *     schema: { type: \"integer\" }\n *   }],\n *   result: {}\n * };\n * const paramId = generateMethodParamId(methodObject, methodObject.params[0]);\n * console.log(paramId);\n * // outputs:\n * // \"foo/0/fooParam\"\n * ```\n *\n * @category GenerateID\n *\n */\nfunction generateMethodParamId(method, contentDescriptor) {\n    var pos = helper_functions_1.findIndex(method.params, function (o) { return o.name == contentDescriptor.name; });\n    if (pos === -1) {\n        throw new ContentDescriptorNotFoundInMethodError(method, contentDescriptor);\n    }\n    var paramId;\n    if (method.paramStructure === \"by-position\") {\n        paramId = pos.toString();\n    }\n    else if (method.paramStructure === \"by-name\") {\n        var paramCD = method.params[pos];\n        paramId = paramCD.name;\n    }\n    else {\n        var paramCD = method.params[pos];\n        paramId = paramCD.name + \"/\" + pos.toString();\n    }\n    return method.name + \"/\" + paramId;\n}\nexports.generateMethodParamId = generateMethodParamId;\n/**\n * Create a unique identifier for a result within a given method.\n * This is typically used to create hashmap keys for method to result mappings.\n *\n * @param method The OpenRPC Method which encloses the content descriptor\n * @param contentDescriptor The OpenRPC Content Descriptor (either a method param or the result).\n *\n * @returns an ID for the result/method combo.\n * It follows the format `{method.name}/result`.\n *\n * @throws [[ContentDescriptorNotFoundInMethodError]]\n *\n * @example\n * ```typescript\n *\n * const { generateMethodResultId }\n * const methodObject = {\n *   name: \"foo\",\n *   params: [],\n *   result: {\n *     name: \"fooResult\",\n *     schema: { type: \"string\" }\n *   }\n * };\n * const resultId = generateMethodResultId(methodObject, methodObject.result);\n * console.log(paramId);\n * // outputs:\n * // \"foo/result\"\n * ```\n *\n * @category GenerateID\n *\n */\nfunction generateMethodResultId(method, contentDescriptor) {\n    var result = method.result;\n    if (result.name !== contentDescriptor.name) {\n        throw new ContentDescriptorNotFoundInMethodError(method, contentDescriptor);\n    }\n    return method.name + \"/result\";\n}\nexports.generateMethodResultId = generateMethodResultId;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,sBAAsB,GAAGF,OAAO,CAACG,qBAAqB,GAAGH,OAAO,CAACI,sCAAsC,GAAG,KAAK,CAAC;AACxH,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIF,sCAAsC,GAAG,aAAe,YAAY;EACpE;AACJ;AACA;AACA;EACI,SAASA,sCAAsCA,CAACG,MAAM,EAAEC,iBAAiB,EAAE;IACvE,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,IAAI,GAAG,mCAAmC;IAC/C,IAAI,CAACC,OAAO,GAAG,CACX,yCAAyC,EACzC,UAAU,GAAGC,IAAI,CAACC,SAAS,CAACL,MAAM,EAAEM,SAAS,EAAE,IAAI,CAAC,EACpD,qBAAqB,GAAGF,IAAI,CAACC,SAAS,CAACJ,iBAAiB,EAAEK,SAAS,EAAE,IAAI,CAAC,CAC7E,CAACC,IAAI,CAAC,IAAI,CAAC;EAChB;EACA,OAAOV,sCAAsC;AACjD,CAAC,CAAC,CAAE;AACJJ,OAAO,CAACI,sCAAsC,GAAGA,sCAAsC;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,qBAAqBA,CAACI,MAAM,EAAEC,iBAAiB,EAAE;EACtD,IAAIO,GAAG,GAAGV,kBAAkB,CAACW,SAAS,CAACT,MAAM,CAACU,MAAM,EAAE,UAAUC,CAAC,EAAE;IAAE,OAAOA,CAAC,CAACT,IAAI,IAAID,iBAAiB,CAACC,IAAI;EAAE,CAAC,CAAC;EAChH,IAAIM,GAAG,KAAK,CAAC,CAAC,EAAE;IACZ,MAAM,IAAIX,sCAAsC,CAACG,MAAM,EAAEC,iBAAiB,CAAC;EAC/E;EACA,IAAIW,OAAO;EACX,IAAIZ,MAAM,CAACa,cAAc,KAAK,aAAa,EAAE;IACzCD,OAAO,GAAGJ,GAAG,CAACM,QAAQ,CAAC,CAAC;EAC5B,CAAC,MACI,IAAId,MAAM,CAACa,cAAc,KAAK,SAAS,EAAE;IAC1C,IAAIE,OAAO,GAAGf,MAAM,CAACU,MAAM,CAACF,GAAG,CAAC;IAChCI,OAAO,GAAGG,OAAO,CAACb,IAAI;EAC1B,CAAC,MACI;IACD,IAAIa,OAAO,GAAGf,MAAM,CAACU,MAAM,CAACF,GAAG,CAAC;IAChCI,OAAO,GAAGG,OAAO,CAACb,IAAI,GAAG,GAAG,GAAGM,GAAG,CAACM,QAAQ,CAAC,CAAC;EACjD;EACA,OAAOd,MAAM,CAACE,IAAI,GAAG,GAAG,GAAGU,OAAO;AACtC;AACAnB,OAAO,CAACG,qBAAqB,GAAGA,qBAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,sBAAsBA,CAACK,MAAM,EAAEC,iBAAiB,EAAE;EACvD,IAAIe,MAAM,GAAGhB,MAAM,CAACgB,MAAM;EAC1B,IAAIA,MAAM,CAACd,IAAI,KAAKD,iBAAiB,CAACC,IAAI,EAAE;IACxC,MAAM,IAAIL,sCAAsC,CAACG,MAAM,EAAEC,iBAAiB,CAAC;EAC/E;EACA,OAAOD,MAAM,CAACE,IAAI,GAAG,SAAS;AAClC;AACAT,OAAO,CAACE,sBAAsB,GAAGA,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}