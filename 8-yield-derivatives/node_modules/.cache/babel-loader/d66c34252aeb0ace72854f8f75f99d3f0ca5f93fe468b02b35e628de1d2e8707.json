{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionStatus = exports.TransactionType = exports.TransactionTrackingEventType = void 0;\nvar TransactionTrackingEventType;\n(function (TransactionTrackingEventType) {\n  /* A TransactionIntent was successfully created and any message has been encrypted */\n  TransactionTrackingEventType[\"INITIATED\"] = \"INITIATED\";\n  TransactionTrackingEventType[\"BUILT_FROM_INTENT\"] = \"BUILT_FROM_INTENT\";\n  TransactionTrackingEventType[\"SIGNED\"] = \"SIGNED\";\n  TransactionTrackingEventType[\"SUBMITTED\"] = \"SUBMITTED\";\n  TransactionTrackingEventType[\"ASKED_FOR_CONFIRMATION\"] = \"ASKED_FOR_CONFIRMATION\";\n  TransactionTrackingEventType[\"CONFIRMED\"] = \"CONFIRMED\";\n  /* API has finished \"finalizing\" / \"confirming\" the transaction, which now is pending. */\n  TransactionTrackingEventType[\"FINALIZED\"] = \"FINALIZED\";\n  TransactionTrackingEventType[\"UPDATE_OF_STATUS_OF_PENDING_TX\"] = \"UPDATE_OF_STATUS_OF_PENDING_TX\";\n  TransactionTrackingEventType[\"COMPLETED\"] = \"COMPLETED\";\n})(TransactionTrackingEventType = exports.TransactionTrackingEventType || (exports.TransactionTrackingEventType = {}));\nvar TransactionType;\n(function (TransactionType) {\n  TransactionType[\"FROM_ME_TO_ME\"] = \"FROM_ME_TO_ME\";\n  TransactionType[\"INCOMING\"] = \"INCOMING\";\n  TransactionType[\"OUTGOING\"] = \"OUTGOING\";\n  TransactionType[\"UNRELATED\"] = \"UNRELATED\";\n})(TransactionType = exports.TransactionType || (exports.TransactionType = {}));\nvar TransactionStatus;\n(function (TransactionStatus) {\n  TransactionStatus[\"PENDING\"] = \"PENDING\";\n  TransactionStatus[\"CONFIRMED\"] = \"CONFIRMED\";\n  TransactionStatus[\"FAILED\"] = \"FAILED\";\n})(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));","map":{"version":3,"names":["TransactionTrackingEventType","exports","TransactionType","TransactionStatus"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/application/src/dto/_types.ts"],"sourcesContent":["import {\n\tAccountAddressT,\n\tResourceIdentifierT,\n\tValidatorAddressT,\n} from '@radixdlt/account'\nimport {\n\tActionInput,\n\tActionType,\n\tExecutedAction,\n\tIntendedAction,\n\tStakeTokensInput,\n\tTransferTokensInput,\n\tUnstakeTokensInput,\n} from '../actions'\nimport {\n\tAmountT,\n\tBuiltTransactionReadyToSign,\n\tNetwork,\n} from '@radixdlt/primitives'\nimport { PublicKeyT, SignatureT } from '@radixdlt/crypto'\nimport { Observable } from 'rxjs'\nimport { Result } from 'neverthrow'\nimport { AccountT, MessageInTransaction } from '../_types'\n\nexport type StakePosition = Readonly<{\n\tvalidator: ValidatorAddressT\n\tamount: AmountT\n}>\n\nexport type UnstakePosition = Readonly<{\n\tvalidator: ValidatorAddressT\n\tamount: AmountT\n\twithdrawTxID: TransactionIdentifierT\n\tepochsUntil: number\n}>\n\n/**\n * A transaction identifier, 32 bytes hash of signature + hashOfTxBlob.\n * Used to lookup transactions by ID.\n */\nexport type TransactionIdentifierT = Readonly<{\n\t__witness: 'isTXId'\n\t__hex: string\n\ttoString: () => string\n\tequals: (other: TransactionIdentifierT) => boolean\n}>\n\nexport type TransactionIntentBuilderState = Readonly<{\n\tactionInputs: ActionInput[]\n\tmessage?: MessageInTransaction\n}>\n\nexport type TransactionIntentBuilderEncryptOption = Readonly<{\n\tencryptMessageIfAnyWithAccount: Observable<AccountT>\n\tspendingSender?: Observable<AccountAddressT>\n}>\n\nexport type TransactionIntentBuilderDoNotEncryptInput = Readonly<{\n\tspendingSender: Observable<AccountAddressT>\n}>\n\nexport type TransactionIntentBuilderDoNotEncryptOption = Readonly<{\n\tskipEncryptionOfMessageIfAny: TransactionIntentBuilderDoNotEncryptInput\n}>\nexport type TransactionIntentBuilderOptions =\n\t| TransactionIntentBuilderDoNotEncryptOption\n\t| TransactionIntentBuilderEncryptOption\n\nexport type TransactionIntentBuilderT = Readonly<{\n\t__state: TransactionIntentBuilderState\n\n\ttransferTokens: (input: TransferTokensInput) => TransactionIntentBuilderT\n\tstakeTokens: (input: StakeTokensInput) => TransactionIntentBuilderT\n\tunstakeTokens: (input: UnstakeTokensInput) => TransactionIntentBuilderT\n\tmessage: (msg: MessageInTransaction) => TransactionIntentBuilderT\n\n\t// Build\n\t__syncBuildDoNotEncryptMessageIfAny: (\n\t\tfrom: AccountAddressT,\n\t) => Result<TransactionIntent, Error>\n\n\tbuild: (\n\t\toptions: TransactionIntentBuilderOptions,\n\t) => Observable<TransactionIntent>\n}>\n\nexport type TransactionIntent = Readonly<{\n\tactions: IntendedAction[]\n\tmessage?: Buffer\n}>\n\nexport type ValidatorsRequestInput = Readonly<{\n\tsize: number\n\t// AccountAddress of last seen validator in list\n\tcursor?: string\n}>\n\nexport enum TransactionTrackingEventType {\n\t/* A TransactionIntent was successfully created and any message has been encrypted */\n\tINITIATED = 'INITIATED',\n\tBUILT_FROM_INTENT = 'BUILT_FROM_INTENT',\n\tSIGNED = 'SIGNED',\n\tSUBMITTED = 'SUBMITTED',\n\tASKED_FOR_CONFIRMATION = 'ASKED_FOR_CONFIRMATION',\n\tCONFIRMED = 'CONFIRMED',\n\t/* API has finished \"finalizing\" / \"confirming\" the transaction, which now is pending. */\n\tFINALIZED = 'FINALIZED',\n\tUPDATE_OF_STATUS_OF_PENDING_TX = 'UPDATE_OF_STATUS_OF_PENDING_TX',\n\tCOMPLETED = 'COMPLETED',\n}\n\nexport type TransactionStateSuccess<\n\tT extends TransactionState = TransactionState\n> = Readonly<{\n\teventUpdateType: TransactionTrackingEventType\n\ttransactionState: T\n}>\n\nexport type TransactionStateError = Readonly<{\n\teventUpdateType: TransactionTrackingEventType\n\terror: Error\n}>\n\nexport type TransactionStateUpdate<\n\tT extends TransactionState = TransactionState\n> = TransactionStateSuccess<T> | TransactionStateError\n\nexport type TransactionState =\n\t| TransactionIntent\n\t| BuiltTransaction\n\t| SignedTransaction\n\t| FinalizedTransaction\n\t| PendingTransaction\n\nexport type TransactionTracking = Readonly<{\n\tevents: Observable<TransactionStateUpdate>\n\tcompletion: Observable<TransactionIdentifierT>\n}>\n\nexport type TransactionHistoryOfKnownAddressRequestInput = Readonly<{\n\tsize: number\n\tcursor?: string\n}>\n\nexport type TransactionHistoryActiveAccountRequestInput = TransactionHistoryOfKnownAddressRequestInput\n\nexport type TransactionHistoryRequestInput = TransactionHistoryOfKnownAddressRequestInput &\n\tReadonly<{\n\t\taddress: AccountAddressT\n\t}>\n\nexport type RecentTransactionsRequestInput = Readonly<{\n\tnetwork: Network\n\tcursor?: string\n}>\n\nexport type SimpleExecutedTransaction = Readonly<{\n\ttxID: TransactionIdentifierT\n\tsentAt: Date\n\tstatus: TransactionStatus\n\tfee: AmountT\n\tmessage?: string\n\tactions: ExecutedAction[]\n}>\n\nexport enum TransactionType {\n\tFROM_ME_TO_ME = 'FROM_ME_TO_ME',\n\tINCOMING = 'INCOMING',\n\tOUTGOING = 'OUTGOING',\n\tUNRELATED = 'UNRELATED',\n}\n\nexport type ExecutedTransaction = SimpleExecutedTransaction &\n\tReadonly<{\n\t\ttransactionType: TransactionType\n\t}>\n\nexport type TokenAmount = Readonly<{\n\ttokenIdentifier: ResourceIdentifierT\n\tamount: AmountT\n}>\n\nexport type SimpleTokenBalance = TokenAmount\n\nexport type TokenBalance = Readonly<{\n\ttoken: Token\n\tamount: AmountT\n}>\n\nexport type Token = Readonly<{\n\tname: string\n\trri: ResourceIdentifierT\n\tsymbol: string\n\tdescription?: string\n\tgranularity: AmountT\n\tisSupplyMutable: boolean\n\tcurrentSupply: AmountT\n\ttokenInfoURL?: URL\n\ticonURL?: URL\n}>\n\nexport type StatusOfTransaction = Readonly<{\n\ttxID: TransactionIdentifierT\n\tstatus: TransactionStatus\n}>\n\nexport type BuiltTransaction = Readonly<{\n\ttransaction: BuiltTransactionReadyToSign\n\tfee: AmountT\n}>\n\nexport type SignedTransaction = Readonly<{\n\ttransaction: BuiltTransactionReadyToSign\n\tpublicKeyOfSigner: PublicKeyT\n\tsignature: SignatureT\n}>\n\nexport type FinalizedTransaction = Readonly<{\n\tblob: string\n\ttxID: TransactionIdentifierT\n}>\n\nexport type PendingTransaction = Readonly<{\n\ttxID: TransactionIdentifierT\n}>\n\nexport type RawToken = Readonly<{\n\tname: string\n\trri: string\n\tsymbol: string\n\tdescription?: string\n\tgranularity: string\n\tisSupplyMutable: boolean\n\tcurrentSupply: string\n\ttokenInfoURL: string\n\ticonURL: string\n}>\n\nexport type RawExecutedActionBase<T extends ActionType> = Readonly<{\n\ttype: T\n}>\n\nexport type RawOtherExecutedAction = RawExecutedActionBase<ActionType.OTHER>\n\nexport type RawTransferAction = RawExecutedActionBase<ActionType.TOKEN_TRANSFER> &\n\tReadonly<{\n\t\tfrom: string\n\t\tto: string\n\t\tamount: string\n\t\trri: string\n\t}>\n\nexport type RawStakesAction = RawExecutedActionBase<ActionType.STAKE_TOKENS> &\n\tReadonly<{\n\t\tfrom: string\n\t\tvalidator: string\n\t\tamount: string\n\t}>\n\nexport type RawUnstakesAction = RawExecutedActionBase<ActionType.UNSTAKE_TOKENS> &\n\tReadonly<{\n\t\tfrom: string\n\t\tvalidator: string\n\t\tamount: string\n\t}>\n\nexport type NetworkTransactionThroughput = Readonly<{\n\ttps: number\n}>\nexport type NetworkTransactionDemand = NetworkTransactionThroughput\n\nexport enum TransactionStatus {\n\tPENDING = 'PENDING',\n\tCONFIRMED = 'CONFIRMED',\n\tFAILED = 'FAILED',\n}\n\nexport type RawExecutedAction =\n\t| RawTransferAction\n\t| RawStakesAction\n\t| RawUnstakesAction\n\t| RawOtherExecutedAction\n\nexport type SimpleTokenBalances = Readonly<{\n\towner: AccountAddressT\n\ttokenBalances: SimpleTokenBalance[]\n}>\n\nexport type TokenBalances = Readonly<{\n\towner: AccountAddressT\n\ttokenBalances: TokenBalance[]\n}>\n\nexport type SimpleTransactionHistory = Readonly<{\n\tcursor: string\n\ttransactions: SimpleExecutedTransaction[]\n}>\n\nexport type TransactionHistory = SimpleTransactionHistory &\n\tReadonly<{\n\t\ttransactions: ExecutedTransaction[]\n\t}>\n\nexport type Validator = Readonly<{\n\taddress: ValidatorAddressT\n\townerAddress: AccountAddressT\n\tname: string\n\tinfoURL: URL\n\ttotalDelegatedStake: AmountT\n\townerDelegation: AmountT\n\tvalidatorFee: number\n\tregistered: boolean\n\tisExternalStakeAccepted: boolean\n\tuptimePercentage: number\n\tproposalsMissed: number\n\tproposalsCompleted: number\n}>\n\nexport type Validators = Readonly<{\n\tvalidators: Validator[]\n}>\n\nexport type RawExecutedTransaction = Readonly<{\n\ttxID: string\n\tsentAt: string\n\tfee: string\n\tmessage?: string\n\tactions: RawExecutedAction[]\n}>\n\nexport type RawValidatorResponse = Readonly<{\n\taddress: string\n\townerAddress: string\n\tname: string\n\tinfoURL: string\n\ttotalDelegatedStake: string\n\townerDelegation: string\n\tvalidatorFee: string\n\tregistered: boolean\n\tisExternalStakeAccepted: boolean\n\tuptimePercentage: string\n\tproposalsMissed: number\n\tproposalsCompleted: number\n}>\n\nexport type StakePositions = StakePosition[]\n\nexport type UnstakePositions = UnstakePosition[]\n"],"mappings":";;;;;;AAiGA,IAAYA,4BAYX;AAZD,WAAYA,4BAA4B;EACvC;EACAA,4BAAA,2BAAuB;EACvBA,4BAAA,2CAAuC;EACvCA,4BAAA,qBAAiB;EACjBA,4BAAA,2BAAuB;EACvBA,4BAAA,qDAAiD;EACjDA,4BAAA,2BAAuB;EACvB;EACAA,4BAAA,2BAAuB;EACvBA,4BAAA,qEAAiE;EACjEA,4BAAA,2BAAuB;AACxB,CAAC,EAZWA,4BAA4B,GAA5BC,OAAA,CAAAD,4BAA4B,KAA5BC,OAAA,CAAAD,4BAA4B;AAoExC,IAAYE,eAKX;AALD,WAAYA,eAAe;EAC1BA,eAAA,mCAA+B;EAC/BA,eAAA,yBAAqB;EACrBA,eAAA,yBAAqB;EACrBA,eAAA,2BAAuB;AACxB,CAAC,EALWA,eAAe,GAAfD,OAAA,CAAAC,eAAe,KAAfD,OAAA,CAAAC,eAAe;AA0G3B,IAAYC,iBAIX;AAJD,WAAYA,iBAAiB;EAC5BA,iBAAA,uBAAmB;EACnBA,iBAAA,2BAAuB;EACvBA,iBAAA,qBAAiB;AAClB,CAAC,EAJWA,iBAAiB,GAAjBF,OAAA,CAAAE,iBAAiB,KAAjBF,OAAA,CAAAE,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}