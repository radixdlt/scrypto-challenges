{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { from } from './from';\nimport { EMPTY } from './empty';\nexport function using(resourceFactory, observableFactory) {\n  return new Observable(function (subscriber) {\n    var resource;\n    try {\n      resource = resourceFactory();\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n    var result;\n    try {\n      result = observableFactory(resource);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n    var source = result ? from(result) : EMPTY;\n    var subscription = source.subscribe(subscriber);\n    return function () {\n      subscription.unsubscribe();\n      if (resource) {\n        resource.unsubscribe();\n      }\n    };\n  });\n}","map":{"version":3,"names":["Observable","from","EMPTY","using","resourceFactory","observableFactory","subscriber","resource","err","error","undefined","result","source","subscription","subscribe","unsubscribe"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/observable/using.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Unsubscribable, ObservableInput } from '../types';\nimport { from } from './from'; // from from from! LAWL\nimport { EMPTY } from './empty';\n\n/**\n * Creates an Observable that uses a resource which will be disposed at the same time as the Observable.\n *\n * <span class=\"informal\">Use it when you catch yourself cleaning up after an Observable.</span>\n *\n * `using` is a factory operator, which accepts two functions. First function returns a disposable resource.\n * It can be an arbitrary object that implements `unsubscribe` method. Second function will be injected with\n * that object and should return an Observable. That Observable can use resource object during its execution.\n * Both functions passed to `using` will be called every time someone subscribes - neither an Observable nor\n * resource object will be shared in any way between subscriptions.\n *\n * When Observable returned by `using` is subscribed, Observable returned from the second function will be subscribed\n * as well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output\n * Observable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,\n * the `unsubscribe` method on resource object will be called. This can be used to do any necessary clean up, which\n * otherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone\n * cancels subscription to an Observable via `unsubscribe`, so `using` can be used as a hook, allowing you to make\n * sure that all resources which need to exist during an Observable execution will be disposed at appropriate time.\n *\n * @see {@link defer}\n *\n * @param {function(): ISubscription} resourceFactory A function which creates any resource object\n * that implements `unsubscribe` method.\n * @param {function(resource: ISubscription): Observable<T>} observableFactory A function which\n * creates an Observable, that can use injected resource object.\n * @return {Observable<T>} An Observable that behaves the same as Observable returned by `observableFactory`, but\n * which - when completed, errored or unsubscribed - will also call `unsubscribe` on created resource object.\n */\nexport function using<T>(resourceFactory: () => Unsubscribable | void,\n                         observableFactory: (resource: Unsubscribable | void) => ObservableInput<T> | void): Observable<T> {\n  return new Observable<T>(subscriber => {\n    let resource: Unsubscribable | void;\n\n    try {\n      resource = resourceFactory();\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    let result: ObservableInput<T> | void;\n    try {\n      result = observableFactory(resource);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    const source = result ? from(result) : EMPTY;\n    const subscription = source.subscribe(subscriber);\n    return () => {\n      subscription.unsubscribe();\n      if (resource) {\n        resource.unsubscribe();\n      }\n    };\n  });\n}\n"],"mappings":"AAAA;AAEA,SAASA,UAAM,QAAM,eAAS;AAC9B,SAASC,IAAA,QAAO,QAAM;AA8BtB,SAAMC,KAAA,QAAmB;OAEvB,SAAWC,MAAAC,eAAc,EAAAC,iBAAU;SACjC,IAAIL,UAAgC,WAAAM,UAAA;IAEpC,IAAIC,QAAA;QACF;MACDA,QAAA,GAAAH,eAAA;IAAC,E,OACAI,GAAA;MACAF,UAAO,CAAAG,KAAS,CAACD,GAAA;MAClB,OAAAE,SAAA;IAED;IACA,IAAIC,MAAA;QACF;MACDA,MAAA,GAAAN,iBAAA,CAAAE,QAAA;IAAC,E,OACAC,GAAA;MACAF,UAAO,CAAAG,KAAS,CAACD,GAAA;MAClB,OAAAE,SAAA;IAED;IACA,IAAME,MAAA,GAAAD,MAAe,GAAAV,IAAO,CAAAU,MAAA,IAAUT,KAAA;IACtC,IAAAW,YAAO,GAAAD,MAAA,CAAAE,SAAA,CAAAR,UAAA;WACL,YAAa;MACbO,YAAY,CAAAE,WAAE;UACZR,QAAQ,EAAC;QACVA,QAAA,CAAAQ,WAAA;MACD;IACD;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}