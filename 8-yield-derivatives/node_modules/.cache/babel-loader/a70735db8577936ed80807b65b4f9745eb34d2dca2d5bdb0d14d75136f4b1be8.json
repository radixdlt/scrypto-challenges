{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mockedAPI = exports.mockRadixCoreAPI = exports.makeThrowingRadixCoreAPI = exports.deterministicRandomStakesForAddr = exports.deterministicRandomUnstakesForAddr = exports.deterministicRandomLookupTX = exports.deterministicRandomTXHistory = exports.deterministicRandomBalances = exports.deterministicRandomTxHistoryWithInput = exports.deterministicRandomStakesForAddress = exports.deterministicRandomUnstakesForAddress = exports.deterministicRandomBalancesForAddress = exports.erin = exports.dan = exports.carol = exports.bob = exports.alice = exports.castOfCharacters = exports.tokenByRRIMap = exports.balancesFor = exports.balanceOfFor = exports.__fallBackAlexToken = exports.radixWrappedEtherToken = exports.radixWrappedBitcoinToken = exports.goldToken = exports.barToken = exports.fooToken = exports.xrd = void 0;\nconst primitives_1 = require(\"@radixdlt/primitives\");\nconst account_1 = require(\"@radixdlt/account\");\nconst rxjs_1 = require(\"rxjs\");\nconst dto_1 = require(\"./dto\");\nconst operators_1 = require(\"rxjs/operators\");\nconst crypto_1 = require(\"@radixdlt/crypto\");\nconst actions_1 = require(\"./actions\");\nconst primitives_2 = require(\"@radixdlt/primitives\");\nexports.xrd = {\n  name: 'Rad',\n  rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n  symbol: 'XRD',\n  description: 'The native coin of Radix network',\n  granularity: primitives_2.Amount.fromUnsafe(1)._unsafeUnwrap(),\n  isSupplyMutable: false,\n  currentSupply: primitives_1.uint256Max,\n  tokenInfoURL: new URL('https://www.radixdlt.com'),\n  iconURL: new URL('https://www.image.radixdlt.com/')\n};\nexports.fooToken = {\n  name: 'Foo token',\n  rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n  symbol: 'FOO',\n  description: 'FOOest token.',\n  granularity: primitives_2.Amount.fromUnsafe(1)._unsafeUnwrap(),\n  isSupplyMutable: false,\n  currentSupply: primitives_1.uint256Max,\n  tokenInfoURL: new URL('https://www.footoken.com'),\n  iconURL: new URL('https://www.image.footoken.com/')\n};\nexports.barToken = {\n  name: 'Bar token',\n  rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n  symbol: 'BAR',\n  description: 'Bar token. Granularity E-3.',\n  granularity: primitives_2.Amount.fromUnsafe(1000)._unsafeUnwrap(),\n  isSupplyMutable: true,\n  currentSupply: primitives_1.uint256Max,\n  tokenInfoURL: new URL('https://www.bartoken.com'),\n  iconURL: new URL('https://www.image.bartoken.com/')\n};\nexports.goldToken = {\n  name: 'Gold token',\n  rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n  symbol: 'GOLD',\n  description: 'Gold token. Granularity E-12.',\n  granularity: primitives_2.Amount.fromUnsafe(1000000)._unsafeUnwrap(),\n  isSupplyMutable: false,\n  currentSupply: primitives_1.uint256Max,\n  tokenInfoURL: new URL('https://www.goldtoken.com'),\n  iconURL: new URL('https://www.image.goldtoken.com/')\n};\nexports.radixWrappedBitcoinToken = {\n  name: 'Bitcoin (wrapped on Radix)',\n  rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n  symbol: 'BTCRW',\n  description: 'Radix wrapped Bitcoin. Granularity E-18.',\n  granularity: primitives_2.Amount.fromUnsafe(1)._unsafeUnwrap(),\n  isSupplyMutable: true,\n  currentSupply: primitives_1.uint256Max,\n  tokenInfoURL: new URL('https://www.bitcoin.radix.com'),\n  iconURL: new URL('https://www.image.bitcoin.radix.com/')\n};\nexports.radixWrappedEtherToken = {\n  name: 'Ether (wrapped on Radix)',\n  rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n  symbol: 'ETHRW',\n  description: 'Radix wrapped Ether. Granularity E-9.',\n  granularity: primitives_2.Amount.fromUnsafe(1000000000)._unsafeUnwrap(),\n  isSupplyMutable: true,\n  currentSupply: primitives_1.uint256Max,\n  tokenInfoURL: new URL('https://www.ether.radix.com'),\n  iconURL: new URL('https://www.image.ether.radix.com/')\n};\nexports.__fallBackAlexToken = {\n  name: 'Alex token',\n  rri: account_1.ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n  symbol: 'ALEX',\n  description: 'Fallback token for when token for requested symbol was not found.',\n  granularity: primitives_2.Amount.fromUnsafe(1)._unsafeUnwrap(),\n  isSupplyMutable: true,\n  currentSupply: primitives_1.uint256Max,\n  tokenInfoURL: new URL('https://www.alex.token.com'),\n  iconURL: new URL('https://www.image.alex.token.com/')\n};\nconst balanceOfFor = input => {\n  const amt = primitives_2.Amount.fromUnsafe(input.amount)._unsafeUnwrap();\n  return {\n    tokenIdentifier: input.token.rri,\n    amount: amt.lt(input.token.currentSupply) ? amt : input.token.currentSupply\n  };\n};\nexports.balanceOfFor = balanceOfFor;\nconst balancesFor = (address, amount) => ({\n  owner: address,\n  tokenBalances: [(0, exports.balanceOfFor)({\n    token: exports.xrd,\n    amount\n  })]\n});\nexports.balancesFor = balancesFor;\nconst differentTokens = [exports.xrd, exports.fooToken, exports.barToken, exports.radixWrappedBitcoinToken, exports.radixWrappedEtherToken, exports.goldToken];\n// PLEASE KEEP - used as Cast of characters: https://en.wikipedia.org/wiki/Alice_and_Bob#Cast_of_characters\nexports.tokenByRRIMap = differentTokens.reduce((a, b) => a.set(b.rri, b), new Map());\nconst detPRNGWithBuffer = buffer => {\n  const bufCopy = Buffer.from(buffer);\n  let bytes = Buffer.from(buffer);\n  return () => {\n    if (bytes.length === 0) {\n      bytes = (0, crypto_1.sha256)(bufCopy);\n    }\n    const lengthToSlice = 2;\n    const buf = bytes.slice(0, lengthToSlice);\n    bytes = bytes.slice(lengthToSlice, bytes.length);\n    return Number.parseInt(buf.toString('hex'), 16);\n  };\n};\nconst addressesString = ['tdx1qspksqs77z9e24e2dr9t5de6a9kymzhszp9k7jmr2ldkzl4hvn45xsqk409dt', 'tdx1qspksqs77z9e24e2dr9t5de6a9kymzhszp9k7jmr2ldkzl4hvn45xsqk409dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt', 'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt'];\nconst characterNames = ['alice', 'bob', 'carol', 'dan', 'erin', 'frank', 'grace', 'heidi', 'ivan', 'judy', 'klara', 'leonard', 'mallory', 'niaj', 'olivia', 'peggy', 'quentin', 'rupert', 'stella', 'ted', 'ursula', 'victor', 'webdy', 'xerxez', 'yara', 'zelda'];\n/*\n* [Property in keyof ReturnType<typeof getAPI>]: ReturnType<\n        typeof getAPI\n    >[Property]\n* */\nexports.castOfCharacters = addressesString.map(s => account_1.AccountAddress.fromUnsafe(s)._unsafeUnwrap({\n  withStackTrace: true\n})).slice(0, characterNames.length);\nexports.alice = exports.castOfCharacters[0];\nexports.bob = exports.castOfCharacters[1];\nexports.carol = exports.castOfCharacters[2];\nexports.dan = exports.castOfCharacters[3];\nexports.erin = exports.castOfCharacters[4];\nconst makeListOfValidatorAddresses = () => {\n  const stringAddresses = ['tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p', 'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p'];\n  return stringAddresses.map(s => account_1.ValidatorAddress.fromUnsafe(s)._unsafeUnwrap({\n    withStackTrace: true\n  }));\n};\nconst listOfValidatorAddresses = makeListOfValidatorAddresses();\nconst detRandomValidatorAddressWithPRNG = anInt => () => {\n  const randomInt = anInt();\n  const index = randomInt % (listOfValidatorAddresses.length - 1);\n  return listOfValidatorAddresses[index];\n};\nconst randomValidatorList = (size, validatorAddress) => {\n  const validatorList = [];\n  const randomBuf = validatorAddress !== undefined ? (0, crypto_1.sha256)(validatorAddress.toString()) : (0, crypto_1.sha256)(size.toString(16));\n  const prng = detPRNGWithBuffer(randomBuf);\n  const detRandomValidatorAddress = detRandomValidatorAddressWithPRNG(prng);\n  const listSize = prng() % 5 === 1 ? size - Math.round(size / 2) : size;\n  for (let i = 0; i < listSize; i++) {\n    const random = prng();\n    const ownerAddress = exports.castOfCharacters[random % exports.castOfCharacters.length];\n    const name = characterNames[random % characterNames.length];\n    const amount = primitives_2.Amount.fromUnsafe(random)._unsafeUnwrap();\n    const bool = random % 2 === 0;\n    validatorList.push({\n      address: detRandomValidatorAddress(),\n      ownerAddress,\n      name,\n      infoURL: new URL('https://rewards.radixtokens.comcom'),\n      totalDelegatedStake: amount,\n      ownerDelegation: amount,\n      validatorFee: 2.5,\n      registered: bool,\n      isExternalStakeAccepted: bool,\n      uptimePercentage: 100.0,\n      proposalsMissed: 10,\n      proposalsCompleted: 20\n    });\n  }\n  return validatorList;\n};\nconst randomUnsignedTransaction = transactionIntent => {\n  const transactionIntentDet = Object.assign(Object.assign({}, transactionIntent), {\n    actions: transactionIntent.actions.map(a => Object.assign({}, a))\n  });\n  const detBlob = JSON.stringify(transactionIntentDet, null, 4);\n  const blobBytes = Buffer.from(detBlob);\n  const bytes32 = (0, crypto_1.sha256)(blobBytes);\n  const anInt = detPRNGWithBuffer(bytes32);\n  return {\n    transaction: {\n      blob: blobBytes.toString('hex'),\n      hashOfBlobToSign: bytes32.toString('hex')\n    },\n    fee: primitives_2.Amount.fromUnsafe(anInt())._unsafeUnwrap()\n  };\n};\nconst randomPendingTransaction = signedTx => ({\n  txID: dto_1.TransactionIdentifier.create((0, crypto_1.sha256)(Buffer.from(signedTx.transaction.blob)))._unsafeUnwrap(),\n  blob: 'awd'\n});\nconst detRandomSignedUnconfirmedTransaction = signedTransaction => Object.assign({}, randomPendingTransaction(signedTransaction));\nconst rndDemand = detPRNGWithBuffer(Buffer.from('dmnd'));\nconst randomDemand = () => ({\n  tps: rndDemand() % 200\n});\nconst rndThroughput = detPRNGWithBuffer(Buffer.from('trpt'));\nconst randomThroughput = () => ({\n  tps: rndThroughput() % 200\n});\nconst detPRNGWithPubKey = pubKey => {\n  // cannot use first, since it is always 02 or 03\n  const bytes = pubKey.asData({\n    compressed: true\n  }).slice(1, 33);\n  return detPRNGWithBuffer(bytes);\n};\nconst detRandBalanceOfTokenWithInfo = png => {\n  const anInt = png;\n  const availableTokens = [...differentTokens];\n  const deterministicRandomToken = () => {\n    const tokenCount = availableTokens.length;\n    const tokenIndex = anInt() % tokenCount;\n    const token = availableTokens[tokenIndex];\n    availableTokens.splice(tokenIndex, 1);\n    return token;\n  };\n  const size = Math.max(anInt() % availableTokens.length, 1);\n  return Array(size).fill(undefined).map(_ => {\n    const token = deterministicRandomToken();\n    const amtOrZero = anInt() % 10000;\n    const amtFactor = primitives_2.Amount.fromUnsafe(Math.max(10, amtOrZero))._unsafeUnwrap();\n    const amount = primitives_2.Amount.fromUnsafe(token.granularity.mul(amtFactor))._unsafeUnwrap();\n    return {\n      token,\n      amount\n    };\n  });\n};\nconst deterministicRandomBalancesForAddress = address => {\n  const anInt = detPRNGWithPubKey(address.publicKey);\n  const tokenBalances = detRandBalanceOfTokenWithInfo(anInt).map(bti => (0, exports.balanceOfFor)(bti));\n  return {\n    owner: address,\n    tokenBalances\n  };\n};\nexports.deterministicRandomBalancesForAddress = deterministicRandomBalancesForAddress;\nconst deterministicRandomUnstakesForAddress = address => {\n  const anInt = detPRNGWithPubKey(address.publicKey);\n  const size = anInt() % 7;\n  return Array(size).fill(undefined).map((_, index) => {\n    const detRandomValidatorAddress = detRandomValidatorAddressWithPRNG(anInt);\n    const validator = detRandomValidatorAddress();\n    const amount = primitives_2.Amount.fromUnsafe(anInt())._unsafeUnwrap();\n    const bytesFromIndex = Buffer.allocUnsafe(2);\n    bytesFromIndex.writeUInt16BE(index);\n    const txIDBuffer = (0, crypto_1.sha256)(Buffer.concat([address.publicKey.asData({\n      compressed: true\n    }), bytesFromIndex]));\n    const withdrawTxID = dto_1.TransactionIdentifier.create(txIDBuffer)._unsafeUnwrap();\n    const epochsUntil = anInt() % 5;\n    return {\n      amount,\n      validator,\n      epochsUntil: epochsUntil > 60 ? 0 : epochsUntil,\n      withdrawTxID\n    };\n  });\n};\nexports.deterministicRandomUnstakesForAddress = deterministicRandomUnstakesForAddress;\nconst deterministicRandomStakesForAddress = address => (0, exports.deterministicRandomUnstakesForAddress)(address).map(un => Object.assign({}, un));\nexports.deterministicRandomStakesForAddress = deterministicRandomStakesForAddress;\nconst deterministicRandomTxHistoryWithInput = input => {\n  const address = input.address;\n  const anInt = detPRNGWithPubKey(address.publicKey);\n  const pubKeyBytes = address.publicKey.asData({\n    compressed: true\n  }).slice(1, 33);\n  const detRandomAddress = () => exports.castOfCharacters[anInt() % exports.castOfCharacters.length];\n  const detRandomValidatorAddress = detRandomValidatorAddressWithPRNG(anInt);\n  const tokenAndAmounts = detRandBalanceOfTokenWithInfo(anInt);\n  const deterministicRandomExecutedTransactions = () => Array(input.size).fill(undefined).map((_, index) => {\n    const bytesFromIndex = Buffer.allocUnsafe(2);\n    bytesFromIndex.writeUInt16BE(index);\n    const txIDBuffer = (0, crypto_1.sha256)(Buffer.concat([pubKeyBytes, bytesFromIndex]));\n    const date = new Date('2020-03-14T15:32:05');\n    date.setMonth(index % 12);\n    const txID = dto_1.TransactionIdentifier.create(txIDBuffer)._unsafeUnwrap();\n    const detMakeActionForTx = () => {\n      // mock max 5 actions per tx in history, min 1.\n      const actionCount = Math.max(anInt() % 5, 1);\n      return Array(actionCount).fill(undefined).map((_, actionIndex) => {\n        const v = anInt() % 4; // Transfer, Stake, Unstake, Other\n        const actionType = v === 0 ? actions_1.ActionType.TOKEN_TRANSFER : v === 1 ? actions_1.ActionType.STAKE_TOKENS : v === 2 ? actions_1.ActionType.UNSTAKE_TOKENS : actions_1.ActionType.OTHER;\n        let executedAction;\n        const tokenAndAmount = tokenAndAmounts[actionIndex % tokenAndAmounts.length];\n        switch (actionType) {\n          case actions_1.ActionType.OTHER:\n            executedAction = {\n              type: actions_1.ActionType.OTHER\n            };\n            break;\n          case actions_1.ActionType.STAKE_TOKENS:\n            executedAction = {\n              type: actions_1.ActionType.STAKE_TOKENS,\n              from: address,\n              amount: primitives_2.Amount.fromUnsafe(anInt())._unsafeUnwrap(),\n              validator: detRandomValidatorAddress()\n            };\n            break;\n          case actions_1.ActionType.UNSTAKE_TOKENS:\n            executedAction = {\n              type: actions_1.ActionType.UNSTAKE_TOKENS,\n              from: address,\n              amount: primitives_2.Amount.fromUnsafe(anInt())._unsafeUnwrap(),\n              validator: detRandomValidatorAddress()\n            };\n            break;\n          case actions_1.ActionType.TOKEN_TRANSFER:\n            executedAction = {\n              type: actions_1.ActionType.TOKEN_TRANSFER,\n              from_account: address.toString(),\n              to_account: detRandomAddress().toString(),\n              amount: tokenAndAmount.amount,\n              rri: tokenAndAmount.token.rri\n            };\n            break;\n        }\n        return executedAction;\n      });\n    };\n    const rndTxTypeInt = anInt() % 3;\n    const transactionType = rndTxTypeInt === 0 ? dto_1.TransactionType.INCOMING : rndTxTypeInt === 1 ? dto_1.TransactionType.FROM_ME_TO_ME : dto_1.TransactionType.OUTGOING;\n    return {\n      txID,\n      sentAt: date,\n      transactionType,\n      fee: primitives_2.Amount.fromUnsafe(anInt())._unsafeUnwrap(),\n      // message?: {\n      // \tmsg: string\n      // \tencryptionScheme: string\n      // }\n      actions: detMakeActionForTx()\n    };\n  });\n  const updatedCursor = (0, crypto_1.sha256)(input.cursor !== undefined ? Buffer.from(input.cursor) : pubKeyBytes).toString('hex');\n  return {\n    cursor: updatedCursor,\n    transactions: deterministicRandomExecutedTransactions()\n  };\n};\nexports.deterministicRandomTxHistoryWithInput = deterministicRandomTxHistoryWithInput;\nconst deterministicRandomLookupTXUsingHist = txID => {\n  const seed = (0, crypto_1.sha256)(Buffer.from(txID.__hex, 'hex'));\n  const addressWithTXIdBytesAsSeed = account_1.AccountAddress.fromPublicKeyAndNetwork({\n    publicKey: crypto_1.PrivateKey.fromBuffer(seed)._unsafeUnwrap().publicKey(),\n    network: primitives_1.Network.MAINNET\n  });\n  const txs = (0, exports.deterministicRandomTxHistoryWithInput)({\n    size: 1,\n    address: addressWithTXIdBytesAsSeed\n  }).transactions;\n  if (txs.length === 0) {\n    throw new Error('Expected at least one tx...');\n  }\n  return Object.assign(Object.assign({}, txs[0]), {\n    txID\n  });\n};\nconst deterministicRandomBalances = address => (0, rxjs_1.of)((0, exports.deterministicRandomBalancesForAddress)(address));\nexports.deterministicRandomBalances = deterministicRandomBalances;\nconst deterministicRandomTXHistory = input => (0, rxjs_1.of)((0, exports.deterministicRandomTxHistoryWithInput)(input));\nexports.deterministicRandomTXHistory = deterministicRandomTXHistory;\nconst deterministicRandomLookupTX = txID => (0, rxjs_1.of)(deterministicRandomLookupTXUsingHist(txID));\nexports.deterministicRandomLookupTX = deterministicRandomLookupTX;\nconst deterministicRandomUnstakesForAddr = address => (0, rxjs_1.of)((0, exports.deterministicRandomUnstakesForAddress)(address));\nexports.deterministicRandomUnstakesForAddr = deterministicRandomUnstakesForAddr;\nconst deterministicRandomStakesForAddr = address => (0, rxjs_1.of)((0, exports.deterministicRandomStakesForAddress)(address));\nexports.deterministicRandomStakesForAddr = deterministicRandomStakesForAddr;\nconst makeThrowingRadixCoreAPI = nodeUrl => ({\n  node: {\n    url: new URL(nodeUrl !== null && nodeUrl !== void 0 ? nodeUrl : 'https://www.radixdlt.com/')\n  },\n  networkId: () => {\n    throw Error('Not implemented');\n  },\n  tokenBalancesForAddress: _address => {\n    throw Error('Not implemented');\n  },\n  lookupTransaction: _txID => {\n    throw Error('Not implemented');\n  },\n  validators: _input => {\n    throw Error('Not implemented');\n  },\n  lookupValidator: _input => {\n    throw Error('Not implemented');\n  },\n  transactionHistory: _input => {\n    throw Error('Not implemented');\n  },\n  nativeToken: () => {\n    throw Error('Not implemented');\n  },\n  tokenInfo: _rri => {\n    throw Error('Not implemented');\n  },\n  stakesForAddress: _address => {\n    throw Error('Not implemented');\n  },\n  unstakesForAddress: _address => {\n    throw Error('Not implemented');\n  },\n  transactionStatus: _txID => {\n    throw Error('Not implemented');\n  },\n  NetworkTransactionThroughput: () => {\n    throw Error('Not implemented');\n  },\n  NetworkTransactionDemand: () => {\n    throw Error('Not implemented');\n  },\n  buildTransaction: _transactionIntent => {\n    throw Error('Not implemented');\n  },\n  submitSignedTransaction: _signedTransaction => {\n    throw Error('Not implemented');\n  },\n  finalizeTransaction: _signedUnconfirmedTransaction => {\n    throw Error('Not implemented');\n  }\n});\nexports.makeThrowingRadixCoreAPI = makeThrowingRadixCoreAPI;\nlet txStatusMapCounter = undefined;\nconst mockRadixCoreAPI = input => {\n  var _a;\n  txStatusMapCounter = new Map();\n  return {\n    node: {\n      url: new URL((_a = input === null || input === void 0 ? void 0 : input.nodeUrl) !== null && _a !== void 0 ? _a : 'https://www.radixdlt.com/')\n    },\n    networkId: () => {\n      var _a;\n      return (0, rxjs_1.of)((_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : primitives_1.Network.MAINNET).pipe((0, operators_1.shareReplay)(1));\n    },\n    nativeToken: () => (0, rxjs_1.of)(exports.xrd),\n    tokenInfo: rri => {\n      var _a;\n      return (0, rxjs_1.of)((_a = exports.tokenByRRIMap.get(rri)) !== null && _a !== void 0 ? _a : exports.__fallBackAlexToken);\n    },\n    tokenBalancesForAddress: exports.deterministicRandomBalances,\n    transactionStatus: txID => {\n      var _a;\n      const last = (_a = txStatusMapCounter.get(txID)) !== null && _a !== void 0 ? _a : 0;\n      const incremented = last + 1;\n      txStatusMapCounter.set(txID, incremented);\n      const status = last <= 1 ? dto_1.TransactionStatus.PENDING : dto_1.TransactionStatus.CONFIRMED;\n      return (0, rxjs_1.of)({\n        txID,\n        status // when TransactionStatus.FAIL ?\n      });\n    },\n    validators: input => (0, rxjs_1.of)({\n      cursor: 'cursor',\n      validators: randomValidatorList(input.size)\n    }),\n    lookupValidator: validatorAddress => {\n      const validatorRnd = randomValidatorList(1, validatorAddress)[0];\n      const validator = Object.assign(Object.assign({}, validatorRnd), {\n        address: validatorAddress\n      });\n      return (0, rxjs_1.of)(validator);\n    },\n    buildTransaction: transactionIntent => (0, rxjs_1.of)(randomUnsignedTransaction(transactionIntent)),\n    finalizeTransaction: signedTransaction => (0, rxjs_1.of)(detRandomSignedUnconfirmedTransaction(signedTransaction)),\n    submitSignedTransaction: signedUnconfirmedTX => (0, rxjs_1.of)(signedUnconfirmedTX),\n    NetworkTransactionDemand: () => (0, rxjs_1.of)(randomDemand()),\n    NetworkTransactionThroughput: () => (0, rxjs_1.of)(randomThroughput()),\n    transactionHistory: exports.deterministicRandomTXHistory,\n    lookupTransaction: exports.deterministicRandomLookupTX,\n    unstakesForAddress: exports.deterministicRandomUnstakesForAddr,\n    stakesForAddress: exports.deterministicRandomStakesForAddr\n  };\n};\nexports.mockRadixCoreAPI = mockRadixCoreAPI;\nexports.mockedAPI = (0, rxjs_1.of)((0, exports.mockRadixCoreAPI)());","map":{"version":3,"names":["primitives_1","require","account_1","rxjs_1","dto_1","operators_1","crypto_1","actions_1","primitives_2","exports","xrd","name","rri","ResourceIdentifier","fromUnsafe","_unsafeUnwrap","symbol","description","granularity","Amount","isSupplyMutable","currentSupply","uint256Max","tokenInfoURL","URL","iconURL","fooToken","barToken","goldToken","radixWrappedBitcoinToken","radixWrappedEtherToken","__fallBackAlexToken","balanceOfFor","input","amt","amount","tokenIdentifier","token","lt","balancesFor","address","owner","tokenBalances","differentTokens","tokenByRRIMap","reduce","a","b","set","Map","detPRNGWithBuffer","buffer","bufCopy","Buffer","from","bytes","length","sha256","lengthToSlice","buf","slice","Number","parseInt","toString","addressesString","characterNames","castOfCharacters","map","s","AccountAddress","withStackTrace","alice","bob","carol","dan","erin","makeListOfValidatorAddresses","stringAddresses","ValidatorAddress","listOfValidatorAddresses","detRandomValidatorAddressWithPRNG","anInt","randomInt","index","randomValidatorList","size","validatorAddress","validatorList","randomBuf","undefined","prng","detRandomValidatorAddress","listSize","Math","round","i","random","ownerAddress","bool","push","infoURL","totalDelegatedStake","ownerDelegation","validatorFee","registered","isExternalStakeAccepted","uptimePercentage","proposalsMissed","proposalsCompleted","randomUnsignedTransaction","transactionIntent","transactionIntentDet","Object","assign","actions","detBlob","JSON","stringify","blobBytes","bytes32","transaction","blob","hashOfBlobToSign","fee","randomPendingTransaction","signedTx","txID","TransactionIdentifier","create","detRandomSignedUnconfirmedTransaction","signedTransaction","rndDemand","randomDemand","tps","rndThroughput","randomThroughput","detPRNGWithPubKey","pubKey","asData","compressed","detRandBalanceOfTokenWithInfo","png","availableTokens","deterministicRandomToken","tokenCount","tokenIndex","splice","max","Array","fill","_","amtOrZero","amtFactor","mul","deterministicRandomBalancesForAddress","publicKey","bti","deterministicRandomUnstakesForAddress","validator","bytesFromIndex","allocUnsafe","writeUInt16BE","txIDBuffer","concat","withdrawTxID","epochsUntil","deterministicRandomStakesForAddress","un","deterministicRandomTxHistoryWithInput","pubKeyBytes","detRandomAddress","tokenAndAmounts","deterministicRandomExecutedTransactions","date","Date","setMonth","detMakeActionForTx","actionCount","actionIndex","v","actionType","ActionType","TOKEN_TRANSFER","STAKE_TOKENS","UNSTAKE_TOKENS","OTHER","executedAction","tokenAndAmount","type","from_account","to_account","rndTxTypeInt","transactionType","TransactionType","INCOMING","FROM_ME_TO_ME","OUTGOING","sentAt","updatedCursor","cursor","transactions","deterministicRandomLookupTXUsingHist","seed","__hex","addressWithTXIdBytesAsSeed","fromPublicKeyAndNetwork","PrivateKey","fromBuffer","network","Network","MAINNET","txs","Error","deterministicRandomBalances","of","deterministicRandomTXHistory","deterministicRandomLookupTX","deterministicRandomUnstakesForAddr","deterministicRandomStakesForAddr","makeThrowingRadixCoreAPI","nodeUrl","node","url","networkId","tokenBalancesForAddress","_address","lookupTransaction","_txID","validators","_input","lookupValidator","transactionHistory","nativeToken","tokenInfo","_rri","stakesForAddress","unstakesForAddress","transactionStatus","NetworkTransactionThroughput","NetworkTransactionDemand","buildTransaction","_transactionIntent","submitSignedTransaction","_signedTransaction","finalizeTransaction","_signedUnconfirmedTransaction","txStatusMapCounter","mockRadixCoreAPI","_a","pipe","shareReplay","get","last","incremented","status","TransactionStatus","PENDING","CONFIRMED","validatorRnd","signedUnconfirmedTX","mockedAPI"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/application/src/mockRadix.ts"],"sourcesContent":["import {\n\tAmountOrUnsafeInput,\n\tAmountT,\n\tuint256Max,\n\tNetwork,\n} from '@radixdlt/primitives'\nimport {\n\tAccountAddress,\n\tAccountAddressT,\n\tResourceIdentifier,\n\tResourceIdentifierT,\n\tValidatorAddress,\n\tValidatorAddressT,\n} from '@radixdlt/account'\nimport { Observable, of } from 'rxjs'\nimport {\n\tBuiltTransaction,\n\tExecutedTransaction,\n\tFinalizedTransaction,\n\tNetworkTransactionDemand,\n\tNetworkTransactionThroughput,\n\tPendingTransaction,\n\tSignedTransaction,\n\tSimpleExecutedTransaction,\n\tSimpleTokenBalance,\n\tSimpleTokenBalances,\n\tStakePosition,\n\tStakePositions,\n\tStatusOfTransaction,\n\tToken,\n\tTransactionHistory,\n\tTransactionHistoryRequestInput,\n\tTransactionIdentifierT,\n\tTransactionIntent,\n\tTransactionStatus,\n\tTransactionType,\n\tUnstakePosition,\n\tUnstakePositions,\n\tValidator,\n\tValidators,\n\tValidatorsRequestInput,\n\tTransactionIdentifier,\n} from './dto'\nimport { RadixCoreAPI } from './api'\nimport { shareReplay } from 'rxjs/operators'\nimport { PrivateKey, PublicKeyT, sha256 } from '@radixdlt/crypto'\nimport { ActionType, ExecutedAction } from './actions'\nimport { Amount } from '@radixdlt/primitives'\n\nexport const xrd: Token = {\n\tname: 'Rad',\n\trri: ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n\tsymbol: 'XRD',\n\tdescription: 'The native coin of Radix network',\n\tgranularity: Amount.fromUnsafe(1)._unsafeUnwrap(),\n\tisSupplyMutable: false,\n\tcurrentSupply: uint256Max,\n\ttokenInfoURL: new URL('https://www.radixdlt.com'),\n\ticonURL: new URL('https://www.image.radixdlt.com/'),\n}\n\nexport const fooToken: Token = {\n\tname: 'Foo token',\n\trri: ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n\tsymbol: 'FOO',\n\tdescription: 'FOOest token.',\n\tgranularity: Amount.fromUnsafe(1)._unsafeUnwrap(),\n\tisSupplyMutable: false,\n\tcurrentSupply: uint256Max,\n\ttokenInfoURL: new URL('https://www.footoken.com'),\n\ticonURL: new URL('https://www.image.footoken.com/'),\n}\n\nexport const barToken: Token = {\n\tname: 'Bar token',\n\trri: ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n\tsymbol: 'BAR',\n\tdescription: 'Bar token. Granularity E-3.',\n\tgranularity: Amount.fromUnsafe(1000)._unsafeUnwrap(),\n\tisSupplyMutable: true,\n\tcurrentSupply: uint256Max,\n\ttokenInfoURL: new URL('https://www.bartoken.com'),\n\ticonURL: new URL('https://www.image.bartoken.com/'),\n}\n\nexport const goldToken: Token = {\n\tname: 'Gold token',\n\trri: ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n\tsymbol: 'GOLD',\n\tdescription: 'Gold token. Granularity E-12.',\n\tgranularity: Amount.fromUnsafe(1_000_000)._unsafeUnwrap(),\n\tisSupplyMutable: false,\n\tcurrentSupply: uint256Max,\n\ttokenInfoURL: new URL('https://www.goldtoken.com'),\n\ticonURL: new URL('https://www.image.goldtoken.com/'),\n}\n\nexport const radixWrappedBitcoinToken: Token = {\n\tname: 'Bitcoin (wrapped on Radix)',\n\trri: ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n\tsymbol: 'BTCRW',\n\tdescription: 'Radix wrapped Bitcoin. Granularity E-18.',\n\tgranularity: Amount.fromUnsafe(1)._unsafeUnwrap(),\n\tisSupplyMutable: true,\n\tcurrentSupply: uint256Max,\n\ttokenInfoURL: new URL('https://www.bitcoin.radix.com'),\n\ticonURL: new URL('https://www.image.bitcoin.radix.com/'),\n}\n\nexport const radixWrappedEtherToken: Token = {\n\tname: 'Ether (wrapped on Radix)',\n\trri: ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n\tsymbol: 'ETHRW',\n\tdescription: 'Radix wrapped Ether. Granularity E-9.',\n\tgranularity: Amount.fromUnsafe(1_000_000_000)._unsafeUnwrap(),\n\tisSupplyMutable: true,\n\tcurrentSupply: uint256Max,\n\ttokenInfoURL: new URL('https://www.ether.radix.com'),\n\ticonURL: new URL('https://www.image.ether.radix.com/'),\n}\n\nexport const __fallBackAlexToken: Token = {\n\tname: 'Alex token',\n\trri: ResourceIdentifier.fromUnsafe('xrd_tr1qyf0x76s')._unsafeUnwrap(),\n\tsymbol: 'ALEX',\n\tdescription:\n\t\t'Fallback token for when token for requested symbol was not found.',\n\tgranularity: Amount.fromUnsafe(1)._unsafeUnwrap(),\n\tisSupplyMutable: true,\n\tcurrentSupply: uint256Max,\n\ttokenInfoURL: new URL('https://www.alex.token.com'),\n\ticonURL: new URL('https://www.image.alex.token.com/'),\n}\n\nexport const balanceOfFor = (\n\tinput: Readonly<{\n\t\ttoken: Token\n\t\tamount: AmountOrUnsafeInput\n\t}>,\n): SimpleTokenBalance => {\n\tconst amt = Amount.fromUnsafe(input.amount)._unsafeUnwrap()\n\n\treturn {\n\t\ttokenIdentifier: input.token.rri,\n\t\tamount: amt.lt(input.token.currentSupply)\n\t\t\t? amt\n\t\t\t: input.token.currentSupply,\n\t}\n}\n\nexport const balancesFor = (\n\taddress: AccountAddressT,\n\tamount: number,\n): SimpleTokenBalances => ({\n\towner: address,\n\ttokenBalances: [\n\t\tbalanceOfFor({\n\t\t\ttoken: xrd,\n\t\t\tamount,\n\t\t}),\n\t],\n})\n\nconst differentTokens: Token[] = [\n\txrd,\n\tfooToken,\n\tbarToken,\n\tradixWrappedBitcoinToken,\n\tradixWrappedEtherToken,\n\tgoldToken,\n]\n\n// PLEASE KEEP - used as Cast of characters: https://en.wikipedia.org/wiki/Alice_and_Bob#Cast_of_characters\n\nexport const tokenByRRIMap: Map<\n\tResourceIdentifierT,\n\tToken\n> = differentTokens.reduce(\n\t(a: Map<ResourceIdentifierT, Token>, b: Token) => a.set(b.rri, b),\n\tnew Map<ResourceIdentifierT, Token>(),\n)\n\nconst detPRNGWithBuffer = (buffer: Buffer): (() => number) => {\n\tconst bufCopy = Buffer.from(buffer)\n\tlet bytes = Buffer.from(buffer)\n\treturn (): number => {\n\t\tif (bytes.length === 0) {\n\t\t\tbytes = sha256(bufCopy)\n\t\t}\n\t\tconst lengthToSlice = 2\n\t\tconst buf = bytes.slice(0, lengthToSlice)\n\t\tbytes = bytes.slice(lengthToSlice, bytes.length)\n\t\treturn Number.parseInt(buf.toString('hex'), 16)\n\t}\n}\n\nconst addressesString: string[] = [\n\t'tdx1qspksqs77z9e24e2dr9t5de6a9kymzhszp9k7jmr2ldkzl4hvn45xsqk409dt',\n\t'tdx1qspksqs77z9e24e2dr9t5de6a9kymzhszp9k7jmr2ldkzl4hvn45xsqk409dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n\t'rdx1qsps28kdn4epn0c9ej2rcmwfz5a4jdhq2ez03x7h6jefvr4fnwnrtqqjaj7dt',\n]\n\nconst characterNames: string[] = [\n\t'alice',\n\t'bob',\n\t'carol',\n\t'dan',\n\t'erin',\n\t'frank',\n\t'grace',\n\t'heidi',\n\t'ivan',\n\t'judy',\n\t'klara',\n\t'leonard',\n\t'mallory',\n\t'niaj',\n\t'olivia',\n\t'peggy',\n\t'quentin',\n\t'rupert',\n\t'stella',\n\t'ted',\n\t'ursula',\n\t'victor',\n\t'webdy',\n\t'xerxez',\n\t'yara',\n\t'zelda',\n]\n/*\n* [Property in keyof ReturnType<typeof getAPI>]: ReturnType<\n\t\ttypeof getAPI\n\t>[Property]\n* */\nexport const castOfCharacters: AccountAddressT[] = addressesString\n\t.map(s =>\n\t\tAccountAddress.fromUnsafe(s)._unsafeUnwrap({ withStackTrace: true }),\n\t)\n\t.slice(0, characterNames.length)\nexport const alice = castOfCharacters[0]\nexport const bob = castOfCharacters[1]\nexport const carol = castOfCharacters[2]\nexport const dan = castOfCharacters[3]\nexport const erin = castOfCharacters[4]\n\nconst makeListOfValidatorAddresses = (): ValidatorAddressT[] => {\n\tconst stringAddresses = [\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t\t'tv1qdqft0u899axwce955fkh9rundr5s2sgvhpp8wzfe3ty0rn0rgqj2x6y86p',\n\t]\n\n\treturn stringAddresses.map(s =>\n\t\tValidatorAddress.fromUnsafe(s)._unsafeUnwrap({ withStackTrace: true }),\n\t)\n}\n\nconst listOfValidatorAddresses: ValidatorAddressT[] = makeListOfValidatorAddresses()\n\nconst detRandomValidatorAddressWithPRNG = (\n\tanInt: () => number,\n) => (): ValidatorAddressT => {\n\tconst randomInt = anInt()\n\tconst index = randomInt % (listOfValidatorAddresses.length - 1)\n\treturn listOfValidatorAddresses[index]\n}\n\nconst randomValidatorList = (\n\tsize: number,\n\tvalidatorAddress?: ValidatorAddressT,\n): Validator[] => {\n\tconst validatorList: Validator[] = []\n\tconst randomBuf =\n\t\tvalidatorAddress !== undefined\n\t\t\t? sha256(validatorAddress.toString())\n\t\t\t: sha256(size.toString(16))\n\tconst prng = detPRNGWithBuffer(randomBuf)\n\n\tconst detRandomValidatorAddress = detRandomValidatorAddressWithPRNG(prng)\n\n\tconst listSize = prng() % 5 === 1 ? size - Math.round(size / 2) : size\n\n\tfor (let i = 0; i < listSize; i++) {\n\t\tconst random = prng()\n\t\tconst ownerAddress = castOfCharacters[random % castOfCharacters.length]\n\t\tconst name = characterNames[random % characterNames.length]\n\t\tconst amount = Amount.fromUnsafe(random)._unsafeUnwrap()\n\t\tconst bool = random % 2 === 0\n\n\t\tvalidatorList.push({\n\t\t\taddress: detRandomValidatorAddress(),\n\t\t\townerAddress,\n\t\t\tname,\n\t\t\tinfoURL: new URL('https://rewards.radixtokens.comcom'),\n\t\t\ttotalDelegatedStake: amount,\n\t\t\townerDelegation: amount,\n\t\t\tvalidatorFee: 2.5,\n\t\t\tregistered: bool,\n\t\t\tisExternalStakeAccepted: bool,\n\t\t\tuptimePercentage: 100.0,\n\t\t\tproposalsMissed: 10,\n\t\t\tproposalsCompleted: 20,\n\t\t})\n\t}\n\treturn validatorList\n}\n\nconst randomUnsignedTransaction = (\n\ttransactionIntent: TransactionIntent,\n): BuiltTransaction => {\n\tconst transactionIntentDet = {\n\t\t...transactionIntent,\n\t\tactions: transactionIntent.actions.map(a => ({\n\t\t\t...a,\n\t\t})),\n\t}\n\n\tconst detBlob = JSON.stringify(transactionIntentDet, null, 4)\n\tconst blobBytes = Buffer.from(detBlob)\n\tconst bytes32 = sha256(blobBytes)\n\n\tconst anInt = detPRNGWithBuffer(bytes32)\n\n\treturn {\n\t\ttransaction: {\n\t\t\tblob: blobBytes.toString('hex'),\n\t\t\thashOfBlobToSign: bytes32.toString('hex'),\n\t\t},\n\t\tfee: Amount.fromUnsafe(anInt())._unsafeUnwrap(),\n\t}\n}\n\nconst randomPendingTransaction = (signedTx: SignedTransaction) => ({\n\ttxID: TransactionIdentifier.create(\n\t\tsha256(Buffer.from(signedTx.transaction.blob)),\n\t)._unsafeUnwrap(),\n\tblob: 'awd',\n})\n\nconst detRandomSignedUnconfirmedTransaction = (\n\tsignedTransaction: SignedTransaction,\n): FinalizedTransaction => ({\n\t...randomPendingTransaction(signedTransaction),\n})\n\nconst rndDemand = detPRNGWithBuffer(Buffer.from('dmnd'))\nconst randomDemand = (): NetworkTransactionDemand => ({\n\ttps: rndDemand() % 200,\n})\n\nconst rndThroughput = detPRNGWithBuffer(Buffer.from('trpt'))\nconst randomThroughput = (): NetworkTransactionDemand => ({\n\ttps: rndThroughput() % 200,\n})\n\nconst detPRNGWithPubKey = (pubKey: PublicKeyT): (() => number) => {\n\t// cannot use first, since it is always 02 or 03\n\tconst bytes = pubKey.asData({ compressed: true }).slice(1, 33)\n\treturn detPRNGWithBuffer(bytes)\n}\n\ntype BalanceOfTokenWithInfo = Readonly<{\n\ttoken: Token\n\tamount: AmountT\n}>\n\nconst detRandBalanceOfTokenWithInfo = (\n\tpng: () => number,\n): BalanceOfTokenWithInfo[] => {\n\tconst anInt = png\n\tconst availableTokens = [...differentTokens]\n\n\tconst deterministicRandomToken = (): Token => {\n\t\tconst tokenCount = availableTokens.length\n\t\tconst tokenIndex = anInt() % tokenCount\n\t\tconst token = availableTokens[tokenIndex]\n\t\tavailableTokens.splice(tokenIndex, 1)\n\t\treturn token\n\t}\n\n\tconst size = Math.max(anInt() % availableTokens.length, 1)\n\n\treturn Array(size)\n\t\t.fill(undefined)\n\t\t.map(\n\t\t\t(_): BalanceOfTokenWithInfo => {\n\t\t\t\tconst token = deterministicRandomToken()\n\t\t\t\tconst amtOrZero = anInt() % 10_000\n\t\t\t\tconst amtFactor = Amount.fromUnsafe(\n\t\t\t\t\tMath.max(10, amtOrZero),\n\t\t\t\t)._unsafeUnwrap()\n\n\t\t\t\tconst amount = Amount.fromUnsafe(\n\t\t\t\t\ttoken.granularity.mul(amtFactor),\n\t\t\t\t)._unsafeUnwrap()\n\t\t\t\treturn {\n\t\t\t\t\ttoken,\n\t\t\t\t\tamount,\n\t\t\t\t}\n\t\t\t},\n\t\t)\n}\n\nexport const deterministicRandomBalancesForAddress = (\n\taddress: AccountAddressT,\n): SimpleTokenBalances => {\n\tconst anInt = detPRNGWithPubKey(address.publicKey)\n\n\tconst tokenBalances = detRandBalanceOfTokenWithInfo(anInt).map(bti =>\n\t\tbalanceOfFor(bti),\n\t)\n\n\treturn {\n\t\towner: address,\n\t\ttokenBalances,\n\t}\n}\n\nexport const deterministicRandomUnstakesForAddress = (\n\taddress: AccountAddressT,\n): UnstakePositions => {\n\tconst anInt = detPRNGWithPubKey(address.publicKey)\n\tconst size = anInt() % 7\n\treturn Array(size)\n\t\t.fill(undefined)\n\t\t.map(\n\t\t\t(_, index): UnstakePosition => {\n\t\t\t\tconst detRandomValidatorAddress = detRandomValidatorAddressWithPRNG(\n\t\t\t\t\tanInt,\n\t\t\t\t)\n\n\t\t\t\tconst validator: ValidatorAddressT = detRandomValidatorAddress()\n\t\t\t\tconst amount = Amount.fromUnsafe(anInt())._unsafeUnwrap()\n\n\t\t\t\tconst bytesFromIndex = Buffer.allocUnsafe(2)\n\t\t\t\tbytesFromIndex.writeUInt16BE(index)\n\t\t\t\tconst txIDBuffer = sha256(\n\t\t\t\t\tBuffer.concat([\n\t\t\t\t\t\taddress.publicKey.asData({ compressed: true }),\n\t\t\t\t\t\tbytesFromIndex,\n\t\t\t\t\t]),\n\t\t\t\t)\n\n\t\t\t\tconst withdrawTxID = TransactionIdentifier.create(\n\t\t\t\t\ttxIDBuffer,\n\t\t\t\t)._unsafeUnwrap()\n\n\t\t\t\tconst epochsUntil = anInt() % 5\n\t\t\t\treturn {\n\t\t\t\t\tamount,\n\t\t\t\t\tvalidator,\n\t\t\t\t\tepochsUntil: epochsUntil > 60 ? 0 : epochsUntil,\n\t\t\t\t\twithdrawTxID,\n\t\t\t\t}\n\t\t\t},\n\t\t)\n}\n\nexport const deterministicRandomStakesForAddress = (\n\taddress: AccountAddressT,\n): StakePositions =>\n\tdeterministicRandomUnstakesForAddress(address).map(\n\t\t(un): StakePosition => ({\n\t\t\t...un,\n\t\t}),\n\t)\n\nexport const deterministicRandomTxHistoryWithInput = (\n\tinput: TransactionHistoryRequestInput,\n): TransactionHistory => {\n\tconst address = input.address\n\tconst anInt: () => number = detPRNGWithPubKey(address.publicKey)\n\tconst pubKeyBytes = address.publicKey\n\t\t.asData({ compressed: true })\n\t\t.slice(1, 33)\n\tconst detRandomAddress = (): AccountAddressT =>\n\t\tcastOfCharacters[anInt() % castOfCharacters.length]\n\tconst detRandomValidatorAddress = detRandomValidatorAddressWithPRNG(anInt)\n\tconst tokenAndAmounts = detRandBalanceOfTokenWithInfo(anInt)\n\n\tconst deterministicRandomExecutedTransactions = (): ExecutedTransaction[] =>\n\t\tArray(input.size)\n\t\t\t.fill(undefined)\n\t\t\t.map(\n\t\t\t\t(_, index): ExecutedTransaction => {\n\t\t\t\t\tconst bytesFromIndex = Buffer.allocUnsafe(2)\n\t\t\t\t\tbytesFromIndex.writeUInt16BE(index)\n\t\t\t\t\tconst txIDBuffer = sha256(\n\t\t\t\t\t\tBuffer.concat([pubKeyBytes, bytesFromIndex]),\n\t\t\t\t\t)\n\t\t\t\t\tconst date = new Date('2020-03-14T15:32:05')\n\t\t\t\t\tdate.setMonth(index % 12)\n\n\t\t\t\t\tconst txID = TransactionIdentifier.create(\n\t\t\t\t\t\ttxIDBuffer,\n\t\t\t\t\t)._unsafeUnwrap()\n\n\t\t\t\t\tconst detMakeActionForTx = (): ExecutedAction[] => {\n\t\t\t\t\t\t// mock max 5 actions per tx in history, min 1.\n\t\t\t\t\t\tconst actionCount = Math.max(anInt() % 5, 1)\n\t\t\t\t\t\treturn Array(actionCount)\n\t\t\t\t\t\t\t.fill(undefined)\n\t\t\t\t\t\t\t.map(\n\t\t\t\t\t\t\t\t(_, actionIndex): ExecutedAction => {\n\t\t\t\t\t\t\t\t\tconst v: number = anInt() % 4 // Transfer, Stake, Unstake, Other\n\t\t\t\t\t\t\t\t\tconst actionType: ActionType =\n\t\t\t\t\t\t\t\t\t\tv === 0\n\t\t\t\t\t\t\t\t\t\t\t? ActionType.TOKEN_TRANSFER\n\t\t\t\t\t\t\t\t\t\t\t: v === 1\n\t\t\t\t\t\t\t\t\t\t\t? ActionType.STAKE_TOKENS\n\t\t\t\t\t\t\t\t\t\t\t: v === 2\n\t\t\t\t\t\t\t\t\t\t\t? ActionType.UNSTAKE_TOKENS\n\t\t\t\t\t\t\t\t\t\t\t: ActionType.OTHER\n\n\t\t\t\t\t\t\t\t\tlet executedAction: ExecutedAction\n\n\t\t\t\t\t\t\t\t\tconst tokenAndAmount = tokenAndAmounts[\n\t\t\t\t\t\t\t\t\t\tactionIndex % tokenAndAmounts.length\n\t\t\t\t\t\t\t\t\t]!\n\n\t\t\t\t\t\t\t\t\tswitch (actionType) {\n\t\t\t\t\t\t\t\t\t\tcase ActionType.OTHER:\n\t\t\t\t\t\t\t\t\t\t\texecutedAction = {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: ActionType.OTHER,\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\tcase ActionType.STAKE_TOKENS:\n\t\t\t\t\t\t\t\t\t\t\texecutedAction = {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: ActionType.STAKE_TOKENS,\n\t\t\t\t\t\t\t\t\t\t\t\tfrom: address,\n\t\t\t\t\t\t\t\t\t\t\t\tamount: Amount.fromUnsafe(\n\t\t\t\t\t\t\t\t\t\t\t\t\tanInt(),\n\t\t\t\t\t\t\t\t\t\t\t\t)._unsafeUnwrap(),\n\t\t\t\t\t\t\t\t\t\t\t\tvalidator: detRandomValidatorAddress(),\n\t\t\t\t\t\t\t\t\t\t\t} as any\n\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\tcase ActionType.UNSTAKE_TOKENS:\n\t\t\t\t\t\t\t\t\t\t\texecutedAction = {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: ActionType.UNSTAKE_TOKENS,\n\t\t\t\t\t\t\t\t\t\t\t\tfrom: address,\n\t\t\t\t\t\t\t\t\t\t\t\tamount: Amount.fromUnsafe(\n\t\t\t\t\t\t\t\t\t\t\t\t\tanInt(),\n\t\t\t\t\t\t\t\t\t\t\t\t)._unsafeUnwrap(),\n\t\t\t\t\t\t\t\t\t\t\t\tvalidator: detRandomValidatorAddress(),\n\t\t\t\t\t\t\t\t\t\t\t} as any\n\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\tcase ActionType.TOKEN_TRANSFER:\n\t\t\t\t\t\t\t\t\t\t\texecutedAction = {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: ActionType.TOKEN_TRANSFER,\n\t\t\t\t\t\t\t\t\t\t\t\tfrom_account: address.toString(),\n\t\t\t\t\t\t\t\t\t\t\t\tto_account: detRandomAddress().toString(),\n\t\t\t\t\t\t\t\t\t\t\t\tamount: tokenAndAmount.amount,\n\t\t\t\t\t\t\t\t\t\t\t\trri: tokenAndAmount.token.rri,\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturn executedAction\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst rndTxTypeInt = anInt() % 3\n\t\t\t\t\tconst transactionType =\n\t\t\t\t\t\trndTxTypeInt === 0\n\t\t\t\t\t\t\t? TransactionType.INCOMING\n\t\t\t\t\t\t\t: rndTxTypeInt === 1\n\t\t\t\t\t\t\t? TransactionType.FROM_ME_TO_ME\n\t\t\t\t\t\t\t: TransactionType.OUTGOING\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttxID,\n\t\t\t\t\t\tsentAt: date,\n\t\t\t\t\t\ttransactionType,\n\t\t\t\t\t\tfee: Amount.fromUnsafe(anInt())._unsafeUnwrap(),\n\t\t\t\t\t\t// message?: {\n\t\t\t\t\t\t// \tmsg: string\n\t\t\t\t\t\t// \tencryptionScheme: string\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tactions: detMakeActionForTx(),\n\t\t\t\t\t} as any\n\t\t\t\t},\n\t\t\t)\n\n\tconst updatedCursor = sha256(\n\t\tinput.cursor !== undefined ? Buffer.from(input.cursor) : pubKeyBytes,\n\t).toString('hex')\n\n\treturn {\n\t\tcursor: updatedCursor,\n\t\ttransactions: deterministicRandomExecutedTransactions(),\n\t}\n}\n\nconst deterministicRandomLookupTXUsingHist = (\n\ttxID: TransactionIdentifierT,\n): SimpleExecutedTransaction => {\n\tconst seed = sha256(Buffer.from(txID.__hex, 'hex'))\n\tconst addressWithTXIdBytesAsSeed = AccountAddress.fromPublicKeyAndNetwork({\n\t\tpublicKey: PrivateKey.fromBuffer(seed)._unsafeUnwrap().publicKey(),\n\t\tnetwork: Network.MAINNET,\n\t})\n\tconst txs = deterministicRandomTxHistoryWithInput({\n\t\tsize: 1,\n\t\taddress: addressWithTXIdBytesAsSeed,\n\t}).transactions\n\tif (txs.length === 0) {\n\t\tthrow new Error('Expected at least one tx...')\n\t}\n\treturn {\n\t\t...txs[0],\n\t\ttxID,\n\t}\n}\n\nexport const deterministicRandomBalances = (\n\taddress: AccountAddressT,\n): Observable<SimpleTokenBalances> =>\n\tof(deterministicRandomBalancesForAddress(address))\n\nexport const deterministicRandomTXHistory = (\n\tinput: TransactionHistoryRequestInput,\n): Observable<TransactionHistory> =>\n\tof(deterministicRandomTxHistoryWithInput(input))\n\nexport const deterministicRandomLookupTX = (\n\ttxID: TransactionIdentifierT,\n): Observable<SimpleExecutedTransaction> =>\n\tof(deterministicRandomLookupTXUsingHist(txID))\n\nexport const deterministicRandomUnstakesForAddr = (\n\taddress: AccountAddressT,\n): Observable<UnstakePositions> =>\n\tof(deterministicRandomUnstakesForAddress(address))\n\nexport const deterministicRandomStakesForAddr = (\n\taddress: AccountAddressT,\n): Observable<StakePositions> =>\n\tof(deterministicRandomStakesForAddress(address))\n\nexport const makeThrowingRadixCoreAPI = (nodeUrl?: string): any => ({\n\tnode: { url: new URL(nodeUrl ?? 'https://www.radixdlt.com/') },\n\n\tnetworkId: (): Observable<Network> => {\n\t\tthrow Error('Not implemented')\n\t},\n\n\ttokenBalancesForAddress: (_address: AccountAddressT): Observable<any> => {\n\t\tthrow Error('Not implemented')\n\t},\n\n\tlookupTransaction: (_txID: any): Observable<any> => {\n\t\tthrow Error('Not implemented')\n\t},\n\n\tvalidators: (_input: any): Observable<any> => {\n\t\tthrow Error('Not implemented')\n\t},\n\n\tlookupValidator: (_input: ValidatorAddressT): Observable<any> => {\n\t\tthrow Error('Not implemented')\n\t},\n\n\ttransactionHistory: (\n\t\t_input: TransactionHistoryRequestInput,\n\t): Observable<any> => {\n\t\tthrow Error('Not implemented')\n\t},\n\n\tnativeToken: (): Observable<any> => {\n\t\tthrow Error('Not implemented')\n\t},\n\n\ttokenInfo: (_rri: ResourceIdentifierT): Observable<any> => {\n\t\tthrow Error('Not implemented')\n\t},\n\n\tstakesForAddress: (_address: AccountAddressT): Observable<any> => {\n\t\tthrow Error('Not implemented')\n\t},\n\n\tunstakesForAddress: (_address: AccountAddressT): Observable<any> => {\n\t\tthrow Error('Not implemented')\n\t},\n\n\ttransactionStatus: (\n\t\t_txID: TransactionIdentifierT,\n\t): Observable<StatusOfTransaction> => {\n\t\tthrow Error('Not implemented')\n\t},\n\n\tNetworkTransactionThroughput: (): Observable<NetworkTransactionThroughput> => {\n\t\tthrow Error('Not implemented')\n\t},\n\n\tNetworkTransactionDemand: (): Observable<NetworkTransactionDemand> => {\n\t\tthrow Error('Not implemented')\n\t},\n\n\tbuildTransaction: (\n\t\t_transactionIntent: TransactionIntent,\n\t): Observable<any> => {\n\t\tthrow Error('Not implemented')\n\t},\n\n\tsubmitSignedTransaction: (_signedTransaction: any): Observable<any> => {\n\t\tthrow Error('Not implemented')\n\t},\n\n\tfinalizeTransaction: (\n\t\t_signedUnconfirmedTransaction: SignedTransaction,\n\t): Observable<FinalizedTransaction> => {\n\t\tthrow Error('Not implemented')\n\t},\n})\n\nlet txStatusMapCounter: Map<\n\tTransactionIdentifierT,\n\tnumber\n> = (undefined as unknown) as Map<TransactionIdentifierT, number>\n\nexport const mockRadixCoreAPI = (\n\tinput?: Readonly<{\n\t\tnodeUrl?: string\n\t\tnetwork?: Network\n\t}>,\n): any => {\n\ttxStatusMapCounter = new Map<TransactionIdentifierT, number>()\n\treturn {\n\t\tnode: { url: new URL(input?.nodeUrl ?? 'https://www.radixdlt.com/') },\n\n\t\tnetworkId: (): Observable<Network> =>\n\t\t\tof(input?.network ?? Network.MAINNET).pipe(shareReplay(1)),\n\t\tnativeToken: (): Observable<Token> => of(xrd),\n\t\ttokenInfo: (rri: ResourceIdentifierT): Observable<Token> =>\n\t\t\tof(tokenByRRIMap.get(rri) ?? __fallBackAlexToken),\n\t\ttokenBalancesForAddress: deterministicRandomBalances,\n\t\ttransactionStatus: (\n\t\t\ttxID: TransactionIdentifierT,\n\t\t): Observable<StatusOfTransaction> => {\n\t\t\tconst last = txStatusMapCounter.get(txID) ?? 0\n\t\t\tconst incremented = last + 1\n\t\t\ttxStatusMapCounter.set(txID, incremented)\n\n\t\t\tconst status: TransactionStatus =\n\t\t\t\tlast <= 1\n\t\t\t\t\t? TransactionStatus.PENDING\n\t\t\t\t\t: TransactionStatus.CONFIRMED\n\n\t\t\treturn of({\n\t\t\t\ttxID,\n\t\t\t\tstatus, // when TransactionStatus.FAIL ?\n\t\t\t})\n\t\t},\n\t\tvalidators: (input: ValidatorsRequestInput): Observable<Validators> =>\n\t\t\tof({\n\t\t\t\tcursor: 'cursor',\n\t\t\t\tvalidators: randomValidatorList(input.size),\n\t\t\t}),\n\t\tlookupValidator: (\n\t\t\tvalidatorAddress: ValidatorAddressT,\n\t\t): Observable<Validator> => {\n\t\t\tconst validatorRnd = randomValidatorList(1, validatorAddress)[0]\n\t\t\tconst validator: Validator = {\n\t\t\t\t...validatorRnd,\n\t\t\t\taddress: validatorAddress,\n\t\t\t}\n\t\t\treturn of(validator)\n\t\t},\n\t\tbuildTransaction: (\n\t\t\ttransactionIntent: TransactionIntent,\n\t\t): Observable<BuiltTransaction> =>\n\t\t\tof(randomUnsignedTransaction(transactionIntent)),\n\t\tfinalizeTransaction: (\n\t\t\tsignedTransaction: SignedTransaction,\n\t\t): Observable<FinalizedTransaction> =>\n\t\t\tof(detRandomSignedUnconfirmedTransaction(signedTransaction)),\n\t\tsubmitSignedTransaction: (signedUnconfirmedTX: any) =>\n\t\t\tof(signedUnconfirmedTX),\n\t\tNetworkTransactionDemand: (): Observable<NetworkTransactionDemand> =>\n\t\t\tof(randomDemand()),\n\t\tNetworkTransactionThroughput: (): Observable<NetworkTransactionThroughput> =>\n\t\t\tof(randomThroughput()),\n\t\ttransactionHistory: deterministicRandomTXHistory,\n\t\tlookupTransaction: deterministicRandomLookupTX,\n\t\tunstakesForAddress: deterministicRandomUnstakesForAddr,\n\t\tstakesForAddress: deterministicRandomStakesForAddr,\n\t}\n}\n\nexport const mockedAPI: Observable<any> = of(mockRadixCoreAPI())\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}