{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { map } from '../operators/map';\nvar toString = /*@__PURE__*/function () {\n  return Object.prototype.toString;\n}();\nexport function fromEvent(target, eventName, options, resultSelector) {\n  if (isFunction(options)) {\n    resultSelector = options;\n    options = undefined;\n  }\n  if (resultSelector) {\n    return fromEvent(target, eventName, options).pipe(map(function (args) {\n      return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args);\n    }));\n  }\n  return new Observable(function (subscriber) {\n    function handler(e) {\n      if (arguments.length > 1) {\n        subscriber.next(Array.prototype.slice.call(arguments));\n      } else {\n        subscriber.next(e);\n      }\n    }\n    setupSubscription(target, eventName, handler, subscriber, options);\n  });\n}\nfunction setupSubscription(sourceObj, eventName, handler, subscriber, options) {\n  var unsubscribe;\n  if (isEventTarget(sourceObj)) {\n    var source_1 = sourceObj;\n    sourceObj.addEventListener(eventName, handler, options);\n    unsubscribe = function () {\n      return source_1.removeEventListener(eventName, handler, options);\n    };\n  } else if (isJQueryStyleEventEmitter(sourceObj)) {\n    var source_2 = sourceObj;\n    sourceObj.on(eventName, handler);\n    unsubscribe = function () {\n      return source_2.off(eventName, handler);\n    };\n  } else if (isNodeStyleEventEmitter(sourceObj)) {\n    var source_3 = sourceObj;\n    sourceObj.addListener(eventName, handler);\n    unsubscribe = function () {\n      return source_3.removeListener(eventName, handler);\n    };\n  } else if (sourceObj && sourceObj.length) {\n    for (var i = 0, len = sourceObj.length; i < len; i++) {\n      setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n    }\n  } else {\n    throw new TypeError('Invalid event target');\n  }\n  subscriber.add(unsubscribe);\n}\nfunction isNodeStyleEventEmitter(sourceObj) {\n  return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n  return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isEventTarget(sourceObj) {\n  return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}","map":{"version":3,"names":["Observable","isArray","isFunction","map","toString","Object","prototype","fromEvent","target","eventName","options","resultSelector","undefined","pipe","args","apply","subscriber","handler","e","arguments","length","next","Array","slice","call","setupSubscription","sourceObj","unsubscribe","isEventTarget","source_1","addEventListener","removeEventListener","isJQueryStyleEventEmitter","source_2","on","off","isNodeStyleEventEmitter","source_3","addListener","removeListener","i","len","TypeError","add"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/observable/fromEvent.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { Subscriber } from '../Subscriber';\nimport { map } from '../operators/map';\n\nconst toString: Function = (() => Object.prototype.toString)();\n\nexport interface NodeStyleEventEmitter {\n  addListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n  removeListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n}\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\n// For APIs that implement `addListener` and `removeListener` methods that may\n// not use the same arguments or return EventEmitter values\n// such as React Native\nexport interface NodeCompatibleEventEmitter {\n  addListener: (eventName: string, handler: NodeEventHandler) => void | {};\n  removeListener: (eventName: string, handler: NodeEventHandler) => void | {};\n}\n\nexport interface JQueryStyleEventEmitter {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n}\n\nexport interface HasEventTargetAddRemove<E> {\n  addEventListener(type: string, listener: ((evt: E) => void) | null, options?: boolean | AddEventListenerOptions): void;\n  removeEventListener(type: string, listener?: ((evt: E) => void) | null, options?: EventListenerOptions | boolean): void;\n}\n\nexport type EventTargetLike<T> = HasEventTargetAddRemove<T> | NodeStyleEventEmitter | NodeCompatibleEventEmitter | JQueryStyleEventEmitter;\n\nexport type FromEventTarget<T> = EventTargetLike<T> | ArrayLike<EventTargetLike<T>>;\n\nexport interface EventListenerOptions {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n}\n\nexport interface AddEventListenerOptions extends EventListenerOptions {\n  once?: boolean;\n  passive?: boolean;\n}\n\n/* tslint:disable:max-line-length */\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, resultSelector: (...args: any[]) => T): Observable<T>;\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions, resultSelector: (...args: any[]) => T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an Observable that emits events of a specific type coming from the\n * given event target.\n *\n * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n * EventEmitter events or others.</span>\n *\n * ![](fromEvent.png)\n *\n * `fromEvent` accepts as a first argument event target, which is an object with methods\n * for registering event handler functions. As a second argument it takes string that indicates\n * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n * which are described in detail below. If your event target does not match any of the ones listed,\n * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n * handler functions have different names, but they all accept a string describing event type\n * and function itself, which will be called whenever said event happens.\n *\n * Every time resulting Observable is subscribed, event handler function will be registered\n * to event target on given event type. When that event fires, value\n * passed as a first argument to registered function will be emitted by output Observable.\n * When Observable is unsubscribed, function will be unregistered from event target.\n *\n * Note that if event target calls registered function with more than one argument, second\n * and following arguments will not appear in resulting stream. In order to get access to them,\n * you can pass to `fromEvent` optional project function, which will be called with all arguments\n * passed to event handler. Output Observable will then emit value returned by project function,\n * instead of the usual value.\n *\n * Remember that event targets listed below are checked via duck typing. It means that\n * no matter what kind of object you have and no matter what environment you work in,\n * you can safely use `fromEvent` on that object if it exposes described methods (provided\n * of course they behave as was described above). So for example if Node.js library exposes\n * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n * a good choice.\n *\n * If the API you use is more callback then event handler oriented (subscribed\n * callback function fires only once and thus there is no need to manually\n * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n * instead.\n *\n * `fromEvent` supports following types of event targets:\n *\n * **DOM EventTarget**\n *\n * This is an object with `addEventListener` and `removeEventListener` methods.\n *\n * In the browser, `addEventListener` accepts - apart from event type string and event\n * handler function arguments - optional third parameter, which is either an object or boolean,\n * both used for additional configuration how and when passed function will be called. When\n * `fromEvent` is used with event target of that type, you can provide this values\n * as third parameter as well.\n *\n * **Node.js EventEmitter**\n *\n * An object with `addListener` and `removeListener` methods.\n *\n * **JQuery-style event target**\n *\n * An object with `on` and `off` methods\n *\n * **DOM NodeList**\n *\n * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n *\n * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n * it contains and install event handler function in every of them. When returned Observable\n * is unsubscribed, function will be removed from all Nodes.\n *\n * **DOM HtmlCollection**\n *\n * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n * installed and removed in each of elements.\n *\n *\n * ## Examples\n * ### Emits clicks happening on the DOM document\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * clicks.subscribe(x => console.log(x));\n *\n * // Results in:\n * // MouseEvent object logged to console every time a click\n * // occurs on the document.\n * ```\n *\n * ### Use addEventListener with capture option\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const clicksInDocument = fromEvent(document, 'click', true); // note optional configuration parameter\n *                                                              // which will be passed to addEventListener\n * const clicksInDiv = fromEvent(someDivInDocument, 'click');\n *\n * clicksInDocument.subscribe(() => console.log('document'));\n * clicksInDiv.subscribe(() => console.log('div'));\n *\n * // By default events bubble UP in DOM tree, so normally\n * // when we would click on div in document\n * // \"div\" would be logged first and then \"document\".\n * // Since we specified optional `capture` option, document\n * // will catch event when it goes DOWN DOM tree, so console\n * // will log \"document\" and then \"div\".\n * ```\n *\n * @see {@link bindCallback}\n * @see {@link bindNodeCallback}\n * @see {@link fromEventPattern}\n *\n * @param {FromEventTarget<T>} target The DOM EventTarget, Node.js\n * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n * @param {string} eventName The event name of interest, being emitted by the\n * `target`.\n * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n * @return {Observable<T>}\n * @name fromEvent\n */\nexport function fromEvent<T>(\n  target: FromEventTarget<T>,\n  eventName: string,\n  options?: EventListenerOptions | ((...args: any[]) => T),\n  resultSelector?: ((...args: any[]) => T)\n): Observable<T> {\n\n  if (isFunction(options)) {\n    // DEPRECATED PATH\n    resultSelector = options;\n    options = undefined;\n  }\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return fromEvent<T>(target, eventName, <EventListenerOptions | undefined>options).pipe(\n      map(args => isArray(args) ? resultSelector(...args) : resultSelector(args))\n    );\n  }\n\n  return new Observable<T>(subscriber => {\n    function handler(e: T) {\n      if (arguments.length > 1) {\n        subscriber.next(Array.prototype.slice.call(arguments));\n      } else {\n        subscriber.next(e);\n      }\n    }\n    setupSubscription(target, eventName, handler, subscriber, options as EventListenerOptions);\n  });\n}\n\nfunction setupSubscription<T>(sourceObj: FromEventTarget<T>, eventName: string,\n                              handler: (...args: any[]) => void, subscriber: Subscriber<T>,\n                              options?: EventListenerOptions) {\n  let unsubscribe: () => void;\n  if (isEventTarget(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.addEventListener(eventName, handler, options);\n    unsubscribe = () => source.removeEventListener(eventName, handler, options);\n  } else if (isJQueryStyleEventEmitter(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.on(eventName, handler);\n    unsubscribe = () => source.off(eventName, handler);\n  } else if (isNodeStyleEventEmitter(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.addListener(eventName, handler as NodeEventHandler);\n    unsubscribe = () => source.removeListener(eventName, handler as NodeEventHandler);\n  } else if (sourceObj && (sourceObj as any).length) {\n    for (let i = 0, len = (sourceObj as any).length; i < len; i++) {\n      setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n    }\n  } else {\n    throw new TypeError('Invalid event target');\n  }\n\n  subscriber.add(unsubscribe);\n}\n\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is HasEventTargetAddRemove<any> {\n  return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}