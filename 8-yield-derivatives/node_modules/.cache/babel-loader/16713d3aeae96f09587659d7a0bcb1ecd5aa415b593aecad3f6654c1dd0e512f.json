{"ast":null,"code":"'use strict';\n\nvar base58 = require('bs58');\nvar Buffer = require('safe-buffer').Buffer;\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode(payload) {\n    var checksum = checksumFn(payload);\n    return base58.encode(Buffer.concat([payload, checksum], payload.length + 4));\n  }\n  function decodeRaw(buffer) {\n    var payload = buffer.slice(0, -4);\n    var checksum = buffer.slice(-4);\n    var newChecksum = checksumFn(payload);\n    if (checksum[0] ^ newChecksum[0] | checksum[1] ^ newChecksum[1] | checksum[2] ^ newChecksum[2] | checksum[3] ^ newChecksum[3]) return;\n    return payload;\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe(string) {\n    var buffer = base58.decodeUnsafe(string);\n    if (!buffer) return;\n    return decodeRaw(buffer);\n  }\n  function decode(string) {\n    var buffer = base58.decode(string);\n    var payload = decodeRaw(buffer, checksumFn);\n    if (!payload) throw new Error('Invalid checksum');\n    return payload;\n  }\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  };\n};","map":{"version":3,"names":["base58","require","Buffer","module","exports","checksumFn","encode","payload","checksum","concat","length","decodeRaw","buffer","slice","newChecksum","decodeUnsafe","string","decode","Error"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/bs58check/base.js"],"sourcesContent":["'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,IAAIC,MAAM,GAAGD,OAAO,CAAC,aAAa,CAAC,CAACC,MAAM;AAE1CC,MAAM,CAACC,OAAO,GAAG,UAAUC,UAAU,EAAE;EACrC;EACA,SAASC,MAAMA,CAAEC,OAAO,EAAE;IACxB,IAAIC,QAAQ,GAAGH,UAAU,CAACE,OAAO,CAAC;IAElC,OAAOP,MAAM,CAACM,MAAM,CAACJ,MAAM,CAACO,MAAM,CAAC,CACjCF,OAAO,EACPC,QAAQ,CACT,EAAED,OAAO,CAACG,MAAM,GAAG,CAAC,CAAC,CAAC;EACzB;EAEA,SAASC,SAASA,CAAEC,MAAM,EAAE;IAC1B,IAAIL,OAAO,GAAGK,MAAM,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACjC,IAAIL,QAAQ,GAAGI,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC/B,IAAIC,WAAW,GAAGT,UAAU,CAACE,OAAO,CAAC;IAErC,IAAIC,QAAQ,CAAC,CAAC,CAAC,GAAGM,WAAW,CAAC,CAAC,CAAC,GAC5BN,QAAQ,CAAC,CAAC,CAAC,GAAGM,WAAW,CAAC,CAAC,CAAC,GAC5BN,QAAQ,CAAC,CAAC,CAAC,GAAGM,WAAW,CAAC,CAAC,CAAC,GAC5BN,QAAQ,CAAC,CAAC,CAAC,GAAGM,WAAW,CAAC,CAAC,CAAC,EAAE;IAElC,OAAOP,OAAO;EAChB;;EAEA;EACA,SAASQ,YAAYA,CAAEC,MAAM,EAAE;IAC7B,IAAIJ,MAAM,GAAGZ,MAAM,CAACe,YAAY,CAACC,MAAM,CAAC;IACxC,IAAI,CAACJ,MAAM,EAAE;IAEb,OAAOD,SAAS,CAACC,MAAM,CAAC;EAC1B;EAEA,SAASK,MAAMA,CAAED,MAAM,EAAE;IACvB,IAAIJ,MAAM,GAAGZ,MAAM,CAACiB,MAAM,CAACD,MAAM,CAAC;IAClC,IAAIT,OAAO,GAAGI,SAAS,CAACC,MAAM,EAAEP,UAAU,CAAC;IAC3C,IAAI,CAACE,OAAO,EAAE,MAAM,IAAIW,KAAK,CAAC,kBAAkB,CAAC;IACjD,OAAOX,OAAO;EAChB;EAEA,OAAO;IACLD,MAAM,EAAEA,MAAM;IACdW,MAAM,EAAEA,MAAM;IACdF,YAAY,EAAEA;EAChB,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}