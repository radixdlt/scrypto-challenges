{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Scheduler } from '../Scheduler';\nvar AsyncScheduler = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(AsyncScheduler, _super);\n  function AsyncScheduler(SchedulerAction, now) {\n    if (now === void 0) {\n      now = Scheduler.now;\n    }\n    var _this = _super.call(this, SchedulerAction, function () {\n      if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {\n        return AsyncScheduler.delegate.now();\n      } else {\n        return now();\n      }\n    }) || this;\n    _this.actions = [];\n    _this.active = false;\n    _this.scheduled = undefined;\n    return _this;\n  }\n  AsyncScheduler.prototype.schedule = function (work, delay, state) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n      return AsyncScheduler.delegate.schedule(work, delay, state);\n    } else {\n      return _super.prototype.schedule.call(this, work, delay, state);\n    }\n  };\n  AsyncScheduler.prototype.flush = function (action) {\n    var actions = this.actions;\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n    var error;\n    this.active = true;\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift());\n    this.active = false;\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  };\n  return AsyncScheduler;\n}(Scheduler);\nexport { AsyncScheduler };","map":{"version":3,"names":["tslib_1","Scheduler","AsyncScheduler","_super","__extends","SchedulerAction","now","call","delegate","_this","active","scheduled","undefined","prototype","schedule","work","delay","state","flush","action","actions","push","error","execute","shift","unsubscribe"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/scheduler/AsyncScheduler.ts"],"sourcesContent":["import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\n\nexport class AsyncScheduler extends Scheduler {\n  public static delegate?: Scheduler;\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   * @deprecated internal use only\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   * @deprecated internal use only\n   */\n  public scheduled: any = undefined;\n\n  constructor(SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    super(SchedulerAction, () => {\n      if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n        return AsyncScheduler.delegate.now();\n      } else {\n        return now();\n      }\n    });\n  }\n\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n      return AsyncScheduler.delegate.schedule(work, delay, state);\n    } else {\n      return super.schedule(work, delay, state);\n    }\n  }\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n"],"mappings":";AAAA,OAAO,KAAEA,OAAS,MAAE,OAAM;AAM1B,SAAAC,SAAA;IAAoCC,cAAA,0BAASC,MAAA;EAmB3CH,OAAA,CAAAI,SAAA,CAAAF,cAAY,EAAAC,MAA8B,CAC9B;WAAAD,eAAAG,eAAoB,EAASC,GAAC,EAAG;IAD7C,IAAAA,GAAA,KAEE;MACEA,GAAA,GAAIL,SAAA,CAAAK,GAAe;;aAElB,GAAAH,MAAA,CAAAI,IAAA,OAAAF,eAAA;wBAAM,CAAAG,QAAA,IAAAN,cAAA,CAAAM,QAAA,KAAAC,KAAA;QACL,OAAOP,cAAM,CAAAM,QAAA,CAAAF,GAAA;OACd,MACD;QAzBG,OAAOA,GAA8B,CAAC;MAOtC;IAQA;;IAWNG,KAAA,CAAAC,MAAA;IAEMD,KAAA,CAAAE,SAAA,GAAAC,SAAA;IAAiE,OAAAH,KAAA;;gBAEpE,CAAOI,SAAA,CAAAC,QAAe,aAASC,IAAS,EAAIC,KAAE,EAAKC,KAAE,EAAK;QAC3DD,KAAA;WAAM;;QAENd,cAAA,CAAAM,QAAA,IAAAN,cAAA,CAAAM,QAAA;MACF,OAAAN,cAAA,CAAAM,QAAA,CAAAM,QAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,KAAA;IAEM,OAEE;MAEH,OAAKd,MAAQ,CAAAU,SAAA,CAAAC,QAAA,CAAAP,IAAA,OAAAQ,IAAA,EAAAC,KAAA,EAAAC,KAAA;;;gBAGhB,CAAAJ,SAAA,CAAAK,KAAA,aAAAC,MAAA;IAED,IAAIC,OAAW,QAAAA,OAAA;IACf,IAAI,IAAC,CAAAV,MAAS;MAEXU,OAAA,CAAAC,IAAA,CAAAF,MAAA;MACD;;aAEC;QACF,CAAAT,MAAQ,OAAS;IAElB;MAEI,IAAAY,KAAO,GAAAH,MAAA,CAAAI,OAAA,CAAAJ,MAAA,CAAAF,KAAA,EAAAE,MAAA,CAAAH,KAAA;QACT;;aAECG,MAAA,GAAAC,OAAA,CAAAI,KAAA;QACD,CAAAd,MAAM,QAAM;QACbY,KAAA;MACF,OAAAH,MAAA,GAAAC,OAAA,CAAAI,KAAA;QACHL,MAAA,CAAAM,WAAC;MAjE4C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}