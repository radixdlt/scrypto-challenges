{"ast":null,"code":"import { operate } from '../util/lift';\nexport function finalize(callback) {\n  return operate(function (source, subscriber) {\n    try {\n      source.subscribe(subscriber);\n    } finally {\n      subscriber.add(callback);\n    }\n  });\n}","map":{"version":3,"names":["operate","finalize","callback","source","subscriber","subscribe","add"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/rxjs/src/internal/operators/finalize.ts"],"sourcesContent":["import { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * The specified function will also be called when the subscriber explicitly unsubscribes.\n *\n * ## Examples\n * Execute callback function when the observable completes\n *\n * ```ts\n * import { interval } from 'rxjs';\n * import { take, finalize } from 'rxjs/operators';\n *\n * // emit value in sequence every 1 second\n * const source = interval(1000);\n * const example = source.pipe(\n *   take(5), //take only the first 5 values\n *   finalize(() => console.log('Sequence complete')) // Execute when the observable completes\n * )\n * const subscribe = example.subscribe(val => console.log(val));\n *\n * // results:\n * //   0\n * //   1\n * //   2\n * //   3\n * //   4\n * //   'Sequence complete'\n * ```\n *\n * Execute callback function when the subscriber explicitly unsubscribes\n *\n * ```ts\n * import { interval, timer, noop } from 'rxjs';\n * import { finalize, tap } from 'rxjs/operators';\n *\n * const source = interval(100).pipe(\n *   finalize(() => console.log('[finalize] Called')),\n *    tap(() => console.log('[next] Called'),\n *      () => console.log('[error] Not called'),\n *      () => console.log('[tap] Not called')),\n * );\n *\n * const sub = source.subscribe(x => console.log(x), noop, () => console.log('[complete] Not called'));\n *\n * timer(150).subscribe(() => sub.unsubscribe());\n *\n * // results:\n * //   0\n * //   '[finalize] Called'\n * ```\n *\n * @param {function} callback Function to be called when source terminates.\n * @return A function that returns an Observable that mirrors the source, but\n * will call the specified function on termination.\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    // TODO: This try/finally was only added for `useDeprecatedSynchronousErrorHandling`.\n    // REMOVE THIS WHEN THAT HOT GARBAGE IS REMOVED IN V8.\n    try {\n      source.subscribe(subscriber);\n    } finally {\n      subscriber.add(callback);\n    }\n  });\n}\n"],"mappings":"AACA,SAASA,OAAO,QAAQ,cAAc;AAyDtC,OAAM,SAAUC,QAAQA,CAAIC,QAAoB;EAC9C,OAAOF,OAAO,CAAC,UAACG,MAAM,EAAEC,UAAU;IAGhC,IAAI;MACFD,MAAM,CAACE,SAAS,CAACD,UAAU,CAAC;KAC7B,SAAS;MACRA,UAAU,CAACE,GAAG,CAACJ,QAAQ,CAAC;;EAE5B,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}