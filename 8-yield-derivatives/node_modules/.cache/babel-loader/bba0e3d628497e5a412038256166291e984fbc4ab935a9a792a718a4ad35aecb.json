{"ast":null,"code":"/**\n * Partial implementation of PKCS#1 v2.2: RSA-OEAP\n *\n * Modified but based on the following MIT and BSD licensed code:\n *\n * https://github.com/kjur/jsjws/blob/master/rsa.js:\n *\n * The 'jsjws'(JSON Web Signature JavaScript Library) License\n *\n * Copyright (c) 2012 Kenji Urushima\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n * http://webrsa.cvs.sourceforge.net/viewvc/webrsa/Client/RSAES-OAEP.js?content-type=text%2Fplain:\n *\n * RSAES-OAEP.js\n * $Id: RSAES-OAEP.js,v 1.1.1.1 2003/03/19 15:37:20 ellispritchard Exp $\n * JavaScript Implementation of PKCS #1 v2.1 RSA CRYPTOGRAPHY STANDARD (RSA Laboratories, June 14, 2002)\n * Copyright (C) Ellis Pritchard, Guardian Unlimited 2003.\n * Contact: ellis@nukinetics.com\n * Distributed under the BSD License.\n *\n * Official documentation: http://www.rsa.com/rsalabs/node.asp?id=2125\n *\n * @author Evan Jones (http://evanjones.ca/)\n * @author Dave Longley\n *\n * Copyright (c) 2013-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\nrequire('./random');\nrequire('./sha1');\n\n// shortcut for PKCS#1 API\nvar pkcs1 = module.exports = forge.pkcs1 = forge.pkcs1 || {};\n\n/**\n * Encode the given RSAES-OAEP message (M) using key, with optional label (L)\n * and seed.\n *\n * This method does not perform RSA encryption, it only encodes the message\n * using RSAES-OAEP.\n *\n * @param key the RSA key to use.\n * @param message the message to encode.\n * @param options the options to use:\n *          label an optional label to use.\n *          seed the seed to use.\n *          md the message digest object to use, undefined for SHA-1.\n *          mgf1 optional mgf1 parameters:\n *            md the message digest object to use for MGF1.\n *\n * @return the encoded message bytes.\n */\npkcs1.encode_rsa_oaep = function (key, message, options) {\n  // parse arguments\n  var label;\n  var seed;\n  var md;\n  var mgf1Md;\n  // legacy args (label, seed, md)\n  if (typeof options === 'string') {\n    label = options;\n    seed = arguments[3] || undefined;\n    md = arguments[4] || undefined;\n  } else if (options) {\n    label = options.label || undefined;\n    seed = options.seed || undefined;\n    md = options.md || undefined;\n    if (options.mgf1 && options.mgf1.md) {\n      mgf1Md = options.mgf1.md;\n    }\n  }\n\n  // default OAEP to SHA-1 message digest\n  if (!md) {\n    md = forge.md.sha1.create();\n  } else {\n    md.start();\n  }\n\n  // default MGF-1 to same as OAEP\n  if (!mgf1Md) {\n    mgf1Md = md;\n  }\n\n  // compute length in bytes and check output\n  var keyLength = Math.ceil(key.n.bitLength() / 8);\n  var maxLength = keyLength - 2 * md.digestLength - 2;\n  if (message.length > maxLength) {\n    var error = new Error('RSAES-OAEP input message length is too long.');\n    error.length = message.length;\n    error.maxLength = maxLength;\n    throw error;\n  }\n  if (!label) {\n    label = '';\n  }\n  md.update(label, 'raw');\n  var lHash = md.digest();\n  var PS = '';\n  var PS_length = maxLength - message.length;\n  for (var i = 0; i < PS_length; i++) {\n    PS += '\\x00';\n  }\n  var DB = lHash.getBytes() + PS + '\\x01' + message;\n  if (!seed) {\n    seed = forge.random.getBytes(md.digestLength);\n  } else if (seed.length !== md.digestLength) {\n    var error = new Error('Invalid RSAES-OAEP seed. The seed length must ' + 'match the digest length.');\n    error.seedLength = seed.length;\n    error.digestLength = md.digestLength;\n    throw error;\n  }\n  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);\n  var maskedDB = forge.util.xorBytes(DB, dbMask, DB.length);\n  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);\n  var maskedSeed = forge.util.xorBytes(seed, seedMask, seed.length);\n\n  // return encoded message\n  return '\\x00' + maskedSeed + maskedDB;\n};\n\n/**\n * Decode the given RSAES-OAEP encoded message (EM) using key, with optional\n * label (L).\n *\n * This method does not perform RSA decryption, it only decodes the message\n * using RSAES-OAEP.\n *\n * @param key the RSA key to use.\n * @param em the encoded message to decode.\n * @param options the options to use:\n *          label an optional label to use.\n *          md the message digest object to use for OAEP, undefined for SHA-1.\n *          mgf1 optional mgf1 parameters:\n *            md the message digest object to use for MGF1.\n *\n * @return the decoded message bytes.\n */\npkcs1.decode_rsa_oaep = function (key, em, options) {\n  // parse args\n  var label;\n  var md;\n  var mgf1Md;\n  // legacy args\n  if (typeof options === 'string') {\n    label = options;\n    md = arguments[3] || undefined;\n  } else if (options) {\n    label = options.label || undefined;\n    md = options.md || undefined;\n    if (options.mgf1 && options.mgf1.md) {\n      mgf1Md = options.mgf1.md;\n    }\n  }\n\n  // compute length in bytes\n  var keyLength = Math.ceil(key.n.bitLength() / 8);\n  if (em.length !== keyLength) {\n    var error = new Error('RSAES-OAEP encoded message length is invalid.');\n    error.length = em.length;\n    error.expectedLength = keyLength;\n    throw error;\n  }\n\n  // default OAEP to SHA-1 message digest\n  if (md === undefined) {\n    md = forge.md.sha1.create();\n  } else {\n    md.start();\n  }\n\n  // default MGF-1 to same as OAEP\n  if (!mgf1Md) {\n    mgf1Md = md;\n  }\n  if (keyLength < 2 * md.digestLength + 2) {\n    throw new Error('RSAES-OAEP key is too short for the hash function.');\n  }\n  if (!label) {\n    label = '';\n  }\n  md.update(label, 'raw');\n  var lHash = md.digest().getBytes();\n\n  // split the message into its parts\n  var y = em.charAt(0);\n  var maskedSeed = em.substring(1, md.digestLength + 1);\n  var maskedDB = em.substring(1 + md.digestLength);\n  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);\n  var seed = forge.util.xorBytes(maskedSeed, seedMask, maskedSeed.length);\n  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);\n  var db = forge.util.xorBytes(maskedDB, dbMask, maskedDB.length);\n  var lHashPrime = db.substring(0, md.digestLength);\n\n  // constant time check that all values match what is expected\n  var error = y !== '\\x00';\n\n  // constant time check lHash vs lHashPrime\n  for (var i = 0; i < md.digestLength; ++i) {\n    error |= lHash.charAt(i) !== lHashPrime.charAt(i);\n  }\n\n  // \"constant time\" find the 0x1 byte separating the padding (zeros) from the\n  // message\n  // TODO: It must be possible to do this in a better/smarter way?\n  var in_ps = 1;\n  var index = md.digestLength;\n  for (var j = md.digestLength; j < db.length; j++) {\n    var code = db.charCodeAt(j);\n    var is_0 = code & 0x1 ^ 0x1;\n\n    // non-zero if not 0 or 1 in the ps section\n    var error_mask = in_ps ? 0xfffe : 0x0000;\n    error |= code & error_mask;\n\n    // latch in_ps to zero after we find 0x1\n    in_ps = in_ps & is_0;\n    index += in_ps;\n  }\n  if (error || db.charCodeAt(index) !== 0x1) {\n    throw new Error('Invalid RSAES-OAEP padding.');\n  }\n  return db.substring(index + 1);\n};\nfunction rsa_mgf1(seed, maskLength, hash) {\n  // default to SHA-1 message digest\n  if (!hash) {\n    hash = forge.md.sha1.create();\n  }\n  var t = '';\n  var count = Math.ceil(maskLength / hash.digestLength);\n  for (var i = 0; i < count; ++i) {\n    var c = String.fromCharCode(i >> 24 & 0xFF, i >> 16 & 0xFF, i >> 8 & 0xFF, i & 0xFF);\n    hash.start();\n    hash.update(seed + c);\n    t += hash.digest().getBytes();\n  }\n  return t.substring(0, maskLength);\n}","map":{"version":3,"names":["forge","require","pkcs1","module","exports","encode_rsa_oaep","key","message","options","label","seed","md","mgf1Md","arguments","undefined","mgf1","sha1","create","start","keyLength","Math","ceil","n","bitLength","maxLength","digestLength","length","error","Error","update","lHash","digest","PS","PS_length","i","DB","getBytes","random","seedLength","dbMask","rsa_mgf1","maskedDB","util","xorBytes","seedMask","maskedSeed","decode_rsa_oaep","em","expectedLength","y","charAt","substring","db","lHashPrime","in_ps","index","j","code","charCodeAt","is_0","error_mask","maskLength","hash","t","count","c","String","fromCharCode"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/node-forge/lib/pkcs1.js"],"sourcesContent":["/**\n * Partial implementation of PKCS#1 v2.2: RSA-OEAP\n *\n * Modified but based on the following MIT and BSD licensed code:\n *\n * https://github.com/kjur/jsjws/blob/master/rsa.js:\n *\n * The 'jsjws'(JSON Web Signature JavaScript Library) License\n *\n * Copyright (c) 2012 Kenji Urushima\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n * http://webrsa.cvs.sourceforge.net/viewvc/webrsa/Client/RSAES-OAEP.js?content-type=text%2Fplain:\n *\n * RSAES-OAEP.js\n * $Id: RSAES-OAEP.js,v 1.1.1.1 2003/03/19 15:37:20 ellispritchard Exp $\n * JavaScript Implementation of PKCS #1 v2.1 RSA CRYPTOGRAPHY STANDARD (RSA Laboratories, June 14, 2002)\n * Copyright (C) Ellis Pritchard, Guardian Unlimited 2003.\n * Contact: ellis@nukinetics.com\n * Distributed under the BSD License.\n *\n * Official documentation: http://www.rsa.com/rsalabs/node.asp?id=2125\n *\n * @author Evan Jones (http://evanjones.ca/)\n * @author Dave Longley\n *\n * Copyright (c) 2013-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\nrequire('./random');\nrequire('./sha1');\n\n// shortcut for PKCS#1 API\nvar pkcs1 = module.exports = forge.pkcs1 = forge.pkcs1 || {};\n\n/**\n * Encode the given RSAES-OAEP message (M) using key, with optional label (L)\n * and seed.\n *\n * This method does not perform RSA encryption, it only encodes the message\n * using RSAES-OAEP.\n *\n * @param key the RSA key to use.\n * @param message the message to encode.\n * @param options the options to use:\n *          label an optional label to use.\n *          seed the seed to use.\n *          md the message digest object to use, undefined for SHA-1.\n *          mgf1 optional mgf1 parameters:\n *            md the message digest object to use for MGF1.\n *\n * @return the encoded message bytes.\n */\npkcs1.encode_rsa_oaep = function(key, message, options) {\n  // parse arguments\n  var label;\n  var seed;\n  var md;\n  var mgf1Md;\n  // legacy args (label, seed, md)\n  if(typeof options === 'string') {\n    label = options;\n    seed = arguments[3] || undefined;\n    md = arguments[4] || undefined;\n  } else if(options) {\n    label = options.label || undefined;\n    seed = options.seed || undefined;\n    md = options.md || undefined;\n    if(options.mgf1 && options.mgf1.md) {\n      mgf1Md = options.mgf1.md;\n    }\n  }\n\n  // default OAEP to SHA-1 message digest\n  if(!md) {\n    md = forge.md.sha1.create();\n  } else {\n    md.start();\n  }\n\n  // default MGF-1 to same as OAEP\n  if(!mgf1Md) {\n    mgf1Md = md;\n  }\n\n  // compute length in bytes and check output\n  var keyLength = Math.ceil(key.n.bitLength() / 8);\n  var maxLength = keyLength - 2 * md.digestLength - 2;\n  if(message.length > maxLength) {\n    var error = new Error('RSAES-OAEP input message length is too long.');\n    error.length = message.length;\n    error.maxLength = maxLength;\n    throw error;\n  }\n\n  if(!label) {\n    label = '';\n  }\n  md.update(label, 'raw');\n  var lHash = md.digest();\n\n  var PS = '';\n  var PS_length = maxLength - message.length;\n  for(var i = 0; i < PS_length; i++) {\n    PS += '\\x00';\n  }\n\n  var DB = lHash.getBytes() + PS + '\\x01' + message;\n\n  if(!seed) {\n    seed = forge.random.getBytes(md.digestLength);\n  } else if(seed.length !== md.digestLength) {\n    var error = new Error('Invalid RSAES-OAEP seed. The seed length must ' +\n      'match the digest length.');\n    error.seedLength = seed.length;\n    error.digestLength = md.digestLength;\n    throw error;\n  }\n\n  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);\n  var maskedDB = forge.util.xorBytes(DB, dbMask, DB.length);\n\n  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);\n  var maskedSeed = forge.util.xorBytes(seed, seedMask, seed.length);\n\n  // return encoded message\n  return '\\x00' + maskedSeed + maskedDB;\n};\n\n/**\n * Decode the given RSAES-OAEP encoded message (EM) using key, with optional\n * label (L).\n *\n * This method does not perform RSA decryption, it only decodes the message\n * using RSAES-OAEP.\n *\n * @param key the RSA key to use.\n * @param em the encoded message to decode.\n * @param options the options to use:\n *          label an optional label to use.\n *          md the message digest object to use for OAEP, undefined for SHA-1.\n *          mgf1 optional mgf1 parameters:\n *            md the message digest object to use for MGF1.\n *\n * @return the decoded message bytes.\n */\npkcs1.decode_rsa_oaep = function(key, em, options) {\n  // parse args\n  var label;\n  var md;\n  var mgf1Md;\n  // legacy args\n  if(typeof options === 'string') {\n    label = options;\n    md = arguments[3] || undefined;\n  } else if(options) {\n    label = options.label || undefined;\n    md = options.md || undefined;\n    if(options.mgf1 && options.mgf1.md) {\n      mgf1Md = options.mgf1.md;\n    }\n  }\n\n  // compute length in bytes\n  var keyLength = Math.ceil(key.n.bitLength() / 8);\n\n  if(em.length !== keyLength) {\n    var error = new Error('RSAES-OAEP encoded message length is invalid.');\n    error.length = em.length;\n    error.expectedLength = keyLength;\n    throw error;\n  }\n\n  // default OAEP to SHA-1 message digest\n  if(md === undefined) {\n    md = forge.md.sha1.create();\n  } else {\n    md.start();\n  }\n\n  // default MGF-1 to same as OAEP\n  if(!mgf1Md) {\n    mgf1Md = md;\n  }\n\n  if(keyLength < 2 * md.digestLength + 2) {\n    throw new Error('RSAES-OAEP key is too short for the hash function.');\n  }\n\n  if(!label) {\n    label = '';\n  }\n  md.update(label, 'raw');\n  var lHash = md.digest().getBytes();\n\n  // split the message into its parts\n  var y = em.charAt(0);\n  var maskedSeed = em.substring(1, md.digestLength + 1);\n  var maskedDB = em.substring(1 + md.digestLength);\n\n  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);\n  var seed = forge.util.xorBytes(maskedSeed, seedMask, maskedSeed.length);\n\n  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);\n  var db = forge.util.xorBytes(maskedDB, dbMask, maskedDB.length);\n\n  var lHashPrime = db.substring(0, md.digestLength);\n\n  // constant time check that all values match what is expected\n  var error = (y !== '\\x00');\n\n  // constant time check lHash vs lHashPrime\n  for(var i = 0; i < md.digestLength; ++i) {\n    error |= (lHash.charAt(i) !== lHashPrime.charAt(i));\n  }\n\n  // \"constant time\" find the 0x1 byte separating the padding (zeros) from the\n  // message\n  // TODO: It must be possible to do this in a better/smarter way?\n  var in_ps = 1;\n  var index = md.digestLength;\n  for(var j = md.digestLength; j < db.length; j++) {\n    var code = db.charCodeAt(j);\n\n    var is_0 = (code & 0x1) ^ 0x1;\n\n    // non-zero if not 0 or 1 in the ps section\n    var error_mask = in_ps ? 0xfffe : 0x0000;\n    error |= (code & error_mask);\n\n    // latch in_ps to zero after we find 0x1\n    in_ps = in_ps & is_0;\n    index += in_ps;\n  }\n\n  if(error || db.charCodeAt(index) !== 0x1) {\n    throw new Error('Invalid RSAES-OAEP padding.');\n  }\n\n  return db.substring(index + 1);\n};\n\nfunction rsa_mgf1(seed, maskLength, hash) {\n  // default to SHA-1 message digest\n  if(!hash) {\n    hash = forge.md.sha1.create();\n  }\n  var t = '';\n  var count = Math.ceil(maskLength / hash.digestLength);\n  for(var i = 0; i < count; ++i) {\n    var c = String.fromCharCode(\n      (i >> 24) & 0xFF, (i >> 16) & 0xFF, (i >> 8) & 0xFF, i & 0xFF);\n    hash.start();\n    hash.update(seed + c);\n    t += hash.digest().getBytes();\n  }\n  return t.substring(0, maskLength);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}