{"ast":null,"code":"import { operate } from '../util/lift';\nimport { innerFrom } from '../observable/from';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function exhaustAll() {\n  return operate(function (source, subscriber) {\n    var isComplete = false;\n    var innerSub = null;\n    source.subscribe(new OperatorSubscriber(subscriber, function (inner) {\n      if (!innerSub) {\n        innerSub = innerFrom(inner).subscribe(new OperatorSubscriber(subscriber, undefined, function () {\n          innerSub = null;\n          isComplete && subscriber.complete();\n        }));\n      }\n    }, function () {\n      isComplete = true;\n      !innerSub && subscriber.complete();\n    }));\n  });\n}","map":{"version":3,"names":["operate","innerFrom","OperatorSubscriber","exhaustAll","source","subscriber","isComplete","innerSub","subscribe","inner","undefined","complete"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/rxjs/src/internal/operators/exhaustAll.ts"],"sourcesContent":["import { Subscription } from '../Subscription';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/from';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * ![](exhaust.png)\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * ## Example\n * Run a finite timer for each click, only if there is no currently active timer\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { exhaustAll, map, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map((ev) => interval(1000).pipe(take(5))),\n * );\n * const result = higherOrder.pipe(exhaustAll());\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concatAll}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return A function that returns an Observable that takes a source of\n * Observables and propagates the first Observable exclusively until it\n * completes before subscribing to the next.\n */\nexport function exhaustAll<O extends ObservableInput<any>>(): OperatorFunction<O, ObservedValueOf<O>> {\n  return operate((source, subscriber) => {\n    let isComplete = false;\n    let innerSub: Subscription | null = null;\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (inner) => {\n          if (!innerSub) {\n            innerSub = innerFrom(inner).subscribe(\n              new OperatorSubscriber(subscriber, undefined, () => {\n                innerSub = null;\n                isComplete && subscriber.complete();\n              })\n            );\n          }\n        },\n        () => {\n          isComplete = true;\n          !innerSub && subscriber.complete();\n        }\n      )\n    );\n  });\n}\n"],"mappings":"AAEA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,kBAAkB,QAAQ,sBAAsB;AA6CzD,OAAM,SAAUC,UAAUA,CAAA;EACxB,OAAOH,OAAO,CAAC,UAACI,MAAM,EAAEC,UAAU;IAChC,IAAIC,UAAU,GAAG,KAAK;IACtB,IAAIC,QAAQ,GAAwB,IAAI;IACxCH,MAAM,CAACI,SAAS,CACd,IAAIN,kBAAkB,CACpBG,UAAU,EACV,UAACI,KAAK;MACJ,IAAI,CAACF,QAAQ,EAAE;QACbA,QAAQ,GAAGN,SAAS,CAACQ,KAAK,CAAC,CAACD,SAAS,CACnC,IAAIN,kBAAkB,CAACG,UAAU,EAAEK,SAAS,EAAE;UAC5CH,QAAQ,GAAG,IAAI;UACfD,UAAU,IAAID,UAAU,CAACM,QAAQ,EAAE;QACrC,CAAC,CAAC,CACH;;IAEL,CAAC,EACD;MACEL,UAAU,GAAG,IAAI;MACjB,CAACC,QAAQ,IAAIF,UAAU,CAACM,QAAQ,EAAE;IACpC,CAAC,CACF,CACF;EACH,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}