{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function switchMap(project, resultSelector) {\n  if (typeof resultSelector === 'function') {\n    return function (source) {\n      return source.pipe(switchMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }));\n    };\n  }\n  return function (source) {\n    return source.lift(new SwitchMapOperator(project));\n  };\n}\nvar SwitchMapOperator = /*@__PURE__*/function () {\n  function SwitchMapOperator(project) {\n    this.project = project;\n  }\n  SwitchMapOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n  };\n  return SwitchMapOperator;\n}();\nvar SwitchMapSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SwitchMapSubscriber, _super);\n  function SwitchMapSubscriber(destination, project) {\n    var _this = _super.call(this, destination) || this;\n    _this.project = project;\n    _this.index = 0;\n    return _this;\n  }\n  SwitchMapSubscriber.prototype._next = function (value) {\n    var result;\n    var index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result);\n  };\n  SwitchMapSubscriber.prototype._innerSub = function (result) {\n    var innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    var innerSubscriber = new SimpleInnerSubscriber(this);\n    var destination = this.destination;\n    destination.add(innerSubscriber);\n    this.innerSubscription = innerSubscribe(result, innerSubscriber);\n    if (this.innerSubscription !== innerSubscriber) {\n      destination.add(this.innerSubscription);\n    }\n  };\n  SwitchMapSubscriber.prototype._complete = function () {\n    var innerSubscription = this.innerSubscription;\n    if (!innerSubscription || innerSubscription.closed) {\n      _super.prototype._complete.call(this);\n    }\n    this.unsubscribe();\n  };\n  SwitchMapSubscriber.prototype._unsubscribe = function () {\n    this.innerSubscription = undefined;\n  };\n  SwitchMapSubscriber.prototype.notifyComplete = function () {\n    this.innerSubscription = undefined;\n    if (this.isStopped) {\n      _super.prototype._complete.call(this);\n    }\n  };\n  SwitchMapSubscriber.prototype.notifyNext = function (innerValue) {\n    this.destination.next(innerValue);\n  };\n  return SwitchMapSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"names":["tslib_1","map","from","SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","switchMap","project","resultSelector","source","pipe","a","i","b","ii","lift","SwitchMapOperator","prototype","call","subscriber","subscribe","SwitchMapSubscriber","_super","__extends","destination","_this","_next","value","result","index","error","_innerSub","innerSubscription","unsubscribe","innerSubscriber","add","_complete","closed","_unsubscribe","undefined","notifyComplete","isStopped","notifyNext","innerValue","next"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/switchMap.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector is no longer supported, use inner map instead */\nexport function switchMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector is no longer supported, use inner map instead */\nexport function switchMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables.</span>\n *\n * ![](switchMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * ## Example\n * Generate new Observable according to source Observable values\n * ```typescript\n * import { of } from 'rxjs';\n * import { switchMap } from 'rxjs/operators';\n *\n * const switched = of(1, 2, 3).pipe(switchMap((x: number) => of(x, x ** 2, x ** 3)));\n * switched.subscribe(x => console.log(x));\n * // outputs\n * // 1\n * // 1\n * // 1\n * // 2\n * // 4\n * // 8\n * // ... and so on\n * ```\n *\n * Rerun an interval Observable on every click event\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { switchMap } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(switchMap((ev) => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchAll}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional deprecated `resultSelector`) to each item\n * emitted by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\n): OperatorFunction<T, ObservedValueOf<O>|R> {\n  if (typeof resultSelector === 'function') {\n    return (source: Observable<T>) => source.pipe(\n      switchMap((a, i) => from(project(a, i)).pipe(\n        map((b, ii) => resultSelector(a, b, i, ii))\n      ))\n    );\n  }\n  return (source: Observable<T>) => source.lift(new SwitchMapOperator(project));\n}\n\nclass SwitchMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  private index = 0;\n  private innerSubscription?: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error!(error);\n      return;\n    }\n    this._innerSub(result);\n  }\n\n  private _innerSub(result: ObservableInput<R>) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    const innerSubscriber = new SimpleInnerSubscriber(this);\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscriber);\n    this.innerSubscription = innerSubscribe(result, innerSubscriber);\n    // The returned subscription will usually be the subscriber that was\n    // passed. However, interop subscribers will be wrapped and for\n    // unsubscriptions to chain correctly, the wrapper needs to be added, too.\n    if (this.innerSubscription !== innerSubscriber) {\n      destination.add(this.innerSubscription);\n    }\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n    this.unsubscribe();\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = undefined;\n  }\n\n  notifyComplete(): void {\n    this.innerSubscription = undefined;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(innerValue: R): void {\n      this.destination.next!(innerValue);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}