{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xdropRepeatsWith from \"./internal/_xdropRepeatsWith.js\";\nimport last from \"./last.js\";\n/**\n * Returns a new list without any consecutively repeating elements. Equality is\n * determined by applying the supplied predicate to each pair of consecutive elements. The\n * first element in a series of equal elements will be preserved.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig ((a, a) -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *      const l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n */\n\nvar dropRepeatsWith = /*#__PURE__*/\n_curry2( /*#__PURE__*/\n_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n  var result = [];\n  var idx = 1;\n  var len = list.length;\n  if (len !== 0) {\n    result[0] = list[0];\n    while (idx < len) {\n      if (!pred(last(result), list[idx])) {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n  }\n  return result;\n}));\nexport default dropRepeatsWith;","map":{"version":3,"names":["_curry2","_dispatchable","_xdropRepeatsWith","last","dropRepeatsWith","pred","list","result","idx","len","length"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/ramda/es/dropRepeatsWith.js"],"sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xdropRepeatsWith from \"./internal/_xdropRepeatsWith.js\";\nimport last from \"./last.js\";\n/**\n * Returns a new list without any consecutively repeating elements. Equality is\n * determined by applying the supplied predicate to each pair of consecutive elements. The\n * first element in a series of equal elements will be preserved.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig ((a, a) -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *      const l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n */\n\nvar dropRepeatsWith =\n/*#__PURE__*/\n_curry2(\n/*#__PURE__*/\n_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n  var result = [];\n  var idx = 1;\n  var len = list.length;\n\n  if (len !== 0) {\n    result[0] = list[0];\n\n    while (idx < len) {\n      if (!pred(last(result), list[idx])) {\n        result[result.length] = list[idx];\n      }\n\n      idx += 1;\n    }\n  }\n\n  return result;\n}));\n\nexport default dropRepeatsWith;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,aAAa,MAAM,6BAA6B;AACvD,OAAOC,iBAAiB,MAAM,iCAAiC;AAC/D,OAAOC,IAAI,MAAM,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,eAAe,GACnB;AACAJ,OAAO,EACP;AACAC,aAAa,CAAC,EAAE,EAAEC,iBAAiB,EAAE,SAASE,eAAeA,CAACC,IAAI,EAAEC,IAAI,EAAE;EACxE,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,GAAG,GAAG,CAAC;EACX,IAAIC,GAAG,GAAGH,IAAI,CAACI,MAAM;EAErB,IAAID,GAAG,KAAK,CAAC,EAAE;IACbF,MAAM,CAAC,CAAC,CAAC,GAAGD,IAAI,CAAC,CAAC,CAAC;IAEnB,OAAOE,GAAG,GAAGC,GAAG,EAAE;MAChB,IAAI,CAACJ,IAAI,CAACF,IAAI,CAACI,MAAM,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAE;QAClCD,MAAM,CAACA,MAAM,CAACG,MAAM,CAAC,GAAGJ,IAAI,CAACE,GAAG,CAAC;MACnC;MAEAA,GAAG,IAAI,CAAC;IACV;EACF;EAEA,OAAOD,MAAM;AACf,CAAC,CAAC,CAAC;AAEH,eAAeH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}