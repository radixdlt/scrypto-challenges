{"ast":null,"code":"import { TextEncoder } from 'util';\nimport { Readable } from 'stream';\nimport utils from \"../utils.js\";\nimport readBlob from \"./readBlob.js\";\nconst BOUNDARY_ALPHABET = utils.ALPHABET.ALPHA_DIGIT + '-_';\nconst textEncoder = new TextEncoder();\nconst CRLF = '\\r\\n';\nconst CRLF_BYTES = textEncoder.encode(CRLF);\nconst CRLF_BYTES_COUNT = 2;\nclass FormDataPart {\n  constructor(name, value) {\n    const {\n      escapeName\n    } = this.constructor;\n    const isStringValue = utils.isString(value);\n    let headers = `Content-Disposition: form-data; name=\"${escapeName(name)}\"${!isStringValue && value.name ? `; filename=\"${escapeName(value.name)}\"` : ''}${CRLF}`;\n    if (isStringValue) {\n      value = textEncoder.encode(String(value).replace(/\\r?\\n|\\r\\n?/g, CRLF));\n    } else {\n      headers += `Content-Type: ${value.type || \"application/octet-stream\"}${CRLF}`;\n    }\n    this.headers = textEncoder.encode(headers + CRLF);\n    this.contentLength = isStringValue ? value.byteLength : value.size;\n    this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;\n    this.name = name;\n    this.value = value;\n  }\n  async *encode() {\n    yield this.headers;\n    const {\n      value\n    } = this;\n    if (utils.isTypedArray(value)) {\n      yield value;\n    } else {\n      yield* readBlob(value);\n    }\n    yield CRLF_BYTES;\n  }\n  static escapeName(name) {\n    return String(name).replace(/[\\r\\n\"]/g, match => ({\n      '\\r': '%0D',\n      '\\n': '%0A',\n      '\"': '%22'\n    })[match]);\n  }\n}\nconst formDataToStream = (form, headersHandler, options) => {\n  const {\n    tag = 'form-data-boundary',\n    size = 25,\n    boundary = tag + '-' + utils.generateString(size, BOUNDARY_ALPHABET)\n  } = options || {};\n  if (!utils.isFormData(form)) {\n    throw TypeError('FormData instance required');\n  }\n  if (boundary.length < 1 || boundary.length > 70) {\n    throw Error('boundary must be 10-70 characters long');\n  }\n  const boundaryBytes = textEncoder.encode('--' + boundary + CRLF);\n  const footerBytes = textEncoder.encode('--' + boundary + '--' + CRLF + CRLF);\n  let contentLength = footerBytes.byteLength;\n  const parts = Array.from(form.entries()).map(([name, value]) => {\n    const part = new FormDataPart(name, value);\n    contentLength += part.size;\n    return part;\n  });\n  contentLength += boundaryBytes.byteLength * parts.length;\n  contentLength = utils.toFiniteNumber(contentLength);\n  const computedHeaders = {\n    'Content-Type': `multipart/form-data; boundary=${boundary}`\n  };\n  if (Number.isFinite(contentLength)) {\n    computedHeaders['Content-Length'] = contentLength;\n  }\n  headersHandler && headersHandler(computedHeaders);\n  return Readable.from(async function* () {\n    for (const part of parts) {\n      yield boundaryBytes;\n      yield* part.encode();\n    }\n    yield footerBytes;\n  }());\n};\nexport default formDataToStream;","map":{"version":3,"names":["TextEncoder","Readable","utils","readBlob","BOUNDARY_ALPHABET","ALPHABET","ALPHA_DIGIT","textEncoder","CRLF","CRLF_BYTES","encode","CRLF_BYTES_COUNT","FormDataPart","constructor","name","value","escapeName","isStringValue","isString","headers","String","replace","type","contentLength","byteLength","size","isTypedArray","match","formDataToStream","form","headersHandler","options","tag","boundary","generateString","isFormData","TypeError","length","Error","boundaryBytes","footerBytes","parts","Array","from","entries","map","part","toFiniteNumber","computedHeaders","Number","isFinite"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/axios/lib/helpers/formDataToStream.js"],"sourcesContent":["import {TextEncoder} from 'util';\nimport {Readable} from 'stream';\nimport utils from \"../utils.js\";\nimport readBlob from \"./readBlob.js\";\n\nconst BOUNDARY_ALPHABET = utils.ALPHABET.ALPHA_DIGIT + '-_';\n\nconst textEncoder = new TextEncoder();\n\nconst CRLF = '\\r\\n';\nconst CRLF_BYTES = textEncoder.encode(CRLF);\nconst CRLF_BYTES_COUNT = 2;\n\nclass FormDataPart {\n  constructor(name, value) {\n    const {escapeName} = this.constructor;\n    const isStringValue = utils.isString(value);\n\n    let headers = `Content-Disposition: form-data; name=\"${escapeName(name)}\"${\n      !isStringValue && value.name ? `; filename=\"${escapeName(value.name)}\"` : ''\n    }${CRLF}`;\n\n    if (isStringValue) {\n      value = textEncoder.encode(String(value).replace(/\\r?\\n|\\r\\n?/g, CRLF));\n    } else {\n      headers += `Content-Type: ${value.type || \"application/octet-stream\"}${CRLF}`\n    }\n\n    this.headers = textEncoder.encode(headers + CRLF);\n\n    this.contentLength = isStringValue ? value.byteLength : value.size;\n\n    this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;\n\n    this.name = name;\n    this.value = value;\n  }\n\n  async *encode(){\n    yield this.headers;\n\n    const {value} = this;\n\n    if(utils.isTypedArray(value)) {\n      yield value;\n    } else {\n      yield* readBlob(value);\n    }\n\n    yield CRLF_BYTES;\n  }\n\n  static escapeName(name) {\n      return String(name).replace(/[\\r\\n\"]/g, (match) => ({\n        '\\r' : '%0D',\n        '\\n' : '%0A',\n        '\"' : '%22',\n      }[match]));\n  }\n}\n\nconst formDataToStream = (form, headersHandler, options) => {\n  const {\n    tag = 'form-data-boundary',\n    size = 25,\n    boundary = tag + '-' + utils.generateString(size, BOUNDARY_ALPHABET)\n  } = options || {};\n\n  if(!utils.isFormData(form)) {\n    throw TypeError('FormData instance required');\n  }\n\n  if (boundary.length < 1 || boundary.length > 70) {\n    throw Error('boundary must be 10-70 characters long')\n  }\n\n  const boundaryBytes = textEncoder.encode('--' + boundary + CRLF);\n  const footerBytes = textEncoder.encode('--' + boundary + '--' + CRLF + CRLF);\n  let contentLength = footerBytes.byteLength;\n\n  const parts = Array.from(form.entries()).map(([name, value]) => {\n    const part = new FormDataPart(name, value);\n    contentLength += part.size;\n    return part;\n  });\n\n  contentLength += boundaryBytes.byteLength * parts.length;\n\n  contentLength = utils.toFiniteNumber(contentLength);\n\n  const computedHeaders = {\n    'Content-Type': `multipart/form-data; boundary=${boundary}`\n  }\n\n  if (Number.isFinite(contentLength)) {\n    computedHeaders['Content-Length'] = contentLength;\n  }\n\n  headersHandler && headersHandler(computedHeaders);\n\n  return Readable.from((async function *() {\n    for(const part of parts) {\n      yield boundaryBytes;\n      yield* part.encode();\n    }\n\n    yield footerBytes;\n  })());\n};\n\nexport default formDataToStream;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}