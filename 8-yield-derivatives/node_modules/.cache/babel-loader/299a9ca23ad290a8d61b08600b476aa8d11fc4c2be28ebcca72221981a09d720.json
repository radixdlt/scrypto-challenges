{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function bufferCount(bufferSize, startBufferEvery) {\n  if (startBufferEvery === void 0) {\n    startBufferEvery = null;\n  }\n  return function bufferCountOperatorFunction(source) {\n    return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n  };\n}\nvar BufferCountOperator = /*@__PURE__*/function () {\n  function BufferCountOperator(bufferSize, startBufferEvery) {\n    this.bufferSize = bufferSize;\n    this.startBufferEvery = startBufferEvery;\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n  BufferCountOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  };\n  return BufferCountOperator;\n}();\nvar BufferCountSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferCountSubscriber, _super);\n  function BufferCountSubscriber(destination, bufferSize) {\n    var _this = _super.call(this, destination) || this;\n    _this.bufferSize = bufferSize;\n    _this.buffer = [];\n    return _this;\n  }\n  BufferCountSubscriber.prototype._next = function (value) {\n    var buffer = this.buffer;\n    buffer.push(value);\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  };\n  BufferCountSubscriber.prototype._complete = function () {\n    var buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    _super.prototype._complete.call(this);\n  };\n  return BufferCountSubscriber;\n}(Subscriber);\nvar BufferSkipCountSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferSkipCountSubscriber, _super);\n  function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {\n    var _this = _super.call(this, destination) || this;\n    _this.bufferSize = bufferSize;\n    _this.startBufferEvery = startBufferEvery;\n    _this.buffers = [];\n    _this.count = 0;\n    return _this;\n  }\n  BufferSkipCountSubscriber.prototype._next = function (value) {\n    var _a = this,\n      bufferSize = _a.bufferSize,\n      startBufferEvery = _a.startBufferEvery,\n      buffers = _a.buffers,\n      count = _a.count;\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n    for (var i = buffers.length; i--;) {\n      var buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  };\n  BufferSkipCountSubscriber.prototype._complete = function () {\n    var _a = this,\n      buffers = _a.buffers,\n      destination = _a.destination;\n    while (buffers.length > 0) {\n      var buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    _super.prototype._complete.call(this);\n  };\n  return BufferSkipCountSubscriber;\n}(Subscriber);","map":{"version":3,"names":["tslib_1","Subscriber","bufferCount","bufferSize","startBufferEvery","bufferCountOperatorFunction","source","lift","BufferCountOperator","subscriberClass","BufferCountSubscriber","BufferSkipCountSubscriber","prototype","call","subscriber","subscribe","_super","__extends","destination","_this","buffer","_next","value","push","length","next","_complete","buffers","count","_a","i","splice","shift"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/bufferCount.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * ![](bufferCount.png)\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * ## Examples\n *\n * Emit the last two click events as an array\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { bufferCount } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferCount(2));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * On every click, emit the last two click events as an array\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { bufferCount } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferCount(2, 1));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}