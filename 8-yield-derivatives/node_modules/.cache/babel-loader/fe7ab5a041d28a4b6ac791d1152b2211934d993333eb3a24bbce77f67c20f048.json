{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function map(project, thisArg) {\n  return function mapOperation(source) {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\nvar MapOperator = /*@__PURE__*/function () {\n  function MapOperator(project, thisArg) {\n    this.project = project;\n    this.thisArg = thisArg;\n  }\n  MapOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  };\n  return MapOperator;\n}();\nexport { MapOperator };\nvar MapSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(MapSubscriber, _super);\n  function MapSubscriber(destination, project, thisArg) {\n    var _this = _super.call(this, destination) || this;\n    _this.project = project;\n    _this.count = 0;\n    _this.thisArg = thisArg || _this;\n    return _this;\n  }\n  MapSubscriber.prototype._next = function (value) {\n    var result;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  };\n  return MapSubscriber;\n}(Subscriber);","map":{"version":3,"names":["tslib_1","Subscriber","map","project","thisArg","mapOperation","source","TypeError","lift","MapOperator","prototype","call","subscriber","subscribe","MapSubscriber","_super","__extends","destination","_this","count","_next","value","result","err","error","next"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/map.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: R;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n"],"mappings":";AACA,OAAO,KAAEA,OAAU,MAAE,OAAM;AA2C3B,SAAMC,UAAa,QAA8C,eAAe;OAC9E,SAAOC,IAASC,OAAA,EAAAC,OAAa;SAC3B,SAAWC,YAAYA,CAAAC,MAAA,EAAU;QAC/B,OAAMH,OAAI,KAAS,UAAC;MACrB,UAAAI,SAAA;IACD;IACA,OAAAD,MAAA,CAAAE,IAAA,KAAAC,WAAA,CAAAN,OAAA,EAAAC,OAAA;EACH;AAED;IACEK,WAAA,gBAA2D,YAAsB;WAA7DA,YAAAN,OAAuC,EAAAC,OAAA;IAAU,KAAAD,OAAO,GAAPA,OAAO;IAC3E,KAAAC,OAAA,GAAAA,OAAA;EAED;aACS,CAAAM,SAAO,CAAAC,IAAA,GAAU,UAAIC,UAAc,EAAAN,MAAU,EAAE;IACvD,OAAAA,MAAA,CAAAO,SAAA,KAAAC,aAAA,CAAAF,UAAA,OAAAT,OAAA,OAAAC,OAAA;EACH;EAPA,OAOCK,WAAA;;AAOD,SAAAA,WAAA;IAAkCK,aAAA,0BAAaC,MAAA;EAI7Cf,OAAA,CAAAgB,SAAA,CAAAF,aAAY,EAAAC,MACQ;WADpBD,aAGEA,CAAAG,WAAM,EAAAd,OAAA,EAAWC,OAAC;IAFA,IAAAc,KAAA,GAAAH,MAAA,CAAAJ,IAAO,CAAgC,MAAAM,WAAA;IAJ3DC,KAAA,CAAAf,OAAK,GAAaA,OAAA;IAOhBe,KAAI,CAACC,KAAA,GAAO;;IACb,OAAAD,KAAA;EAIS;eACJ,CAASR,SAAC,CAAAU,KAAA,aAAAC,KAAA;IACd,IAAIC,MAAA;QACF;MACDA,MAAA,QAAAnB,OAAA,CAAAQ,IAAA,MAAAP,OAAA,EAAAiB,KAAA,OAAAF,KAAA;IAAC,E,OACAI,GAAK;MACL,KAAAN,WAAO,CAAAO,KAAA,CAAAD,GAAA;MACR;IACD;IACD,KAAAN,WAAA,CAAAQ,IAAA,CAAAH,MAAA;EACH;EAvBkC,OAAAR,aAuBjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}