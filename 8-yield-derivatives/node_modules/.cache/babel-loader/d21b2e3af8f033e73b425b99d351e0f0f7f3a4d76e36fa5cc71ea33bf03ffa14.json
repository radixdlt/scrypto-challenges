{"ast":null,"code":"/** PURE_IMPORTS_START _util_isArray,_observable_race PURE_IMPORTS_END */\nimport { isArray } from '../util/isArray';\nimport { race as raceStatic } from '../observable/race';\nexport function race() {\n  var observables = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n  return function raceOperatorFunction(source) {\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = observables[0];\n    }\n    return source.lift.call(raceStatic.apply(void 0, [source].concat(observables)));\n  };\n}","map":{"version":3,"names":["isArray","race","raceStatic","_i","arguments","length","raceOperatorFunction","source","observables","lift","call","apply","concat"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/race.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../types';\nimport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\n/** @deprecated Deprecated in favor of static race. */\nexport function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static race. */\nexport function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\n/** @deprecated Deprecated in favor of static race. */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\n/** @deprecated Deprecated in favor of static race. */\nexport function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit a next,\n * error or complete notification from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n * @deprecated Deprecated in favor of static {@link race}.\n */\nexport function race<T>(...observables: (Observable<T> | Observable<T>[])[]): MonoTypeOperatorFunction<T> {\n  return function raceOperatorFunction(source: Observable<T>) {\n    // if the only argument is an array, it was most likely called with\n    // `pair([obs1, obs2, ...])`\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = observables[0] as Observable<T>[];\n    }\n\n    return source.lift.call(raceStatic(source, ...(observables as Observable<T>[])));\n  };\n}\n"],"mappings":"AACA;AAEA,SAASA,OAAI,QAAI,iBAAkB;AAsBnC,SAAMC,IAAA,IAAUC,UAAI;OAAI,SAAAD,KAAA;iBAAmD,GAAnD;OAAA,IAAAE,EAAA,MAAAA,EAAA,GAAAC,SAAA,CAAAC,MAAmD,EAAAF,EAAA;;EACzE;SAGE,SAAIG,oBAA4BA,CAAAC,MAAO,EAAC;QACtCC,WAAW,CAAAH,MAAG,UAAiCL,OAAC,CAAAQ,WAAA;MACjDA,WAAA,GAAAA,WAAA;IAED;IACA,OAAAD,MAAA,CAAAE,IAAA,CAAAC,IAAA,CAAAR,UAAA,CAAAS,KAAA,UAAAJ,MAAA,EAAAK,MAAA,CAAAJ,WAAA;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}