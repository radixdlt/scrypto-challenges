{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar atommodel_1 = require(\"../atommodel\");\nvar crypto_1 = tslib_1.__importDefault(require(\"crypto\"));\nvar RadixUtil_1 = require(\"../common/RadixUtil\");\nvar RadixKeyStore = /** @class */function () {\n  function RadixKeyStore() {}\n  /**\n   * Encrypt a private key\n   * @param address\n   * @param password\n   * @returns\n   */\n  RadixKeyStore.encryptKey = function (address, password) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var privateKey = address.keyPair.getPrivate('hex');\n      // Derrive key\n      var salt = crypto_1.default.randomBytes(32).toString('hex');\n      var iterations = 100000;\n      var keylen = 32;\n      var digest = 'sha512';\n      crypto_1.default.pbkdf2(password, salt, iterations, keylen, digest, function (error, derivedKey) {\n        if (error) {\n          reject(error);\n        }\n        // Encrypt private keys with derrived key\n        var algorithm = 'aes-256-ctr';\n        var iv = crypto_1.default.randomBytes(16);\n        var cipher = crypto_1.default.createCipheriv(algorithm, derivedKey, iv);\n        var ciphertext = Buffer.concat([cipher.update(privateKey), cipher.final()]);\n        // Compute MAC\n        var mac = _this.calculateMac(derivedKey, ciphertext);\n        var fileContents = {\n          crypto: {\n            cipher: algorithm,\n            cipherparams: {\n              iv: iv.toString('hex')\n            },\n            ciphertext: ciphertext.toString('hex'),\n            pbkdfparams: {\n              iterations: iterations,\n              keylen: keylen,\n              digest: digest,\n              salt: salt\n            },\n            mac: mac.toString('hex')\n          },\n          id: address.getUID().toString()\n        };\n        resolve(fileContents);\n      });\n    });\n  };\n  /**\n   * Decrypts an encrypted private key\n   * @param fileContents\n   * @param password\n   * @returns key\n   */\n  RadixKeyStore.decryptKey = function (fileContents, password) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      // Derrive key\n      var salt = fileContents.crypto.pbkdfparams.salt;\n      var iterations = fileContents.crypto.pbkdfparams.iterations;\n      var keylen = fileContents.crypto.pbkdfparams.keylen;\n      var digest = fileContents.crypto.pbkdfparams.digest;\n      crypto_1.default.pbkdf2(password, salt, iterations, keylen, digest, function (error, derivedKey) {\n        if (error) {\n          return reject(error);\n        }\n        // Decrypt ciphertext\n        var algorithm = fileContents.crypto.cipher;\n        var iv = Buffer.from(fileContents.crypto.cipherparams.iv, 'hex');\n        var ciphertext = Buffer.from(fileContents.crypto.ciphertext, 'hex');\n        // Check MAC\n        var MAC = Buffer.from(fileContents.crypto.mac, 'hex');\n        var computedMAC = _this.calculateMac(derivedKey, ciphertext);\n        if (!computedMAC.equals(MAC)) {\n          return reject('MAC mismatch');\n        }\n        var decipher = crypto_1.default.createDecipheriv(algorithm, derivedKey, iv);\n        var privateKey = Buffer.concat([decipher.update(ciphertext), decipher.final()]).toString();\n        // Create wallet\n        var keyPair = atommodel_1.RadixAddress.fromPrivate(privateKey);\n        return resolve(keyPair);\n      });\n    });\n  };\n  RadixKeyStore.calculateMac = function (derivedKey, ciphertext) {\n    var dataToMac = Buffer.concat([derivedKey, ciphertext]);\n    return RadixUtil_1.radixHash(dataToMac);\n  };\n  return RadixKeyStore;\n}();\nexports.default = RadixKeyStore;","map":{"version":3,"names":["atommodel_1","require","crypto_1","tslib_1","__importDefault","RadixUtil_1","RadixKeyStore","encryptKey","address","password","_this","Promise","resolve","reject","privateKey","keyPair","getPrivate","salt","default","randomBytes","toString","iterations","keylen","digest","pbkdf2","error","derivedKey","algorithm","iv","cipher","createCipheriv","ciphertext","Buffer","concat","update","final","mac","calculateMac","fileContents","crypto","cipherparams","pbkdfparams","id","getUID","decryptKey","from","MAC","computedMAC","equals","decipher","createDecipheriv","RadixAddress","fromPrivate","dataToMac","radixHash"],"sources":["../../../../src/modules/crypto/RadixKeyStore.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}