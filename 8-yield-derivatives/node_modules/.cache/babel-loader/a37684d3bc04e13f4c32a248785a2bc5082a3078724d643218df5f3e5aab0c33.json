{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account = exports.isAccount = void 0;\nconst account_1 = require(\"@radixdlt/account\");\nconst isAccount = something => {\n  const inspection = something;\n  return inspection.signingKey !== undefined && (0, account_1.isSigningKey)(inspection.signingKey) && inspection.address !== undefined && (0, account_1.isAccountAddress)(inspection.address);\n};\nexports.isAccount = isAccount;\nconst create = input => {\n  const {\n    signingKey,\n    address\n  } = input;\n  if (!signingKey.publicKey.equals(address.publicKey)) {\n    const errMsg = `Incorrect implementation, publicKey of address does not match publicKey of signingKey.`;\n    console.error(errMsg);\n    throw new Error(errMsg);\n  }\n  const network = address.network;\n  const publicKey = signingKey.publicKey;\n  const hdPath = signingKey.hdPath;\n  return Object.assign(Object.assign({}, signingKey), {\n    equals: other => other.publicKey.equals(publicKey),\n    signingKey: signingKey,\n    type: signingKey.type,\n    address,\n    network,\n    publicKey,\n    hdPath\n  });\n};\nexports.Account = {\n  create\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","Account","isAccount","account_1","require","something","inspection","signingKey","undefined","isSigningKey","address","isAccountAddress","create","input","publicKey","equals","errMsg","console","error","Error","network","hdPath","assign","other","type"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/application/dist/account.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account = exports.isAccount = void 0;\nconst account_1 = require(\"@radixdlt/account\");\nconst isAccount = (something) => {\n    const inspection = something;\n    return (inspection.signingKey !== undefined &&\n        (0, account_1.isSigningKey)(inspection.signingKey) &&\n        inspection.address !== undefined &&\n        (0, account_1.isAccountAddress)(inspection.address));\n};\nexports.isAccount = isAccount;\nconst create = (input) => {\n    const { signingKey, address } = input;\n    if (!signingKey.publicKey.equals(address.publicKey)) {\n        const errMsg = `Incorrect implementation, publicKey of address does not match publicKey of signingKey.`;\n        console.error(errMsg);\n        throw new Error(errMsg);\n    }\n    const network = address.network;\n    const publicKey = signingKey.publicKey;\n    const hdPath = signingKey.hdPath;\n    return Object.assign(Object.assign({}, signingKey), { equals: (other) => other.publicKey.equals(publicKey), signingKey: signingKey, type: signingKey.type, address,\n        network,\n        publicKey,\n        hdPath });\n};\nexports.Account = {\n    create,\n};\n//# sourceMappingURL=account.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,OAAO,GAAGF,OAAO,CAACG,SAAS,GAAG,KAAK,CAAC;AAC5C,MAAMC,SAAS,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAC9C,MAAMF,SAAS,GAAIG,SAAS,IAAK;EAC7B,MAAMC,UAAU,GAAGD,SAAS;EAC5B,OAAQC,UAAU,CAACC,UAAU,KAAKC,SAAS,IACvC,CAAC,CAAC,EAAEL,SAAS,CAACM,YAAY,EAAEH,UAAU,CAACC,UAAU,CAAC,IAClDD,UAAU,CAACI,OAAO,KAAKF,SAAS,IAChC,CAAC,CAAC,EAAEL,SAAS,CAACQ,gBAAgB,EAAEL,UAAU,CAACI,OAAO,CAAC;AAC3D,CAAC;AACDX,OAAO,CAACG,SAAS,GAAGA,SAAS;AAC7B,MAAMU,MAAM,GAAIC,KAAK,IAAK;EACtB,MAAM;IAAEN,UAAU;IAAEG;EAAQ,CAAC,GAAGG,KAAK;EACrC,IAAI,CAACN,UAAU,CAACO,SAAS,CAACC,MAAM,CAACL,OAAO,CAACI,SAAS,CAAC,EAAE;IACjD,MAAME,MAAM,GAAI,wFAAuF;IACvGC,OAAO,CAACC,KAAK,CAACF,MAAM,CAAC;IACrB,MAAM,IAAIG,KAAK,CAACH,MAAM,CAAC;EAC3B;EACA,MAAMI,OAAO,GAAGV,OAAO,CAACU,OAAO;EAC/B,MAAMN,SAAS,GAAGP,UAAU,CAACO,SAAS;EACtC,MAAMO,MAAM,GAAGd,UAAU,CAACc,MAAM;EAChC,OAAOxB,MAAM,CAACyB,MAAM,CAACzB,MAAM,CAACyB,MAAM,CAAC,CAAC,CAAC,EAAEf,UAAU,CAAC,EAAE;IAAEQ,MAAM,EAAGQ,KAAK,IAAKA,KAAK,CAACT,SAAS,CAACC,MAAM,CAACD,SAAS,CAAC;IAAEP,UAAU,EAAEA,UAAU;IAAEiB,IAAI,EAAEjB,UAAU,CAACiB,IAAI;IAAEd,OAAO;IAC9JU,OAAO;IACPN,SAAS;IACTO;EAAO,CAAC,CAAC;AACjB,CAAC;AACDtB,OAAO,CAACE,OAAO,GAAG;EACdW;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}