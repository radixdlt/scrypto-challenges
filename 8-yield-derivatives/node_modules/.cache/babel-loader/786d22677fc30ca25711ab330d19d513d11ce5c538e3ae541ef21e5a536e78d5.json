{"ast":null,"code":"import { internalFromArray } from './fromArray';\nimport { scheduleArray } from '../scheduled/scheduleArray';\nimport { popScheduler } from '../util/args';\nexport function of() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  var scheduler = popScheduler(args);\n  return scheduler ? scheduleArray(args, scheduler) : internalFromArray(args);\n}","map":{"version":3,"names":["internalFromArray","scheduleArray","popScheduler","of","args","_i","arguments","length","scheduler"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/rxjs/src/internal/observable/of.ts"],"sourcesContent":["import { SchedulerLike, ValueFromArray } from '../types';\nimport { internalFromArray } from './fromArray';\nimport { Observable } from '../Observable';\nimport { scheduleArray } from '../scheduled/scheduleArray';\nimport { popScheduler } from '../util/args';\n\n// Devs are more likely to pass null or undefined than they are a scheduler\n// without accompanying values. To make things easier for (naughty) devs who\n// use the `strictNullChecks: false` TypeScript compiler option, these\n// overloads with explicit null and undefined values are included.\n\nexport function of(value: null): Observable<null>;\nexport function of(value: undefined): Observable<undefined>;\n\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of(scheduler: SchedulerLike): Observable<never>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of<A extends readonly unknown[]>(...valuesAndScheduler: [...A, SchedulerLike]): Observable<ValueFromArray<A>>;\n\nexport function of(): Observable<never>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function of<T>(): Observable<T>;\nexport function of<T>(value: T): Observable<T>;\nexport function of<A extends readonly unknown[]>(...values: A): Observable<ValueFromArray<A>>;\n\n/**\n * Converts the arguments to an observable sequence.\n *\n * <span class=\"informal\">Each argument becomes a `next` notification.</span>\n *\n * ![](of.png)\n *\n * Unlike {@link from}, it does not do any flattening and emits each argument in whole\n * as a separate `next` notification.\n *\n * ## Examples\n *\n * Emit the values `10, 20, 30`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of(10, 20, 30)\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n *\n * // Outputs\n * // next: 10\n * // next: 20\n * // next: 30\n * // the end\n * ```\n *\n * Emit the array `[1, 2, 3]`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of([1, 2, 3])\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n *\n * // Outputs\n * // next: [1, 2, 3]\n * // the end\n * ```\n *\n * @see {@link from}\n * @see {@link range}\n *\n * @param {...T} values A comma separated list of arguments you want to be emitted\n * @return {Observable} An Observable that emits the arguments\n * described above and then completes.\n */\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  const scheduler = popScheduler(args);\n  return scheduler ? scheduleArray(args as T[], scheduler) : internalFromArray(args as T[]);\n}\n"],"mappings":"AACA,SAASA,iBAAiB,QAAQ,aAAa;AAE/C,SAASC,aAAa,QAAQ,4BAA4B;AAC1D,SAASC,YAAY,QAAQ,cAAc;AA4E3C,OAAM,SAAUC,EAAEA,CAAA;EAAI,IAAAC,IAAA;OAAA,IAAAC,EAAA,IAAiC,EAAjCA,EAAA,GAAAC,SAAA,CAAAC,MAAiC,EAAjCF,EAAA,EAAiC;IAAjCD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;EACpB,IAAMG,SAAS,GAAGN,YAAY,CAACE,IAAI,CAAC;EACpC,OAAOI,SAAS,GAAGP,aAAa,CAACG,IAAW,EAAEI,SAAS,CAAC,GAAGR,iBAAiB,CAACI,IAAW,CAAC;AAC3F","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}