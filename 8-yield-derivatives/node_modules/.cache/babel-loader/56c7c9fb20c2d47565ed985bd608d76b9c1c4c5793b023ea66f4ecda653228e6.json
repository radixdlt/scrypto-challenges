{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nvar DEFAULT_WEBSOCKET_CONFIG = {\n  url: '',\n  deserializer: function (e) {\n    return JSON.parse(e.data);\n  },\n  serializer: function (value) {\n    return JSON.stringify(value);\n  }\n};\nvar WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nvar WebSocketSubject = function (_super) {\n  __extends(WebSocketSubject, _super);\n  function WebSocketSubject(urlConfigOrSource, destination) {\n    var _this = _super.call(this) || this;\n    _this._socket = null;\n    if (urlConfigOrSource instanceof Observable) {\n      _this.destination = destination;\n      _this.source = urlConfigOrSource;\n    } else {\n      var config = _this._config = __assign({}, DEFAULT_WEBSOCKET_CONFIG);\n      _this._output = new Subject();\n      if (typeof urlConfigOrSource === 'string') {\n        config.url = urlConfigOrSource;\n      } else {\n        for (var key in urlConfigOrSource) {\n          if (urlConfigOrSource.hasOwnProperty(key)) {\n            config[key] = urlConfigOrSource[key];\n          }\n        }\n      }\n      if (!config.WebSocketCtor && WebSocket) {\n        config.WebSocketCtor = WebSocket;\n      } else if (!config.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      _this.destination = new ReplaySubject();\n    }\n    return _this;\n  }\n  WebSocketSubject.prototype.lift = function (operator) {\n    var sock = new WebSocketSubject(this._config, this.destination);\n    sock.operator = operator;\n    sock.source = this;\n    return sock;\n  };\n  WebSocketSubject.prototype._resetState = function () {\n    this._socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject();\n  };\n  WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\n    var self = this;\n    return new Observable(function (observer) {\n      try {\n        self.next(subMsg());\n      } catch (err) {\n        observer.error(err);\n      }\n      var subscription = self.subscribe(function (x) {\n        try {\n          if (messageFilter(x)) {\n            observer.next(x);\n          }\n        } catch (err) {\n          observer.error(err);\n        }\n      }, function (err) {\n        return observer.error(err);\n      }, function () {\n        return observer.complete();\n      });\n      return function () {\n        try {\n          self.next(unsubMsg());\n        } catch (err) {\n          observer.error(err);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  };\n  WebSocketSubject.prototype._connectSocket = function () {\n    var _this = this;\n    var _a = this._config,\n      WebSocketCtor = _a.WebSocketCtor,\n      protocol = _a.protocol,\n      url = _a.url,\n      binaryType = _a.binaryType;\n    var observer = this._output;\n    var socket = null;\n    try {\n      socket = protocol ? new WebSocketCtor(url, protocol) : new WebSocketCtor(url);\n      this._socket = socket;\n      if (binaryType) {\n        this._socket.binaryType = binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n    var subscription = new Subscription(function () {\n      _this._socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n    socket.onopen = function (evt) {\n      var _socket = _this._socket;\n      if (!_socket) {\n        socket.close();\n        _this._resetState();\n        return;\n      }\n      var openObserver = _this._config.openObserver;\n      if (openObserver) {\n        openObserver.next(evt);\n      }\n      var queue = _this.destination;\n      _this.destination = Subscriber.create(function (x) {\n        if (socket.readyState === 1) {\n          try {\n            var serializer = _this._config.serializer;\n            socket.send(serializer(x));\n          } catch (e) {\n            _this.destination.error(e);\n          }\n        }\n      }, function (err) {\n        var closingObserver = _this._config.closingObserver;\n        if (closingObserver) {\n          closingObserver.next(undefined);\n        }\n        if (err && err.code) {\n          socket.close(err.code, err.reason);\n        } else {\n          observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n        }\n        _this._resetState();\n      }, function () {\n        var closingObserver = _this._config.closingObserver;\n        if (closingObserver) {\n          closingObserver.next(undefined);\n        }\n        socket.close();\n        _this._resetState();\n      });\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add(queue.subscribe(_this.destination));\n      }\n    };\n    socket.onerror = function (e) {\n      _this._resetState();\n      observer.error(e);\n    };\n    socket.onclose = function (e) {\n      _this._resetState();\n      var closeObserver = _this._config.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n    socket.onmessage = function (e) {\n      try {\n        var deserializer = _this._config.deserializer;\n        observer.next(deserializer(e));\n      } catch (err) {\n        observer.error(err);\n      }\n    };\n  };\n  WebSocketSubject.prototype._subscribe = function (subscriber) {\n    var _this = this;\n    var source = this.source;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this._socket) {\n      this._connectSocket();\n    }\n    this._output.subscribe(subscriber);\n    subscriber.add(function () {\n      var _socket = _this._socket;\n      if (_this._output.observers.length === 0) {\n        if (_socket && (_socket.readyState === 1 || _socket.readyState === 0)) {\n          _socket.close();\n        }\n        _this._resetState();\n      }\n    });\n    return subscriber;\n  };\n  WebSocketSubject.prototype.unsubscribe = function () {\n    var _socket = this._socket;\n    if (_socket && (_socket.readyState === 1 || _socket.readyState === 0)) {\n      _socket.close();\n    }\n    this._resetState();\n    _super.prototype.unsubscribe.call(this);\n  };\n  return WebSocketSubject;\n}(AnonymousSubject);\nexport { WebSocketSubject };","map":{"version":3,"names":["Subject","AnonymousSubject","Subscriber","Observable","Subscription","ReplaySubject","DEFAULT_WEBSOCKET_CONFIG","url","deserializer","e","JSON","parse","data","serializer","value","stringify","WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT","WebSocketSubject","_super","__extends","urlConfigOrSource","destination","_this","call","_socket","source","config","_config","__assign","_output","key","hasOwnProperty","WebSocketCtor","WebSocket","Error","prototype","lift","operator","sock","_resetState","multiplex","subMsg","unsubMsg","messageFilter","self","observer","next","err","error","subscription","subscribe","x","complete","unsubscribe","_connectSocket","_a","protocol","binaryType","socket","readyState","close","onopen","evt","openObserver","queue","create","send","closingObserver","undefined","code","reason","TypeError","add","onerror","onclose","closeObserver","wasClean","onmessage","_subscribe","subscriber","observers","length"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/rxjs/src/internal/observable/dom/WebSocketSubject.ts"],"sourcesContent":["import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../types';\n\n/**\n * WebSocketSubjectConfig is a plain Object that allows us to make our\n * webSocket configurable.\n *\n * <span class=\"informal\">Provides flexibility to {@link webSocket}</span>\n *\n * It defines a set of properties to provide custom behavior in specific\n * moments of the socket's lifecycle. When the connection opens we can\n * use `openObserver`, when the connection is closed `closeObserver`, if we\n * are interested in listening for data comming from server: `deserializer`,\n * which allows us to customize the deserialization strategy of data before passing it\n * to the socket client. By default `deserializer` is going to apply `JSON.parse` to each message comming\n * from the Server.\n *\n * ## Example\n * **deserializer**, the default for this property is `JSON.parse` but since there are just two options\n * for incomming data, either be text or binarydata. We can apply a custom deserialization strategy\n * or just simply skip the default behaviour.\n * ```ts\n * import { webSocket } from 'rxjs/webSocket';\n *\n * const wsSubject = webSocket({\n *     url: 'ws://localhost:8081',\n * //Apply any transformation of your choice.\n *     deserializer: ({data}) => data\n * });\n *\n * wsSubject.subscribe(console.log);\n *\n * // Let's suppose we have this on the Server: ws.send(\"This is a msg from the server\")\n * //output\n * //\n * // This is a msg from the server\n * ```\n *\n * **serializer** allows us to apply custom serialization strategy but for the outgoing messages\n * ```ts\n * import { webSocket } from 'rxjs/webSocket';\n *\n * const wsSubject = webSocket({\n *     url: 'ws://localhost:8081',\n * //Apply any transformation of your choice.\n *     serializer: msg => JSON.stringify({channel: \"webDevelopment\", msg: msg})\n * });\n *\n * wsSubject.subscribe(() => subject.next(\"msg to the server\"));\n *\n * // Let's suppose we have this on the Server:\n * //   ws.on(\"message\", msg => console.log);\n * //   ws.send(\"This is a msg from the server\");\n * //output at server side:\n * //\n * // {\"channel\":\"webDevelopment\",\"msg\":\"msg to the server\"}\n * ```\n *\n * **closeObserver** allows us to set a custom error when an error raise up.\n * ```ts\n * import { webSocket } from 'rxjs/webSocket';\n *\n * const wsSubject = webSocket({\n *     url: 'ws://localhost:8081',\n *     closeObserver: {\n        next(closeEvent) {\n            const customError = { code: 6666, reason: \"Custom evil reason\" }\n            console.log(`code: ${customError.code}, reason: ${customError.reason}`);\n        }\n    }\n * });\n *\n * //output\n * // code: 6666, reason: Custom evil reason\n * ```\n *\n * **openObserver**, Let's say we need to make some kind of init task before sending/receiving msgs to the\n * webSocket or sending notification that the connection was successful, this is when\n * openObserver is usefull for.\n * ```ts\n * import { webSocket } from 'rxjs/webSocket';\n *\n * const wsSubject = webSocket({\n *     url: 'ws://localhost:8081',\n *     openObserver: {\n *         next: () => {\n *             console.log('connetion ok');\n *         }\n *     },\n * });\n *\n * //output\n * // connetion ok`\n * ```\n * */\n\nexport interface WebSocketSubjectConfig<T> {\n  /** The url of the socket server to connect to */\n  url: string;\n  /** The protocol to use to connect */\n  protocol?: string | Array<string>;\n  /** @deprecated Will be removed in v8. Use {@link deserializer} instead. */\n  resultSelector?: (e: MessageEvent) => T;\n  /**\n   * A serializer used to create messages from passed values before the\n   * messages are sent to the server. Defaults to JSON.stringify.\n   */\n  serializer?: (value: T) => WebSocketMessage;\n  /**\n   * A deserializer used for messages arriving on the socket from the\n   * server. Defaults to JSON.parse.\n   */\n  deserializer?: (e: MessageEvent) => T;\n  /**\n   * An Observer that watches when open events occur on the underlying web socket.\n   */\n  openObserver?: NextObserver<Event>;\n  /**\n   * An Observer than watches when close events occur on the underlying webSocket\n   */\n  closeObserver?: NextObserver<CloseEvent>;\n  /**\n   * An Observer that watches when a close is about to occur due to\n   * unsubscription.\n   */\n  closingObserver?: NextObserver<void>;\n  /**\n   * A WebSocket constructor to use. This is useful for situations like using a\n   * WebSocket impl in Node (WebSocket is a DOM API), or for mocking a WebSocket\n   * for testing purposes\n   */\n  WebSocketCtor?: { new (url: string, protocols?: string | string[]): WebSocket };\n  /** Sets the `binaryType` property of the underlying WebSocket. */\n  binaryType?: 'blob' | 'arraybuffer';\n}\n\nconst DEFAULT_WEBSOCKET_CONFIG: WebSocketSubjectConfig<any> = {\n  url: '',\n  deserializer: (e: MessageEvent) => JSON.parse(e.data),\n  serializer: (value: any) => JSON.stringify(value),\n};\n\nconst WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT =\n  'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\n\nexport type WebSocketMessage = string | ArrayBuffer | Blob | ArrayBufferView;\n\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n  // @ts-ignore: Property has no initializer and is not definitely assigned\n  private _config: WebSocketSubjectConfig<T>;\n\n  /** @internal */\n  // @ts-ignore: Property has no initializer and is not definitely assigned\n  _output: Subject<T>;\n\n  private _socket: WebSocket | null = null;\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig<T> | Observable<T>, destination?: Observer<T>) {\n    super();\n    if (urlConfigOrSource instanceof Observable) {\n      this.destination = destination;\n      this.source = urlConfigOrSource as Observable<T>;\n    } else {\n      const config = (this._config = { ...DEFAULT_WEBSOCKET_CONFIG });\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        config.url = urlConfigOrSource;\n      } else {\n        for (const key in urlConfigOrSource) {\n          if (urlConfigOrSource.hasOwnProperty(key)) {\n            (config as any)[key] = (urlConfigOrSource as any)[key];\n          }\n        }\n      }\n\n      if (!config.WebSocketCtor && WebSocket) {\n        config.WebSocketCtor = WebSocket;\n      } else if (!config.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this._config as WebSocketSubjectConfig<any>, this.destination as any);\n    sock.operator = operator;\n    sock.source = this;\n    return sock;\n  }\n\n  private _resetState() {\n    this._socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  /**\n   * Creates an {@link Observable}, that when subscribed to, sends a message,\n   * defined by the `subMsg` function, to the server over the socket to begin a\n   * subscription to data over that socket. Once data arrives, the\n   * `messageFilter` argument will be used to select the appropriate data for\n   * the resulting Observable. When teardown occurs, either due to\n   * unsubscription, completion or error, a message defined by the `unsubMsg`\n   * argument will be send to the server over the WebSocketSubject.\n   *\n   * @param subMsg A function to generate the subscription message to be sent to\n   * the server. This will still be processed by the serializer in the\n   * WebSocketSubject's config. (Which defaults to JSON serialization)\n   * @param unsubMsg A function to generate the unsubscription message to be\n   * sent to the server at teardown. This will still be processed by the\n   * serializer in the WebSocketSubject's config.\n   * @param messageFilter A predicate for selecting the appropriate messages\n   * from the server for the output stream.\n   */\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<T>) => {\n      try {\n        self.next(subMsg());\n      } catch (err) {\n        observer.error(err);\n      }\n\n      const subscription = self.subscribe(\n        (x) => {\n          try {\n            if (messageFilter(x)) {\n              observer.next(x);\n            }\n          } catch (err) {\n            observer.error(err);\n          }\n        },\n        (err) => observer.error(err),\n        () => observer.complete()\n      );\n\n      return () => {\n        try {\n          self.next(unsubMsg());\n        } catch (err) {\n          observer.error(err);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor, protocol, url, binaryType } = this._config;\n    const observer = this._output;\n\n    let socket: WebSocket | null = null;\n    try {\n      socket = protocol ? new WebSocketCtor!(url, protocol) : new WebSocketCtor!(url);\n      this._socket = socket;\n      if (binaryType) {\n        this._socket.binaryType = binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this._socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (evt: Event) => {\n      const { _socket } = this;\n      if (!_socket) {\n        socket!.close();\n        this._resetState();\n        return;\n      }\n      const { openObserver } = this._config;\n      if (openObserver) {\n        openObserver.next(evt);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create<T>(\n        (x) => {\n          if (socket!.readyState === 1) {\n            try {\n              const { serializer } = this._config;\n              socket!.send(serializer!(x!));\n            } catch (e) {\n              this.destination!.error(e);\n            }\n          }\n        },\n        (err) => {\n          const { closingObserver } = this._config;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (err && err.code) {\n            socket!.close(err.code, err.reason);\n          } else {\n            observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n          }\n          this._resetState();\n        },\n        () => {\n          const { closingObserver } = this._config;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket!.close();\n          this._resetState();\n        }\n      ) as Subscriber<any>;\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((queue as ReplaySubject<T>).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const { closeObserver } = this._config;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      try {\n        const { deserializer } = this._config;\n        observer.next(deserializer!(e));\n      } catch (err) {\n        observer.error(err);\n      }\n    };\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this._socket) {\n      this._connectSocket();\n    }\n    this._output.subscribe(subscriber);\n    subscriber.add(() => {\n      const { _socket } = this;\n      if (this._output.observers.length === 0) {\n        if (_socket && (_socket.readyState === 1 || _socket.readyState === 0)) {\n          _socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscriber;\n  }\n\n  unsubscribe() {\n    const { _socket } = this;\n    if (_socket && (_socket.readyState === 1 || _socket.readyState === 0)) {\n      _socket.close();\n    }\n    this._resetState();\n    super.unsubscribe();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}