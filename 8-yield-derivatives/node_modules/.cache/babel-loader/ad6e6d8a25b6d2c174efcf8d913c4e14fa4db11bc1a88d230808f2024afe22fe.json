{"ast":null,"code":"import React,{useState,useEffect}from'react';import{RadixDappToolkit,RadixNetwork}from\"@radixdlt/radix-dapp-toolkit\";import'./TradingBotComponent.css';// Import CSS for styling\nimport logo from'./logo.png';// Import your logo image\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TradingBotComponent=()=>{const[response,setResponse]=useState('');const[loading,setLoading]=useState(false);const[rdt,setRdt]=useState(null);const[contractDetails,setContractDetails]=useState(null);const[claimingInsurance,setClaimingInsurance]=useState(false);const[signingContract,setSigningContract]=useState(false);useEffect(()=>{const initializeRadixDappToolkit=async()=>{try{const rdtInstance=RadixDappToolkit({dAppDefinitionAddress:\"account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz\",networkId:RadixNetwork.Stokenet,applicationName:\"parametric_insurance\",applicationVersion:\"1.0.0\"});setRdt(rdtInstance);}catch(error){console.error('Error initializing RadixDappToolkit:',error);}};initializeRadixDappToolkit();},[]);const handleRunBot=async()=>{if(!rdt)return;setLoading(true);try{// Simulate bot response (replace with actual bot interaction)\nsetTimeout(()=>{setResponse('Bot: Buy signal detected for BTC/USD');setLoading(false);},2000);}catch(error){console.error('Error running bot:',error);setLoading(false);}};const handleCreateContract=async()=>{setSigningContract(true);// Implement logic to create a new contract\n// Once the contract is created, setSigningContract(false);\n};const handleViewDetails=async()=>{// Implement logic to fetch and display contract details\n// Set contractDetails with the fetched details\n};const handleClaimInsurance=async()=>{setClaimingInsurance(true);// Implement logic to claim insurance for a contract\n// Once the insurance is claimed, setClaimingInsurance(false);\n};return/*#__PURE__*/_jsx(\"div\",{className:\"trading-bot-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"trading-bot-form\",children:[/*#__PURE__*/_jsx(\"img\",{src:logo,alt:\"InfiniX Logo\",className:\"logo\",style:{width:'150px',height:'150px'}}),/*#__PURE__*/_jsx(\"h2\",{children:\"Welcome to InfiniX\"}),/*#__PURE__*/_jsx(\"p\",{style:{fontSize:'20px'},children:\"Instant Insurance, Infinite Possibilities!\"}),response&&/*#__PURE__*/_jsx(\"div\",{className:\"bot-response\",children:response}),/*#__PURE__*/_jsx(\"h2\",{children:\"Your Insurance Platform\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleCreateContract,disabled:signingContract,children:signingContract?'Signing Up Contract...':'Sign Up Contract'}),/*#__PURE__*/_jsx(\"button\",{onClick:handleViewDetails,children:\"View Contract Details\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleClaimInsurance,disabled:claimingInsurance,children:claimingInsurance?'Claiming Insurance...':'Claim Insurance'}),contractDetails&&/*#__PURE__*/_jsx(\"div\",{className:\"contract-details\"})]})});};export default TradingBotComponent;","map":{"version":3,"names":["React","useState","useEffect","RadixDappToolkit","RadixNetwork","logo","jsx","_jsx","jsxs","_jsxs","TradingBotComponent","response","setResponse","loading","setLoading","rdt","setRdt","contractDetails","setContractDetails","claimingInsurance","setClaimingInsurance","signingContract","setSigningContract","initializeRadixDappToolkit","rdtInstance","dAppDefinitionAddress","networkId","Stokenet","applicationName","applicationVersion","error","console","handleRunBot","setTimeout","handleCreateContract","handleViewDetails","handleClaimInsurance","className","children","src","alt","style","width","height","fontSize","onClick","disabled"],"sources":["/Users/mdabdurrazzak/RadInsu/src/ins.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { RadixDappToolkit, RadixNetwork } from \"@radixdlt/radix-dapp-toolkit\";\nimport './TradingBotComponent.css'; // Import CSS for styling\nimport logo from './logo.png'; // Import your logo image\n\nconst TradingBotComponent = () => {\n  const [response, setResponse] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [rdt, setRdt] = useState(null);\n\n  const [contractDetails, setContractDetails] = useState(null);\n  const [claimingInsurance, setClaimingInsurance] = useState(false);\n  const [signingContract, setSigningContract] = useState(false);\n\n  useEffect(() => {\n    const initializeRadixDappToolkit = async () => {\n      try {\n        const rdtInstance = RadixDappToolkit({\n          dAppDefinitionAddress: \"account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz\",\n          networkId: RadixNetwork.Stokenet,\n          applicationName: \"parametric_insurance\",\n          applicationVersion: \"1.0.0\",\n        });\n        setRdt(rdtInstance);\n      } catch (error) {\n        console.error('Error initializing RadixDappToolkit:', error);\n      }\n    };\n\n    initializeRadixDappToolkit();\n  }, []);\n\n  const handleRunBot = async () => {\n    if (!rdt) return;\n\n    setLoading(true);\n    try {\n      // Simulate bot response (replace with actual bot interaction)\n      setTimeout(() => {\n        setResponse('Bot: Buy signal detected for BTC/USD');\n        setLoading(false);\n      }, 2000);\n    } catch (error) {\n      console.error('Error running bot:', error);\n      setLoading(false);\n    }\n  };\n\n  const handleCreateContract = async () => {\n    setSigningContract(true);\n    // Implement logic to create a new contract\n    // Once the contract is created, setSigningContract(false);\n  };\n\n  const handleViewDetails = async () => {\n    // Implement logic to fetch and display contract details\n    // Set contractDetails with the fetched details\n  };\n\n  const handleClaimInsurance = async () => {\n    setClaimingInsurance(true);\n    // Implement logic to claim insurance for a contract\n    // Once the insurance is claimed, setClaimingInsurance(false);\n  };\n\n  return (\n    <div className=\"trading-bot-container\">\n      <div className=\"trading-bot-form\">\n      <img src={logo} alt=\"InfiniX Logo\" className=\"logo\" style={{ width: '150px', height: '150px' }} />\n\n        <h2>Welcome to InfiniX</h2>\n        <p style={{ fontSize: '20px' }}>Instant Insurance, Infinite Possibilities!</p>\n\n       \n        {response && <div className=\"bot-response\">{response}</div>}\n        <h2>Your Insurance Platform</h2>\n        <button onClick={handleCreateContract} disabled={signingContract}>\n          {signingContract ? 'Signing Up Contract...' : 'Sign Up Contract'}\n        </button>\n        <button onClick={handleViewDetails}>View Contract Details</button>\n        <button onClick={handleClaimInsurance} disabled={claimingInsurance}>\n          {claimingInsurance ? 'Claiming Insurance...' : 'Claim Insurance'}\n        </button>\n        {contractDetails && (\n          <div className=\"contract-details\">\n            {/* Display contract details here */}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TradingBotComponent;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}