{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscription,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function bufferWhen(closingSelector) {\n  return function (source) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\nvar BufferWhenOperator = /*@__PURE__*/function () {\n  function BufferWhenOperator(closingSelector) {\n    this.closingSelector = closingSelector;\n  }\n  BufferWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  };\n  return BufferWhenOperator;\n}();\nvar BufferWhenSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferWhenSubscriber, _super);\n  function BufferWhenSubscriber(destination, closingSelector) {\n    var _this = _super.call(this, destination) || this;\n    _this.closingSelector = closingSelector;\n    _this.subscribing = false;\n    _this.openBuffer();\n    return _this;\n  }\n  BufferWhenSubscriber.prototype._next = function (value) {\n    this.buffer.push(value);\n  };\n  BufferWhenSubscriber.prototype._complete = function () {\n    var buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    _super.prototype._complete.call(this);\n  };\n  BufferWhenSubscriber.prototype._unsubscribe = function () {\n    this.buffer = undefined;\n    this.subscribing = false;\n  };\n  BufferWhenSubscriber.prototype.notifyNext = function () {\n    this.openBuffer();\n  };\n  BufferWhenSubscriber.prototype.notifyComplete = function () {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  };\n  BufferWhenSubscriber.prototype.openBuffer = function () {\n    var closingSubscription = this.closingSubscription;\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n    var buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n    this.buffer = [];\n    var closingNotifier;\n    try {\n      var closingSelector = this.closingSelector;\n      closingNotifier = closingSelector();\n    } catch (err) {\n      return this.error(err);\n    }\n    closingSubscription = new Subscription();\n    this.closingSubscription = closingSubscription;\n    this.add(closingSubscription);\n    this.subscribing = true;\n    closingSubscription.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\n    this.subscribing = false;\n  };\n  return BufferWhenSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"names":["tslib_1","Subscription","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","bufferWhen","closingSelector","source","lift","BufferWhenOperator","prototype","call","subscriber","subscribe","BufferWhenSubscriber","_super","__extends","destination","_this","subscribing","_next","value","buffer","push","_complete","next","_unsubscribe","undefined","notifyNext","openBuffer","notifyComplete","complete","closingSubscription","remove","unsubscribe","closingNotifier","err","error","add"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/bufferWhen.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { OperatorFunction } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * ![](bufferWhen.png)\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * ## Example\n *\n * Emit an array of the last clicks every [1-5] random seconds\n *\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { bufferWhen } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferWhen(() =>\n *   interval(1000 + Math.random() * 4000)\n * ));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends SimpleOuterSubscriber<T, any> {\n  private buffer?: T[];\n  private subscribing: boolean = false;\n  private closingSubscription?: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer!.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next!(buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.buffer = undefined;\n    this.subscribing = false;\n  }\n\n  notifyNext(): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next!(buffer);\n    }\n\n    this.buffer = [];\n\n    let closingNotifier;\n    try {\n      const { closingSelector } = this;\n      closingNotifier = closingSelector();\n    } catch (err) {\n      return this.error(err);\n    }\n    closingSubscription = new Subscription();\n    this.closingSubscription = closingSubscription;\n    this.add(closingSubscription);\n    this.subscribing = true;\n    closingSubscription.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\n    this.subscribing = false;\n  }\n}\n"],"mappings":";AAGA,OAAO,KAAEA,OAAA,MAAc,OAAM;AAE7B,SAASC,YAAA,yBAAqC;AA4C9C,SAAMC,qBAAwB,EAAAC,cAAsC,EAAAC,qBAAA;OAClE,SAAOC,UAAUA,CAAqBC,eAAA;SACpC,UAAaC,MAAM;IACnB,OAAAA,MAAA,CAAAC,IAAA,KAAAC,kBAAA,CAAAH,eAAA;EACH;AAED;IAEEG,kBAAA,gBAAoB,YAAsC;WAAtCA,mBAAAH,eAAsC;IACzD,KAAAA,eAAA,GAAAA,eAAA;EAED;oBACgB,CAAAI,SAAU,CAAAC,IAAI,aAAAC,UAAqB,EAAAL,MAAU,EAAE;IAC9D,OAAAA,MAAA,CAAAM,SAAA,KAAAC,oBAAA,CAAAF,UAAA,OAAAN,eAAA;EACH;EARA,OAQCG,kBAAA;AAOD;IAAsCK,oBAAA,0BAA6BC,MAAA;EAKjEf,OAAA,CAAAgB,SAAA,CAAAF,oBAAY,EAAAC,MAAsC;WAAlDD,oBACEA,CAAAG,WAAM,EAAAX,eAEP;IAHiD,IAAAY,KAAA,GAAAH,MAAA,CAAAJ,IAAe,CAAf,MAAAM,WAAsC;IAHhFC,KAAA,CAAAZ,eAAuB,GAAAA,eAAM;IAKnCY,KAAI,CAACC,WAAU,GAAG;;IACnB,OAAAD,KAAA;EAES;sBACS,CAACR,SAAO,CAAAU,KAAA,aAAAC,KAAA;IAC1B,KAAAC,MAAA,CAAAC,IAAA,CAAAF,KAAA;EAES;sBACO,CAAIX,SAAQ,CAAAc,SAAA;IAC3B,IAAIF,MAAM,GAAE,KAAAA,MAAA;QACVA,MAAK;MACN,KAAAL,WAAA,CAAAQ,IAAA,CAAAH,MAAA;IACD;IACDP,MAAA,CAAAL,SAAA,CAAAc,SAAA,CAAAb,IAAA;EAGD;sBACgB,CAAAD,SAAU,CAAAgB,YAAA;IACxB,IAAI,CAACJ,MAAA,GAAAK,SAAc;IACpB,KAAAR,WAAA;EAED;sBACiB,CAAET,SAAC,CAAAkB,UAAA;IACnB,KAAAC,UAAA;EAED;sBACW,CAAAnB,SAAa,CAAAoB,cAAA;QACpB,IAAI,CAACX,WAAW;MACjB,KAAAY,QAAA;WACC;MACD,KAAAF,UAAA;IACF;EAED;sBACQ,CAAAnB,SAAA,CAAAmB,UAAA,eAA6B;IAEnC,IAAIG,mBAAmB,GAAE,KAAAA,mBAAA;QACvBA,mBAAY;MACZ,KAAAC,MAAA,CAAAD,mBAA+B;MAChCA,mBAAA,CAAAE,WAAA;IAED;IACA,IAAIZ,MAAK,OAAQ,CAAAA,MAAA;QACf,IAAI,CAACA,MAAA;MACN,KAAAL,WAAA,CAAAQ,IAAA,CAAAH,MAAA;IAED;IAEA,IAAI,CAAAA,MAAA;IACJ,IAAIa,eAAA;QACM;MACR,IAAA7B,eAAkB,QAAAA,eAAkB;MACrC6B,eAAA,GAAA7B,eAAA;IAAC,E,OACA8B,GAAA,EAAO;MACR,YAAAC,KAAA,CAAAD,GAAA;IACD;IACAJ,mBAAK,OAAmB/B,YAAG;IAC3B,IAAI,CAAC+B,mBAAI,GAAAA,mBAAqB;IAC9B,IAAI,CAACM,GAAA,CAAAN,mBAAmB;IACxB,KAAAb,WAAA,GAAmB,IAAI;IACvBa,mBAAmB,CAAAM,GAAA,CAAKnC,cAAC,CAAAgC,eAAA,MAAA/B,qBAAA;IAC1B,KAAAe,WAAA;EACH;EArEsC,OAAAL,oBAqErC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}