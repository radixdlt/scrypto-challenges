{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar rxjs_1 = require(\"rxjs\");\nvar internal_compatibility_1 = require(\"rxjs/internal-compatibility\");\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n  var observables = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n  var project = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = observables.pop();\n  }\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && internal_compatibility_1.isArray(observables[0])) {\n    observables = observables[0].slice();\n  }\n  return this.lift.call(rxjs_1.of.apply(void 0, [this].concat(observables)), new internal_compatibility_1.CombineLatestOperator(project));\n}\nexports.combineLatest = combineLatest;","map":{"version":3,"names":["rxjs_1","require","internal_compatibility_1","combineLatest","observables","_i","arguments","length","project","pop","isArray","slice","lift","call","of","apply","concat","CombineLatestOperator","exports"],"sources":["../src/compat/operator/combineLatest.ts"],"sourcesContent":[null],"mappings":";;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,wBAAA,GAAAD,OAAA;AAiBA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,SAAgBE,aAAaA,CAAA;EAA4B,IAAAC,WAAA;OAAA,IAAAC,EAAA,IAE6B,EAF7BA,EAAA,GAAAC,SAAA,CAAAC,MAE6B,EAF7BF,EAAA,EAE6B;IAF7BD,WAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;EAGvD,IAAIG,OAAO,GAAiC,IAAI;EAChD,IAAI,OAAOJ,WAAW,CAACA,WAAW,CAACG,MAAM,GAAG,CAAC,CAAC,KAAK,UAAU,EAAE;IAC7DC,OAAO,GAAiCJ,WAAW,CAACK,GAAG,EAAE;;EAG3D;EACA;EACA,IAAIL,WAAW,CAACG,MAAM,KAAK,CAAC,IAAIL,wBAAA,CAAAQ,OAAO,CAACN,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;IACvDA,WAAW,GAASA,WAAW,CAAC,CAAC,CAAE,CAACO,KAAK,EAAE;;EAG7C,OAAO,IAAI,CAACC,IAAI,CAACC,IAAI,CAACb,MAAA,CAAAc,EAAE,CAAAC,KAAA,UAAC,IAAI,EAAAC,MAAA,CAAKZ,WAAqC,IAAG,IAAIF,wBAAA,CAAAe,qBAAqB,CAACT,OAAO,CAAC,CAAC;AAC/G;AAfAU,OAAA,CAAAf,aAAA,GAAAA,aAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}