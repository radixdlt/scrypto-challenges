{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst e = e => n => \"function\" == typeof n ? ((e, n) => (customElements.define(e, n), n))(e, n) : ((e, n) => {\n  const {\n    kind: t,\n    elements: s\n  } = n;\n  return {\n    kind: t,\n    elements: s,\n    finisher(n) {\n      customElements.define(e, n);\n    }\n  };\n})(e, n);\nexport { e as customElement };","map":{"version":3,"names":["e","n","customElements","define","kind","t","elements","s","finisher","customElement"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@lit/reactive-element/src/decorators/custom-element.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport {Constructor, ClassDescriptor} from './base.js';\n\n/**\n * Allow for custom element classes with private constructors\n */\ntype CustomElementClass = Omit<typeof HTMLElement, 'new'>;\n\nconst legacyCustomElement = (tagName: string, clazz: CustomElementClass) => {\n  customElements.define(tagName, clazz as CustomElementConstructor);\n  // Cast as any because TS doesn't recognize the return type as being a\n  // subtype of the decorated class when clazz is typed as\n  // `Constructor<HTMLElement>` for some reason.\n  // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n  // applied to elements however.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return clazz as any;\n};\n\nconst standardCustomElement = (\n  tagName: string,\n  descriptor: ClassDescriptor\n) => {\n  const {kind, elements} = descriptor;\n  return {\n    kind,\n    elements,\n    // This callback is called once the class is otherwise fully defined\n    finisher(clazz: Constructor<HTMLElement>) {\n      customElements.define(tagName, clazz);\n    },\n  };\n};\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```js\n * @customElement('my-element')\n * class MyElement extends LitElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n * @category Decorator\n * @param tagName The tag name of the custom element to define.\n */\nexport const customElement =\n  (tagName: string) =>\n  (classOrDescriptor: CustomElementClass | ClassDescriptor) =>\n    typeof classOrDescriptor === 'function'\n      ? legacyCustomElement(tagName, classOrDescriptor)\n      : standardCustomElement(tagName, classOrDescriptor as ClassDescriptor);\n"],"mappings":";;;;;AAmBA,MAwCaA,CAAA,GACVA,CAAA,IACAC,CAAA,IAC8B,qBAAtBA,CAAA,GA3CiB,EAACD,CAAA,EAAiBC,CAAA,MAC5CC,cAAA,CAAeC,MAAA,CAAOH,CAAA,EAASC,CAAA,GAOxBA,CAAA,GAoCmBD,CAAA,EAASC,CAAA,IAjCP,EAC5BD,CAAA,EACAC,CAAA;EAEA;IAAMG,IAAA,EAACC,CAAA;IAAIC,QAAA,EAAEC;EAAA,IAAYN,CAAA;EACzB,OAAO;IACLG,IAAA,EAAAC,CAAA;IACAC,QAAA,EAAAC,CAAA;IAEAC,SAASP,CAAA;MACPC,cAAA,CAAeC,MAAA,CAAOH,CAAA,EAASC,CAAA,CAChC;IAAA;EAAA,CACF;AAAA,GAsB2BD,CAAA,EAASC,CAAA;AAAA,SAAAD,CAAA,IAAAS,aAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}