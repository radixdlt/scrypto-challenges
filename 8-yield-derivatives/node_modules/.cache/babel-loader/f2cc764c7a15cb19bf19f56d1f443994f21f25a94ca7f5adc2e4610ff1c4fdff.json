{"ast":null,"code":"const EC = require('elliptic').ec;\nconst ec = new EC('secp256k1');\nconst ecparams = ec.curve;\n\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor;\nfunction loadCompressedPublicKey(first, xbuf) {\n  let x = new BN(xbuf);\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null;\n  x = x.toRed(ecparams.red);\n\n  // compute corresponding Y\n  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();\n  if (first === 0x03 !== y.isOdd()) y = y.redNeg();\n  return ec.keyPair({\n    pub: {\n      x: x,\n      y: y\n    }\n  });\n}\nfunction loadUncompressedPublicKey(first, xbuf, ybuf) {\n  let x = new BN(xbuf);\n  let y = new BN(ybuf);\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null;\n  x = x.toRed(ecparams.red);\n  y = y.toRed(ecparams.red);\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null;\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x);\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;\n  return ec.keyPair({\n    pub: {\n      x: x,\n      y: y\n    }\n  });\n}\nfunction loadPublicKey(pubkey) {\n  // length should be validated in interface\n  const first = pubkey[0];\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null;\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33));\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null;\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65));\n    default:\n      return null;\n  }\n}\nfunction savePublicKey(output, point) {\n  const pubkey = point.encode(null, output.length === 33);\n  // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i];\n}\nmodule.exports = {\n  contextRandomize() {\n    return 0;\n  },\n  privateKeyVerify(seckey) {\n    const bn = new BN(seckey);\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1;\n  },\n  privateKeyNegate(seckey) {\n    const bn = new BN(seckey);\n    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32);\n    seckey.set(negate);\n    return 0;\n  },\n  privateKeyTweakAdd(seckey, tweak) {\n    const bn = new BN(tweak);\n    if (bn.cmp(ecparams.n) >= 0) return 1;\n    bn.iadd(new BN(seckey));\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);\n    if (bn.isZero()) return 1;\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32);\n    seckey.set(tweaked);\n    return 0;\n  },\n  privateKeyTweakMul(seckey, tweak) {\n    let bn = new BN(tweak);\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;\n    bn.imul(new BN(seckey));\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n);\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32);\n    seckey.set(tweaked);\n    return 0;\n  },\n  publicKeyVerify(pubkey) {\n    const pair = loadPublicKey(pubkey);\n    return pair === null ? 1 : 0;\n  },\n  publicKeyCreate(output, seckey) {\n    const bn = new BN(seckey);\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;\n    const point = ec.keyFromPrivate(seckey).getPublic();\n    savePublicKey(output, point);\n    return 0;\n  },\n  publicKeyConvert(output, pubkey) {\n    const pair = loadPublicKey(pubkey);\n    if (pair === null) return 1;\n    const point = pair.getPublic();\n    savePublicKey(output, point);\n    return 0;\n  },\n  publicKeyNegate(output, pubkey) {\n    const pair = loadPublicKey(pubkey);\n    if (pair === null) return 1;\n    const point = pair.getPublic();\n    point.y = point.y.redNeg();\n    savePublicKey(output, point);\n    return 0;\n  },\n  publicKeyCombine(output, pubkeys) {\n    const pairs = new Array(pubkeys.length);\n    for (let i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i]);\n      if (pairs[i] === null) return 1;\n    }\n    let point = pairs[0].getPublic();\n    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub);\n    if (point.isInfinity()) return 2;\n    savePublicKey(output, point);\n    return 0;\n  },\n  publicKeyTweakAdd(output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey);\n    if (pair === null) return 1;\n    tweak = new BN(tweak);\n    if (tweak.cmp(ecparams.n) >= 0) return 2;\n    const point = pair.getPublic().add(ecparams.g.mul(tweak));\n    if (point.isInfinity()) return 2;\n    savePublicKey(output, point);\n    return 0;\n  },\n  publicKeyTweakMul(output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey);\n    if (pair === null) return 1;\n    tweak = new BN(tweak);\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2;\n    const point = pair.getPublic().mul(tweak);\n    savePublicKey(output, point);\n    return 0;\n  },\n  signatureNormalize(sig) {\n    const r = new BN(sig.subarray(0, 32));\n    const s = new BN(sig.subarray(32, 64));\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1;\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32);\n    }\n    return 0;\n  },\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport(obj, sig) {\n    const sigR = sig.subarray(0, 32);\n    const sigS = sig.subarray(32, 64);\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1;\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1;\n    const {\n      output\n    } = obj;\n\n    // Prepare R\n    let r = output.subarray(4, 4 + 33);\n    r[0] = 0x00;\n    r.set(sigR, 1);\n    let lenR = 33;\n    let posR = 0;\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n    r = r.subarray(posR);\n    if (r[0] & 0x80) return 1;\n    if (lenR > 1 && r[0] === 0x00 && !(r[1] & 0x80)) return 1;\n\n    // Prepare S\n    let s = output.subarray(6 + 33, 6 + 33 + 33);\n    s[0] = 0x00;\n    s.set(sigS, 1);\n    let lenS = 33;\n    let posS = 0;\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n    s = s.subarray(posS);\n    if (s[0] & 0x80) return 1;\n    if (lenS > 1 && s[0] === 0x00 && !(s[1] & 0x80)) return 1;\n\n    // Set output length for return\n    obj.outputlen = 6 + lenR + lenS;\n\n    // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n    output[0] = 0x30;\n    output[1] = obj.outputlen - 2;\n    output[2] = 0x02;\n    output[3] = r.length;\n    output.set(r, 4);\n    output[4 + lenR] = 0x02;\n    output[5 + lenR] = s.length;\n    output.set(s, 6 + lenR);\n    return 0;\n  },\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport(output, sig) {\n    if (sig.length < 8) return 1;\n    if (sig.length > 72) return 1;\n    if (sig[0] !== 0x30) return 1;\n    if (sig[1] !== sig.length - 2) return 1;\n    if (sig[2] !== 0x02) return 1;\n    const lenR = sig[3];\n    if (lenR === 0) return 1;\n    if (5 + lenR >= sig.length) return 1;\n    if (sig[4 + lenR] !== 0x02) return 1;\n    const lenS = sig[5 + lenR];\n    if (lenS === 0) return 1;\n    if (6 + lenR + lenS !== sig.length) return 1;\n    if (sig[4] & 0x80) return 1;\n    if (lenR > 1 && sig[4] === 0x00 && !(sig[5] & 0x80)) return 1;\n    if (sig[lenR + 6] & 0x80) return 1;\n    if (lenS > 1 && sig[lenR + 6] === 0x00 && !(sig[lenR + 7] & 0x80)) return 1;\n    let sigR = sig.subarray(4, 4 + lenR);\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1);\n    if (sigR.length > 32) return 1;\n    let sigS = sig.subarray(6 + lenR);\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1);\n    if (sigS.length > 32) throw new Error('S length is too long');\n    let r = new BN(sigR);\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0);\n    let s = new BN(sig.subarray(6 + lenR));\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0);\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0);\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32);\n    return 0;\n  },\n  ecdsaSign(obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      const _noncefn = noncefn;\n      noncefn = counter => {\n        const nonce = _noncefn(message, seckey, null, data, counter);\n        const isValid = nonce instanceof Uint8Array && nonce.length === 32;\n        if (!isValid) throw new Error('This is the way');\n        return new BN(nonce);\n      };\n    }\n    const d = new BN(seckey);\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1;\n    let sig;\n    try {\n      sig = ec.sign(message, seckey, {\n        canonical: true,\n        k: noncefn,\n        pers: data\n      });\n    } catch (err) {\n      return 1;\n    }\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0);\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32);\n    obj.recid = sig.recoveryParam;\n    return 0;\n  },\n  ecdsaVerify(sig, msg32, pubkey) {\n    const sigObj = {\n      r: sig.subarray(0, 32),\n      s: sig.subarray(32, 64)\n    };\n    const sigr = new BN(sigObj.r);\n    const sigs = new BN(sigObj.s);\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3;\n    const pair = loadPublicKey(pubkey);\n    if (pair === null) return 2;\n    const point = pair.getPublic();\n    const isValid = ec.verify(msg32, sigObj, point);\n    return isValid ? 0 : 3;\n  },\n  ecdsaRecover(output, sig, recid, msg32) {\n    const sigObj = {\n      r: sig.slice(0, 32),\n      s: sig.slice(32, 64)\n    };\n    const sigr = new BN(sigObj.r);\n    const sigs = new BN(sigObj.s);\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;\n    if (sigr.isZero() || sigs.isZero()) return 2;\n\n    // Can throw `throw new Error('Unable to find sencond key candinate');`\n    let point;\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid);\n    } catch (err) {\n      return 2;\n    }\n    savePublicKey(output, point);\n    return 0;\n  },\n  ecdh(output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    const pair = loadPublicKey(pubkey);\n    if (pair === null) return 1;\n    const scalar = new BN(seckey);\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2;\n    const point = pair.getPublic().mul(scalar);\n    if (hashfn === undefined) {\n      const data = point.encode(null, true);\n      const sha256 = ec.hash().update(data).digest();\n      for (let i = 0; i < 32; ++i) output[i] = sha256[i];\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32);\n      const x = point.getX().toArray('be', 32);\n      for (let i = 0; i < 32; ++i) xbuf[i] = x[i];\n      if (!ybuf) ybuf = new Uint8Array(32);\n      const y = point.getY().toArray('be', 32);\n      for (let i = 0; i < 32; ++i) ybuf[i] = y[i];\n      const hash = hashfn(xbuf, ybuf, data);\n      const isValid = hash instanceof Uint8Array && hash.length === output.length;\n      if (!isValid) return 2;\n      output.set(hash);\n    }\n    return 0;\n  }\n};","map":{"version":3,"names":["EC","require","ec","ecparams","curve","BN","n","constructor","loadCompressedPublicKey","first","xbuf","x","cmp","p","toRed","red","y","redSqr","redIMul","redIAdd","b","redSqrt","isOdd","redNeg","keyPair","pub","loadUncompressedPublicKey","ybuf","x3","redISub","isZero","loadPublicKey","pubkey","length","subarray","savePublicKey","output","point","encode","i","module","exports","contextRandomize","privateKeyVerify","seckey","bn","privateKeyNegate","negate","sub","umod","toArrayLike","Uint8Array","set","privateKeyTweakAdd","tweak","iadd","isub","tweaked","privateKeyTweakMul","imul","publicKeyVerify","pair","publicKeyCreate","keyFromPrivate","getPublic","publicKeyConvert","publicKeyNegate","publicKeyCombine","pubkeys","pairs","Array","add","isInfinity","publicKeyTweakAdd","g","mul","publicKeyTweakMul","signatureNormalize","sig","r","s","nh","signatureExport","obj","sigR","sigS","lenR","posR","lenS","posS","outputlen","signatureImport","slice","Error","ecdsaSign","message","data","noncefn","_noncefn","counter","nonce","isValid","d","sign","canonical","k","pers","err","signature","recid","recoveryParam","ecdsaVerify","msg32","sigObj","sigr","sigs","verify","ecdsaRecover","recoverPubKey","ecdh","hashfn","scalar","undefined","sha256","hash","update","digest","getX","toArray","getY"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/secp256k1/lib/elliptic.js"],"sourcesContent":["const EC = require('elliptic').ec\n\nconst ec = new EC('secp256k1')\nconst ecparams = ec.curve\n\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor\n\nfunction loadCompressedPublicKey (first, xbuf) {\n  let x = new BN(xbuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xbuf, ybuf) {\n  let x = new BN(xbuf)\n  let y = new BN(ybuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (pubkey) {\n  // length should be validated in interface\n  const first = pubkey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))\n    default:\n      return null\n  }\n}\n\nfunction savePublicKey (output, point) {\n  const pubkey = point.encode(null, output.length === 33)\n  // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]\n}\n\nmodule.exports = {\n  contextRandomize () {\n    return 0\n  },\n\n  privateKeyVerify (seckey) {\n    const bn = new BN(seckey)\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1\n  },\n\n  privateKeyNegate (seckey) {\n    const bn = new BN(seckey)\n    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(negate)\n    return 0\n  },\n\n  privateKeyTweakAdd (seckey, tweak) {\n    const bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0) return 1\n\n    bn.iadd(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n    if (bn.isZero()) return 1\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  privateKeyTweakMul (seckey, tweak) {\n    let bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    bn.imul(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  publicKeyVerify (pubkey) {\n    const pair = loadPublicKey(pubkey)\n    return pair === null ? 1 : 0\n  },\n\n  publicKeyCreate (output, seckey) {\n    const bn = new BN(seckey)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    const point = ec.keyFromPrivate(seckey).getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyConvert (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyNegate (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    point.y = point.y.redNeg()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyCombine (output, pubkeys) {\n    const pairs = new Array(pubkeys.length)\n    for (let i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i])\n      if (pairs[i] === null) return 1\n    }\n\n    let point = pairs[0].getPublic()\n    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakAdd (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0) return 2\n\n    const point = pair.getPublic().add(ecparams.g.mul(tweak))\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakMul (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2\n\n    const point = pair.getPublic().mul(tweak)\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  signatureNormalize (sig) {\n    const r = new BN(sig.subarray(0, 32))\n    const s = new BN(sig.subarray(32, 64))\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1\n\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)\n    }\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport (obj, sig) {\n    const sigR = sig.subarray(0, 32)\n    const sigS = sig.subarray(32, 64)\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1\n\n    const { output } = obj\n\n    // Prepare R\n    let r = output.subarray(4, 4 + 33)\n    r[0] = 0x00\n    r.set(sigR, 1)\n\n    let lenR = 33\n    let posR = 0\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n    r = r.subarray(posR)\n    if (r[0] & 0x80) return 1\n    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1\n\n    // Prepare S\n    let s = output.subarray(6 + 33, 6 + 33 + 33)\n    s[0] = 0x00\n    s.set(sigS, 1)\n\n    let lenS = 33\n    let posS = 0\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n    s = s.subarray(posS)\n    if (s[0] & 0x80) return 1\n    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1\n\n    // Set output length for return\n    obj.outputlen = 6 + lenR + lenS\n\n    // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n    output[0] = 0x30\n    output[1] = obj.outputlen - 2\n    output[2] = 0x02\n    output[3] = r.length\n    output.set(r, 4)\n    output[4 + lenR] = 0x02\n    output[5 + lenR] = s.length\n    output.set(s, 6 + lenR)\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport (output, sig) {\n    if (sig.length < 8) return 1\n    if (sig.length > 72) return 1\n    if (sig[0] !== 0x30) return 1\n    if (sig[1] !== sig.length - 2) return 1\n    if (sig[2] !== 0x02) return 1\n\n    const lenR = sig[3]\n    if (lenR === 0) return 1\n    if (5 + lenR >= sig.length) return 1\n    if (sig[4 + lenR] !== 0x02) return 1\n\n    const lenS = sig[5 + lenR]\n    if (lenS === 0) return 1\n    if ((6 + lenR + lenS) !== sig.length) return 1\n\n    if (sig[4] & 0x80) return 1\n    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1\n\n    if (sig[lenR + 6] & 0x80) return 1\n    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1\n\n    let sigR = sig.subarray(4, 4 + lenR)\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)\n    if (sigR.length > 32) return 1\n\n    let sigS = sig.subarray(6 + lenR)\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)\n    if (sigS.length > 32) throw new Error('S length is too long')\n\n    let r = new BN(sigR)\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n    let s = new BN(sig.subarray(6 + lenR))\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)\n\n    return 0\n  },\n\n  ecdsaSign (obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      const _noncefn = noncefn\n      noncefn = (counter) => {\n        const nonce = _noncefn(message, seckey, null, data, counter)\n\n        const isValid = nonce instanceof Uint8Array && nonce.length === 32\n        if (!isValid) throw new Error('This is the way')\n\n        return new BN(nonce)\n      }\n    }\n\n    const d = new BN(seckey)\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1\n\n    let sig\n    try {\n      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })\n    } catch (err) {\n      return 1\n    }\n\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)\n    obj.recid = sig.recoveryParam\n\n    return 0\n  },\n\n  ecdsaVerify (sig, msg32, pubkey) {\n    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3\n\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 2\n\n    const point = pair.getPublic()\n    const isValid = ec.verify(msg32, sigObj, point)\n    return isValid ? 0 : 3\n  },\n\n  ecdsaRecover (output, sig, recid, msg32) {\n    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n\n    if (sigr.isZero() || sigs.isZero()) return 2\n\n    // Can throw `throw new Error('Unable to find sencond key candinate');`\n    let point\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid)\n    } catch (err) {\n      return 2\n    }\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const scalar = new BN(seckey)\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2\n\n    const point = pair.getPublic().mul(scalar)\n\n    if (hashfn === undefined) {\n      const data = point.encode(null, true)\n      const sha256 = ec.hash().update(data).digest()\n      for (let i = 0; i < 32; ++i) output[i] = sha256[i]\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32)\n      const x = point.getX().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]\n\n      if (!ybuf) ybuf = new Uint8Array(32)\n      const y = point.getY().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]\n\n      const hash = hashfn(xbuf, ybuf, data)\n\n      const isValid = hash instanceof Uint8Array && hash.length === output.length\n      if (!isValid) return 2\n\n      output.set(hash)\n    }\n\n    return 0\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}