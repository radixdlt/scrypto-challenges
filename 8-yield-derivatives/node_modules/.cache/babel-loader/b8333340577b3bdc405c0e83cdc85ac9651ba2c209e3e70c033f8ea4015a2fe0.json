{"ast":null,"code":"var _jsxFileName = \"/Users/mdabdurrazzak/RadInsu/src/openAI.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { OpenAI } from 'openai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TradingBotComponent = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [chatGPT, setChatGPT] = useState(null); // State to hold the initialized OpenAI client\n\n  useEffect(() => {\n    const initializeOpenAI = async () => {\n      try {\n        const chatGPTClient = new OpenAI({\n          dangerouslyAllowBrowser: true\n        });\n        // Save the initialized client to state\n        setChatGPT(chatGPTClient);\n      } catch (error) {\n        console.error('Error initializing OpenAI:', error);\n      }\n    };\n    initializeOpenAI();\n  }, []);\n  const sendMessage = async () => {\n    try {\n      if (!chatGPT || !chatGPT.completions || !chatGPT.completions.create) {\n        console.error('OpenAI client or create method not available.');\n        return;\n      }\n      const response = await chatGPT.completions.create({\n        model: 'text-gpt-3.5-turbo-0125',\n        // Use the GPT-3.5 Turbo model\n        prompt: inputText,\n        max_tokens: 150 // Adjust as needed\n      });\n      const newMessage = response.data.choices[0].text.trim();\n      const tradingSignal = await getTradingSignal(); // Call your own AI logic\n      setMessages([...messages, {\n        text: inputText\n      }, {\n        text: newMessage\n      }, {\n        text: `Trading Signal: ${tradingSignal}`\n      }]);\n      setInputText('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  console.log('OpenAI client:', chatGPT);\n  const getTradingSignal = async () => {\n    // Implement your trading signal logic here\n    // This function should return a trading signal (e.g., 'Buy', 'Sell', or 'Hold')\n    // For demonstration purposes, let's return 'Buy' as an example\n    return 'Buy';\n  };\n  useEffect(() => {\n    if (messages.length === 0) {\n      integrateTradingSignal().then(signal => {\n        const newMessages = [...messages, {\n          text: `Final trading signal: ${signal}`\n        }];\n        setMessages(newMessages);\n      });\n    }\n  }, [messages]); // Update when messages change\n\n  const integrateTradingSignal = async () => {\n    // Get market data\n    const marketData = await getMockMarketData();\n\n    // Calculate average price from market data\n    const averagePrice = calculateAveragePrice(marketData);\n\n    // Get trading signal based on real-time cryptocurrency prices\n    const realTimeSignal = await getTradingSignal();\n\n    // Generate trading signal based on SMA\n    const latestPrice = marketData[marketData.length - 1].price;\n    const smaSignal = latestPrice > averagePrice ? 'Buy' : 'Sell';\n\n    // Decide on final trading signal based on a combination of signals\n    // For demonstration purposes, let's prioritize real-time signal over SMA signal\n    const finalSignal = realTimeSignal === 'Hold' ? smaSignal : realTimeSignal;\n    return finalSignal;\n  };\n  const getMockMarketData = async () => {\n    // Mock market data (replace this with real market data)\n    return [{\n      timestamp: '2024-04-20T12:00:00',\n      price: 100\n    }, {\n      timestamp: '2024-04-20T12:15:00',\n      price: 110\n    }, {\n      timestamp: '2024-04-20T12:30:00',\n      price: 105\n    }, {\n      timestamp: '2024-04-20T12:45:00',\n      price: 115\n    }\n    // Add more data points as needed\n    ];\n  };\n  const calculateAveragePrice = prices => {\n    // Simple moving average (SMA) calculation\n    const windowSize = 3; // Adjust window size as needed\n    const lastPrices = prices.slice(-windowSize).map(data => data.price);\n    const averagePrice = lastPrices.reduce((sum, price) => sum + price, 0) / windowSize;\n    return averagePrice;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: inputText,\n      onChange: e => setInputText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(TradingBotComponent, \"Q8/E4+hZh95MXfExea7wuGDHkCQ=\");\n_c = TradingBotComponent;\nexport default TradingBotComponent;\nvar _c;\n$RefreshReg$(_c, \"TradingBotComponent\");","map":{"version":3,"names":["React","useState","useEffect","OpenAI","jsxDEV","_jsxDEV","TradingBotComponent","_s","messages","setMessages","inputText","setInputText","chatGPT","setChatGPT","initializeOpenAI","chatGPTClient","dangerouslyAllowBrowser","error","console","sendMessage","completions","create","response","model","prompt","max_tokens","newMessage","data","choices","text","trim","tradingSignal","getTradingSignal","log","length","integrateTradingSignal","then","signal","newMessages","marketData","getMockMarketData","averagePrice","calculateAveragePrice","realTimeSignal","latestPrice","price","smaSignal","finalSignal","timestamp","prices","windowSize","lastPrices","slice","map","reduce","sum","children","message","index","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/mdabdurrazzak/RadInsu/src/openAI.js"],"sourcesContent":["\n\n\nimport React, { useState, useEffect } from 'react';\nimport { OpenAI } from 'openai';\n\nconst TradingBotComponent = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [chatGPT, setChatGPT] = useState(null); // State to hold the initialized OpenAI client\n\n  useEffect(() => {\n    const initializeOpenAI = async () => {\n      try {\n        const chatGPTClient = new OpenAI({ \n          dangerouslyAllowBrowser: true \n        });\n        // Save the initialized client to state\n        setChatGPT(chatGPTClient);\n      } catch (error) {\n        console.error('Error initializing OpenAI:', error);\n      }\n    };\n\n    initializeOpenAI();\n  }, []);\n\n  const sendMessage = async () => {\n    try {\n      if (!chatGPT || !chatGPT.completions || !chatGPT.completions.create) {\n        console.error('OpenAI client or create method not available.');\n        return;\n      }\n\n      const response = await chatGPT.completions.create({\n        model: 'text-gpt-3.5-turbo-0125', // Use the GPT-3.5 Turbo model\n        prompt: inputText,\n        max_tokens: 150 // Adjust as needed\n      });\n\n      const newMessage = response.data.choices[0].text.trim();\n      const tradingSignal = await getTradingSignal(); // Call your own AI logic\n      setMessages([...messages, { text: inputText }, { text: newMessage }, { text: `Trading Signal: ${tradingSignal}` }]);\n      setInputText('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  console.log('OpenAI client:', chatGPT);\n\n  const getTradingSignal = async () => {\n    // Implement your trading signal logic here\n    // This function should return a trading signal (e.g., 'Buy', 'Sell', or 'Hold')\n    // For demonstration purposes, let's return 'Buy' as an example\n    return 'Buy';\n  };\n\n  useEffect(() => {\n    if (messages.length === 0) {\n      integrateTradingSignal().then(signal => {\n        const newMessages = [...messages, { text: `Final trading signal: ${signal}` }];\n        setMessages(newMessages);\n      });\n    }\n  }, [messages]); // Update when messages change\n\n  const integrateTradingSignal = async () => {\n    // Get market data\n    const marketData = await getMockMarketData();\n\n    // Calculate average price from market data\n    const averagePrice = calculateAveragePrice(marketData);\n\n    // Get trading signal based on real-time cryptocurrency prices\n    const realTimeSignal = await getTradingSignal();\n\n    // Generate trading signal based on SMA\n    const latestPrice = marketData[marketData.length - 1].price;\n    const smaSignal = latestPrice > averagePrice ? 'Buy' : 'Sell';\n\n    // Decide on final trading signal based on a combination of signals\n    // For demonstration purposes, let's prioritize real-time signal over SMA signal\n    const finalSignal = realTimeSignal === 'Hold' ? smaSignal : realTimeSignal;\n\n    return finalSignal;\n  };\n\n  const getMockMarketData = async () => {\n    // Mock market data (replace this with real market data)\n    return [\n      { timestamp: '2024-04-20T12:00:00', price: 100 },\n      { timestamp: '2024-04-20T12:15:00', price: 110 },\n      { timestamp: '2024-04-20T12:30:00', price: 105 },\n      { timestamp: '2024-04-20T12:45:00', price: 115 },\n      // Add more data points as needed\n    ];\n  };\n\n  const calculateAveragePrice = (prices) => {\n    // Simple moving average (SMA) calculation\n    const windowSize = 3; // Adjust window size as needed\n    const lastPrices = prices.slice(-windowSize).map(data => data.price);\n    const averagePrice = lastPrices.reduce((sum, price) => sum + price, 0) / windowSize;\n    return averagePrice;\n  };\n\n  return (\n    <div>\n      <div>\n        {messages.map((message, index) => (\n          <div key={index}>{message.text}</div>\n        ))}\n      </div>\n      <input value={inputText} onChange={(e) => setInputText(e.target.value)} />\n      <button onClick={sendMessage}>Send</button>\n    </div>\n  );\n};\n\nexport default TradingBotComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}