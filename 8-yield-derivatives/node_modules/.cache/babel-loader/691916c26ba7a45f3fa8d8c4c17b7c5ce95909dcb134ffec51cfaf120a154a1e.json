{"ast":null,"code":"var _jsxFileName = \"/Users/mdabdurrazzak/RadInsu/src/ins.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DataRequestBuilder, RadixDappToolkit, RadixNetwork } from \"@radixdlt/radix-dapp-toolkit\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TradingBotComponent = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [rdt, setRdt] = useState(null);\n  useEffect(() => {\n    const initializeRadixDappToolkit = async () => {\n      try {\n        const rdtInstance = RadixDappToolkit({\n          dAppDefinitionAddress: \"account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz\",\n          networkId: RadixNetwork.Stokenet,\n          applicationName: \"parametric_insurance\",\n          applicationVersion: \"1.0.0\"\n        });\n        setRdt(rdtInstance);\n        rdtInstance.walletApi.setRequestData(DataRequestBuilder.accounts().exactly(1));\n      } catch (error) {\n        console.error('Error initializing RadixDappToolkit:', error);\n      }\n    };\n    initializeRadixDappToolkit();\n  }, []);\n  const handleSendMessage = async () => {\n    try {\n      if (!rdt || !rdt.walletApi || !rdt.walletApi.getWalletData().accounts.length) {\n        console.error('RadixDappToolkit or walletApi not available.');\n        return;\n      }\n      const accountAddress = rdt.walletApi.getWalletData().accounts[0].address;\n      const manifest = `\n        CALL_METHOD\n            Address(\"$\")\n            \"new\"\n        ;\n        CALL_METHOD\n            Address(\"${accountAddress}\")\n            \"deposit_batch\"\n            Expression(\"ENTIRE_WORKTOP\")\n        ;\n      `;\n      const result = await rdt.walletApi.sendTransaction({\n        transactionManifest: manifest,\n        version: 1\n      });\n      if (result.isErr()) throw result.error;\n      console.log(\"Transaction result: \", result.value);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: inputText,\n      onChange: e => setInputText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(TradingBotComponent, \"JJjW237XGOmLcbSAQRU42rJx9sM=\");\n_c = TradingBotComponent;\nexport default TradingBotComponent;\nvar _c;\n$RefreshReg$(_c, \"TradingBotComponent\");","map":{"version":3,"names":["React","useState","useEffect","DataRequestBuilder","RadixDappToolkit","RadixNetwork","jsxDEV","_jsxDEV","TradingBotComponent","_s","messages","setMessages","inputText","setInputText","rdt","setRdt","initializeRadixDappToolkit","rdtInstance","dAppDefinitionAddress","networkId","Stokenet","applicationName","applicationVersion","walletApi","setRequestData","accounts","exactly","error","console","handleSendMessage","getWalletData","length","accountAddress","address","manifest","result","sendTransaction","transactionManifest","version","isErr","log","value","children","map","message","index","text","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/mdabdurrazzak/RadInsu/src/ins.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DataRequestBuilder, RadixDappToolkit, RadixNetwork } from \"@radixdlt/radix-dapp-toolkit\";\n\nconst TradingBotComponent = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [rdt, setRdt] = useState(null);\n\n  useEffect(() => {\n    const initializeRadixDappToolkit = async () => {\n      try {\n        const rdtInstance = RadixDappToolkit({\n          dAppDefinitionAddress: \"account_tdx_2_12xxk4dqhg9dz53p745qhpr5tr2k2al4mpx3296tr8k78kna6rkcgsz\",\n          networkId: RadixNetwork.Stokenet,\n          applicationName: \"parametric_insurance\",\n          applicationVersion: \"1.0.0\",\n        });\n        setRdt(rdtInstance);\n        rdtInstance.walletApi.setRequestData(DataRequestBuilder.accounts().exactly(1));\n      } catch (error) {\n        console.error('Error initializing RadixDappToolkit:', error);\n      }\n    };\n\n    initializeRadixDappToolkit();\n  }, []);\n\n  const handleSendMessage = async () => {\n    try {\n      if (!rdt || !rdt.walletApi || !rdt.walletApi.getWalletData().accounts.length) {\n        console.error('RadixDappToolkit or walletApi not available.');\n        return;\n      }\n\n      const accountAddress = rdt.walletApi.getWalletData().accounts[0].address;\n\n      const manifest = `\n        CALL_METHOD\n            Address(\"$\")\n            \"new\"\n        ;\n        CALL_METHOD\n            Address(\"${accountAddress}\")\n            \"deposit_batch\"\n            Expression(\"ENTIRE_WORKTOP\")\n        ;\n      `;\n\n      const result = await rdt.walletApi.sendTransaction({\n        transactionManifest: manifest,\n        version: 1,\n      });\n\n      if (result.isErr()) throw result.error;\n      console.log(\"Transaction result: \", result.value);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        {messages.map((message, index) => (\n          <div key={index}>{message.text}</div>\n        ))}\n      </div>\n      <input value={inputText} onChange={(e) => setInputText(e.target.value)} />\n      <button onClick={handleSendMessage}>Send</button>\n    </div>\n  );\n};\n\nexport default TradingBotComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}