{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_scheduler_async,_Subscriber,_util_isScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nexport function bufferTime(bufferTimeSpan) {\n  var length = arguments.length;\n  var scheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n  var bufferCreationInterval = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n  var maxBufferSize = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n  return function bufferTimeOperatorFunction(source) {\n    return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\nvar BufferTimeOperator = /*@__PURE__*/function () {\n  function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n    this.bufferTimeSpan = bufferTimeSpan;\n    this.bufferCreationInterval = bufferCreationInterval;\n    this.maxBufferSize = maxBufferSize;\n    this.scheduler = scheduler;\n  }\n  BufferTimeOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n  };\n  return BufferTimeOperator;\n}();\nvar Context = /*@__PURE__*/function () {\n  function Context() {\n    this.buffer = [];\n  }\n  return Context;\n}();\nvar BufferTimeSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferTimeSubscriber, _super);\n  function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n    var _this = _super.call(this, destination) || this;\n    _this.bufferTimeSpan = bufferTimeSpan;\n    _this.bufferCreationInterval = bufferCreationInterval;\n    _this.maxBufferSize = maxBufferSize;\n    _this.scheduler = scheduler;\n    _this.contexts = [];\n    var context = _this.openContext();\n    _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (_this.timespanOnly) {\n      var timeSpanOnlyState = {\n        subscriber: _this,\n        context: context,\n        bufferTimeSpan: bufferTimeSpan\n      };\n      _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      var closeState = {\n        subscriber: _this,\n        context: context\n      };\n      var creationState = {\n        bufferTimeSpan: bufferTimeSpan,\n        bufferCreationInterval: bufferCreationInterval,\n        subscriber: _this,\n        scheduler: scheduler\n      };\n      _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n    return _this;\n  }\n  BufferTimeSubscriber.prototype._next = function (value) {\n    var contexts = this.contexts;\n    var len = contexts.length;\n    var filledBufferContext;\n    for (var i = 0; i < len; i++) {\n      var context_1 = contexts[i];\n      var buffer = context_1.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context_1;\n      }\n    }\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  };\n  BufferTimeSubscriber.prototype._error = function (err) {\n    this.contexts.length = 0;\n    _super.prototype._error.call(this, err);\n  };\n  BufferTimeSubscriber.prototype._complete = function () {\n    var _a = this,\n      contexts = _a.contexts,\n      destination = _a.destination;\n    while (contexts.length > 0) {\n      var context_2 = contexts.shift();\n      destination.next(context_2.buffer);\n    }\n    _super.prototype._complete.call(this);\n  };\n  BufferTimeSubscriber.prototype._unsubscribe = function () {\n    this.contexts = null;\n  };\n  BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n    this.closeContext(context);\n    var closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      var bufferTimeSpan = this.bufferTimeSpan;\n      var timeSpanOnlyState = {\n        subscriber: this,\n        context: context,\n        bufferTimeSpan: bufferTimeSpan\n      };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  };\n  BufferTimeSubscriber.prototype.openContext = function () {\n    var context = new Context();\n    this.contexts.push(context);\n    return context;\n  };\n  BufferTimeSubscriber.prototype.closeContext = function (context) {\n    this.destination.next(context.buffer);\n    var contexts = this.contexts;\n    var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  };\n  return BufferTimeSubscriber;\n}(Subscriber);\nfunction dispatchBufferTimeSpanOnly(state) {\n  var subscriber = state.subscriber;\n  var prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\nfunction dispatchBufferCreation(state) {\n  var bufferCreationInterval = state.bufferCreationInterval,\n    bufferTimeSpan = state.bufferTimeSpan,\n    subscriber = state.subscriber,\n    scheduler = state.scheduler;\n  var context = subscriber.openContext();\n  var action = this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, {\n      subscriber: subscriber,\n      context: context\n    }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\nfunction dispatchBufferClose(arg) {\n  var subscriber = arg.subscriber,\n    context = arg.context;\n  subscriber.closeContext(context);\n}","map":{"version":3,"names":["tslib_1","async","Subscriber","isScheduler","bufferTime","bufferTimeSpan","length","arguments","scheduler","bufferCreationInterval","maxBufferSize","Number","POSITIVE_INFINITY","bufferTimeOperatorFunction","source","lift","BufferTimeOperator","prototype","call","subscriber","subscribe","BufferTimeSubscriber","Context","buffer","_super","__extends","destination","_this","contexts","context","openContext","timespanOnly","timeSpanOnlyState","add","closeAction","schedule","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","_next","value","len","filledBufferContext","i","context_1","push","onBufferFull","_error","err","_complete","_a","context_2","shift","next","_unsubscribe","closeContext","unsubscribe","remove","closed","spliceIndex","indexOf","splice","state","prevContext","action","arg"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/bufferTime.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction, SchedulerAction, SchedulerLike } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number | null | undefined, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number | null | undefined, maxBufferSize: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * ![](bufferTime.png)\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * ## Examples\n *\n * Every second, emit an array of the recent click events\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { bufferTime } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferTime(1000));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * Every 5 seconds, emit the click events from the next 2 seconds\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { bufferTime } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferTime(2000, 5000));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {SchedulerLike} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: SchedulerLike = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ninterface DispatchCreateArg<T> {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number;\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: SchedulerLike;\n}\n\ninterface DispatchCloseArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: DispatchCreateArg<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule<DispatchCloseArg<T>>(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule<DispatchCreateArg<T>>(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: SchedulerAction<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\nfunction dispatchBufferCreation<T>(this: SchedulerAction<DispatchCreateArg<T>>, state: DispatchCreateArg<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <SchedulerAction<DispatchCreateArg<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchCloseArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchCloseArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}