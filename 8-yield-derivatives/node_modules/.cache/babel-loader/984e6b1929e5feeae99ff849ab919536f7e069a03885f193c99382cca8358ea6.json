{"ast":null,"code":"/**\n * Functions to output keys in SSH-friendly formats.\n *\n * This is part of the Forge project which may be used under the terms of\n * either the BSD License or the GNU General Public License (GPL) Version 2.\n *\n * See: https://github.com/digitalbazaar/forge/blob/cbebca3780658703d925b61b2caffb1d263a6c1d/LICENSE\n *\n * @author https://github.com/shellac\n */\nvar forge = require('./forge');\nrequire('./aes');\nrequire('./hmac');\nrequire('./md5');\nrequire('./sha1');\nrequire('./util');\nvar ssh = module.exports = forge.ssh = forge.ssh || {};\n\n/**\n * Encodes (and optionally encrypts) a private RSA key as a Putty PPK file.\n *\n * @param privateKey the key.\n * @param passphrase a passphrase to protect the key (falsy for no encryption).\n * @param comment a comment to include in the key file.\n *\n * @return the PPK file as a string.\n */\nssh.privateKeyToPutty = function (privateKey, passphrase, comment) {\n  comment = comment || '';\n  passphrase = passphrase || '';\n  var algorithm = 'ssh-rsa';\n  var encryptionAlgorithm = passphrase === '' ? 'none' : 'aes256-cbc';\n  var ppk = 'PuTTY-User-Key-File-2: ' + algorithm + '\\r\\n';\n  ppk += 'Encryption: ' + encryptionAlgorithm + '\\r\\n';\n  ppk += 'Comment: ' + comment + '\\r\\n';\n\n  // public key into buffer for ppk\n  var pubbuffer = forge.util.createBuffer();\n  _addStringToBuffer(pubbuffer, algorithm);\n  _addBigIntegerToBuffer(pubbuffer, privateKey.e);\n  _addBigIntegerToBuffer(pubbuffer, privateKey.n);\n\n  // write public key\n  var pub = forge.util.encode64(pubbuffer.bytes(), 64);\n  var length = Math.floor(pub.length / 66) + 1; // 66 = 64 + \\r\\n\n  ppk += 'Public-Lines: ' + length + '\\r\\n';\n  ppk += pub;\n\n  // private key into a buffer\n  var privbuffer = forge.util.createBuffer();\n  _addBigIntegerToBuffer(privbuffer, privateKey.d);\n  _addBigIntegerToBuffer(privbuffer, privateKey.p);\n  _addBigIntegerToBuffer(privbuffer, privateKey.q);\n  _addBigIntegerToBuffer(privbuffer, privateKey.qInv);\n\n  // optionally encrypt the private key\n  var priv;\n  if (!passphrase) {\n    // use the unencrypted buffer\n    priv = forge.util.encode64(privbuffer.bytes(), 64);\n  } else {\n    // encrypt RSA key using passphrase\n    var encLen = privbuffer.length() + 16 - 1;\n    encLen -= encLen % 16;\n\n    // pad private key with sha1-d data -- needs to be a multiple of 16\n    var padding = _sha1(privbuffer.bytes());\n    padding.truncate(padding.length() - encLen + privbuffer.length());\n    privbuffer.putBuffer(padding);\n    var aeskey = forge.util.createBuffer();\n    aeskey.putBuffer(_sha1('\\x00\\x00\\x00\\x00', passphrase));\n    aeskey.putBuffer(_sha1('\\x00\\x00\\x00\\x01', passphrase));\n\n    // encrypt some bytes using CBC mode\n    // key is 40 bytes, so truncate *by* 8 bytes\n    var cipher = forge.aes.createEncryptionCipher(aeskey.truncate(8), 'CBC');\n    cipher.start(forge.util.createBuffer().fillWithByte(0, 16));\n    cipher.update(privbuffer.copy());\n    cipher.finish();\n    var encrypted = cipher.output;\n\n    // Note: this appears to differ from Putty -- is forge wrong, or putty?\n    // due to padding we finish as an exact multiple of 16\n    encrypted.truncate(16); // all padding\n\n    priv = forge.util.encode64(encrypted.bytes(), 64);\n  }\n\n  // output private key\n  length = Math.floor(priv.length / 66) + 1; // 64 + \\r\\n\n  ppk += '\\r\\nPrivate-Lines: ' + length + '\\r\\n';\n  ppk += priv;\n\n  // MAC\n  var mackey = _sha1('putty-private-key-file-mac-key', passphrase);\n  var macbuffer = forge.util.createBuffer();\n  _addStringToBuffer(macbuffer, algorithm);\n  _addStringToBuffer(macbuffer, encryptionAlgorithm);\n  _addStringToBuffer(macbuffer, comment);\n  macbuffer.putInt32(pubbuffer.length());\n  macbuffer.putBuffer(pubbuffer);\n  macbuffer.putInt32(privbuffer.length());\n  macbuffer.putBuffer(privbuffer);\n  var hmac = forge.hmac.create();\n  hmac.start('sha1', mackey);\n  hmac.update(macbuffer.bytes());\n  ppk += '\\r\\nPrivate-MAC: ' + hmac.digest().toHex() + '\\r\\n';\n  return ppk;\n};\n\n/**\n * Encodes a public RSA key as an OpenSSH file.\n *\n * @param key the key.\n * @param comment a comment.\n *\n * @return the public key in OpenSSH format.\n */\nssh.publicKeyToOpenSSH = function (key, comment) {\n  var type = 'ssh-rsa';\n  comment = comment || '';\n  var buffer = forge.util.createBuffer();\n  _addStringToBuffer(buffer, type);\n  _addBigIntegerToBuffer(buffer, key.e);\n  _addBigIntegerToBuffer(buffer, key.n);\n  return type + ' ' + forge.util.encode64(buffer.bytes()) + ' ' + comment;\n};\n\n/**\n * Encodes a private RSA key as an OpenSSH file.\n *\n * @param key the key.\n * @param passphrase a passphrase to protect the key (falsy for no encryption).\n *\n * @return the public key in OpenSSH format.\n */\nssh.privateKeyToOpenSSH = function (privateKey, passphrase) {\n  if (!passphrase) {\n    return forge.pki.privateKeyToPem(privateKey);\n  }\n  // OpenSSH private key is just a legacy format, it seems\n  return forge.pki.encryptRsaPrivateKey(privateKey, passphrase, {\n    legacy: true,\n    algorithm: 'aes128'\n  });\n};\n\n/**\n * Gets the SSH fingerprint for the given public key.\n *\n * @param options the options to use.\n *          [md] the message digest object to use (defaults to forge.md.md5).\n *          [encoding] an alternative output encoding, such as 'hex'\n *            (defaults to none, outputs a byte buffer).\n *          [delimiter] the delimiter to use between bytes for 'hex' encoded\n *            output, eg: ':' (defaults to none).\n *\n * @return the fingerprint as a byte buffer or other encoding based on options.\n */\nssh.getPublicKeyFingerprint = function (key, options) {\n  options = options || {};\n  var md = options.md || forge.md.md5.create();\n  var type = 'ssh-rsa';\n  var buffer = forge.util.createBuffer();\n  _addStringToBuffer(buffer, type);\n  _addBigIntegerToBuffer(buffer, key.e);\n  _addBigIntegerToBuffer(buffer, key.n);\n\n  // hash public key bytes\n  md.start();\n  md.update(buffer.getBytes());\n  var digest = md.digest();\n  if (options.encoding === 'hex') {\n    var hex = digest.toHex();\n    if (options.delimiter) {\n      return hex.match(/.{2}/g).join(options.delimiter);\n    }\n    return hex;\n  } else if (options.encoding === 'binary') {\n    return digest.getBytes();\n  } else if (options.encoding) {\n    throw new Error('Unknown encoding \"' + options.encoding + '\".');\n  }\n  return digest;\n};\n\n/**\n * Adds len(val) then val to a buffer.\n *\n * @param buffer the buffer to add to.\n * @param val a big integer.\n */\nfunction _addBigIntegerToBuffer(buffer, val) {\n  var hexVal = val.toString(16);\n  // ensure 2s complement +ve\n  if (hexVal[0] >= '8') {\n    hexVal = '00' + hexVal;\n  }\n  var bytes = forge.util.hexToBytes(hexVal);\n  buffer.putInt32(bytes.length);\n  buffer.putBytes(bytes);\n}\n\n/**\n * Adds len(val) then val to a buffer.\n *\n * @param buffer the buffer to add to.\n * @param val a string.\n */\nfunction _addStringToBuffer(buffer, val) {\n  buffer.putInt32(val.length);\n  buffer.putString(val);\n}\n\n/**\n * Hashes the arguments into one value using SHA-1.\n *\n * @return the sha1 hash of the provided arguments.\n */\nfunction _sha1() {\n  var sha = forge.md.sha1.create();\n  var num = arguments.length;\n  for (var i = 0; i < num; ++i) {\n    sha.update(arguments[i]);\n  }\n  return sha.digest();\n}","map":{"version":3,"names":["forge","require","ssh","module","exports","privateKeyToPutty","privateKey","passphrase","comment","algorithm","encryptionAlgorithm","ppk","pubbuffer","util","createBuffer","_addStringToBuffer","_addBigIntegerToBuffer","e","n","pub","encode64","bytes","length","Math","floor","privbuffer","d","p","q","qInv","priv","encLen","padding","_sha1","truncate","putBuffer","aeskey","cipher","aes","createEncryptionCipher","start","fillWithByte","update","copy","finish","encrypted","output","mackey","macbuffer","putInt32","hmac","create","digest","toHex","publicKeyToOpenSSH","key","type","buffer","privateKeyToOpenSSH","pki","privateKeyToPem","encryptRsaPrivateKey","legacy","getPublicKeyFingerprint","options","md","md5","getBytes","encoding","hex","delimiter","match","join","Error","val","hexVal","toString","hexToBytes","putBytes","putString","sha","sha1","num","arguments","i"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/node-forge/lib/ssh.js"],"sourcesContent":["/**\n * Functions to output keys in SSH-friendly formats.\n *\n * This is part of the Forge project which may be used under the terms of\n * either the BSD License or the GNU General Public License (GPL) Version 2.\n *\n * See: https://github.com/digitalbazaar/forge/blob/cbebca3780658703d925b61b2caffb1d263a6c1d/LICENSE\n *\n * @author https://github.com/shellac\n */\nvar forge = require('./forge');\nrequire('./aes');\nrequire('./hmac');\nrequire('./md5');\nrequire('./sha1');\nrequire('./util');\n\nvar ssh = module.exports = forge.ssh = forge.ssh || {};\n\n/**\n * Encodes (and optionally encrypts) a private RSA key as a Putty PPK file.\n *\n * @param privateKey the key.\n * @param passphrase a passphrase to protect the key (falsy for no encryption).\n * @param comment a comment to include in the key file.\n *\n * @return the PPK file as a string.\n */\nssh.privateKeyToPutty = function(privateKey, passphrase, comment) {\n  comment = comment || '';\n  passphrase = passphrase || '';\n  var algorithm = 'ssh-rsa';\n  var encryptionAlgorithm = (passphrase === '') ? 'none' : 'aes256-cbc';\n\n  var ppk = 'PuTTY-User-Key-File-2: ' + algorithm + '\\r\\n';\n  ppk += 'Encryption: ' + encryptionAlgorithm + '\\r\\n';\n  ppk += 'Comment: ' + comment + '\\r\\n';\n\n  // public key into buffer for ppk\n  var pubbuffer = forge.util.createBuffer();\n  _addStringToBuffer(pubbuffer, algorithm);\n  _addBigIntegerToBuffer(pubbuffer, privateKey.e);\n  _addBigIntegerToBuffer(pubbuffer, privateKey.n);\n\n  // write public key\n  var pub = forge.util.encode64(pubbuffer.bytes(), 64);\n  var length = Math.floor(pub.length / 66) + 1; // 66 = 64 + \\r\\n\n  ppk += 'Public-Lines: ' + length + '\\r\\n';\n  ppk += pub;\n\n  // private key into a buffer\n  var privbuffer = forge.util.createBuffer();\n  _addBigIntegerToBuffer(privbuffer, privateKey.d);\n  _addBigIntegerToBuffer(privbuffer, privateKey.p);\n  _addBigIntegerToBuffer(privbuffer, privateKey.q);\n  _addBigIntegerToBuffer(privbuffer, privateKey.qInv);\n\n  // optionally encrypt the private key\n  var priv;\n  if(!passphrase) {\n    // use the unencrypted buffer\n    priv = forge.util.encode64(privbuffer.bytes(), 64);\n  } else {\n    // encrypt RSA key using passphrase\n    var encLen = privbuffer.length() + 16 - 1;\n    encLen -= encLen % 16;\n\n    // pad private key with sha1-d data -- needs to be a multiple of 16\n    var padding = _sha1(privbuffer.bytes());\n\n    padding.truncate(padding.length() - encLen + privbuffer.length());\n    privbuffer.putBuffer(padding);\n\n    var aeskey = forge.util.createBuffer();\n    aeskey.putBuffer(_sha1('\\x00\\x00\\x00\\x00', passphrase));\n    aeskey.putBuffer(_sha1('\\x00\\x00\\x00\\x01', passphrase));\n\n    // encrypt some bytes using CBC mode\n    // key is 40 bytes, so truncate *by* 8 bytes\n    var cipher = forge.aes.createEncryptionCipher(aeskey.truncate(8), 'CBC');\n    cipher.start(forge.util.createBuffer().fillWithByte(0, 16));\n    cipher.update(privbuffer.copy());\n    cipher.finish();\n    var encrypted = cipher.output;\n\n    // Note: this appears to differ from Putty -- is forge wrong, or putty?\n    // due to padding we finish as an exact multiple of 16\n    encrypted.truncate(16); // all padding\n\n    priv = forge.util.encode64(encrypted.bytes(), 64);\n  }\n\n  // output private key\n  length = Math.floor(priv.length / 66) + 1; // 64 + \\r\\n\n  ppk += '\\r\\nPrivate-Lines: ' + length + '\\r\\n';\n  ppk += priv;\n\n  // MAC\n  var mackey = _sha1('putty-private-key-file-mac-key', passphrase);\n\n  var macbuffer = forge.util.createBuffer();\n  _addStringToBuffer(macbuffer, algorithm);\n  _addStringToBuffer(macbuffer, encryptionAlgorithm);\n  _addStringToBuffer(macbuffer, comment);\n  macbuffer.putInt32(pubbuffer.length());\n  macbuffer.putBuffer(pubbuffer);\n  macbuffer.putInt32(privbuffer.length());\n  macbuffer.putBuffer(privbuffer);\n\n  var hmac = forge.hmac.create();\n  hmac.start('sha1', mackey);\n  hmac.update(macbuffer.bytes());\n\n  ppk += '\\r\\nPrivate-MAC: ' + hmac.digest().toHex() + '\\r\\n';\n\n  return ppk;\n};\n\n/**\n * Encodes a public RSA key as an OpenSSH file.\n *\n * @param key the key.\n * @param comment a comment.\n *\n * @return the public key in OpenSSH format.\n */\nssh.publicKeyToOpenSSH = function(key, comment) {\n  var type = 'ssh-rsa';\n  comment = comment || '';\n\n  var buffer = forge.util.createBuffer();\n  _addStringToBuffer(buffer, type);\n  _addBigIntegerToBuffer(buffer, key.e);\n  _addBigIntegerToBuffer(buffer, key.n);\n\n  return type + ' ' + forge.util.encode64(buffer.bytes()) + ' ' + comment;\n};\n\n/**\n * Encodes a private RSA key as an OpenSSH file.\n *\n * @param key the key.\n * @param passphrase a passphrase to protect the key (falsy for no encryption).\n *\n * @return the public key in OpenSSH format.\n */\nssh.privateKeyToOpenSSH = function(privateKey, passphrase) {\n  if(!passphrase) {\n    return forge.pki.privateKeyToPem(privateKey);\n  }\n  // OpenSSH private key is just a legacy format, it seems\n  return forge.pki.encryptRsaPrivateKey(privateKey, passphrase,\n    {legacy: true, algorithm: 'aes128'});\n};\n\n/**\n * Gets the SSH fingerprint for the given public key.\n *\n * @param options the options to use.\n *          [md] the message digest object to use (defaults to forge.md.md5).\n *          [encoding] an alternative output encoding, such as 'hex'\n *            (defaults to none, outputs a byte buffer).\n *          [delimiter] the delimiter to use between bytes for 'hex' encoded\n *            output, eg: ':' (defaults to none).\n *\n * @return the fingerprint as a byte buffer or other encoding based on options.\n */\nssh.getPublicKeyFingerprint = function(key, options) {\n  options = options || {};\n  var md = options.md || forge.md.md5.create();\n\n  var type = 'ssh-rsa';\n  var buffer = forge.util.createBuffer();\n  _addStringToBuffer(buffer, type);\n  _addBigIntegerToBuffer(buffer, key.e);\n  _addBigIntegerToBuffer(buffer, key.n);\n\n  // hash public key bytes\n  md.start();\n  md.update(buffer.getBytes());\n  var digest = md.digest();\n  if(options.encoding === 'hex') {\n    var hex = digest.toHex();\n    if(options.delimiter) {\n      return hex.match(/.{2}/g).join(options.delimiter);\n    }\n    return hex;\n  } else if(options.encoding === 'binary') {\n    return digest.getBytes();\n  } else if(options.encoding) {\n    throw new Error('Unknown encoding \"' + options.encoding + '\".');\n  }\n  return digest;\n};\n\n/**\n * Adds len(val) then val to a buffer.\n *\n * @param buffer the buffer to add to.\n * @param val a big integer.\n */\nfunction _addBigIntegerToBuffer(buffer, val) {\n  var hexVal = val.toString(16);\n  // ensure 2s complement +ve\n  if(hexVal[0] >= '8') {\n    hexVal = '00' + hexVal;\n  }\n  var bytes = forge.util.hexToBytes(hexVal);\n  buffer.putInt32(bytes.length);\n  buffer.putBytes(bytes);\n}\n\n/**\n * Adds len(val) then val to a buffer.\n *\n * @param buffer the buffer to add to.\n * @param val a string.\n */\nfunction _addStringToBuffer(buffer, val) {\n  buffer.putInt32(val.length);\n  buffer.putString(val);\n}\n\n/**\n * Hashes the arguments into one value using SHA-1.\n *\n * @return the sha1 hash of the provided arguments.\n */\nfunction _sha1() {\n  var sha = forge.md.sha1.create();\n  var num = arguments.length;\n  for (var i = 0; i < num; ++i) {\n    sha.update(arguments[i]);\n  }\n  return sha.digest();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}