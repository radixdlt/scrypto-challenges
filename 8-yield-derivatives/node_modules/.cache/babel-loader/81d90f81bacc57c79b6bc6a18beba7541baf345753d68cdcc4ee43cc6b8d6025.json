{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HashMD = exports.Maj = exports.Chi = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number(value >> _32n & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n// Choice: a ? b : c\nconst Chi = (a, b, c) => a & b ^ ~a & c;\nexports.Chi = Chi;\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => a & b ^ a & c ^ b & c;\nexports.Maj = Maj;\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nclass HashMD extends utils_js_1.Hash {\n  constructor(blockLen, outputLen, padOffset, isLE) {\n    super();\n    this.blockLen = blockLen;\n    this.outputLen = outputLen;\n    this.padOffset = padOffset;\n    this.isLE = isLE;\n    this.finished = false;\n    this.length = 0;\n    this.pos = 0;\n    this.destroyed = false;\n    this.buffer = new Uint8Array(blockLen);\n    this.view = (0, utils_js_1.createView)(this.buffer);\n  }\n  update(data) {\n    (0, _assert_js_1.exists)(this);\n    const {\n      view,\n      buffer,\n      blockLen\n    } = this;\n    data = (0, utils_js_1.toBytes)(data);\n    const len = data.length;\n    for (let pos = 0; pos < len;) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = (0, utils_js_1.createView)(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out) {\n    (0, _assert_js_1.exists)(this);\n    (0, _assert_js_1.output)(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const {\n      buffer,\n      view,\n      blockLen,\n      isLE\n    } = this;\n    let {\n      pos\n    } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = (0, utils_js_1.createView)(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const {\n      buffer,\n      outputLen\n    } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to) {\n    to || (to = new this.constructor());\n    to.set(...this.get());\n    const {\n      blockLen,\n      buffer,\n      length,\n      finished,\n      destroyed,\n      pos\n    } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\nexports.HashMD = HashMD;","map":{"version":3,"names":["_assert_js_1","require","utils_js_1","setBigUint64","view","byteOffset","value","isLE","_32n","BigInt","_u32_max","wh","Number","wl","h","l","setUint32","Chi","a","b","c","exports","Maj","HashMD","Hash","constructor","blockLen","outputLen","padOffset","finished","length","pos","destroyed","buffer","Uint8Array","createView","update","data","exists","toBytes","len","take","Math","min","dataView","process","set","subarray","roundClean","digestInto","out","output","fill","i","oview","Error","outLen","state","get","digest","res","slice","destroy","_cloneInto","to"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@noble/hashes/src/_md.ts"],"sourcesContent":["import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Choice: a ? b : c\nexport const Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nexport const Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}