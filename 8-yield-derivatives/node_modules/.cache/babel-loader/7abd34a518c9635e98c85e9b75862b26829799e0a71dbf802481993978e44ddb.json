{"ast":null,"code":"import { decorateProperty as o } from \"./base.js\";\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar n;\nconst e = null != (null === (n = window.HTMLSlotElement) || void 0 === n ? void 0 : n.prototype.assignedElements) ? (o, n) => o.assignedElements(n) : (o, n) => o.assignedNodes(n).filter(o => o.nodeType === Node.ELEMENT_NODE);\nfunction l(n) {\n  const {\n    slot: l,\n    selector: t\n  } = null != n ? n : {};\n  return o({\n    descriptor: o => ({\n      get() {\n        var o;\n        const r = \"slot\" + (l ? \"[name=\".concat(l, \"]\") : \":not([name])\"),\n          i = null === (o = this.renderRoot) || void 0 === o ? void 0 : o.querySelector(r),\n          s = null != i ? e(i, n) : [];\n        return t ? s.filter(o => o.matches(t)) : s;\n      },\n      enumerable: !0,\n      configurable: !0\n    })\n  });\n}\nexport { l as queryAssignedElements };","map":{"version":3,"names":["e","n","window","HTMLSlotElement","prototype","assignedElements","o","assignedNodes","filter","nodeType","Node","ELEMENT_NODE","l","slot","selector","t","descriptor","get","r","concat","i","renderRoot","querySelector","s","matches","enumerable","configurable","queryAssignedElements"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@lit/reactive-element/src/decorators/query-assigned-elements.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {decorateProperty} from './base.js';\n\nimport type {ReactiveElement} from '../reactive-element.js';\nimport type {QueryAssignedNodesOptions} from './query-assigned-nodes.js';\n\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n\n/**\n * A tiny module scoped polyfill for HTMLSlotElement.assignedElements.\n */\nconst slotAssignedElements =\n  global.HTMLSlotElement?.prototype.assignedElements != null\n    ? (slot: HTMLSlotElement, opts?: AssignedNodesOptions) =>\n        slot.assignedElements(opts)\n    : (slot: HTMLSlotElement, opts?: AssignedNodesOptions) =>\n        slot\n          .assignedNodes(opts)\n          .filter(\n            (node): node is Element => node.nodeType === Node.ELEMENT_NODE\n          );\n\n/**\n * Options for the {@linkcode queryAssignedElements} decorator. Extends the\n * options that can be passed into\n * [HTMLSlotElement.assignedElements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n */\nexport interface QueryAssignedElementsOptions\n  extends QueryAssignedNodesOptions {\n  /**\n   * CSS selector used to filter the elements returned. For example, a selector\n   * of `\".item\"` will only include elements with the `item` class.\n   */\n  selector?: string;\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedElements` of the given `slot`. Provides a declarative\n * way to use\n * [`HTMLSlotElement.assignedElements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n *\n * Can be passed an optional {@linkcode QueryAssignedElementsOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedElements({ slot: 'list' })\n *   listItems!: Array<HTMLElement>;\n *   @queryAssignedElements()\n *   unnamedSlotEls!: Array<HTMLElement>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *       <slot></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note, the type of this property should be annotated as `Array<HTMLElement>`.\n *\n * @category Decorator\n */\nexport function queryAssignedElements(options?: QueryAssignedElementsOptions) {\n  const {slot, selector} = options ?? {};\n  return decorateProperty({\n    descriptor: (_name: PropertyKey) => ({\n      get(this: ReactiveElement) {\n        const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n        const slotEl =\n          this.renderRoot?.querySelector<HTMLSlotElement>(slotSelector);\n        const elements =\n          slotEl != null ? slotAssignedElements(slotEl, options) : [];\n        if (selector) {\n          return elements.filter((node) => node.matches(selector));\n        }\n        return elements;\n      },\n      enumerable: true,\n      configurable: true,\n    }),\n  });\n}\n"],"mappings":";;;;;;;AAmBA,MAKMA,CAAA,GACkD,SAAhC,UAAtBC,CAAA,GANsCC,MAAA,CAM/BC,eAAA,UAAe,MAAAF,CAAA,YAAAA,CAAA,CAAEG,SAAA,CAAUC,gBAAA,IAC9B,CAACC,CAAA,EAAuBL,CAAA,KACtBK,CAAA,CAAKD,gBAAA,CAAiBJ,CAAA,IACxB,CAACK,CAAA,EAAuBL,CAAA,KACtBK,CAAA,CACGC,aAAA,CAAcN,CAAA,EACdO,MAAA,CACEF,CAAA,IAA0BA,CAAA,CAAKG,QAAA,KAAaC,IAAA,CAAKC,YAAA;AA8CxD,SAAUC,EAAsBX,CAAA;EACpC;IAAMY,IAAA,EAACD,CAAA;IAAIE,QAAA,EAAEC;EAAA,IAAY,QAAAd,CAAA,GAAAA,CAAA,GAAW;EACpC,OAAOK,CAAA,CAAiB;IACtBU,UAAA,EAAaV,CAAA,KAAwB;MACnCW,IAAA;QAAA,IAAAX,CAAA;QACE,MAAMY,CAAA,GAAe,UAAON,CAAA,YAAAO,MAAA,CAAgBP,CAAA,SAAU;UAChDQ,CAAA,GACW,UAAfd,CAAA,QAAKe,UAAA,UAAU,MAAAf,CAAA,YAAAA,CAAA,CAAEgB,aAAA,CAA+BJ,CAAA;UAC5CK,CAAA,GACM,QAAVH,CAAA,GAAiBpB,CAAA,CAAqBoB,CAAA,EAAQnB,CAAA,IAAW;QAC3D,OAAIc,CAAA,GACKQ,CAAA,CAASf,MAAA,CAAQF,CAAA,IAASA,CAAA,CAAKkB,OAAA,CAAQT,CAAA,KAEzCQ,CACR;MAAA;MACDE,UAAA,GAAY;MACZC,YAAA,GAAc;IAAA;EAAA,EAGpB;AAAA;AAAA,SAAAd,CAAA,IAAAe,qBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}