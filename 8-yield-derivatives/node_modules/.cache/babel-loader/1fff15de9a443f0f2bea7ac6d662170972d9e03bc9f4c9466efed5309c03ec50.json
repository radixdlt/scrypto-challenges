{"ast":null,"code":"'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar getNAF = utils.getNAF;\nvar getJSF = utils.getJSF;\nvar assert = utils.assert;\nfunction BaseCurve(type, conf) {\n  this.type = type;\n  this.p = new BN(conf.p, 16);\n\n  // Use Montgomery, when there is no fast reduction for the prime\n  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);\n\n  // Useful for many curves\n  this.zero = new BN(0).toRed(this.red);\n  this.one = new BN(1).toRed(this.red);\n  this.two = new BN(2).toRed(this.red);\n\n  // Curve configuration, optional\n  this.n = conf.n && new BN(conf.n, 16);\n  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n\n  // Temporary arrays\n  this._wnafT1 = new Array(4);\n  this._wnafT2 = new Array(4);\n  this._wnafT3 = new Array(4);\n  this._wnafT4 = new Array(4);\n  this._bitLength = this.n ? this.n.bitLength() : 0;\n\n  // Generalized Greg Maxwell's trick\n  var adjustCount = this.n && this.p.div(this.n);\n  if (!adjustCount || adjustCount.cmpn(100) > 0) {\n    this.redN = null;\n  } else {\n    this._maxwellTrick = true;\n    this.redN = this.n.toRed(this.red);\n  }\n}\nmodule.exports = BaseCurve;\nBaseCurve.prototype.point = function point() {\n  throw new Error('Not implemented');\n};\nBaseCurve.prototype.validate = function validate() {\n  throw new Error('Not implemented');\n};\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n  assert(p.precomputed);\n  var doubles = p._getDoubles();\n  var naf = getNAF(k, 1, this._bitLength);\n  var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);\n  I /= 3;\n\n  // Translate into more windowed form\n  var repr = [];\n  var j;\n  var nafW;\n  for (j = 0; j < naf.length; j += doubles.step) {\n    nafW = 0;\n    for (var l = j + doubles.step - 1; l >= j; l--) nafW = (nafW << 1) + naf[l];\n    repr.push(nafW);\n  }\n  var a = this.jpoint(null, null, null);\n  var b = this.jpoint(null, null, null);\n  for (var i = I; i > 0; i--) {\n    for (j = 0; j < repr.length; j++) {\n      nafW = repr[j];\n      if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());\n    }\n    a = a.add(b);\n  }\n  return a.toP();\n};\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n  var w = 4;\n\n  // Precompute window\n  var nafPoints = p._getNAFPoints(w);\n  w = nafPoints.wnd;\n  var wnd = nafPoints.points;\n\n  // Get NAF form\n  var naf = getNAF(k, w, this._bitLength);\n\n  // Add `this`*(N+1) for every w-NAF index\n  var acc = this.jpoint(null, null, null);\n  for (var i = naf.length - 1; i >= 0; i--) {\n    // Count zeroes\n    for (var l = 0; i >= 0 && naf[i] === 0; i--) l++;\n    if (i >= 0) l++;\n    acc = acc.dblp(l);\n    if (i < 0) break;\n    var z = naf[i];\n    assert(z !== 0);\n    if (p.type === 'affine') {\n      // J +- P\n      if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());\n    } else {\n      // J +- J\n      if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());\n    }\n  }\n  return p.type === 'affine' ? acc.toP() : acc;\n};\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {\n  var wndWidth = this._wnafT1;\n  var wnd = this._wnafT2;\n  var naf = this._wnafT3;\n\n  // Fill all arrays\n  var max = 0;\n  var i;\n  var j;\n  var p;\n  for (i = 0; i < len; i++) {\n    p = points[i];\n    var nafPoints = p._getNAFPoints(defW);\n    wndWidth[i] = nafPoints.wnd;\n    wnd[i] = nafPoints.points;\n  }\n\n  // Comb small window NAFs\n  for (i = len - 1; i >= 1; i -= 2) {\n    var a = i - 1;\n    var b = i;\n    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);\n      max = Math.max(naf[a].length, max);\n      max = Math.max(naf[b].length, max);\n      continue;\n    }\n    var comb = [points[a], /* 1 */\n    null, /* 3 */\n    null, /* 5 */\n    points[b] /* 7 */];\n\n    // Try to avoid Projective points, if possible\n    if (points[a].y.cmp(points[b].y) === 0) {\n      comb[1] = points[a].add(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].add(points[b].neg());\n    } else {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    }\n    var index = [-3, /* -1 -1 */\n    -1, /* -1 0 */\n    -5, /* -1 1 */\n    -7, /* 0 -1 */\n    0, /* 0 0 */\n    7, /* 0 1 */\n    5, /* 1 -1 */\n    1, /* 1 0 */\n    3 /* 1 1 */];\n    var jsf = getJSF(coeffs[a], coeffs[b]);\n    max = Math.max(jsf[0].length, max);\n    naf[a] = new Array(max);\n    naf[b] = new Array(max);\n    for (j = 0; j < max; j++) {\n      var ja = jsf[0][j] | 0;\n      var jb = jsf[1][j] | 0;\n      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n      naf[b][j] = 0;\n      wnd[a] = comb;\n    }\n  }\n  var acc = this.jpoint(null, null, null);\n  var tmp = this._wnafT4;\n  for (i = max; i >= 0; i--) {\n    var k = 0;\n    while (i >= 0) {\n      var zero = true;\n      for (j = 0; j < len; j++) {\n        tmp[j] = naf[j][i] | 0;\n        if (tmp[j] !== 0) zero = false;\n      }\n      if (!zero) break;\n      k++;\n      i--;\n    }\n    if (i >= 0) k++;\n    acc = acc.dblp(k);\n    if (i < 0) break;\n    for (j = 0; j < len; j++) {\n      var z = tmp[j];\n      p;\n      if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();\n      if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);\n    }\n  }\n  // Zeroify references\n  for (i = 0; i < len; i++) wnd[i] = null;\n  if (jacobianResult) return acc;else return acc.toP();\n};\nfunction BasePoint(curve, type) {\n  this.curve = curve;\n  this.type = type;\n  this.precomputed = null;\n}\nBaseCurve.BasePoint = BasePoint;\nBasePoint.prototype.eq = function eq( /*other*/\n) {\n  throw new Error('Not implemented');\n};\nBasePoint.prototype.validate = function validate() {\n  return this.curve.validate(this);\n};\nBaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  bytes = utils.toArray(bytes, enc);\n  var len = this.p.byteLength();\n\n  // uncompressed, hybrid-odd, hybrid-even\n  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {\n    if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);\n    var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));\n    return res;\n  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {\n    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n  }\n  throw new Error('Unknown point format');\n};\nBasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n  return this.encode(enc, true);\n};\nBasePoint.prototype._encode = function _encode(compact) {\n  var len = this.curve.p.byteLength();\n  var x = this.getX().toArray('be', len);\n  if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);\n  return [0x04].concat(x, this.getY().toArray('be', len));\n};\nBasePoint.prototype.encode = function encode(enc, compact) {\n  return utils.encode(this._encode(compact), enc);\n};\nBasePoint.prototype.precompute = function precompute(power) {\n  if (this.precomputed) return this;\n  var precomputed = {\n    doubles: null,\n    naf: null,\n    beta: null\n  };\n  precomputed.naf = this._getNAFPoints(8);\n  precomputed.doubles = this._getDoubles(4, power);\n  precomputed.beta = this._getBeta();\n  this.precomputed = precomputed;\n  return this;\n};\nBasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n  if (!this.precomputed) return false;\n  var doubles = this.precomputed.doubles;\n  if (!doubles) return false;\n  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n};\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n  if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;\n  var doubles = [this];\n  var acc = this;\n  for (var i = 0; i < power; i += step) {\n    for (var j = 0; j < step; j++) acc = acc.dbl();\n    doubles.push(acc);\n  }\n  return {\n    step: step,\n    points: doubles\n  };\n};\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n  if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;\n  var res = [this];\n  var max = (1 << wnd) - 1;\n  var dbl = max === 1 ? null : this.dbl();\n  for (var i = 1; i < max; i++) res[i] = res[i - 1].add(dbl);\n  return {\n    wnd: wnd,\n    points: res\n  };\n};\nBasePoint.prototype._getBeta = function _getBeta() {\n  return null;\n};\nBasePoint.prototype.dblp = function dblp(k) {\n  var r = this;\n  for (var i = 0; i < k; i++) r = r.dbl();\n  return r;\n};","map":{"version":3,"names":["BN","require","utils","getNAF","getJSF","assert","BaseCurve","type","conf","p","red","prime","mont","zero","toRed","one","two","n","g","pointFromJSON","gRed","_wnafT1","Array","_wnafT2","_wnafT3","_wnafT4","_bitLength","bitLength","adjustCount","div","cmpn","redN","_maxwellTrick","module","exports","prototype","point","Error","validate","_fixedNafMul","k","precomputed","doubles","_getDoubles","naf","I","step","repr","j","nafW","length","l","push","a","jpoint","b","i","mixedAdd","points","neg","add","toP","_wnafMul","w","nafPoints","_getNAFPoints","wnd","acc","dblp","z","_wnafMulAdd","defW","coeffs","len","jacobianResult","wndWidth","max","Math","comb","y","cmp","toJ","redNeg","index","jsf","ja","jb","tmp","BasePoint","curve","eq","decodePoint","bytes","enc","toArray","byteLength","res","slice","pointFromX","encodeCompressed","encode","_encode","compact","x","getX","getY","isEven","concat","precompute","power","beta","_getBeta","_hasDoubles","ceil","dbl","r"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/elliptic/lib/elliptic/curve/base.js"],"sourcesContent":["'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar getNAF = utils.getNAF;\nvar getJSF = utils.getJSF;\nvar assert = utils.assert;\n\nfunction BaseCurve(type, conf) {\n  this.type = type;\n  this.p = new BN(conf.p, 16);\n\n  // Use Montgomery, when there is no fast reduction for the prime\n  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);\n\n  // Useful for many curves\n  this.zero = new BN(0).toRed(this.red);\n  this.one = new BN(1).toRed(this.red);\n  this.two = new BN(2).toRed(this.red);\n\n  // Curve configuration, optional\n  this.n = conf.n && new BN(conf.n, 16);\n  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n\n  // Temporary arrays\n  this._wnafT1 = new Array(4);\n  this._wnafT2 = new Array(4);\n  this._wnafT3 = new Array(4);\n  this._wnafT4 = new Array(4);\n\n  this._bitLength = this.n ? this.n.bitLength() : 0;\n\n  // Generalized Greg Maxwell's trick\n  var adjustCount = this.n && this.p.div(this.n);\n  if (!adjustCount || adjustCount.cmpn(100) > 0) {\n    this.redN = null;\n  } else {\n    this._maxwellTrick = true;\n    this.redN = this.n.toRed(this.red);\n  }\n}\nmodule.exports = BaseCurve;\n\nBaseCurve.prototype.point = function point() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype.validate = function validate() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n  assert(p.precomputed);\n  var doubles = p._getDoubles();\n\n  var naf = getNAF(k, 1, this._bitLength);\n  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);\n  I /= 3;\n\n  // Translate into more windowed form\n  var repr = [];\n  var j;\n  var nafW;\n  for (j = 0; j < naf.length; j += doubles.step) {\n    nafW = 0;\n    for (var l = j + doubles.step - 1; l >= j; l--)\n      nafW = (nafW << 1) + naf[l];\n    repr.push(nafW);\n  }\n\n  var a = this.jpoint(null, null, null);\n  var b = this.jpoint(null, null, null);\n  for (var i = I; i > 0; i--) {\n    for (j = 0; j < repr.length; j++) {\n      nafW = repr[j];\n      if (nafW === i)\n        b = b.mixedAdd(doubles.points[j]);\n      else if (nafW === -i)\n        b = b.mixedAdd(doubles.points[j].neg());\n    }\n    a = a.add(b);\n  }\n  return a.toP();\n};\n\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n  var w = 4;\n\n  // Precompute window\n  var nafPoints = p._getNAFPoints(w);\n  w = nafPoints.wnd;\n  var wnd = nafPoints.points;\n\n  // Get NAF form\n  var naf = getNAF(k, w, this._bitLength);\n\n  // Add `this`*(N+1) for every w-NAF index\n  var acc = this.jpoint(null, null, null);\n  for (var i = naf.length - 1; i >= 0; i--) {\n    // Count zeroes\n    for (var l = 0; i >= 0 && naf[i] === 0; i--)\n      l++;\n    if (i >= 0)\n      l++;\n    acc = acc.dblp(l);\n\n    if (i < 0)\n      break;\n    var z = naf[i];\n    assert(z !== 0);\n    if (p.type === 'affine') {\n      // J +- P\n      if (z > 0)\n        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());\n    } else {\n      // J +- J\n      if (z > 0)\n        acc = acc.add(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.add(wnd[(-z - 1) >> 1].neg());\n    }\n  }\n  return p.type === 'affine' ? acc.toP() : acc;\n};\n\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,\n  points,\n  coeffs,\n  len,\n  jacobianResult) {\n  var wndWidth = this._wnafT1;\n  var wnd = this._wnafT2;\n  var naf = this._wnafT3;\n\n  // Fill all arrays\n  var max = 0;\n  var i;\n  var j;\n  var p;\n  for (i = 0; i < len; i++) {\n    p = points[i];\n    var nafPoints = p._getNAFPoints(defW);\n    wndWidth[i] = nafPoints.wnd;\n    wnd[i] = nafPoints.points;\n  }\n\n  // Comb small window NAFs\n  for (i = len - 1; i >= 1; i -= 2) {\n    var a = i - 1;\n    var b = i;\n    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);\n      max = Math.max(naf[a].length, max);\n      max = Math.max(naf[b].length, max);\n      continue;\n    }\n\n    var comb = [\n      points[a], /* 1 */\n      null, /* 3 */\n      null, /* 5 */\n      points[b], /* 7 */\n    ];\n\n    // Try to avoid Projective points, if possible\n    if (points[a].y.cmp(points[b].y) === 0) {\n      comb[1] = points[a].add(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].add(points[b].neg());\n    } else {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    }\n\n    var index = [\n      -3, /* -1 -1 */\n      -1, /* -1 0 */\n      -5, /* -1 1 */\n      -7, /* 0 -1 */\n      0, /* 0 0 */\n      7, /* 0 1 */\n      5, /* 1 -1 */\n      1, /* 1 0 */\n      3,  /* 1 1 */\n    ];\n\n    var jsf = getJSF(coeffs[a], coeffs[b]);\n    max = Math.max(jsf[0].length, max);\n    naf[a] = new Array(max);\n    naf[b] = new Array(max);\n    for (j = 0; j < max; j++) {\n      var ja = jsf[0][j] | 0;\n      var jb = jsf[1][j] | 0;\n\n      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n      naf[b][j] = 0;\n      wnd[a] = comb;\n    }\n  }\n\n  var acc = this.jpoint(null, null, null);\n  var tmp = this._wnafT4;\n  for (i = max; i >= 0; i--) {\n    var k = 0;\n\n    while (i >= 0) {\n      var zero = true;\n      for (j = 0; j < len; j++) {\n        tmp[j] = naf[j][i] | 0;\n        if (tmp[j] !== 0)\n          zero = false;\n      }\n      if (!zero)\n        break;\n      k++;\n      i--;\n    }\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n    if (i < 0)\n      break;\n\n    for (j = 0; j < len; j++) {\n      var z = tmp[j];\n      p;\n      if (z === 0)\n        continue;\n      else if (z > 0)\n        p = wnd[j][(z - 1) >> 1];\n      else if (z < 0)\n        p = wnd[j][(-z - 1) >> 1].neg();\n\n      if (p.type === 'affine')\n        acc = acc.mixedAdd(p);\n      else\n        acc = acc.add(p);\n    }\n  }\n  // Zeroify references\n  for (i = 0; i < len; i++)\n    wnd[i] = null;\n\n  if (jacobianResult)\n    return acc;\n  else\n    return acc.toP();\n};\n\nfunction BasePoint(curve, type) {\n  this.curve = curve;\n  this.type = type;\n  this.precomputed = null;\n}\nBaseCurve.BasePoint = BasePoint;\n\nBasePoint.prototype.eq = function eq(/*other*/) {\n  throw new Error('Not implemented');\n};\n\nBasePoint.prototype.validate = function validate() {\n  return this.curve.validate(this);\n};\n\nBaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  bytes = utils.toArray(bytes, enc);\n\n  var len = this.p.byteLength();\n\n  // uncompressed, hybrid-odd, hybrid-even\n  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&\n      bytes.length - 1 === 2 * len) {\n    if (bytes[0] === 0x06)\n      assert(bytes[bytes.length - 1] % 2 === 0);\n    else if (bytes[0] === 0x07)\n      assert(bytes[bytes.length - 1] % 2 === 1);\n\n    var res =  this.point(bytes.slice(1, 1 + len),\n      bytes.slice(1 + len, 1 + 2 * len));\n\n    return res;\n  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&\n              bytes.length - 1 === len) {\n    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n  }\n  throw new Error('Unknown point format');\n};\n\nBasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n  return this.encode(enc, true);\n};\n\nBasePoint.prototype._encode = function _encode(compact) {\n  var len = this.curve.p.byteLength();\n  var x = this.getX().toArray('be', len);\n\n  if (compact)\n    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);\n\n  return [ 0x04 ].concat(x, this.getY().toArray('be', len));\n};\n\nBasePoint.prototype.encode = function encode(enc, compact) {\n  return utils.encode(this._encode(compact), enc);\n};\n\nBasePoint.prototype.precompute = function precompute(power) {\n  if (this.precomputed)\n    return this;\n\n  var precomputed = {\n    doubles: null,\n    naf: null,\n    beta: null,\n  };\n  precomputed.naf = this._getNAFPoints(8);\n  precomputed.doubles = this._getDoubles(4, power);\n  precomputed.beta = this._getBeta();\n  this.precomputed = precomputed;\n\n  return this;\n};\n\nBasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n  if (!this.precomputed)\n    return false;\n\n  var doubles = this.precomputed.doubles;\n  if (!doubles)\n    return false;\n\n  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n};\n\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n  if (this.precomputed && this.precomputed.doubles)\n    return this.precomputed.doubles;\n\n  var doubles = [ this ];\n  var acc = this;\n  for (var i = 0; i < power; i += step) {\n    for (var j = 0; j < step; j++)\n      acc = acc.dbl();\n    doubles.push(acc);\n  }\n  return {\n    step: step,\n    points: doubles,\n  };\n};\n\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n  if (this.precomputed && this.precomputed.naf)\n    return this.precomputed.naf;\n\n  var res = [ this ];\n  var max = (1 << wnd) - 1;\n  var dbl = max === 1 ? null : this.dbl();\n  for (var i = 1; i < max; i++)\n    res[i] = res[i - 1].add(dbl);\n  return {\n    wnd: wnd,\n    points: res,\n  };\n};\n\nBasePoint.prototype._getBeta = function _getBeta() {\n  return null;\n};\n\nBasePoint.prototype.dblp = function dblp(k) {\n  var r = this;\n  for (var i = 0; i < k; i++)\n    r = r.dbl();\n  return r;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}