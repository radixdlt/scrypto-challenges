{"ast":null,"code":"/**\n * Debugging support for web applications.\n *\n * @author David I. Lehn <dlehn@digitalbazaar.com>\n *\n * Copyright 2008-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\n\n/* DEBUG API */\nmodule.exports = forge.debug = forge.debug || {};\n\n// Private storage for debugging.\n// Useful to expose data that is otherwise unviewable behind closures.\n// NOTE: remember that this can hold references to data and cause leaks!\n// format is \"forge._debug.<modulename>.<dataname> = data\"\n// Example:\n// (function() {\n//   var cat = 'forge.test.Test'; // debugging category\n//   var sState = {...}; // local state\n//   forge.debug.set(cat, 'sState', sState);\n// })();\nforge.debug.storage = {};\n\n/**\n * Gets debug data. Omit name for all cat data  Omit name and cat for\n * all data.\n *\n * @param cat name of debugging category.\n * @param name name of data to get (optional).\n * @return object with requested debug data or undefined.\n */\nforge.debug.get = function (cat, name) {\n  var rval;\n  if (typeof cat === 'undefined') {\n    rval = forge.debug.storage;\n  } else if (cat in forge.debug.storage) {\n    if (typeof name === 'undefined') {\n      rval = forge.debug.storage[cat];\n    } else {\n      rval = forge.debug.storage[cat][name];\n    }\n  }\n  return rval;\n};\n\n/**\n * Sets debug data.\n *\n * @param cat name of debugging category.\n * @param name name of data to set.\n * @param data data to set.\n */\nforge.debug.set = function (cat, name, data) {\n  if (!(cat in forge.debug.storage)) {\n    forge.debug.storage[cat] = {};\n  }\n  forge.debug.storage[cat][name] = data;\n};\n\n/**\n * Clears debug data. Omit name for all cat data. Omit name and cat for\n * all data.\n *\n * @param cat name of debugging category.\n * @param name name of data to clear or omit to clear entire category.\n */\nforge.debug.clear = function (cat, name) {\n  if (typeof cat === 'undefined') {\n    forge.debug.storage = {};\n  } else if (cat in forge.debug.storage) {\n    if (typeof name === 'undefined') {\n      delete forge.debug.storage[cat];\n    } else {\n      delete forge.debug.storage[cat][name];\n    }\n  }\n};","map":{"version":3,"names":["forge","require","module","exports","debug","storage","get","cat","name","rval","set","data","clear"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/node-forge/lib/debug.js"],"sourcesContent":["/**\n * Debugging support for web applications.\n *\n * @author David I. Lehn <dlehn@digitalbazaar.com>\n *\n * Copyright 2008-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\n\n/* DEBUG API */\nmodule.exports = forge.debug = forge.debug || {};\n\n// Private storage for debugging.\n// Useful to expose data that is otherwise unviewable behind closures.\n// NOTE: remember that this can hold references to data and cause leaks!\n// format is \"forge._debug.<modulename>.<dataname> = data\"\n// Example:\n// (function() {\n//   var cat = 'forge.test.Test'; // debugging category\n//   var sState = {...}; // local state\n//   forge.debug.set(cat, 'sState', sState);\n// })();\nforge.debug.storage = {};\n\n/**\n * Gets debug data. Omit name for all cat data  Omit name and cat for\n * all data.\n *\n * @param cat name of debugging category.\n * @param name name of data to get (optional).\n * @return object with requested debug data or undefined.\n */\nforge.debug.get = function(cat, name) {\n  var rval;\n  if(typeof(cat) === 'undefined') {\n    rval = forge.debug.storage;\n  } else if(cat in forge.debug.storage) {\n    if(typeof(name) === 'undefined') {\n      rval = forge.debug.storage[cat];\n    } else {\n      rval = forge.debug.storage[cat][name];\n    }\n  }\n  return rval;\n};\n\n/**\n * Sets debug data.\n *\n * @param cat name of debugging category.\n * @param name name of data to set.\n * @param data data to set.\n */\nforge.debug.set = function(cat, name, data) {\n  if(!(cat in forge.debug.storage)) {\n    forge.debug.storage[cat] = {};\n  }\n  forge.debug.storage[cat][name] = data;\n};\n\n/**\n * Clears debug data. Omit name for all cat data. Omit name and cat for\n * all data.\n *\n * @param cat name of debugging category.\n * @param name name of data to clear or omit to clear entire category.\n */\nforge.debug.clear = function(cat, name) {\n  if(typeof(cat) === 'undefined') {\n    forge.debug.storage = {};\n  } else if(cat in forge.debug.storage) {\n    if(typeof(name) === 'undefined') {\n      delete forge.debug.storage[cat];\n    } else {\n      delete forge.debug.storage[cat][name];\n    }\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;;AAE9B;AACAC,MAAM,CAACC,OAAO,GAAGH,KAAK,CAACI,KAAK,GAAGJ,KAAK,CAACI,KAAK,IAAI,CAAC,CAAC;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,KAAK,CAACI,KAAK,CAACC,OAAO,GAAG,CAAC,CAAC;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,KAAK,CAACI,KAAK,CAACE,GAAG,GAAG,UAASC,GAAG,EAAEC,IAAI,EAAE;EACpC,IAAIC,IAAI;EACR,IAAG,OAAOF,GAAI,KAAK,WAAW,EAAE;IAC9BE,IAAI,GAAGT,KAAK,CAACI,KAAK,CAACC,OAAO;EAC5B,CAAC,MAAM,IAAGE,GAAG,IAAIP,KAAK,CAACI,KAAK,CAACC,OAAO,EAAE;IACpC,IAAG,OAAOG,IAAK,KAAK,WAAW,EAAE;MAC/BC,IAAI,GAAGT,KAAK,CAACI,KAAK,CAACC,OAAO,CAACE,GAAG,CAAC;IACjC,CAAC,MAAM;MACLE,IAAI,GAAGT,KAAK,CAACI,KAAK,CAACC,OAAO,CAACE,GAAG,CAAC,CAACC,IAAI,CAAC;IACvC;EACF;EACA,OAAOC,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAT,KAAK,CAACI,KAAK,CAACM,GAAG,GAAG,UAASH,GAAG,EAAEC,IAAI,EAAEG,IAAI,EAAE;EAC1C,IAAG,EAAEJ,GAAG,IAAIP,KAAK,CAACI,KAAK,CAACC,OAAO,CAAC,EAAE;IAChCL,KAAK,CAACI,KAAK,CAACC,OAAO,CAACE,GAAG,CAAC,GAAG,CAAC,CAAC;EAC/B;EACAP,KAAK,CAACI,KAAK,CAACC,OAAO,CAACE,GAAG,CAAC,CAACC,IAAI,CAAC,GAAGG,IAAI;AACvC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,KAAK,CAACI,KAAK,CAACQ,KAAK,GAAG,UAASL,GAAG,EAAEC,IAAI,EAAE;EACtC,IAAG,OAAOD,GAAI,KAAK,WAAW,EAAE;IAC9BP,KAAK,CAACI,KAAK,CAACC,OAAO,GAAG,CAAC,CAAC;EAC1B,CAAC,MAAM,IAAGE,GAAG,IAAIP,KAAK,CAACI,KAAK,CAACC,OAAO,EAAE;IACpC,IAAG,OAAOG,IAAK,KAAK,WAAW,EAAE;MAC/B,OAAOR,KAAK,CAACI,KAAK,CAACC,OAAO,CAACE,GAAG,CAAC;IACjC,CAAC,MAAM;MACL,OAAOP,KAAK,CAACI,KAAK,CAACC,OAAO,CAACE,GAAG,CAAC,CAACC,IAAI,CAAC;IACvC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}