{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nexport function single(predicate) {\n  return function (source) {\n    return source.lift(new SingleOperator(predicate, source));\n  };\n}\nvar SingleOperator = /*@__PURE__*/function () {\n  function SingleOperator(predicate, source) {\n    this.predicate = predicate;\n    this.source = source;\n  }\n  SingleOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  };\n  return SingleOperator;\n}();\nvar SingleSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SingleSubscriber, _super);\n  function SingleSubscriber(destination, predicate, source) {\n    var _this = _super.call(this, destination) || this;\n    _this.predicate = predicate;\n    _this.source = source;\n    _this.seenValue = false;\n    _this.index = 0;\n    return _this;\n  }\n  SingleSubscriber.prototype.applySingleValue = function (value) {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  };\n  SingleSubscriber.prototype._next = function (value) {\n    var index = this.index++;\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  };\n  SingleSubscriber.prototype.tryNext = function (value, index) {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  };\n  SingleSubscriber.prototype._complete = function () {\n    var destination = this.destination;\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError());\n    }\n  };\n  return SingleSubscriber;\n}(Subscriber);","map":{"version":3,"names":["tslib_1","Subscriber","EmptyError","single","predicate","source","lift","SingleOperator","prototype","call","subscriber","subscribe","SingleSubscriber","_super","__extends","destination","_this","seenValue","applySingleValue","value","error","singleValue","_next","index","tryNext","err","_complete","next","undefined","complete"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/single.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\nimport { Observer, MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * items, notify of an IllegalArgumentException or NoSuchElementException respectively. If the source Observable\n * emits items but none match the specified predicate then `undefined` is emitted.\n *\n * <span class=\"informal\">Like {@link first}, but emit with error notification if there is more than one value.</span>\n * ![](single.png)\n *\n * ## Example\n * emits 'error'\n * ```ts\n * import { range } from 'rxjs';\n * import { single } from 'rxjs/operators';\n *\n * const numbers = range(1,5).pipe(single());\n * numbers.subscribe(x => console.log('never get called'), e => console.log('error'));\n * // result\n * // 'error'\n * ```\n *\n * emits 'undefined'\n * ```ts\n * import { range } from 'rxjs';\n * import { single } from 'rxjs/operators';\n *\n * const numbers = range(1,5).pipe(single(x => x === 10));\n * numbers.subscribe(x => console.log(x));\n * // result\n * // 'undefined'\n * ```\n *\n * @see {@link first}\n * @see {@link find}\n * @see {@link findIndex}\n * @see {@link elementAt}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate or `undefined` when no items match.\n *\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n"],"mappings":";AAEA,OAAO,KAAEA,OAAU,MAAE,OAAM;AAC3B,SAASC,UAAU,QAAQ;AAkD3B,SAAMC,UAAU,QAAU,oBAAuE;OAC/F,SAAOC,MAACA,CAAAC,SAA0B;EACnC,iBAAAC,MAAA;IAAA,OAAAA,MAAA,CAAAC,IAAA,KAAAC,cAAA,CAAAH,SAAA,EAAAC,MAAA;EAAA;AAED;IACEE,cAAA,gBAAoB,YACsB;WADtBA,eAAAH,SAAuE,EAAAC,MAAA;IACvE,KAAAD,SAAA,GAAAA,SAAsB;IACzC,KAAAC,MAAA,GAAAA,MAAA;EAED;gBACS,CAAAG,SAAO,CAAAC,IAAU,GAAI,UAAAC,UAAiB,EAAAL,MAAU,EAAE;IAC1D,OAAAA,MAAA,CAAAM,SAAA,KAAAC,gBAAA,CAAAF,UAAA,OAAAN,SAAA,OAAAC,MAAA;EACH;EARA,OAQCE,cAAA;AAOD;IAAkCK,gBAAA,0BAAaC,MAAA;EAK7Cb,OAAA,CAAAc,SAAA,CAAAF,gBAAY,EAAAC,MACQ;WADpBD,gBAGEA,CAAAG,WAAM,EAAAX,SAAY,EAAAC,MACnB;IAHmB,IAAAW,KAAA,GAAAH,MAAA,CAAAJ,IAAA,KAAuE,EAAAM,WAAA;IACvEC,KAAA,CAAAZ,SAAA,GAAAA,SAAsB;IANlCY,KAAA,CAAAX,MAAA,GAASA,MAAY;IAErBW,KAAA,CAAAC,SAAiB,GAAC;;IAMzB,OAAAD,KAAA;EAEO;kBACG,CAAAR,SAAW,CAAAU,gBAAA,aAAAC,KAAA;QAClB,IAAI,CAACF,SAAA,EAAW;MACjB,KAAAF,WAAA,CAAAK,KAAA;WACC;MACA,IAAI,CAACH,SAAA,GAAW,IAAG;MACpB,KAAAI,WAAA,GAAAF,KAAA;IACF;EAES;kBACM,CAAAX,SAAU,CAAAc,KAAG,aAAAH,KAAA;IAE3B,IAAII,KAAK,QAAAA,KAAW;QAClB,IAAI,CAACnB,SAAQ;MACd,KAAAoB,OAAA,CAAAL,KAAA,EAAAI,KAAA;WACC;MACD,KAAAL,gBAAA,CAAAC,KAAA;IACF;EAEO;kBACF,CAAAX,SAAA,CAAAgB,OAAA,aAAAL,KAAA,EAAAI,KAAA;QACF;UACE,IAAI,CAACnB,SAAA,CAAAe,KAAA,EAAiBI,KAAK,EAAE,KAAAlB,MAAA;QAC9B,KAAAa,gBAAA,CAAAC,KAAA;MACF;IAAC,E,OACAM,GAAK;MACN,KAAAV,WAAA,CAAAK,KAAA,CAAAK,GAAA;IACF;EAES;kBACF,CAAAjB,SAAkB,CAACkB,SAAA,GAAY;IAErC,IAAIX,WAAU,GAAI,IAAE,CAAAA,WAAA;QAClB,KAAAQ,KAAA,GAAY,GAAI;MAChBR,WAAW,CAACY,IAAA,KAAQ,CAAEV,SAAC,QAAAI,WAAA,GAAAO,SAAA;MACxBb,WAAA,CAAAc,QAAA;WACC;MACDd,WAAA,CAAAK,KAAA,KAAAlB,UAAA;IACF;EACH;EAlDkC,OAAAU,gBAkDjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}