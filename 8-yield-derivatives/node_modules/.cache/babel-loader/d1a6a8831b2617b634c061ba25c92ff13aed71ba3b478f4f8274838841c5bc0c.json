{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Amount = exports.isAmountOrUnsafeInput = exports.isAmount = exports.isAmountUnsafeInput = void 0;\nconst uint256_extensions_1 = require(\"./uint256-extensions\");\nconst neverthrow_1 = require(\"neverthrow\");\nconst uint256_1 = require(\"@radixdlt/uint256\");\nconst isAmountUnsafeInput = something => (0, uint256_extensions_1.isUnsafeInputForUInt256)(something);\nexports.isAmountUnsafeInput = isAmountUnsafeInput;\nconst isAmount = something => (0, uint256_extensions_1.isUInt256)(something);\nexports.isAmount = isAmount;\nconst isAmountOrUnsafeInput = something => (0, exports.isAmount)(something) || (0, exports.isAmountUnsafeInput)(something);\nexports.isAmountOrUnsafeInput = isAmountOrUnsafeInput;\nconst fromUnsafe = input => (0, exports.isAmount)(input) ? (0, neverthrow_1.ok)(input) : (0, exports.isAmountUnsafeInput)(input) ? (0, uint256_extensions_1.uint256FromUnsafe)(input) : (0, neverthrow_1.err)(new Error(\"Unable to construct 'AmountT' because of bad input: '\".concat(JSON.stringify(input, null, 4), \"'\")));\nconst isAmountMultipleOf = input => {\n  const {\n    amount,\n    granularity: other\n  } = input;\n  const zero = uint256_1.UInt256.valueOf(0);\n  return amount.mod(other, false).eq(zero);\n};\nexports.Amount = {\n  fromUnsafe,\n  isAmountMultipleOf\n};","map":{"version":3,"names":["uint256_extensions_1","require","neverthrow_1","uint256_1","isAmountUnsafeInput","something","isUnsafeInputForUInt256","exports","isAmount","isUInt256","isAmountOrUnsafeInput","fromUnsafe","input","ok","uint256FromUnsafe","err","Error","concat","JSON","stringify","isAmountMultipleOf","amount","granularity","other","zero","UInt256","valueOf","mod","eq","Amount"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/primitives/src/amount.ts"],"sourcesContent":["import {\n\tisUInt256,\n\tisUnsafeInputForUInt256,\n\tuint256FromUnsafe,\n\tUInt256InputUnsafe,\n} from './uint256-extensions'\nimport { err, ok, Result } from 'neverthrow'\nimport { AmountT } from './_types'\nimport { UInt256 } from '@radixdlt/uint256'\n\nexport type AmountUnsafeInput = UInt256InputUnsafe\nexport const isAmountUnsafeInput = (\n\tsomething: unknown,\n): something is AmountUnsafeInput => isUnsafeInputForUInt256(something)\n\nexport type AmountOrUnsafeInput = AmountT | AmountUnsafeInput\n\nexport const isAmount = (something: unknown): something is AmountT =>\n\tisUInt256(something)\n\nexport const isAmountOrUnsafeInput = (\n\tsomething: unknown,\n): something is AmountOrUnsafeInput =>\n\tisAmount(something) || isAmountUnsafeInput(something)\n\nconst fromUnsafe = (input: AmountOrUnsafeInput): Result<AmountT, Error> =>\n\tisAmount(input)\n\t\t? ok(input)\n\t\t: isAmountUnsafeInput(input)\n\t\t? uint256FromUnsafe(input)\n\t\t: err(\n\t\t\t\tnew Error(\n\t\t\t\t\t`Unable to construct 'AmountT' because of bad input: '${JSON.stringify(\n\t\t\t\t\t\tinput,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\t4,\n\t\t\t\t\t)}'`,\n\t\t\t\t),\n\t\t  )\n\nconst isAmountMultipleOf = (\n\tinput: Readonly<{\n\t\tamount: AmountT\n\t\tgranularity: AmountT\n\t}>,\n): boolean => {\n\tconst { amount, granularity: other } = input\n\tconst zero = UInt256.valueOf(0)\n\treturn amount.mod(other, false).eq(zero)\n}\n\nexport const Amount = {\n\tfromUnsafe,\n\tisAmountMultipleOf,\n}\n"],"mappings":";;;;;;AAAA,MAAAA,oBAAA,GAAAC,OAAA;AAMA,MAAAC,YAAA,GAAAD,OAAA;AAEA,MAAAE,SAAA,GAAAF,OAAA;AAGO,MAAMG,mBAAmB,GAC/BC,SAAkB,IACkB,IAAAL,oBAAA,CAAAM,uBAAuB,EAACD,SAAS,CAAC;AAF1DE,OAAA,CAAAH,mBAAmB,GAAAA,mBAAA;AAMzB,MAAMI,QAAQ,GAAIH,SAAkB,IAC1C,IAAAL,oBAAA,CAAAS,SAAS,EAACJ,SAAS,CAAC;AADRE,OAAA,CAAAC,QAAQ,GAAAA,QAAA;AAGd,MAAME,qBAAqB,GACjCL,SAAkB,IAElB,IAAAE,OAAA,CAAAC,QAAQ,EAACH,SAAS,CAAC,IAAI,IAAAE,OAAA,CAAAH,mBAAmB,EAACC,SAAS,CAAC;AAHzCE,OAAA,CAAAG,qBAAqB,GAAAA,qBAAA;AAKlC,MAAMC,UAAU,GAAIC,KAA0B,IAC7C,IAAAL,OAAA,CAAAC,QAAQ,EAACI,KAAK,CAAC,GACZ,IAAAV,YAAA,CAAAW,EAAE,EAACD,KAAK,CAAC,GACT,IAAAL,OAAA,CAAAH,mBAAmB,EAACQ,KAAK,CAAC,GAC1B,IAAAZ,oBAAA,CAAAc,iBAAiB,EAACF,KAAK,CAAC,GACxB,IAAAV,YAAA,CAAAa,GAAG,EACH,IAAIC,KAAK,yDAAAC,MAAA,CACgDC,IAAI,CAACC,SAAS,CACrEP,KAAK,EACL,IAAI,EACJ,CAAC,CACD,MAAG,CACJ,CACA;AAEL,MAAMQ,kBAAkB,GACvBR,KAGE,IACU;EACZ,MAAM;IAAES,MAAM;IAAEC,WAAW,EAAEC;EAAK,CAAE,GAAGX,KAAK;EAC5C,MAAMY,IAAI,GAAGrB,SAAA,CAAAsB,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC;EAC/B,OAAOL,MAAM,CAACM,GAAG,CAACJ,KAAK,EAAE,KAAK,CAAC,CAACK,EAAE,CAACJ,IAAI,CAAC;AACzC,CAAC;AAEYjB,OAAA,CAAAsB,MAAM,GAAG;EACrBlB,UAAU;EACVS;CACA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}