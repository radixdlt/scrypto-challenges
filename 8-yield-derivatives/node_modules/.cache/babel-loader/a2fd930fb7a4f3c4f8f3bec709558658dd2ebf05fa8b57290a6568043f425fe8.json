{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function withLatestFrom() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  return function (source) {\n    var project;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    var observables = args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\nvar WithLatestFromOperator = /*@__PURE__*/function () {\n  function WithLatestFromOperator(observables, project) {\n    this.observables = observables;\n    this.project = project;\n  }\n  WithLatestFromOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  };\n  return WithLatestFromOperator;\n}();\nvar WithLatestFromSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(WithLatestFromSubscriber, _super);\n  function WithLatestFromSubscriber(destination, observables, project) {\n    var _this = _super.call(this, destination) || this;\n    _this.observables = observables;\n    _this.project = project;\n    _this.toRespond = [];\n    var len = observables.length;\n    _this.values = new Array(len);\n    for (var i = 0; i < len; i++) {\n      _this.toRespond.push(i);\n    }\n    for (var i = 0; i < len; i++) {\n      var observable = observables[i];\n      _this.add(subscribeToResult(_this, observable, undefined, i));\n    }\n    return _this;\n  }\n  WithLatestFromSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {\n    this.values[outerIndex] = innerValue;\n    var toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      var found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  };\n  WithLatestFromSubscriber.prototype.notifyComplete = function () {};\n  WithLatestFromSubscriber.prototype._next = function (value) {\n    if (this.toRespond.length === 0) {\n      var args = [value].concat(this.values);\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  };\n  WithLatestFromSubscriber.prototype._tryProject = function (args) {\n    var result;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  };\n  return WithLatestFromSubscriber;\n}(OuterSubscriber);","map":{"version":3,"names":["tslib_1","OuterSubscriber","subscribeToResult","withLatestFrom","_i","arguments","length","source","project","args","pop","observables","lift","WithLatestFromOperator","prototype","call","subscriber","subscribe","WithLatestFromSubscriber","_super","__extends","destination","_this","toRespond","len","values","Array","i","push","observable","add","undefined","notifyNext","_outerValue","innerValue","outerIndex","found","indexOf","splice","notifyComplete","_next","value","concat","_tryProject","next","result","apply","err","error"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/withLatestFrom.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, O2 extends ObservableInput<any>, R>(source2: O2, project: (v1: T, v2: ObservedValueOf<O2>) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, R>(v2: O2, v3: O3, project: (v1: T, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, R>(v2: O2, v3: O3, v4: O4, project: (v1: T, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, R>(v2: O2, v3: O3, v4: O4, v5: O5, project: (v1: T, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>, R>(v2: O2, v3: O3, v4: O4, v5: O5, v6: O6, project: (v1: T, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, O2 extends ObservableInput<any>>(source2: O2): OperatorFunction<T, [T, ObservedValueOf<O2>]>;\nexport function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(v2: O2, v3: O3): OperatorFunction<T, [T, ObservedValueOf<O2>, ObservedValueOf<O3>]>;\nexport function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(v2: O2, v3: O3, v4: O4): OperatorFunction<T, [T, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]>;\nexport function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(v2: O2, v3: O3, v4: O4, v5: O5): OperatorFunction<T, [T, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>]>;\nexport function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(v2: O2, v3: O3, v4: O4, v5: O5, v6: O6): OperatorFunction<T, [T, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>, ObservedValueOf<O6>]>;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * ![](withLatestFrom.png)\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * ## Example\n * On every click event, emit an array with the latest timer event plus the click event\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { withLatestFrom } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const result = clicks.pipe(withLatestFrom(timer));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.pipe(withLatestFrom(b, c), map(([a1, b1, c1]) => a1 + b1 + c1))`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, undefined, i));\n    }\n  }\n\n  notifyNext(_outerValue: T, innerValue: R,\n             outerIndex: number): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next!(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project!.apply(this, args);\n    } catch (err) {\n      this.destination.error!(err);\n      return;\n    }\n    this.destination.next!(result);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}