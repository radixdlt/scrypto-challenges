{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar __1 = require(\"../..\");\nvar bn_js_1 = tslib_1.__importDefault(require(\"bn.js\"));\n/**\n *  A particle which represents an amount of consumable and consuming, tranferable fungible tokens\n *  owned by some key owner and stored in an account.\n */\nvar RadixTransferrableTokensParticle = /** @class */function (_super) {\n  tslib_1.__extends(RadixTransferrableTokensParticle, _super);\n  function RadixTransferrableTokensParticle(amount, granularity, address, nonce, tokenReference, tokenPermissions, planck) {\n    var _this = this;\n    if (amount.isZero()) {\n      throw new Error('Ammount cannot be zero');\n    }\n    planck = planck ? planck : Math.floor(Date.now() / 60000 + 60000);\n    _this = _super.call(this) || this;\n    _this.address = address;\n    _this.granularity = new __1.RadixUInt256(granularity);\n    _this.tokenDefinitionReference = tokenReference;\n    _this.amount = new __1.RadixUInt256(amount);\n    _this.planck = planck;\n    _this.nonce = nonce;\n    _this.permissions = tokenPermissions;\n    return _this;\n  }\n  RadixTransferrableTokensParticle.prototype.getAddress = function () {\n    return this.address;\n  };\n  RadixTransferrableTokensParticle.prototype.getAddresses = function () {\n    return [this.address];\n  };\n  RadixTransferrableTokensParticle.prototype.getType = function () {\n    return __1.RadixFungibleType.TRANSFER;\n  };\n  RadixTransferrableTokensParticle.prototype.getPlanck = function () {\n    return this.planck;\n  };\n  RadixTransferrableTokensParticle.prototype.getNonce = function () {\n    return this.nonce;\n  };\n  RadixTransferrableTokensParticle.prototype.getTokenDefinitionReference = function () {\n    return this.tokenDefinitionReference;\n  };\n  RadixTransferrableTokensParticle.prototype.getOwner = function () {\n    return this.address;\n  };\n  RadixTransferrableTokensParticle.prototype.getAmount = function () {\n    return this.amount.value;\n  };\n  RadixTransferrableTokensParticle.prototype.getGranularity = function () {\n    return this.granularity.value;\n  };\n  RadixTransferrableTokensParticle.prototype.getTokenPermissions = function () {\n    return this.permissions;\n  };\n  tslib_1.__decorate([__1.includeDSON, __1.includeJSON, tslib_1.__metadata(\"design:type\", __1.RadixAddress)], RadixTransferrableTokensParticle.prototype, \"address\", void 0);\n  tslib_1.__decorate([__1.includeDSON, __1.includeJSON, tslib_1.__metadata(\"design:type\", __1.RRI)], RadixTransferrableTokensParticle.prototype, \"tokenDefinitionReference\", void 0);\n  tslib_1.__decorate([__1.includeDSON, __1.includeJSON, tslib_1.__metadata(\"design:type\", __1.RadixUInt256)], RadixTransferrableTokensParticle.prototype, \"granularity\", void 0);\n  tslib_1.__decorate([__1.includeDSON, __1.includeJSON, tslib_1.__metadata(\"design:type\", Number)], RadixTransferrableTokensParticle.prototype, \"planck\", void 0);\n  tslib_1.__decorate([__1.includeDSON, __1.includeJSON, tslib_1.__metadata(\"design:type\", Number)], RadixTransferrableTokensParticle.prototype, \"nonce\", void 0);\n  tslib_1.__decorate([__1.includeDSON, __1.includeJSON, tslib_1.__metadata(\"design:type\", __1.RadixUInt256)], RadixTransferrableTokensParticle.prototype, \"amount\", void 0);\n  tslib_1.__decorate([__1.includeDSON, __1.includeJSON, tslib_1.__metadata(\"design:type\", Object)], RadixTransferrableTokensParticle.prototype, \"permissions\", void 0);\n  RadixTransferrableTokensParticle = tslib_1.__decorate([__1.RadixSerializer.registerClass('radix.particles.transferrable_tokens'), tslib_1.__metadata(\"design:paramtypes\", [bn_js_1.default, bn_js_1.default, __1.RadixAddress, Number, __1.RRI, Object, Number])], RadixTransferrableTokensParticle);\n  return RadixTransferrableTokensParticle;\n}(__1.RadixParticle);\nexports.RadixTransferrableTokensParticle = RadixTransferrableTokensParticle;","map":{"version":3,"names":["__1","require","bn_js_1","tslib_1","__importDefault","RadixTransferrableTokensParticle","_super","__extends","amount","granularity","address","nonce","tokenReference","tokenPermissions","planck","_this","isZero","Error","Math","floor","Date","now","call","RadixUInt256","tokenDefinitionReference","permissions","prototype","getAddress","getAddresses","getType","RadixFungibleType","TRANSFER","getPlanck","getNonce","getTokenDefinitionReference","getOwner","getAmount","value","getGranularity","getTokenPermissions","__decorate","includeDSON","includeJSON","RadixAddress","RRI","RadixSerializer","registerClass","default","Number","Object","RadixParticle","exports"],"sources":["../../../../../../src/modules/atommodel/particles/tokens/RadixTransferrableTokensParticle.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}