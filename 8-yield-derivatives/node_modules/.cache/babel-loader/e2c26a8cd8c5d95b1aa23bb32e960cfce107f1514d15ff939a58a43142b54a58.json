{"ast":null,"code":"// Tweaked version of nathan7's binary-parse-stream\n// (see https://github.com/nathan7/binary-parse-stream)\n// Uses NoFilter instead of the readable in the original.  Removes\n// the ability to read -1, which was odd and un-needed.\n// License for binary-parse-stream: MIT\n\n// binary-parse-stream is now unmaintained, so I'm going to rewrite it as\n// more modern JS so I can get tsc to help check types.\n\n'use strict';\n\nconst Stream = require('stream');\nconst NoFilter = require('nofilter');\nconst TransformStream = Stream.Transform;\n\n/**\n * BinaryParseStream is a TransformStream that consumes buffers and outputs\n * objects on the other end.  It expects your subclass to implement a `_parse`\n * method that is a generator.  When your generator yields a number, it'll be\n * fed a buffer of that length from the input.  When your generator returns,\n * the return value will be pushed to the output side.\n *\n * @class BinaryParseStream\n * @extends {TransformStream}\n */\nclass BinaryParseStream extends TransformStream {\n  constructor(options) {\n    super(options);\n    // doesn't work to pass these in as opts, for some reason\n    this['_writableState'].objectMode = false;\n    this['_readableState'].objectMode = true;\n    this.bs = new NoFilter();\n    this.__restart();\n  }\n  _transform(fresh, encoding, cb) {\n    this.bs.write(fresh);\n    while (this.bs.length >= this.__needed) {\n      let ret;\n      const chunk = this.__needed === null ? undefined : this.bs.read(this.__needed);\n      try {\n        ret = this.__parser.next(chunk);\n      } catch (e) {\n        return cb(e);\n      }\n      if (this.__needed) {\n        this.__fresh = false;\n      }\n      if (!ret.done) {\n        this.__needed = ret.value || 0;\n      } else {\n        this.push(ret.value);\n        this.__restart();\n      }\n    }\n    return cb();\n  }\n\n  /**\n   * @abstract\n   */\n  /* istanbul ignore next */\n  *_parse() {\n    throw new Error('Must be implemented in subclass');\n  }\n  __restart() {\n    this.__needed = null;\n    this.__parser = this._parse();\n    this.__fresh = true;\n  }\n  _flush(cb) {\n    cb(this.__fresh ? null : new Error('unexpected end of input'));\n  }\n}\nmodule.exports = BinaryParseStream;","map":{"version":3,"names":["Stream","require","NoFilter","TransformStream","Transform","BinaryParseStream","constructor","options","objectMode","bs","__restart","_transform","fresh","encoding","cb","write","length","__needed","ret","chunk","undefined","read","__parser","next","e","__fresh","done","value","push","_parse","Error","_flush","module","exports"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/cbor/vendor/binary-parse-stream/index.js"],"sourcesContent":["// Tweaked version of nathan7's binary-parse-stream\n// (see https://github.com/nathan7/binary-parse-stream)\n// Uses NoFilter instead of the readable in the original.  Removes\n// the ability to read -1, which was odd and un-needed.\n// License for binary-parse-stream: MIT\n\n// binary-parse-stream is now unmaintained, so I'm going to rewrite it as\n// more modern JS so I can get tsc to help check types.\n\n'use strict'\nconst Stream = require('stream')\nconst NoFilter = require('nofilter')\nconst TransformStream = Stream.Transform\n\n/**\n * BinaryParseStream is a TransformStream that consumes buffers and outputs\n * objects on the other end.  It expects your subclass to implement a `_parse`\n * method that is a generator.  When your generator yields a number, it'll be\n * fed a buffer of that length from the input.  When your generator returns,\n * the return value will be pushed to the output side.\n *\n * @class BinaryParseStream\n * @extends {TransformStream}\n */\nclass BinaryParseStream extends TransformStream {\n  constructor(options) {\n    super(options)\n    // doesn't work to pass these in as opts, for some reason\n    this['_writableState'].objectMode = false\n    this['_readableState'].objectMode = true\n\n    this.bs = new NoFilter()\n    this.__restart()\n  }\n\n  _transform(fresh, encoding, cb) {\n    this.bs.write(fresh)\n\n    while (this.bs.length >= this.__needed) {\n      let ret\n      const chunk = (this.__needed === null) ?\n        undefined : this.bs.read(this.__needed)\n\n      try {\n        ret = this.__parser.next(chunk)\n      } catch (e) {\n        return cb(e)\n      }\n  \n      if (this.__needed) {\n        this.__fresh = false\n      }\n\n      if (!ret.done) {\n        this.__needed = ret.value || 0\n      } else {\n        this.push(ret.value)\n        this.__restart()\n      }\n    }\n  \n    return cb()\n  }\n\n  /**\n   * @abstract\n   */\n  /* istanbul ignore next */\n  *_parse() {\n    throw new Error('Must be implemented in subclass')\n  }\n\n  __restart() {\n    this.__needed = null\n    this.__parser = this._parse()\n    this.__fresh = true\n  }\n\n  _flush(cb) {\n    cb(this.__fresh ? null : new Error('unexpected end of input'))\n  }\n}\n\nmodule.exports = BinaryParseStream\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,YAAY;;AACZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,MAAME,eAAe,GAAGH,MAAM,CAACI,SAAS;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,SAASF,eAAe,CAAC;EAC9CG,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAACA,OAAO,CAAC;IACd;IACA,IAAI,CAAC,gBAAgB,CAAC,CAACC,UAAU,GAAG,KAAK;IACzC,IAAI,CAAC,gBAAgB,CAAC,CAACA,UAAU,GAAG,IAAI;IAExC,IAAI,CAACC,EAAE,GAAG,IAAIP,QAAQ,CAAC,CAAC;IACxB,IAAI,CAACQ,SAAS,CAAC,CAAC;EAClB;EAEAC,UAAUA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,EAAE,EAAE;IAC9B,IAAI,CAACL,EAAE,CAACM,KAAK,CAACH,KAAK,CAAC;IAEpB,OAAO,IAAI,CAACH,EAAE,CAACO,MAAM,IAAI,IAAI,CAACC,QAAQ,EAAE;MACtC,IAAIC,GAAG;MACP,MAAMC,KAAK,GAAI,IAAI,CAACF,QAAQ,KAAK,IAAI,GACnCG,SAAS,GAAG,IAAI,CAACX,EAAE,CAACY,IAAI,CAAC,IAAI,CAACJ,QAAQ,CAAC;MAEzC,IAAI;QACFC,GAAG,GAAG,IAAI,CAACI,QAAQ,CAACC,IAAI,CAACJ,KAAK,CAAC;MACjC,CAAC,CAAC,OAAOK,CAAC,EAAE;QACV,OAAOV,EAAE,CAACU,CAAC,CAAC;MACd;MAEA,IAAI,IAAI,CAACP,QAAQ,EAAE;QACjB,IAAI,CAACQ,OAAO,GAAG,KAAK;MACtB;MAEA,IAAI,CAACP,GAAG,CAACQ,IAAI,EAAE;QACb,IAAI,CAACT,QAAQ,GAAGC,GAAG,CAACS,KAAK,IAAI,CAAC;MAChC,CAAC,MAAM;QACL,IAAI,CAACC,IAAI,CAACV,GAAG,CAACS,KAAK,CAAC;QACpB,IAAI,CAACjB,SAAS,CAAC,CAAC;MAClB;IACF;IAEA,OAAOI,EAAE,CAAC,CAAC;EACb;;EAEA;AACF;AACA;EACE;EACA,CAACe,MAAMA,CAAA,EAAG;IACR,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;EACpD;EAEApB,SAASA,CAAA,EAAG;IACV,IAAI,CAACO,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACK,QAAQ,GAAG,IAAI,CAACO,MAAM,CAAC,CAAC;IAC7B,IAAI,CAACJ,OAAO,GAAG,IAAI;EACrB;EAEAM,MAAMA,CAACjB,EAAE,EAAE;IACTA,EAAE,CAAC,IAAI,CAACW,OAAO,GAAG,IAAI,GAAG,IAAIK,KAAK,CAAC,yBAAyB,CAAC,CAAC;EAChE;AACF;AAEAE,MAAM,CAACC,OAAO,GAAG5B,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}