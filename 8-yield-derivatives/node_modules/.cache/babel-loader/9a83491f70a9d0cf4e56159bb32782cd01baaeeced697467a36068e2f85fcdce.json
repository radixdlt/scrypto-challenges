{"ast":null,"code":"import { decorateProperty as e } from \"./base.js\";\nimport { queryAssignedElements as t } from \"./query-assigned-elements.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nfunction o(o, n, r) {\n  let l,\n    s = o;\n  return \"object\" == typeof o ? (s = o.slot, l = o) : l = {\n    flatten: n\n  }, r ? t({\n    slot: s,\n    flatten: n,\n    selector: r\n  }) : e({\n    descriptor: e => ({\n      get() {\n        var e, t;\n        const o = \"slot\" + (s ? \"[name=\".concat(s, \"]\") : \":not([name])\"),\n          n = null === (e = this.renderRoot) || void 0 === e ? void 0 : e.querySelector(o);\n        return null !== (t = null == n ? void 0 : n.assignedNodes(l)) && void 0 !== t ? t : [];\n      },\n      enumerable: !0,\n      configurable: !0\n    })\n  });\n}\nexport { o as queryAssignedNodes };","map":{"version":3,"names":["o","n","r","l","s","slot","flatten","t","selector","e","descriptor","get","concat","renderRoot","querySelector","assignedNodes","enumerable","configurable","queryAssignedNodes"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@lit/reactive-element/src/decorators/query-assigned-nodes.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {decorateProperty} from './base.js';\nimport {queryAssignedElements} from './query-assigned-elements.js';\n\nimport type {ReactiveElement} from '../reactive-element.js';\n\n/**\n * Options for the {@linkcode queryAssignedNodes} decorator. Extends the options\n * that can be passed into [HTMLSlotElement.assignedNodes](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedNodes).\n */\nexport interface QueryAssignedNodesOptions extends AssignedNodesOptions {\n  /**\n   * Name of the slot to query. Leave empty for the default slot.\n   */\n  slot?: string;\n}\n\n// TypeScript requires the decorator return type to be `void|any`.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype TSDecoratorReturnType = void | any;\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given `slot`.\n *\n * Can be passed an optional {@linkcode QueryAssignedNodesOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedNodes({slot: 'list', flatten: true})\n *   listItems!: Array<Node>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note the type of this property should be annotated as `Array<Node>`.\n *\n * @category Decorator\n */\nexport function queryAssignedNodes(\n  options?: QueryAssignedNodesOptions\n): TSDecoratorReturnType;\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given named `slot`.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedNodes('list', true, '.item')\n *   listItems!: Array<HTMLElement>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note the type of this property should be annotated as `Array<Node>` if used\n * without a `selector` or `Array<HTMLElement>` if a selector is provided.\n * Use {@linkcode queryAssignedElements @queryAssignedElements} to list only\n * elements, and optionally filter the element list using a CSS selector.\n *\n * @param slotName A string name of the slot.\n * @param flatten A boolean which when true flattens the assigned nodes,\n *     meaning any assigned nodes that are slot elements are replaced with their\n *     assigned nodes.\n * @param selector A CSS selector used to filter the elements returned.\n *\n * @category Decorator\n * @deprecated Prefer passing in a single options object, i.e. `{slot: 'list'}`.\n * If using `selector` please use `@queryAssignedElements`.\n * `@queryAssignedNodes('', false, '.item')` is functionally identical to\n * `@queryAssignedElements({slot: '', flatten: false, selector: '.item'})` or\n * `@queryAssignedElements({selector: '.item'})`.\n */\nexport function queryAssignedNodes(\n  slotName?: string,\n  flatten?: boolean,\n  selector?: string\n): TSDecoratorReturnType;\n\nexport function queryAssignedNodes(\n  slotOrOptions?: string | QueryAssignedNodesOptions,\n  flatten?: boolean,\n  selector?: string\n) {\n  // Normalize the overloaded arguments.\n  let slot = slotOrOptions;\n  let assignedNodesOptions: AssignedNodesOptions;\n  if (typeof slotOrOptions === 'object') {\n    slot = slotOrOptions.slot;\n    assignedNodesOptions = slotOrOptions;\n  } else {\n    assignedNodesOptions = {flatten};\n  }\n\n  // For backwards compatibility, queryAssignedNodes with a selector behaves\n  // exactly like queryAssignedElements with a selector.\n  if (selector) {\n    return queryAssignedElements({\n      slot: slot as string,\n      flatten,\n      selector,\n    });\n  }\n\n  return decorateProperty({\n    descriptor: (_name: PropertyKey) => ({\n      get(this: ReactiveElement) {\n        const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n        const slotEl =\n          this.renderRoot?.querySelector<HTMLSlotElement>(slotSelector);\n        return slotEl?.assignedNodes(assignedNodesOptions) ?? [];\n      },\n      enumerable: true,\n      configurable: true,\n    }),\n  });\n}\n"],"mappings":";;;;;;;SAuGgBA,EACdA,CAAA,EACAC,CAAA,EACAC,CAAA;EAGA,IACIC,CAAA;IADAC,CAAA,GAAOJ,CAAA;EAWX,OAT6B,mBAAlBA,CAAA,IACTI,CAAA,GAAOJ,CAAA,CAAcK,IAAA,EACrBF,CAAA,GAAuBH,CAAA,IAEvBG,CAAA,GAAuB;IAACG,OAAA,EAAAL;EAAA,GAKtBC,CAAA,GACKK,CAAA,CAAsB;IAC3BF,IAAA,EAAMD,CAAA;IACNE,OAAA,EAAAL,CAAA;IACAO,QAAA,EAAAN;EAAA,KAIGO,CAAA,CAAiB;IACtBC,UAAA,EAAaD,CAAA,KAAwB;MACnCE,IAAA;QAAA,IAAAF,CAAA,EAAAF,CAAA;QACE,MAAMP,CAAA,GAAe,UAAOI,CAAA,YAAAQ,MAAA,CAAgBR,CAAA,SAAU;UAChDH,CAAA,GACW,UAAfQ,CAAA,QAAKI,UAAA,UAAU,MAAAJ,CAAA,YAAAA,CAAA,CAAEK,aAAA,CAA+Bd,CAAA;QAClD,OAAkD,UAA3CO,CAAA,WAAAN,CAAA,YAAAA,CAAA,CAAQc,aAAA,CAAcZ,CAAA,WAAqB,MAAAI,CAAA,GAAAA,CAAA,GAAI,EACvD;MAAA;MACDS,UAAA,GAAY;MACZC,YAAA,GAAc;IAAA;EAAA,EAGpB;AAAA;AAAA,SAAAjB,CAAA,IAAAkB,kBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}