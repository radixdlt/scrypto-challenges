{"ast":null,"code":"\"use strict\";\n\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.byteSwap32 = exports.byteSwapIfBE = exports.byteSwap = exports.isLE = exports.rotl = exports.rotr = exports.createView = exports.u32 = exports.u8 = exports.isBytes = void 0;\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\nconst _assert_js_1 = require(\"./_assert.js\");\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nfunction isBytes(a) {\n  return a instanceof Uint8Array || a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array';\n}\nexports.isBytes = isBytes;\n// Cast array to different type\nconst u8 = arr => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = arr => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = arr => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => word << 32 - shift | word >>> shift;\nexports.rotr = rotr;\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => word << shift | word >>> 32 - shift >>> 0;\nexports.rotl = rotl;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nconst byteSwap = word => word << 24 & 0xff000000 | word << 8 & 0xff0000 | word >>> 8 & 0xff00 | word >>> 24 & 0xff;\nexports.byteSwap = byteSwap;\n// Conditionally byte swap if on a big-endian platform\nexports.byteSwapIfBE = exports.isLE ? n => n : n => (0, exports.byteSwap)(n);\n// In place byte swap for Uint32Array\nfunction byteSwap32(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = (0, exports.byteSwap)(arr[i]);\n  }\n}\nexports.byteSwap32 = byteSwap32;\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */Array.from({\n  length: 256\n}, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n  (0, _assert_js_1.bytes)(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\nexports.bytesToHex = bytesToHex;\n// We use optimized technique to convert hex string to byte array\nconst asciis = {\n  _0: 48,\n  _9: 57,\n  _A: 65,\n  _F: 70,\n  _a: 97,\n  _f: 102\n};\nfunction asciiToBase16(char) {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => {};\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await (0, exports.nextTick)();\n    ts += diff;\n  }\n}\nexports.asyncLoop = asyncLoop;\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\nexports.utf8ToBytes = utf8ToBytes;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  (0, _assert_js_1.bytes)(data);\n  return data;\n}\nexports.toBytes = toBytes;\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    (0, _assert_js_1.bytes)(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n  // Safe version that clones internal state\n  clone() {\n    return this._cloneInto();\n  }\n}\nexports.Hash = Hash;\nconst toStr = {}.toString;\nfunction checkOpts(defaults, opts) {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]') throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashCons) {\n  const hashC = msg => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n  const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({});\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = opts => hashCons(opts);\n  return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\nfunction wrapXOFConstructorWithOpts(hashCons) {\n  const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({});\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = opts => hashCons(opts);\n  return hashC;\n}\nexports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n  if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === 'function') {\n    return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\nexports.randomBytes = randomBytes;","map":{"version":3,"names":["crypto_1","require","_assert_js_1","isBytes","a","Uint8Array","constructor","name","exports","u8","arr","buffer","byteOffset","byteLength","u32","Uint32Array","Math","floor","createView","DataView","rotr","word","shift","rotl","isLE","byteSwap","byteSwapIfBE","n","byteSwap32","i","length","hexes","Array","from","_","toString","padStart","bytesToHex","bytes","hex","asciis","_0","_9","_A","_F","_a","_f","asciiToBase16","char","hexToBytes","Error","hl","al","array","ai","hi","n1","charCodeAt","n2","undefined","nextTick","asyncLoop","iters","tick","cb","ts","Date","now","diff","utf8ToBytes","str","TextEncoder","encode","toBytes","data","concatBytes","arrays","sum","res","pad","set","Hash","clone","_cloneInto","toStr","checkOpts","defaults","opts","call","merged","Object","assign","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","outputLen","blockLen","create","wrapConstructorWithOpts","wrapXOFConstructorWithOpts","randomBytes","bytesLength","crypto","getRandomValues"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@noble/hashes/src/utils.ts"],"sourcesContent":["/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word: number, shift: number) =>\n  (word << shift) | ((word >>> (32 - shift)) >>> 0);\n\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word: number) =>\n  ((word << 24) & 0xff000000) |\n  ((word << 8) & 0xff0000) |\n  ((word >>> 8) & 0xff00) |\n  ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n: number) => n : (n: number) => byteSwap(n);\n\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr: Uint32Array) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}