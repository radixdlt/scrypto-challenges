{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.openApiClient = void 0;\nrequire(\"isomorphic-fetch\");\nconst util_1 = require(\"../../util\");\nconst uuid_1 = require(\"uuid\");\nconst neverthrow_1 = require(\"neverthrow\");\nconst ramda_1 = require(\"ramda\");\nconst _1 = require(\".\");\nconst open_api_1 = require(\"./open-api\");\nconst defaultHeaders = ['X-Radixdlt-Method', 'X-Radixdlt-Correlation-Id', 'X-Radixdlt-Target-Gw-Api'];\nconst correlationID = (0, uuid_1.v4)();\nconst handleError = error => {\n  var _a, _b;\n  util_1.log.debug(error);\n  if (error.isAxiosError && ((_a = error.response) === null || _a === void 0 ? void 0 : _a.data)) {\n    return (0, neverthrow_1.err)(Object.assign({\n      code: (_b = error.response.data.code) !== null && _b !== void 0 ? _b : error.response.status\n    }, typeof error.response.data === 'object' ? error.response.data : {\n      message: error.response.data\n    }));\n  } else {\n    return (0, neverthrow_1.err)({\n      message: error.message\n    });\n  }\n};\nconst call = client => (method, params, headers) =>\n// @ts-ignore\n(0, ramda_1.pipe)(() => util_1.log.info(\"Sending api request with method \".concat(method, \". \").concat(JSON.stringify(params, null, 2))), () => neverthrow_1.ResultAsync.fromPromise(\n// @ts-ignore\nclient[method](params, {\n  headers: Object.assign({\n    [defaultHeaders[0]]: method,\n    [defaultHeaders[1]]: correlationID,\n    [defaultHeaders[2]]: _1.apiVersion\n  }, headers)\n}).then(response => {\n  util_1.log.info(\"Response from api with method \".concat(method), JSON.stringify(response.data, null, 2));\n  return response;\n}),\n// @ts-ignore\nhandleError))();\nconst openApiClient = url => {\n  const configuration = new open_api_1.Configuration({\n    basePath: url.toString().slice(0, -1)\n  });\n  const api = [_1.AccountApiFactory, _1.ValidatorApiFactory, _1.TransactionApiFactory, _1.TokenApiFactory, _1.StatusApiFactory].reduce((acc, factory) => Object.assign(Object.assign({}, acc), factory(configuration)), {});\n  return {\n    type: 'open-api',\n    call: call(api)\n  };\n};\nexports.openApiClient = openApiClient;","map":{"version":3,"names":["require","util_1","uuid_1","neverthrow_1","ramda_1","_1","open_api_1","defaultHeaders","correlationID","v4","handleError","error","log","debug","isAxiosError","_a","response","data","err","Object","assign","code","_b","status","message","call","client","method","params","headers","pipe","info","concat","JSON","stringify","ResultAsync","fromPromise","apiVersion","then","openApiClient","url","configuration","Configuration","basePath","toString","slice","api","AccountApiFactory","ValidatorApiFactory","TransactionApiFactory","TokenApiFactory","StatusApiFactory","reduce","acc","factory","type","exports"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/networking/src/open-api-client.ts"],"sourcesContent":["import 'isomorphic-fetch'\nimport { log } from '../../util'\nimport { v4 as uuid } from 'uuid'\nimport { Client } from './_types'\nimport { err, ok, ResultAsync } from 'neverthrow'\nimport { pipe } from 'ramda'\nimport { TransactionBuildResponse } from './open-api/api'\nimport {\n\tapiVersion,\n\tAccountApiFactory,\n\tValidatorApiFactory,\n\tTransactionApiFactory,\n\tTokenApiFactory,\n\tStatusApiFactory,\n} from '.'\nimport { AxiosResponse, AxiosError } from 'axios'\nimport { Configuration } from './open-api'\n\nconst defaultHeaders = [\n\t'X-Radixdlt-Method',\n\t'X-Radixdlt-Correlation-Id',\n\t'X-Radixdlt-Target-Gw-Api',\n]\n\nconst correlationID = uuid()\n\nexport type ReturnOfAPICall<\n\tName extends MethodName\n> = Name extends 'transactionBuildPost'\n\t? AxiosResponse<TransactionBuildResponse>\n\t: Awaited<ReturnType<ClientInterface[Name]>>\n\nexport type InputOfAPICall<Name extends MethodName> = Parameters<\n\tClientInterface[Name]\n>[0]\n\nexport type ClientInterface = ReturnType<typeof AccountApiFactory> &\n\tReturnType<typeof ValidatorApiFactory> &\n\tReturnType<typeof TransactionApiFactory> &\n\tReturnType<typeof TokenApiFactory> &\n\tReturnType<typeof StatusApiFactory>\n\nexport type MethodName = keyof ClientInterface\nexport type Response = ReturnOfAPICall<MethodName>\n\nconst handleError = (error: AxiosError) => {\n\tlog.debug(error)\n\tif (error.isAxiosError && error.response?.data) {\n\t\treturn err({\n\t\t\tcode: error.response.data.code ?? error.response.status,\n\t\t\t...(typeof error.response.data === 'object'\n\t\t\t\t? error.response.data\n\t\t\t\t: { message: error.response.data }),\n\t\t})\n\t} else {\n\t\treturn err({ message: error.message })\n\t}\n}\n\nconst call = (client: ClientInterface) => <M extends MethodName>(\n\tmethod: M,\n\tparams: InputOfAPICall<M>,\n\theaders?: Record<string, string>,\n): ResultAsync<ReturnOfAPICall<M>, Error> =>\n\t// @ts-ignore\n\tpipe(\n\t\t() =>\n\t\t\tlog.info(\n\t\t\t\t`Sending api request with method ${method}. ${JSON.stringify(\n\t\t\t\t\tparams,\n\t\t\t\t\tnull,\n\t\t\t\t\t2,\n\t\t\t\t)}`,\n\t\t\t),\n\t\t() =>\n\t\t\tResultAsync.fromPromise(\n\t\t\t\t// @ts-ignore\n\t\t\t\tclient[method](params, {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t[defaultHeaders[0]]: method,\n\t\t\t\t\t\t[defaultHeaders[1]]: correlationID,\n\t\t\t\t\t\t[defaultHeaders[2]]: apiVersion,\n\t\t\t\t\t\t...headers,\n\t\t\t\t\t},\n\t\t\t\t}).then(response => {\n\t\t\t\t\tlog.info(\n\t\t\t\t\t\t`Response from api with method ${method}`,\n\t\t\t\t\t\tJSON.stringify(response.data, null, 2),\n\t\t\t\t\t)\n\n\t\t\t\t\treturn response\n\t\t\t\t}),\n\t\t\t\t// @ts-ignore\n\t\t\t\thandleError,\n\t\t\t),\n\t)()\n\nexport type OpenApiClientCall = ReturnType<typeof call>\n\nexport const openApiClient: Client<'open-api'> = (url: URL) => {\n\tconst configuration = new Configuration({\n\t\tbasePath: url.toString().slice(0, -1),\n\t})\n\tconst api = [\n\t\tAccountApiFactory,\n\t\tValidatorApiFactory,\n\t\tTransactionApiFactory,\n\t\tTokenApiFactory,\n\t\tStatusApiFactory,\n\t].reduce<ClientInterface>(\n\t\t(acc, factory) => ({\n\t\t\t...acc,\n\t\t\t...factory(configuration),\n\t\t}),\n\t\t{} as ClientInterface,\n\t)\n\n\treturn {\n\t\ttype: 'open-api',\n\t\tcall: call(api),\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}