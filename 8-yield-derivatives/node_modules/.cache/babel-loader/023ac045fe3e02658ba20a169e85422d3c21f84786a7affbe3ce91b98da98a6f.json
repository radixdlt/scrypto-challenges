{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function observeOn(scheduler, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n  return function observeOnOperatorFunction(source) {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\nvar ObserveOnOperator = /*@__PURE__*/function () {\n  function ObserveOnOperator(scheduler, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    this.scheduler = scheduler;\n    this.delay = delay;\n  }\n  ObserveOnOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  };\n  return ObserveOnOperator;\n}();\nexport { ObserveOnOperator };\nvar ObserveOnSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ObserveOnSubscriber, _super);\n  function ObserveOnSubscriber(destination, scheduler, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n    var _this = _super.call(this, destination) || this;\n    _this.scheduler = scheduler;\n    _this.delay = delay;\n    return _this;\n  }\n  ObserveOnSubscriber.dispatch = function (arg) {\n    var notification = arg.notification,\n      destination = arg.destination;\n    notification.observe(destination);\n    this.unsubscribe();\n  };\n  ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n    var destination = this.destination;\n    destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n  };\n  ObserveOnSubscriber.prototype._next = function (value) {\n    this.scheduleMessage(Notification.createNext(value));\n  };\n  ObserveOnSubscriber.prototype._error = function (err) {\n    this.scheduleMessage(Notification.createError(err));\n    this.unsubscribe();\n  };\n  ObserveOnSubscriber.prototype._complete = function () {\n    this.scheduleMessage(Notification.createComplete());\n    this.unsubscribe();\n  };\n  return ObserveOnSubscriber;\n}(Subscriber);\nexport { ObserveOnSubscriber };\nvar ObserveOnMessage = /*@__PURE__*/function () {\n  function ObserveOnMessage(notification, destination) {\n    this.notification = notification;\n    this.destination = destination;\n  }\n  return ObserveOnMessage;\n}();\nexport { ObserveOnMessage };","map":{"version":3,"names":["tslib_1","Subscriber","Notification","observeOn","scheduler","delay","observeOnOperatorFunction","source","lift","ObserveOnOperator","subscribe","ObserveOnSubscriber","subscriber","_super","__extends","_this","call","destination","dispatch","arg","notification","observe","unsubscribe","prototype","scheduleMessage","add","schedule","ObserveOnMessage","_next","value","createNext","_error","err","createError","_complete","createComplete"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/observeOn.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Notification } from '../Notification';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n * Ensure values in subscribe are called just before browser repaint.\n * ```ts\n * import { interval } from 'rxjs';\n * import { observeOn } from 'rxjs/operators';\n *\n * const intervals = interval(10);                // Intervals are scheduled\n *                                                // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler),          // ...but we will observe on animationFrame\n * )                                              // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: SchedulerLike, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  /** @nocollapse */\n  static dispatch(this: SchedulerAction<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: SchedulerLike,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    const destination = this.destination as Subscription;\n    destination.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n    this.unsubscribe();\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n"],"mappings":";AAEA,OAAO,KAAEA,OAAU,MAAE,OAAM;AAE3B,SAASC,UAAA,QAAc,eAAM;AAuD7B,SAAMC,YAAU,QAAa,iBAA2C;OAAjB,SAAAC,UAAAC,SAAA,EAAiBC,KAAA;EACtE,IAAAA,KAAO,UAAS;IACdA,KAAA,GAAO;EACT;EACD,gBAAAC,0BAAAC,MAAA;IAED,OAAAA,MAAA,CAAAC,IAAA,KAAAC,iBAAA,CAAAL,SAAA,EAAAC,KAAA;EACE;;qBAAoB,GAAS,aAAe;WAAUI,iBAAiBA,CAAAL,SAAA,EAAAC,KAAA;IACtE,IAAAA,KAAA;MAEDA,KAAA;IACE;IACD,KAAAD,SAAA,GAAAA,SAAA;IACH,KAAAC,KAAA,GAAAA,KAAA;EAPA;;IAcA,OAAAE,MAAA,CAAAG,SAAA,KAAAC,mBAAA,CAAAC,UAAA,OAAAR,SAAA,OAAAC,KAAA;EAA4C;EAQ1C,OAAAI,iBAAA;;SAAAA,iBAGE;uBAF2B,GAAT,aAAwB,UAAAI,MAAA;SACxB,CAAAC,SAAK,CAALH,mBAAiB,EAAAE,MAAA;;IAEpC,IAAAR,KAAA;MAVMA,KAAA;IACG;IACR,IAAAU,KAAA,GAAYF,MAAC,CAAAG,IAAQ,OAAAC,WAAa;IAClCF,KAAK,CAAAX,SAAA,GAAaA,SAAC;IACpBW,KAAA,CAAAV,KAAA,GAAAA,KAAA;IAQO,OAAAU,KAAA;;qBAES,CAACG,QAAK,aAAUC,GAC7B;IAIH,IAAAC,YAAA,GAAAD,GAAA,CAAAC,YAAA;MAAAH,WAAA,GAAAE,GAAA,CAAAF,WAAA;IAESG,YAAA,CAAAC,OAAA,CAAAJ,WAAK;IACb,IAAI,CAACK,WAAA;EACP,CAAC;EAESX,mBAAA,CAAAY,SAAA,CAAAC,eAAV,aAAyBJ,YAAA;IACvB,IAAIH,WAAC,OAAgB,CAAAA,WAAa;IAClCA,WAAK,CAAAQ,GAAA,CAAW,IAAG,CAAArB,SAAA,CAAAsB,QAAA,CAAAf,mBAAA,CAAAO,QAAA,OAAAb,KAAA,MAAAsB,gBAAA,CAAAP,YAAA,OAAAH,WAAA;EACrB,CAAC;EAESN,mBAAA,CAAAY,SAAA,CAAAK,KAAA,aAAVC,KAAA;IACE,IAAI,CAACL,eAAe,CAACtB,YAAY,CAAC4B,UAAA,CAAAD,KAAgB,CAAC,CAAC;;EAEtDlB,mBAAC,CAAAY,SAAA,CAAAQ,MAAA,aAAAC,GAAA;IACH,KAAAR,eAAA,CAAAtB,YAAC,CAAA+B,WAAA,CAAAD,GAAA;IApC2C,IAAU,CAAAV,WAoCrD;;EAEDX,mBAAA,CAAAY,SAAA,CAAAW,SAAA;IACE,KAAAV,eAAA,CAAAtB,YAAmB,CAA+BiC,cACE;IADjC,KAAAb,WAAA,CAAY;;EAE/B,OAACX,mBAAA;YACH;AAAA,SAACA,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}