{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport _isFunction from \"./internal/_isFunction.js\";\nimport _isString from \"./internal/_isString.js\";\nimport toString from \"./toString.js\";\n/**\n * Returns the result of concatenating the given lists or strings.\n *\n * Note: `R.concat` expects both arguments to be of the same type,\n * unlike the native `Array.prototype.concat` method. It will throw\n * an error if you `concat` an Array with a non-Array value.\n *\n * Dispatches to the `concat` method of the first argument, if present.\n * Can also concatenate two members of a [fantasy-land\n * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @sig String -> String -> String\n * @param {Array|String} firstList The first list\n * @param {Array|String} secondList The second list\n * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\n * `secondList`.\n *\n * @example\n *\n *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n *      R.concat([], []); //=> []\n */\n\nvar concat = /*#__PURE__*/\n_curry2(function concat(a, b) {\n  if (_isArray(a)) {\n    if (_isArray(b)) {\n      return a.concat(b);\n    }\n    throw new TypeError(toString(b) + ' is not an array');\n  }\n  if (_isString(a)) {\n    if (_isString(b)) {\n      return a + b;\n    }\n    throw new TypeError(toString(b) + ' is not a string');\n  }\n  if (a != null && _isFunction(a['fantasy-land/concat'])) {\n    return a['fantasy-land/concat'](b);\n  }\n  if (a != null && _isFunction(a.concat)) {\n    return a.concat(b);\n  }\n  throw new TypeError(toString(a) + ' does not have a method named \"concat\" or \"fantasy-land/concat\"');\n});\nexport default concat;","map":{"version":3,"names":["_curry2","_isArray","_isFunction","_isString","toString","concat","a","b","TypeError"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/ramda/es/concat.js"],"sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport _isFunction from \"./internal/_isFunction.js\";\nimport _isString from \"./internal/_isString.js\";\nimport toString from \"./toString.js\";\n/**\n * Returns the result of concatenating the given lists or strings.\n *\n * Note: `R.concat` expects both arguments to be of the same type,\n * unlike the native `Array.prototype.concat` method. It will throw\n * an error if you `concat` an Array with a non-Array value.\n *\n * Dispatches to the `concat` method of the first argument, if present.\n * Can also concatenate two members of a [fantasy-land\n * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @sig String -> String -> String\n * @param {Array|String} firstList The first list\n * @param {Array|String} secondList The second list\n * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\n * `secondList`.\n *\n * @example\n *\n *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n *      R.concat([], []); //=> []\n */\n\nvar concat =\n/*#__PURE__*/\n_curry2(function concat(a, b) {\n  if (_isArray(a)) {\n    if (_isArray(b)) {\n      return a.concat(b);\n    }\n\n    throw new TypeError(toString(b) + ' is not an array');\n  }\n\n  if (_isString(a)) {\n    if (_isString(b)) {\n      return a + b;\n    }\n\n    throw new TypeError(toString(b) + ' is not a string');\n  }\n\n  if (a != null && _isFunction(a['fantasy-land/concat'])) {\n    return a['fantasy-land/concat'](b);\n  }\n\n  if (a != null && _isFunction(a.concat)) {\n    return a.concat(b);\n  }\n\n  throw new TypeError(toString(a) + ' does not have a method named \"concat\" or \"fantasy-land/concat\"');\n});\n\nexport default concat;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,QAAQ,MAAM,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,MAAM,GACV;AACAL,OAAO,CAAC,SAASK,MAAMA,CAACC,CAAC,EAAEC,CAAC,EAAE;EAC5B,IAAIN,QAAQ,CAACK,CAAC,CAAC,EAAE;IACf,IAAIL,QAAQ,CAACM,CAAC,CAAC,EAAE;MACf,OAAOD,CAAC,CAACD,MAAM,CAACE,CAAC,CAAC;IACpB;IAEA,MAAM,IAAIC,SAAS,CAACJ,QAAQ,CAACG,CAAC,CAAC,GAAG,kBAAkB,CAAC;EACvD;EAEA,IAAIJ,SAAS,CAACG,CAAC,CAAC,EAAE;IAChB,IAAIH,SAAS,CAACI,CAAC,CAAC,EAAE;MAChB,OAAOD,CAAC,GAAGC,CAAC;IACd;IAEA,MAAM,IAAIC,SAAS,CAACJ,QAAQ,CAACG,CAAC,CAAC,GAAG,kBAAkB,CAAC;EACvD;EAEA,IAAID,CAAC,IAAI,IAAI,IAAIJ,WAAW,CAACI,CAAC,CAAC,qBAAqB,CAAC,CAAC,EAAE;IACtD,OAAOA,CAAC,CAAC,qBAAqB,CAAC,CAACC,CAAC,CAAC;EACpC;EAEA,IAAID,CAAC,IAAI,IAAI,IAAIJ,WAAW,CAACI,CAAC,CAACD,MAAM,CAAC,EAAE;IACtC,OAAOC,CAAC,CAACD,MAAM,CAACE,CAAC,CAAC;EACpB;EAEA,MAAM,IAAIC,SAAS,CAACJ,QAAQ,CAACE,CAAC,CAAC,GAAG,iEAAiE,CAAC;AACtG,CAAC,CAAC;AAEF,eAAeD,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}