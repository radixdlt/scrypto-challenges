{"ast":null,"code":"/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nexport function range(start, count, scheduler) {\n  if (start === void 0) {\n    start = 0;\n  }\n  return new Observable(function (subscriber) {\n    if (count === undefined) {\n      count = start;\n      start = 0;\n    }\n    var index = 0;\n    var current = start;\n    if (scheduler) {\n      return scheduler.schedule(dispatch, 0, {\n        index: index,\n        count: count,\n        start: start,\n        subscriber: subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(current++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n    return undefined;\n  });\n}\nexport function dispatch(state) {\n  var start = state.start,\n    index = state.index,\n    count = state.count,\n    subscriber = state.subscriber;\n  if (index >= count) {\n    subscriber.complete();\n    return;\n  }\n  subscriber.next(start);\n  if (subscriber.closed) {\n    return;\n  }\n  state.index = index + 1;\n  state.start = start + 1;\n  this.schedule(state);\n}","map":{"version":3,"names":["Observable","range","start","count","scheduler","subscriber","undefined","index","schedule","dispatch","complete","next","current","closed","state"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/observable/range.ts"],"sourcesContent":["import { SchedulerAction, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\n\n/**\n * Creates an Observable that emits a sequence of numbers within a specified\n * range.\n *\n * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n *\n * ![](range.png)\n *\n * `range` operator emits a range of sequential integers, in order, where you\n * select the `start` of the range and its `length`. By default, uses no\n * {@link SchedulerLike} and just delivers the notifications synchronously, but may use\n * an optional {@link SchedulerLike} to regulate those deliveries.\n *\n * ## Example\n * Emits the numbers 1 to 10</caption>\n * ```ts\n * import { range } from 'rxjs';\n *\n * const numbers = range(1, 10);\n * numbers.subscribe(x => console.log(x));\n * ```\n * @see {@link timer}\n * @see {@link index/interval}\n *\n * @param {number} [start=0] The value of the first integer in the sequence.\n * @param {number} count The number of sequential integers to generate.\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emissions of the notifications.\n * @return {Observable} An Observable of numbers that emits a finite range of\n * sequential integers.\n * @static true\n * @name range\n * @owner Observable\n */\nexport function range(start: number = 0,\n                      count?: number,\n                      scheduler?: SchedulerLike): Observable<number> {\n  return new Observable<number>(subscriber => {\n    if (count === undefined) {\n      count = start;\n      start = 0;\n    }\n\n    let index = 0;\n    let current = start;\n\n    if (scheduler) {\n      return scheduler.schedule(dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(current++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n\n    return undefined;\n  });\n}\n\n/** @internal */\nexport function dispatch(this: SchedulerAction<any>, state: any) {\n  const { start, index, count, subscriber } = state;\n\n  if (index >= count) {\n    subscriber.complete();\n    return;\n  }\n\n  subscriber.next(start);\n\n  if (subscriber.closed) {\n    return;\n  }\n\n  state.index = index + 1;\n  state.start = start + 1;\n\n  this.schedule(state);\n}\n"],"mappings":"AACA;AAoCA,SAAMA,UAAU,QAAuB,eAEjB;OAFA,SAAAC,MAAAC,KAAA,EAAAC,KAAA,EAAAC,SAAiB;EAGrC,IAAAF,KAAO,KAAI,QAAmB;IAC5BA,KAAI,IAAK;;aAEPF,UAAU,WAAAK,UAAA;QACXF,KAAA,KAAAG,SAAA;MAEGH,KAAK,GAAGD,KAAE;MACVA,KAAA,GAAO;IAEX;QACEK,KAAA,GAAO;eACL,GAAKL,KAAA;iBACJ;MACJ,OAAAE,SAAA,CAAAI,QAAA,CAAAC,QAAA;QAAMF,KAAA,EAAAA,KAAA;QAAAJ,KAAA,EAAAA,KAAA;QAAAD,KAAA,EAAAA,KAAA;QAAAG,UAAA,EAAAA;MACL;;;YAIGE,KAAA,MAAAJ,KAAA;UACDE,UAAW,CAAIK,QAAQ,EAAE;UACrB;;kBAEH,CAAAC,IAAA,CAAAC,OAAA;QACF,IAAAP,UAAc,CAAAQ,MAAA;UAChB;QAEM;MACN;IACJ;IAGK,OAAAP,SAAkB;EACd;;gBAGNG,QAAWA,CAAAK,KAAW;MACtBZ,KAAA,GAAOY,KAAA,CAAAZ,KAAA;IAAAK,KAAA,GAAAO,KAAA,CAAAP,KAAA;IAAAJ,KAAA,GAAAW,KAAA,CAAAX,KAAA;IAAAE,UAAA,GAAAS,KAAA,CAAAT,UAAA;MACRE,KAAA,IAAAJ,KAAA;IAEDE,UAAW,CAAIK,QAAQ;IAEnB;;YAEH,CAAAC,IAAA,CAAAT,KAAA;EAED,IAAAG,UAAc,CAAAQ,MAAK,EAAI;IACvB;EAEA;EACDC,KAAA,CAAAP,KAAA,GAAAA,KAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}