{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nvar BehaviorSubject = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BehaviorSubject, _super);\n  function BehaviorSubject(_value) {\n    var _this = _super.call(this) || this;\n    _this._value = _value;\n    return _this;\n  }\n  Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n    get: function () {\n      return this.getValue();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  BehaviorSubject.prototype._subscribe = function (subscriber) {\n    var subscription = _super.prototype._subscribe.call(this, subscriber);\n    if (subscription && !subscription.closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  };\n  BehaviorSubject.prototype.getValue = function () {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  };\n  BehaviorSubject.prototype.next = function (value) {\n    _super.prototype.next.call(this, this._value = value);\n  };\n  return BehaviorSubject;\n}(Subject);\nexport { BehaviorSubject };","map":{"version":3,"names":["tslib_1","Subject","ObjectUnsubscribedError","BehaviorSubject","_super","__extends","_value","_this","call","prototype","get","getValue","configurable","_subscribe","subscriber","subscription","closed","next","hasError","thrownError","value"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/BehaviorSubject.ts"],"sourcesContent":["import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { SubscriptionLike } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * A variant of Subject that requires an initial value and emits its current\n * value whenever it is subscribed to.\n *\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<SubscriptionLike>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n"],"mappings":";AAAA,OAAO,KAAEA,OAAS,MAAM;AAIxB,SAASC,OAAA,mBAAyB;AAQlC,SAAAC,uBAAA;IAAwCC,eAAA,0BAAUC,MAAA;EAEhDJ,OAAA,CAAAK,SAAA,CAAAF,eAA6B,EAAAC,MAAA;WAA7BD,eACEA,CAAAG,MAAA,EAAO;IADW,IAAAC,KAAA,GAAMH,MAAN,CAAAI,IAAS;;IAE5B,OAAAD,KAAA;EAED;uBAAA,CAAAJ,eAAA,CAAAM,SAAA;SACE,SAAAC,CAAA,EAAY;MACb,YAAAC,QAAA;;;IAAAC,YAAA;EAGD;iBACQ,CAAAH,SAAe,CAAAI,UAAA,aAAMC,UAAU;IACrC,IAAIC,YAAY,GAAAX,MAAwB,CAAAK,SAAc,CAAAI,UAAQ,CAAAL,IAAA,OAAAM,UAAA;QAC5DC,YAAW,IAAK,CAAAA,YAAa,CAAAC,MAAA;MAC9BF,UAAA,CAAAG,IAAA,MAAAX,MAAA;IACD;IACD,OAAAS,YAAA;EAED;iBACW,CAAAN,SAAU,CAAAE,QAAA;QACjB,KAAAO,QAAW;MACZ,WAAAC,WAAA;WACC,QAAM,CAAIH,MAAA;MACX,UAAAd,uBAAA;WACC;MACD,YAAAI,MAAA;IACF;EAED;iBACE,CAAAG,SAAU,CAAAQ,IAAA,aAAMG,KAAM;IACvBhB,MAAA,CAAAK,SAAA,CAAAQ,IAAA,CAAAT,IAAA,YAAAF,MAAA,GAAAc,KAAA;EACH;EAhCwC,OAAOjB,eAgC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}