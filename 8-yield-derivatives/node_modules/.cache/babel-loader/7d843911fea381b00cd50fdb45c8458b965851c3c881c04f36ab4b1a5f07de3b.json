{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar operators_1 = require(\"rxjs/operators\");\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nfunction retry(count) {\n  if (count === void 0) {\n    count = -1;\n  }\n  return operators_1.retry(count)(this);\n}\nexports.retry = retry;","map":{"version":3,"names":["operators_1","require","retry","count","exports"],"sources":["../src/compat/operator/retry.ts"],"sourcesContent":[null],"mappings":";;;;;AACA,IAAAA,WAAA,GAAAC,OAAA;AAEA;;;;;;;;;;;;;;;;AAgBA,SAAgBC,KAAKA,CAAyBC,KAAkB;EAAlB,IAAAA,KAAA;IAAAA,KAAA,IAAiB,CAAC;EAAA;EAC9D,OAAOH,WAAA,CAAAE,KAAW,CAACC,KAAK,CAAC,CAAC,IAAI,CAAkB;AAClD;AAFAC,OAAA,CAAAF,KAAA,GAAAA,KAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}