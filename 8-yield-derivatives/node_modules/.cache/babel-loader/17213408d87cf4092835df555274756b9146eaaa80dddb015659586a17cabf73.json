{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.retryOnErrorCode = exports.hasRequiredProps = void 0;\nconst util_1 = require(\"@radixdlt/util\");\nconst neverthrow_1 = require(\"neverthrow\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst hasRequiredProps = (methodName, obj, props) => {\n  for (const prop of props) {\n    if (obj[prop] === undefined) {\n      return (0, neverthrow_1.err)([Error(\"Prop validation failed for \".concat(methodName, \" response. \").concat(prop, \" was undefined.\"))]);\n    }\n  }\n  return (0, neverthrow_1.ok)(obj);\n};\nexports.hasRequiredProps = hasRequiredProps;\nconst retryOnErrorCode = function () {\n  let {\n    maxRetryAttempts = 3,\n    scalingDuration = 1000,\n    errorCodes = []\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return attempts => attempts.pipe((0, operators_1.mergeMap)((_ref, i) => {\n    let {\n      error\n    } = _ref;\n    const retryAttempt = i + 1;\n    const foundErrorCode = errorCodes.some(e => e === error.code);\n    // if maximum number of retries have been met\n    // or response is a error code we don't wish to retry, throw error\n    if (retryAttempt > maxRetryAttempts || !foundErrorCode) {\n      return (0, rxjs_1.throwError)(() => error);\n    }\n    util_1.log.debug(\"Attempt \".concat(retryAttempt, \": retrying in \").concat(retryAttempt * scalingDuration, \"ms\"));\n    return (0, rxjs_1.timer)(retryAttempt * scalingDuration);\n  }));\n};\nexports.retryOnErrorCode = retryOnErrorCode;","map":{"version":3,"names":["util_1","require","neverthrow_1","rxjs_1","operators_1","hasRequiredProps","methodName","obj","props","prop","undefined","err","Error","concat","ok","exports","retryOnErrorCode","maxRetryAttempts","scalingDuration","errorCodes","arguments","length","attempts","pipe","mergeMap","_ref","i","error","retryAttempt","foundErrorCode","some","e","code","throwError","log","debug","timer"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/application/src/api/utils.ts"],"sourcesContent":["import { log } from '@radixdlt/util'\nimport { err, Result, ok } from 'neverthrow'\nimport { Observable, throwError, timer } from 'rxjs'\nimport { mergeMap } from 'rxjs/operators'\n\nexport const hasRequiredProps = <T extends Record<string, unknown>>(\n\tmethodName: string,\n\tobj: T,\n\tprops: string[],\n): Result<T, Error[]> => {\n\tfor (const prop of props) {\n\t\tif (obj[prop] === undefined) {\n\t\t\treturn err([\n\t\t\t\tError(\n\t\t\t\t\t`Prop validation failed for ${methodName} response. ${prop} was undefined.`,\n\t\t\t\t),\n\t\t\t])\n\t\t}\n\t}\n\treturn ok(obj)\n}\n\nexport const retryOnErrorCode = ({\n\tmaxRetryAttempts = 3,\n\tscalingDuration = 1000,\n\terrorCodes = [],\n}: {\n\tmaxRetryAttempts?: number\n\tscalingDuration?: number\n\terrorCodes?: number[]\n} = {}) => (attempts: Observable<{ error: { code: number } }>) =>\n\tattempts.pipe(\n\t\tmergeMap(({ error }, i) => {\n\t\t\tconst retryAttempt = i + 1\n\t\t\tconst foundErrorCode = errorCodes.some(e => e === error.code)\n\t\t\t// if maximum number of retries have been met\n\t\t\t// or response is a error code we don't wish to retry, throw error\n\t\t\tif (retryAttempt > maxRetryAttempts || !foundErrorCode) {\n\t\t\t\treturn throwError(() => error)\n\t\t\t}\n\t\t\tlog.debug(\n\t\t\t\t`Attempt ${retryAttempt}: retrying in ${\n\t\t\t\t\tretryAttempt * scalingDuration\n\t\t\t\t}ms`,\n\t\t\t)\n\t\t\treturn timer(retryAttempt * scalingDuration)\n\t\t}),\n\t)\n"],"mappings":";;;;;;AAAA,MAAAA,MAAA,GAAAC,OAAA;AACA,MAAAC,YAAA,GAAAD,OAAA;AACA,MAAAE,MAAA,GAAAF,OAAA;AACA,MAAAG,WAAA,GAAAH,OAAA;AAEO,MAAMI,gBAAgB,GAAGA,CAC/BC,UAAkB,EAClBC,GAAM,EACNC,KAAe,KACQ;EACvB,KAAK,MAAMC,IAAI,IAAID,KAAK,EAAE;IACzB,IAAID,GAAG,CAACE,IAAI,CAAC,KAAKC,SAAS,EAAE;MAC5B,OAAO,IAAAR,YAAA,CAAAS,GAAG,EAAC,CACVC,KAAK,+BAAAC,MAAA,CAC0BP,UAAU,iBAAAO,MAAA,CAAcJ,IAAI,oBAAiB,CAC3E,CACD,CAAC;;;EAGJ,OAAO,IAAAP,YAAA,CAAAY,EAAE,EAACP,GAAG,CAAC;AACf,CAAC;AAfYQ,OAAA,CAAAV,gBAAgB,GAAAA,gBAAA;AAiBtB,MAAMW,gBAAgB,GAAG,SAAAA,CAAA;EAAA,IAAC;IAChCC,gBAAgB,GAAG,CAAC;IACpBC,eAAe,GAAG,IAAI;IACtBC,UAAU,GAAG;EAAE,IAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAV,SAAA,GAAAU,SAAA,MAKZ,EAAE;EAAA,OAAME,QAAiD,IAC5DA,QAAQ,CAACC,IAAI,CACZ,IAAAnB,WAAA,CAAAoB,QAAQ,EAAC,CAAAC,IAAA,EAAYC,CAAC,KAAI;IAAA,IAAhB;MAAEC;IAAK,CAAE,GAAAF,IAAA;IAClB,MAAMG,YAAY,GAAGF,CAAC,GAAG,CAAC;IAC1B,MAAMG,cAAc,GAAGV,UAAU,CAACW,IAAI,CAACC,CAAC,IAAIA,CAAC,KAAKJ,KAAK,CAACK,IAAI,CAAC;IAC7D;IACA;IACA,IAAIJ,YAAY,GAAGX,gBAAgB,IAAI,CAACY,cAAc,EAAE;MACvD,OAAO,IAAA1B,MAAA,CAAA8B,UAAU,EAAC,MAAMN,KAAK,CAAC;;IAE/B3B,MAAA,CAAAkC,GAAG,CAACC,KAAK,YAAAtB,MAAA,CACGe,YAAY,oBAAAf,MAAA,CACtBe,YAAY,GAAGV,eAChB,OAAI,CACJ;IACD,OAAO,IAAAf,MAAA,CAAAiC,KAAK,EAACR,YAAY,GAAGV,eAAe,CAAC;EAC7C,CAAC,CAAC,CACF;AAAA;AAzBWH,OAAA,CAAAC,gBAAgB,GAAAA,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}