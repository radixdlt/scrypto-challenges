{"ast":null,"code":"import { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function window(windowBoundaries) {\n  return operate(function (source, subscriber) {\n    var windowSubject = new Subject();\n    subscriber.next(windowSubject.asObservable());\n    var errorHandler = function (err) {\n      windowSubject.error(err);\n      subscriber.error(err);\n    };\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      return windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.next(value);\n    }, function () {\n      windowSubject.complete();\n      subscriber.complete();\n    }, errorHandler));\n    windowBoundaries.subscribe(new OperatorSubscriber(subscriber, function () {\n      windowSubject.complete();\n      subscriber.next(windowSubject = new Subject());\n    }, noop, errorHandler));\n    return function () {\n      windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.unsubscribe();\n      windowSubject = null;\n    };\n  });\n}","map":{"version":3,"names":["Subject","operate","OperatorSubscriber","noop","window","windowBoundaries","source","subscriber","windowSubject","next","asObservable","errorHandler","err","error","subscribe","value","complete","unsubscribe"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/rxjs/src/internal/operators/window.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * ![](window.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * ## Example\n * In every window of 1 second each, emit at most 2 click events\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { window, mergeAll, map, take } from 'rxjs/operators';\n *\n *  const clicks = fromEvent(document, 'click');\n *  const sec = interval(1000);\n *  const result = clicks.pipe(\n *      window(sec),\n *      map(win => win.pipe(take(2))), // each window has at most 2 emissions\n *      mergeAll(),              // flatten the Observable-of-Observables\n *  );\n *  result.subscribe(x => console.log(x));\n * ```\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return A function that returns an Observable of windows, which are\n * Observables emitting values of the source Observable.\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return operate((source, subscriber) => {\n    let windowSubject: Subject<T> = new Subject<T>();\n\n    subscriber.next(windowSubject.asObservable());\n\n    const errorHandler = (err: any) => {\n      windowSubject.error(err);\n      subscriber.error(err);\n    };\n\n    // Subscribe to our source\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => windowSubject?.next(value),\n        () => {\n          windowSubject.complete();\n          subscriber.complete();\n        },\n        errorHandler\n      )\n    );\n\n    // Subscribe to the window boundaries.\n    windowBoundaries.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        () => {\n          windowSubject.complete();\n          subscriber.next((windowSubject = new Subject()));\n        },\n        noop,\n        errorHandler\n      )\n    );\n\n    return () => {\n      // Unsubscribing the subject ensures that anyone who has captured\n      // a reference to this window that tries to use it after it can\n      // no longer get values from the source will get an ObjectUnsubscribedError.\n      windowSubject?.unsubscribe();\n      windowSubject = null!;\n    };\n  });\n}\n"],"mappings":"AAEA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,IAAI,QAAQ,cAAc;AA2CnC,OAAM,SAAUC,MAAMA,CAAIC,gBAAiC;EACzD,OAAOJ,OAAO,CAAC,UAACK,MAAM,EAAEC,UAAU;IAChC,IAAIC,aAAa,GAAe,IAAIR,OAAO,EAAK;IAEhDO,UAAU,CAACE,IAAI,CAACD,aAAa,CAACE,YAAY,EAAE,CAAC;IAE7C,IAAMC,YAAY,GAAG,SAAAA,CAACC,GAAQ;MAC5BJ,aAAa,CAACK,KAAK,CAACD,GAAG,CAAC;MACxBL,UAAU,CAACM,KAAK,CAACD,GAAG,CAAC;IACvB,CAAC;IAGDN,MAAM,CAACQ,SAAS,CACd,IAAIZ,kBAAkB,CACpBK,UAAU,EACV,UAACQ,KAAK;MAAK,OAAAP,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEC,IAAI,CAACM,KAAK,CAAC;IAA1B,CAA0B,EACrC;MACEP,aAAa,CAACQ,QAAQ,EAAE;MACxBT,UAAU,CAACS,QAAQ,EAAE;IACvB,CAAC,EACDL,YAAY,CACb,CACF;IAGDN,gBAAgB,CAACS,SAAS,CACxB,IAAIZ,kBAAkB,CACpBK,UAAU,EACV;MACEC,aAAa,CAACQ,QAAQ,EAAE;MACxBT,UAAU,CAACE,IAAI,CAAED,aAAa,GAAG,IAAIR,OAAO,EAAG,CAAC;IAClD,CAAC,EACDG,IAAI,EACJQ,YAAY,CACb,CACF;IAED,OAAO;MAILH,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAES,WAAW,EAAE;MAC5BT,aAAa,GAAG,IAAK;IACvB,CAAC;EACH,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}