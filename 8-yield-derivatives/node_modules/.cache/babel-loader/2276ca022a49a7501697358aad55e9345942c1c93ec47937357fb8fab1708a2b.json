{"ast":null,"code":"/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */\nimport { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n  var config;\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    config = configOrBufferSize;\n  } else {\n    config = {\n      bufferSize: configOrBufferSize,\n      windowTime: windowTime,\n      refCount: false,\n      scheduler: scheduler\n    };\n  }\n  return function (source) {\n    return source.lift(shareReplayOperator(config));\n  };\n}\nfunction shareReplayOperator(_a) {\n  var _b = _a.bufferSize,\n    bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b,\n    _c = _a.windowTime,\n    windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c,\n    useRefCount = _a.refCount,\n    scheduler = _a.scheduler;\n  var subject;\n  var refCount = 0;\n  var subscription;\n  var hasError = false;\n  var isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n    var innerSub;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n      innerSub = subject.subscribe(this);\n      subscription = source.subscribe({\n        next: function (value) {\n          subject.next(value);\n        },\n        error: function (err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete: function () {\n          isComplete = true;\n          subscription = undefined;\n          subject.complete();\n        }\n      });\n      if (isComplete) {\n        subscription = undefined;\n      }\n    } else {\n      innerSub = subject.subscribe(this);\n    }\n    this.add(function () {\n      refCount--;\n      innerSub.unsubscribe();\n      innerSub = undefined;\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\n        subscription.unsubscribe();\n        subscription = undefined;\n        subject = undefined;\n      }\n    });\n  };\n}","map":{"version":3,"names":["ReplaySubject","shareReplay","configOrBufferSize","windowTime","scheduler","config","bufferSize","refCount","source","lift","shareReplayOperator","_a","_b","Number","POSITIVE_INFINITY","_c","useRefCount","subject","subscription","hasError","isComplete","shareReplayOperation","innerSub","subscribe","next","value","error","err","complete","undefined","add","unsubscribe"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/radixdlt/node_modules/rxjs/src/internal/operators/shareReplay.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\n\nexport interface ShareReplayConfig {\n  bufferSize?: number;\n  windowTime?: number;\n  refCount: boolean;\n  scheduler?: SchedulerLike;\n}\n\n/**\n * Share source and replay specified number of emissions on subscription.\n *\n * This operator is a specialization of `replay` that connects to a source observable\n * and multicasts through a `ReplaySubject` constructed with the specified arguments.\n * A successfully completed source will stay cached in the `shareReplayed observable` forever,\n * but an errored source can be retried.\n *\n * ## Why use shareReplay?\n * You generally want to use `shareReplay` when you have side-effects or taxing computations\n * that you do not wish to be executed amongst multiple subscribers.\n * It may also be valuable in situations where you know you will have late subscribers to\n * a stream that need access to previously emitted values.\n * This ability to replay values on subscription is what differentiates {@link share} and `shareReplay`.\n *\n * ![](shareReplay.png)\n *\n * ## Example\n * ```ts\n * import { interval } from 'rxjs';\n * import { shareReplay, take } from 'rxjs/operators';\n *\n * const obs$ = interval(1000);\n * const shared$ = obs$.pipe(\n *   take(4),\n *   shareReplay(3)\n * );\n * shared$.subscribe(x => console.log('source A: ', x));\n * shared$.subscribe(y => console.log('source B: ', y));\n *\n * ```\n *\n * @see {@link publish}\n * @see {@link share}\n * @see {@link publishReplay}\n *\n * @param {Number} [bufferSize=Number.POSITIVE_INFINITY] Maximum element count of the replay buffer.\n * @param {Number} [windowTime=Number.POSITIVE_INFINITY] Maximum time length of the replay buffer in milliseconds.\n * @param {Scheduler} [scheduler] Scheduler where connected observers within the selector function\n * will be invoked on.\n * @return {Observable} An observable sequence that contains the elements of a sequence produced\n * by multicasting the source sequence within a selector function.\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(\n  config: ShareReplayConfig\n): MonoTypeOperatorFunction<T>;\nexport function shareReplay<T>(\n  bufferSize?: number,\n  windowTime?: number,\n  scheduler?: SchedulerLike\n): MonoTypeOperatorFunction<T>;\nexport function shareReplay<T>(\n  configOrBufferSize?: ShareReplayConfig | number,\n  windowTime?: number,\n  scheduler?: SchedulerLike\n): MonoTypeOperatorFunction<T> {\n  let config: ShareReplayConfig;\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    config = configOrBufferSize as ShareReplayConfig;\n  } else {\n    config = {\n      bufferSize: configOrBufferSize as number | undefined,\n      windowTime,\n      refCount: false,\n      scheduler,\n    };\n  }\n  return (source: Observable<T>) => source.lift(shareReplayOperator(config));\n}\n\nfunction shareReplayOperator<T>({\n  bufferSize = Number.POSITIVE_INFINITY,\n  windowTime = Number.POSITIVE_INFINITY,\n  refCount: useRefCount,\n  scheduler,\n}: ShareReplayConfig) {\n  let subject: ReplaySubject<T> | undefined;\n  let refCount = 0;\n  let subscription: Subscription | undefined;\n  let hasError = false;\n  let isComplete = false;\n\n  return function shareReplayOperation(\n    this: Subscriber<T>,\n    source: Observable<T>\n  ) {\n    refCount++;\n    let innerSub: Subscription;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n      innerSub = subject.subscribe(this);\n      subscription = source.subscribe({\n        next(value) {\n          subject.next(value);\n        },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subscription = undefined;\n          subject.complete();\n        },\n      });\n\n      // Here we need to check to see if the source synchronously completed. Although\n      // we're setting `subscription = undefined` in the completion handler, if the source\n      // is synchronous, that will happen *before* subscription is set by the return of\n      // the `subscribe` call.\n      if (isComplete) {\n        subscription = undefined;\n      }\n    } else {\n      innerSub = subject.subscribe(this);\n    }\n\n    this.add(() => {\n      refCount--;\n      innerSub.unsubscribe();\n      innerSub = undefined;\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\n        subscription.unsubscribe();\n        subscription = undefined;\n        subject = undefined;\n      }\n    });\n  };\n}\n"],"mappings":"AACA;AAiEA,SAAMA,aAAU,QACd,kBACA;OAGA,SAA8BC,YAAAC,kBAAA,EAAAC,UAAA,EAAAC,SAAA;EAC9B,IAAIC,MAAA;MACFH,kBAAS,WAAwCA,kBAAA;IAClDG,MAAA,GAAAH,kBAAA;SACC;UACE;MACAI,UAAU,EAAAJ,kBAAA;MACVC,UAAU,EAAAA,UAAK;MACfI,QAAA,EAAS;MACTH,SAAA,EAAAA;IACH;EACD;EACD,iBAAAI,MAAA;IAAA,OAAAA,MAAA,CAAAC,IAAA,CAAAC,mBAAA,CAAAL,MAAA;EAAA;AAED;SACEK,oBAAAC,EAAA;EAKA,IAAIC,EAAA,GAAAD,EAAqC,CAACL,UAAA;IAAAA,UAAA,GAAAM,EAAA,cAAAC,MAAA,CAAAC,iBAAA,GAAAF,EAAA;IAAAG,EAAA,GAAAJ,EAAA,CAAAR,UAAA;IAAAA,UAAA,GAAAY,EAAA,cAAAF,MAAA,CAAAC,iBAAA,GAAAC,EAAA;IAAAC,WAAA,GAAAL,EAAA,CAAAJ,QAAA;IAAAH,SAAA,GAAAO,EAAA,CAAAP,SAAA;EAC1C,IAAIa,OAAA;EACJ,IAAIV,QAAA,IAAsC;EAC1C,IAAIW,YAAW;EACf,IAAIC,QAAA,GAAU,KAAG;EAEjB,IAAAC,UAAO,GAAS;SAId,SAAWC,qBAAAb,MAAA;IACXD,QAAI;IACJ,IAAIe,QAAQ;QACV,CAAAL,OAAQ,IAAGE,QAAM;MACjBA,QAAO,GAAG,KAAI;MACdF,OAAA,GAAQ,IAAGjB,aAAQ,CAASM,UAAO,EAAAH,UAAA,EAAAC,SAAA;MACnCkB,QAAA,GAAAL,OAAe,CAAAM,SAAO,KAAU;kBAC1B,GAAAf,MAAC,CAAAe,SAAK;YACR,WAAAC,CAAYC,KAAC,EAAM;UACpBR,OAAA,CAAAO,IAAA,CAAAC,KAAA;QACD;aACE,WAAAC,CAAWC,GAAK;UAChBR,QAAQ,OAAM;UACfF,OAAA,CAAAS,KAAA,CAAAC,GAAA;QACD;gBACE,WAAAC,CAAA,EAAkB;UAClBR,UAAA,GAAY,IAAG;UACfF,YAAQ,GAAAW,SAAW;UACpBZ,OAAA,CAAAW,QAAA;QACA;MAMH;UACER,UAAA,EAAY;QACbF,YAAA,GAAAW,SAAA;MACF;WACC;MACDP,QAAA,GAAAL,OAAA,CAAAM,SAAA;IAED;QACE,CAAAO,GAAA,aAAW;MACXvB,QAAQ,EAAC;MACTe,QAAQ,CAAAS,WAAY,CAAC;MACrBT,QAAI,GAAAO,SAAgB;UAClBX,YAAY,IAAC,CAAAE,UAAc,IAAAJ,WAAA,IAAAT,QAAA;QAC3BW,YAAY,CAAAa,WAAY,CAAC;QACzBb,YAAU,GAAAW,SAAU;QACrBZ,OAAA,GAAAY,SAAA;MACA;IACH;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}