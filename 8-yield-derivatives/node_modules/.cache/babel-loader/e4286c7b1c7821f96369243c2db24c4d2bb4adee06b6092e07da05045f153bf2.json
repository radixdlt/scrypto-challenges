{"ast":null,"code":"'use strict';\n\nconst stream = require('stream');\nconst util = require('util');\nconst utils = require('./utils');\nconst Simple = require('./simple');\nconst Decoder = require('./decoder');\nconst constants = require('./constants');\nconst bignumber = require('bignumber.js').BigNumber;\nconst NoFilter = require('nofilter');\nconst MT = constants.MT;\nconst NUMBYTES = constants.NUMBYTES;\nconst SYMS = constants.SYMS;\nfunction plural(c) {\n  if (c > 1) {\n    return 's';\n  } else {\n    return '';\n  }\n}\n\n/**\n * Generate the expanded format of RFC 7049, section 2.2.1\n *\n * @extends {stream.Transform}\n */\nclass Commented extends stream.Transform {\n  /**\n   * Create a CBOR commenter.\n   *\n   * @param {object} [options={}] - Stream options\n   * @param {number} [options.max_depth=10] - how many times to indent\n   *   the dashes\n   */\n  constructor(options) {\n    const opts = Object.assign({\n      max_depth: 10\n    }, options, {\n      readableObjectMode: false,\n      writableObjectMode: false\n    });\n    const max_depth = opts.max_depth;\n    delete opts.max_depth;\n    super(opts);\n    this.depth = 1;\n    this.max_depth = max_depth;\n    this.all = new NoFilter();\n    this.parser = new Decoder(opts);\n    this.parser.on('value', this._on_value.bind(this));\n    this.parser.on('start', this._on_start.bind(this));\n    this.parser.on('start-string', this._on_start_string.bind(this));\n    this.parser.on('stop', this._on_stop.bind(this));\n    this.parser.on('more-bytes', this._on_more.bind(this));\n    this.parser.on('error', this._on_error.bind(this));\n    this.parser.on('data', this._on_data.bind(this));\n    this.parser.bs.on('read', this._on_read.bind(this));\n  }\n\n  /**\n   * @private\n   */\n  _transform(fresh, encoding, cb) {\n    this.parser.write(fresh, encoding, cb);\n  }\n\n  /**\n   * @private\n   */\n  _flush(cb) {\n    // TODO: find the test that covers this, and look at the return value\n    return this.parser._flush(cb);\n  }\n\n  /**\n   * @callback commentCallback\n   * @param {Error} [error] - if one was generated\n   * @param {string} [commented] - the comment string\n   */\n\n  /**\n   * @typedef CommentOptions\n   * @property {number} [max_depth=10] how many times to indent the dashes\n   * @property {string} [encoding='hex'] encoding of the input\n   */\n  /**\n   * Comment on an input Buffer or string, creating a string passed to the\n   * callback.  If callback not specified, a promise is returned.\n   *\n   * @static\n   * @param {string|Buffer} input\n   * @param {CommentOptions|commentCallback|string} [options] or callback\n   * @param {commentCallback=} cb\n   * @returns {Promise} if cb not specified\n   */\n  static comment(input, options, cb) {\n    if (input == null) {\n      throw new Error('input required');\n    }\n    let encoding = typeof input === 'string' ? 'hex' : void 0;\n    let max_depth = 10;\n    switch (typeof options) {\n      case 'function':\n        cb = options;\n        break;\n      case 'string':\n        encoding = options;\n        break;\n      case 'number':\n        max_depth = options;\n        break;\n      case 'object':\n        const ref1 = options.encoding;\n        const ref2 = options.max_depth;\n        encoding = ref1 != null ? ref1 : encoding;\n        max_depth = ref2 != null ? ref2 : max_depth;\n        break;\n      case 'undefined':\n        break;\n      default:\n        throw new Error('Unknown option type');\n    }\n    const bs = new NoFilter();\n    const d = new Commented({\n      max_depth\n    });\n    let p = null;\n    if (typeof cb === 'function') {\n      d.on('end', () => {\n        cb(null, bs.toString('utf8'));\n      });\n      d.on('error', cb);\n    } else {\n      p = new Promise((resolve, reject) => {\n        d.on('end', () => {\n          resolve(bs.toString('utf8'));\n        });\n        return d.on('error', reject);\n      });\n    }\n    d.pipe(bs);\n    d.end(input, encoding);\n    return p;\n  }\n\n  /**\n   * @private\n   */\n  _on_error(er) {\n    return this.push('ERROR: ') && this.push(er.toString()) && this.push('\\n');\n  }\n\n  /**\n   * @private\n   */\n  _on_read(buf) {\n    this.all.write(buf);\n    const hex = buf.toString('hex');\n    this.push(new Array(this.depth + 1).join('  '));\n    this.push(hex);\n    let ind = (this.max_depth - this.depth) * 2;\n    ind -= hex.length;\n    if (ind < 1) {\n      ind = 1;\n    }\n    this.push(new Array(ind + 1).join(' '));\n    return this.push('-- ');\n  }\n\n  /**\n   * @private\n   */\n  _on_more(mt, len, parent_mt, pos) {\n    this.depth++;\n    let desc = '';\n    switch (mt) {\n      case MT.POS_INT:\n        desc = 'Positive number,';\n        break;\n      case MT.NEG_INT:\n        desc = 'Negative number,';\n        break;\n      case MT.ARRAY:\n        desc = 'Array, length';\n        break;\n      case MT.MAP:\n        desc = 'Map, count';\n        break;\n      case MT.BYTE_STRING:\n        desc = 'Bytes, length';\n        break;\n      case MT.UTF8_STRING:\n        desc = 'String, length';\n        break;\n      case MT.SIMPLE_FLOAT:\n        if (len === 1) {\n          desc = 'Simple value,';\n        } else {\n          desc = 'Float,';\n        }\n        break;\n    }\n    return this.push(desc + ' next ' + len + ' byte' + plural(len) + '\\n');\n  }\n\n  /**\n   * @private\n   */\n  _on_start_string(mt, tag, parent_mt, pos) {\n    this.depth++;\n    let desc = '';\n    switch (mt) {\n      case MT.BYTE_STRING:\n        desc = 'Bytes, length: ' + tag;\n        break;\n      case MT.UTF8_STRING:\n        desc = 'String, length: ' + tag.toString();\n        break;\n    }\n    return this.push(desc + '\\n');\n  }\n\n  /**\n   * @private\n   */\n  _on_start(mt, tag, parent_mt, pos) {\n    this.depth++;\n    if (tag !== SYMS.BREAK) {\n      switch (parent_mt) {\n        case MT.ARRAY:\n          this.push(`[${pos}], `);\n          break;\n        case MT.MAP:\n          if (pos % 2) {\n            this.push(`{Val:${Math.floor(pos / 2)}}, `);\n          } else {\n            this.push(`{Key:${Math.floor(pos / 2)}}, `);\n          }\n          break;\n      }\n    }\n    switch (mt) {\n      case MT.TAG:\n        this.push(`Tag #${tag}`);\n        break;\n      case MT.ARRAY:\n        if (tag === SYMS.STREAM) {\n          this.push('Array (streaming)');\n        } else {\n          this.push(`Array, ${tag} item${plural(tag)}`);\n        }\n        break;\n      case MT.MAP:\n        if (tag === SYMS.STREAM) {\n          this.push('Map (streaming)');\n        } else {\n          this.push(`Map, ${tag} pair${plural(tag)}`);\n        }\n        break;\n      case MT.BYTE_STRING:\n        this.push('Bytes (streaming)');\n        break;\n      case MT.UTF8_STRING:\n        this.push('String (streaming)');\n        break;\n    }\n    return this.push('\\n');\n  }\n\n  /**\n   * @private\n   */\n  _on_stop(mt) {\n    return this.depth--;\n  }\n\n  /**\n   * @private\n   */\n  _on_value(val, parent_mt, pos, ai) {\n    if (val !== SYMS.BREAK) {\n      switch (parent_mt) {\n        case MT.ARRAY:\n          this.push(`[${pos}], `);\n          break;\n        case MT.MAP:\n          if (pos % 2) {\n            this.push(`{Val:${Math.floor(pos / 2)}}, `);\n          } else {\n            this.push(`{Key:${Math.floor(pos / 2)}}, `);\n          }\n          break;\n      }\n    }\n    if (val === SYMS.BREAK) {\n      this.push('BREAK\\n');\n    } else if (val === SYMS.NULL) {\n      this.push('null\\n');\n    } else if (val === SYMS.UNDEFINED) {\n      this.push('undefined\\n');\n    } else if (typeof val === 'string') {\n      this.depth--;\n      if (val.length > 0) {\n        this.push(JSON.stringify(val));\n        this.push('\\n');\n      }\n    } else if (Buffer.isBuffer(val)) {\n      this.depth--;\n      if (val.length > 0) {\n        this.push(val.toString('hex'));\n        this.push('\\n');\n      }\n    } else if (val instanceof bignumber) {\n      this.push(val.toString());\n      this.push('\\n');\n    } else {\n      this.push(util.inspect(val));\n      this.push('\\n');\n    }\n    switch (ai) {\n      case NUMBYTES.ONE:\n      case NUMBYTES.TWO:\n      case NUMBYTES.FOUR:\n      case NUMBYTES.EIGHT:\n        this.depth--;\n    }\n  }\n\n  /**\n   * @private\n   */\n  _on_data() {\n    this.push('0x');\n    this.push(this.all.read().toString('hex'));\n    return this.push('\\n');\n  }\n}\nmodule.exports = Commented;","map":{"version":3,"names":["stream","require","util","utils","Simple","Decoder","constants","bignumber","BigNumber","NoFilter","MT","NUMBYTES","SYMS","plural","c","Commented","Transform","constructor","options","opts","Object","assign","max_depth","readableObjectMode","writableObjectMode","depth","all","parser","on","_on_value","bind","_on_start","_on_start_string","_on_stop","_on_more","_on_error","_on_data","bs","_on_read","_transform","fresh","encoding","cb","write","_flush","comment","input","Error","ref1","ref2","d","p","toString","Promise","resolve","reject","pipe","end","er","push","buf","hex","Array","join","ind","length","mt","len","parent_mt","pos","desc","POS_INT","NEG_INT","ARRAY","MAP","BYTE_STRING","UTF8_STRING","SIMPLE_FLOAT","tag","BREAK","Math","floor","TAG","STREAM","val","ai","NULL","UNDEFINED","JSON","stringify","Buffer","isBuffer","inspect","ONE","TWO","FOUR","EIGHT","read","module","exports"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/cbor/lib/commented.js"],"sourcesContent":["'use strict'\n\nconst stream = require('stream')\nconst util = require('util')\nconst utils = require('./utils')\nconst Simple = require('./simple')\nconst Decoder = require('./decoder')\nconst constants = require('./constants')\nconst bignumber = require('bignumber.js').BigNumber\nconst NoFilter = require('nofilter')\n\nconst MT = constants.MT\nconst NUMBYTES = constants.NUMBYTES\nconst SYMS = constants.SYMS\n\nfunction plural(c) {\n  if (c > 1) {\n    return 's'\n  } else {\n    return ''\n  }\n}\n\n/**\n * Generate the expanded format of RFC 7049, section 2.2.1\n *\n * @extends {stream.Transform}\n */\nclass Commented extends stream.Transform {\n  /**\n   * Create a CBOR commenter.\n   *\n   * @param {object} [options={}] - Stream options\n   * @param {number} [options.max_depth=10] - how many times to indent\n   *   the dashes\n   */\n  constructor(options) {\n    const opts = Object.assign({\n      max_depth: 10\n    }, options, {\n      readableObjectMode: false,\n      writableObjectMode: false\n    })\n    const max_depth = opts.max_depth\n    delete opts.max_depth\n    super(opts)\n\n    this.depth = 1\n    this.max_depth = max_depth\n    this.all = new NoFilter()\n    this.parser = new Decoder(opts)\n    this.parser.on('value', this._on_value.bind(this))\n    this.parser.on('start', this._on_start.bind(this))\n    this.parser.on('start-string', this._on_start_string.bind(this))\n    this.parser.on('stop', this._on_stop.bind(this))\n    this.parser.on('more-bytes', this._on_more.bind(this))\n    this.parser.on('error', this._on_error.bind(this))\n    this.parser.on('data', this._on_data.bind(this))\n    this.parser.bs.on('read', this._on_read.bind(this))\n  }\n\n  /**\n   * @private\n   */\n  _transform(fresh, encoding, cb) {\n    this.parser.write(fresh, encoding, cb)\n  }\n\n  /**\n   * @private\n   */\n  _flush(cb) {\n    // TODO: find the test that covers this, and look at the return value\n    return this.parser._flush(cb)\n  }\n\n  /**\n   * @callback commentCallback\n   * @param {Error} [error] - if one was generated\n   * @param {string} [commented] - the comment string\n   */\n\n  /**\n   * @typedef CommentOptions\n   * @property {number} [max_depth=10] how many times to indent the dashes\n   * @property {string} [encoding='hex'] encoding of the input\n   */\n  /**\n   * Comment on an input Buffer or string, creating a string passed to the\n   * callback.  If callback not specified, a promise is returned.\n   *\n   * @static\n   * @param {string|Buffer} input\n   * @param {CommentOptions|commentCallback|string} [options] or callback\n   * @param {commentCallback=} cb\n   * @returns {Promise} if cb not specified\n   */\n  static comment(input, options, cb) {\n    if (input == null) {\n      throw new Error('input required')\n    }\n    let encoding = (typeof input === 'string') ? 'hex' : void 0\n    let max_depth = 10\n    switch (typeof options) {\n      case 'function':\n        cb = options\n        break\n      case 'string':\n        encoding = options\n        break\n      case 'number':\n        max_depth = options\n        break\n      case 'object':\n        const ref1 = options.encoding\n        const ref2 = options.max_depth\n        encoding = (ref1 != null) ? ref1 : encoding\n        max_depth = (ref2 != null) ? ref2 : max_depth\n        break\n      case 'undefined':\n        break\n      default:\n        throw new Error('Unknown option type')\n    }\n    const bs = new NoFilter()\n    const d = new Commented({\n      max_depth\n    })\n    let p = null\n    if (typeof cb === 'function') {\n      d.on('end', () => {\n        cb(null, bs.toString('utf8'))\n      })\n      d.on('error', cb)\n    } else {\n      p = new Promise((resolve, reject) => {\n        d.on('end', () => {\n          resolve(bs.toString('utf8'))\n        })\n        return d.on('error', reject)\n      })\n    }\n    d.pipe(bs)\n    d.end(input, encoding)\n    return p\n  }\n\n  /**\n   * @private\n   */\n  _on_error(er) {\n    return this.push('ERROR: ') &&\n      this.push(er.toString()) &&\n      this.push('\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_read(buf) {\n    this.all.write(buf)\n    const hex = buf.toString('hex')\n    this.push(new Array(this.depth + 1).join('  '))\n    this.push(hex)\n    let ind = (this.max_depth - this.depth) * 2\n    ind -= hex.length\n    if (ind < 1) {\n      ind = 1\n    }\n    this.push(new Array(ind + 1).join(' '))\n    return this.push('-- ')\n  }\n\n  /**\n   * @private\n   */\n  _on_more(mt, len, parent_mt, pos) {\n    this.depth++\n    let desc = ''\n    switch (mt) {\n      case MT.POS_INT:\n        desc = 'Positive number,'\n        break\n      case MT.NEG_INT:\n        desc = 'Negative number,'\n        break\n      case MT.ARRAY:\n        desc = 'Array, length'\n        break\n      case MT.MAP:\n        desc = 'Map, count'\n        break\n      case MT.BYTE_STRING:\n        desc = 'Bytes, length'\n        break\n      case MT.UTF8_STRING:\n        desc = 'String, length'\n        break\n      case MT.SIMPLE_FLOAT:\n        if (len === 1) {\n          desc = 'Simple value,'\n        } else {\n          desc = 'Float,'\n        }\n        break\n    }\n    return this.push(desc + ' next ' + len + ' byte' + (plural(len)) + '\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_start_string(mt, tag, parent_mt, pos) {\n    this.depth++\n    let desc = ''\n    switch (mt) {\n      case MT.BYTE_STRING:\n        desc = 'Bytes, length: ' + tag\n        break\n      case MT.UTF8_STRING:\n        desc = 'String, length: ' + (tag.toString())\n        break\n    }\n    return this.push(desc + '\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_start(mt, tag, parent_mt, pos) {\n    this.depth++\n    if (tag !== SYMS.BREAK) {\n      switch (parent_mt) {\n        case MT.ARRAY:\n          this.push(`[${pos}], `)\n          break\n        case MT.MAP:\n          if (pos % 2) {\n            this.push(`{Val:${Math.floor(pos / 2)}}, `)\n          } else {\n            this.push(`{Key:${Math.floor(pos / 2)}}, `)\n          }\n          break\n      }\n    }\n    switch (mt) {\n      case MT.TAG:\n        this.push(`Tag #${tag}`)\n        break\n      case MT.ARRAY:\n        if (tag === SYMS.STREAM) {\n          this.push('Array (streaming)')\n        } else {\n          this.push(`Array, ${tag} item${plural(tag)}`)\n        }\n        break\n      case MT.MAP:\n        if (tag === SYMS.STREAM) {\n          this.push('Map (streaming)')\n        } else {\n          this.push(`Map, ${tag} pair${plural(tag)}`)\n        }\n        break\n      case MT.BYTE_STRING:\n        this.push('Bytes (streaming)')\n        break\n      case MT.UTF8_STRING:\n        this.push('String (streaming)')\n        break\n    }\n    return this.push('\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_stop(mt) {\n    return this.depth--\n  }\n\n  /**\n   * @private\n   */\n  _on_value(val, parent_mt, pos, ai) {\n    if (val !== SYMS.BREAK) {\n      switch (parent_mt) {\n        case MT.ARRAY:\n          this.push(`[${pos}], `)\n          break\n        case MT.MAP:\n          if (pos % 2) {\n            this.push(`{Val:${Math.floor(pos / 2)}}, `)\n          } else {\n            this.push(`{Key:${Math.floor(pos / 2)}}, `)\n          }\n          break\n      }\n    }\n\n    if (val === SYMS.BREAK) {\n      this.push('BREAK\\n')\n    } else if (val === SYMS.NULL) {\n      this.push('null\\n')\n    } else if (val === SYMS.UNDEFINED) {\n      this.push('undefined\\n')\n    } else if (typeof val === 'string') {\n      this.depth--\n      if (val.length > 0 ) {\n        this.push(JSON.stringify(val))\n        this.push('\\n')\n      }\n    } else if (Buffer.isBuffer(val)) {\n      this.depth--\n      if (val.length > 0) {\n        this.push(val.toString('hex'))\n        this.push('\\n')\n      }\n    } else if (val instanceof bignumber) {\n      this.push(val.toString())\n      this.push('\\n')\n    } else {\n      this.push(util.inspect(val))\n      this.push('\\n')\n    }\n\n    switch (ai) {\n      case NUMBYTES.ONE:\n      case NUMBYTES.TWO:\n      case NUMBYTES.FOUR:\n      case NUMBYTES.EIGHT:\n        this.depth--\n    }\n  }\n\n  /**\n   * @private\n   */\n  _on_data() {\n    this.push('0x')\n    this.push(this.all.read().toString('hex'))\n    return this.push('\\n')\n  }\n}\n\nmodule.exports = Commented\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}