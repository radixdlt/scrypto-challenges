{"ast":null,"code":"(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    root.prefix = factory(root);\n  }\n})(this, function (root) {\n  'use strict';\n\n  var merge = function (target) {\n    var i = 1;\n    var length = arguments.length;\n    var key;\n    for (; i < length; i++) {\n      for (key in arguments[i]) {\n        if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {\n          target[key] = arguments[i][key];\n        }\n      }\n    }\n    return target;\n  };\n  var defaults = {\n    template: '[%t] %l:',\n    levelFormatter: function (level) {\n      return level.toUpperCase();\n    },\n    nameFormatter: function (name) {\n      return name || 'root';\n    },\n    timestampFormatter: function (date) {\n      return date.toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, '$1');\n    },\n    format: undefined\n  };\n  var loglevel;\n  var configs = {};\n  var reg = function (rootLogger) {\n    if (!rootLogger || !rootLogger.getLogger) {\n      throw new TypeError('Argument is not a root logger');\n    }\n    loglevel = rootLogger;\n  };\n  var apply = function (logger, config) {\n    if (!logger || !logger.setLevel) {\n      throw new TypeError('Argument is not a logger');\n    }\n\n    /* eslint-disable vars-on-top */\n    var originalFactory = logger.methodFactory;\n    var name = logger.name || '';\n    var parent = configs[name] || configs[''] || defaults;\n    /* eslint-enable vars-on-top */\n\n    function methodFactory(methodName, logLevel, loggerName) {\n      var originalMethod = originalFactory(methodName, logLevel, loggerName);\n      var options = configs[loggerName] || configs[''];\n      var hasTimestamp = options.template.indexOf('%t') !== -1;\n      var hasLevel = options.template.indexOf('%l') !== -1;\n      var hasName = options.template.indexOf('%n') !== -1;\n      return function () {\n        var content = '';\n        var length = arguments.length;\n        var args = Array(length);\n        var key = 0;\n        for (; key < length; key++) {\n          args[key] = arguments[key];\n        }\n\n        // skip the root method for child loggers to prevent duplicate logic\n        if (name || !configs[loggerName]) {\n          /* eslint-disable vars-on-top */\n          var timestamp = options.timestampFormatter(new Date());\n          var level = options.levelFormatter(methodName);\n          var lname = options.nameFormatter(loggerName);\n          /* eslint-enable vars-on-top */\n\n          if (options.format) {\n            content += options.format(level, lname, timestamp);\n          } else {\n            content += options.template;\n            if (hasTimestamp) {\n              content = content.replace(/%t/, timestamp);\n            }\n            if (hasLevel) content = content.replace(/%l/, level);\n            if (hasName) content = content.replace(/%n/, lname);\n          }\n          if (args.length && typeof args[0] === 'string') {\n            // concat prefix with first argument to support string substitutions\n            args[0] = content + ' ' + args[0];\n          } else {\n            args.unshift(content);\n          }\n        }\n        originalMethod.apply(undefined, args);\n      };\n    }\n    if (!configs[name]) {\n      logger.methodFactory = methodFactory;\n    }\n\n    // for remove inherited format option if template option preset\n    config = config || {};\n    if (config.template) config.format = undefined;\n    configs[name] = merge({}, parent, config);\n    logger.setLevel(logger.getLevel());\n    if (!loglevel) {\n      logger.warn('It is necessary to call the function reg() of loglevel-plugin-prefix before calling apply. From the next release, it will throw an error. See more: https://github.com/kutuluk/loglevel-plugin-prefix/blob/master/README.md');\n    }\n    return logger;\n  };\n  var api = {\n    reg: reg,\n    apply: apply\n  };\n  var save;\n  if (root) {\n    save = root.prefix;\n    api.noConflict = function () {\n      if (root.prefix === api) {\n        root.prefix = save;\n      }\n      return api;\n    };\n  }\n  return api;\n});","map":{"version":3,"names":["root","factory","define","amd","module","exports","prefix","merge","target","i","length","arguments","key","Object","prototype","hasOwnProperty","call","defaults","template","levelFormatter","level","toUpperCase","nameFormatter","name","timestampFormatter","date","toTimeString","replace","format","undefined","loglevel","configs","reg","rootLogger","getLogger","TypeError","apply","logger","config","setLevel","originalFactory","methodFactory","parent","methodName","logLevel","loggerName","originalMethod","options","hasTimestamp","indexOf","hasLevel","hasName","content","args","Array","timestamp","Date","lname","unshift","getLevel","warn","api","save","noConflict"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/loglevel-plugin-prefix/lib/loglevel-plugin-prefix.js"],"sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    root.prefix = factory(root);\n  }\n}(this, function (root) {\n  'use strict';\n\n  var merge = function (target) {\n    var i = 1;\n    var length = arguments.length;\n    var key;\n    for (; i < length; i++) {\n      for (key in arguments[i]) {\n        if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {\n          target[key] = arguments[i][key];\n        }\n      }\n    }\n    return target;\n  };\n\n  var defaults = {\n    template: '[%t] %l:',\n    levelFormatter: function (level) {\n      return level.toUpperCase();\n    },\n    nameFormatter: function (name) {\n      return name || 'root';\n    },\n    timestampFormatter: function (date) {\n      return date.toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, '$1');\n    },\n    format: undefined\n  };\n\n  var loglevel;\n  var configs = {};\n\n  var reg = function (rootLogger) {\n    if (!rootLogger || !rootLogger.getLogger) {\n      throw new TypeError('Argument is not a root logger');\n    }\n    loglevel = rootLogger;\n  };\n\n  var apply = function (logger, config) {\n    if (!logger || !logger.setLevel) {\n      throw new TypeError('Argument is not a logger');\n    }\n\n    /* eslint-disable vars-on-top */\n    var originalFactory = logger.methodFactory;\n    var name = logger.name || '';\n    var parent = configs[name] || configs[''] || defaults;\n    /* eslint-enable vars-on-top */\n\n    function methodFactory(methodName, logLevel, loggerName) {\n      var originalMethod = originalFactory(methodName, logLevel, loggerName);\n      var options = configs[loggerName] || configs[''];\n\n      var hasTimestamp = options.template.indexOf('%t') !== -1;\n      var hasLevel = options.template.indexOf('%l') !== -1;\n      var hasName = options.template.indexOf('%n') !== -1;\n\n      return function () {\n        var content = '';\n\n        var length = arguments.length;\n        var args = Array(length);\n        var key = 0;\n        for (; key < length; key++) {\n          args[key] = arguments[key];\n        }\n\n        // skip the root method for child loggers to prevent duplicate logic\n        if (name || !configs[loggerName]) {\n          /* eslint-disable vars-on-top */\n          var timestamp = options.timestampFormatter(new Date());\n          var level = options.levelFormatter(methodName);\n          var lname = options.nameFormatter(loggerName);\n          /* eslint-enable vars-on-top */\n\n          if (options.format) {\n            content += options.format(level, lname, timestamp);\n          } else {\n            content += options.template;\n            if (hasTimestamp) {\n              content = content.replace(/%t/, timestamp);\n            }\n            if (hasLevel) content = content.replace(/%l/, level);\n            if (hasName) content = content.replace(/%n/, lname);\n          }\n\n          if (args.length && typeof args[0] === 'string') {\n            // concat prefix with first argument to support string substitutions\n            args[0] = content + ' ' + args[0];\n          } else {\n            args.unshift(content);\n          }\n        }\n\n        originalMethod.apply(undefined, args);\n      };\n    }\n\n    if (!configs[name]) {\n      logger.methodFactory = methodFactory;\n    }\n\n    // for remove inherited format option if template option preset\n    config = config || {};\n    if (config.template) config.format = undefined;\n\n    configs[name] = merge({}, parent, config);\n\n    logger.setLevel(logger.getLevel());\n\n    if (!loglevel) {\n      logger.warn(\n        'It is necessary to call the function reg() of loglevel-plugin-prefix before calling apply. From the next release, it will throw an error. See more: https://github.com/kutuluk/loglevel-plugin-prefix/blob/master/README.md'\n      );\n    }\n\n    return logger;\n  };\n\n  var api = {\n    reg: reg,\n    apply: apply\n  };\n\n  var save;\n\n  if (root) {\n    save = root.prefix;\n    api.noConflict = function () {\n      if (root.prefix === api) {\n        root.prefix = save;\n      }\n      return api;\n    };\n  }\n\n  return api;\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}