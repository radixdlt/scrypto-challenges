{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScryptParams = exports.Scrypt = void 0;\nconst scrypt_js_1 = require(\"scrypt-js\");\nconst neverthrow_1 = require(\"neverthrow\");\nconst util_1 = require(\"@radixdlt/util\");\nconst deriveKey = input => {\n  if (input.kdf !== 'scrypt') return (0, neverthrow_1.errAsync)(new Error('Wrong KDF, expected scrypt'));\n  const {\n    params,\n    password: key\n  } = input;\n  const {\n    lengthOfDerivedKey: dklen,\n    costParameterN: n,\n    blockSize: r,\n    parallelizationParameter: p\n  } = params;\n  const salt = Buffer.from(params.salt, 'hex');\n  return neverthrow_1.ResultAsync.fromPromise((0, scrypt_js_1.scrypt)(key, salt, n, r, p, dklen).then(uint8array => Buffer.from(uint8array)), e => {\n    const underlyingErrorMessage = (0, util_1.msgFromError)(e);\n    return new Error(`Failed to derive data using scrypt, underlying error: '${underlyingErrorMessage}'`);\n  });\n};\nexports.Scrypt = {\n  deriveKey\n};\nconst create = input => {\n  var _a, _b, _c;\n  const secureRandom = (_a = input.secureRandom) !== null && _a !== void 0 ? _a : util_1.secureRandomGenerator;\n  if (input.salt && input.salt.length !== 32) throw new Error('Incorrect implementatin expected 32 bytes salt');\n  const salt = (_c = (_b = input.salt) === null || _b === void 0 ? void 0 : _b.toString('hex')) !== null && _c !== void 0 ? _c : secureRandom.randomSecureBytes(32);\n  return {\n    costParameterN: 8192,\n    costParameterC: 262144,\n    blockSize: 8,\n    parallelizationParameter: 1,\n    lengthOfDerivedKey: 32,\n    salt: salt\n  };\n};\nexports.ScryptParams = {\n  create\n};","map":{"version":3,"names":["scrypt_js_1","require","neverthrow_1","util_1","deriveKey","input","kdf","errAsync","Error","params","password","key","lengthOfDerivedKey","dklen","costParameterN","n","blockSize","r","parallelizationParameter","p","salt","Buffer","from","ResultAsync","fromPromise","scrypt","then","uint8array","e","underlyingErrorMessage","msgFromError","exports","Scrypt","create","secureRandom","_a","secureRandomGenerator","length","_c","_b","toString","randomSecureBytes","costParameterC","ScryptParams"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/@radixdlt/crypto/src/key-derivation-functions/scrypt.ts"],"sourcesContent":["import { scrypt } from 'scrypt-js'\nimport { ResultAsync, errAsync } from 'neverthrow'\nimport { ScryptParamsT } from './_types'\nimport {\n\tmsgFromError,\n\tSecureRandom,\n\tsecureRandomGenerator,\n} from '@radixdlt/util'\n\nconst deriveKey = (\n\tinput: Readonly<{\n\t\tpassword: Buffer\n\t\tkdf: string\n\t\tparams: ScryptParamsT\n\t}>,\n): ResultAsync<Buffer, Error> => {\n\tif (input.kdf !== 'scrypt')\n\t\treturn errAsync(new Error('Wrong KDF, expected scrypt'))\n\tconst { params, password: key } = input\n\tconst {\n\t\tlengthOfDerivedKey: dklen,\n\t\tcostParameterN: n,\n\t\tblockSize: r,\n\t\tparallelizationParameter: p,\n\t} = params\n\tconst salt = Buffer.from(params.salt, 'hex')\n\n\treturn ResultAsync.fromPromise(\n\t\tscrypt(key, salt, n, r, p, dklen).then(uint8array =>\n\t\t\tBuffer.from(uint8array),\n\t\t),\n\t\t(e: unknown) => {\n\t\t\tconst underlyingErrorMessage = msgFromError(e)\n\t\t\treturn new Error(\n\t\t\t\t`Failed to derive data using scrypt, underlying error: '${underlyingErrorMessage}'`,\n\t\t\t)\n\t\t},\n\t)\n}\n\nexport const Scrypt = {\n\tderiveKey,\n}\n\nconst create = (\n\tinput: Readonly<{\n\t\tsalt?: Buffer\n\t\tsecureRandom?: SecureRandom\n\t}>,\n): ScryptParamsT => {\n\tconst secureRandom = input.secureRandom ?? secureRandomGenerator\n\tif (input.salt && input.salt.length !== 32)\n\t\tthrow new Error('Incorrect implementatin expected 32 bytes salt')\n\tconst salt =\n\t\tinput.salt?.toString('hex') ?? secureRandom.randomSecureBytes(32)\n\n\treturn {\n\t\tcostParameterN: 8192,\n\t\tcostParameterC: 262144,\n\t\tblockSize: 8,\n\t\tparallelizationParameter: 1,\n\t\tlengthOfDerivedKey: 32,\n\t\tsalt: salt,\n\t}\n}\n\nexport const ScryptParams = {\n\tcreate,\n}\n"],"mappings":";;;;;;AAAA,MAAAA,WAAA,GAAAC,OAAA;AACA,MAAAC,YAAA,GAAAD,OAAA;AAEA,MAAAE,MAAA,GAAAF,OAAA;AAMA,MAAMG,SAAS,GACdC,KAIE,IAC6B;EAC/B,IAAIA,KAAK,CAACC,GAAG,KAAK,QAAQ,EACzB,OAAO,IAAAJ,YAAA,CAAAK,QAAQ,EAAC,IAAIC,KAAK,CAAC,4BAA4B,CAAC,CAAC;EACzD,MAAM;IAAEC,MAAM;IAAEC,QAAQ,EAAEC;EAAG,CAAE,GAAGN,KAAK;EACvC,MAAM;IACLO,kBAAkB,EAAEC,KAAK;IACzBC,cAAc,EAAEC,CAAC;IACjBC,SAAS,EAAEC,CAAC;IACZC,wBAAwB,EAAEC;EAAC,CAC3B,GAAGV,MAAM;EACV,MAAMW,IAAI,GAAGC,MAAM,CAACC,IAAI,CAACb,MAAM,CAACW,IAAI,EAAE,KAAK,CAAC;EAE5C,OAAOlB,YAAA,CAAAqB,WAAW,CAACC,WAAW,CAC7B,IAAAxB,WAAA,CAAAyB,MAAM,EAACd,GAAG,EAAES,IAAI,EAAEL,CAAC,EAAEE,CAAC,EAAEE,CAAC,EAAEN,KAAK,CAAC,CAACa,IAAI,CAACC,UAAU,IAChDN,MAAM,CAACC,IAAI,CAACK,UAAU,CAAC,CACvB,EACAC,CAAU,IAAI;IACd,MAAMC,sBAAsB,GAAG,IAAA1B,MAAA,CAAA2B,YAAY,EAACF,CAAC,CAAC;IAC9C,OAAO,IAAIpB,KAAK,CACf,0DAA0DqB,sBAAsB,GAAG,CACnF;EACF,CAAC,CACD;AACF,CAAC;AAEYE,OAAA,CAAAC,MAAM,GAAG;EACrB5B;CACA;AAED,MAAM6B,MAAM,GACX5B,KAGE,IACgB;;EAClB,MAAM6B,YAAY,GAAG,CAAAC,EAAA,GAAA9B,KAAK,CAAC6B,YAAY,cAAAC,EAAA,cAAAA,EAAA,GAAIhC,MAAA,CAAAiC,qBAAqB;EAChE,IAAI/B,KAAK,CAACe,IAAI,IAAIf,KAAK,CAACe,IAAI,CAACiB,MAAM,KAAK,EAAE,EACzC,MAAM,IAAI7B,KAAK,CAAC,gDAAgD,CAAC;EAClE,MAAMY,IAAI,GACT,CAAAkB,EAAA,IAAAC,EAAA,GAAAlC,KAAK,CAACe,IAAI,cAAAmB,EAAA,uBAAAA,EAAA,CAAEC,QAAQ,CAAC,KAAK,CAAC,cAAAF,EAAA,cAAAA,EAAA,GAAIJ,YAAY,CAACO,iBAAiB,CAAC,EAAE,CAAC;EAElE,OAAO;IACN3B,cAAc,EAAE,IAAI;IACpB4B,cAAc,EAAE,MAAM;IACtB1B,SAAS,EAAE,CAAC;IACZE,wBAAwB,EAAE,CAAC;IAC3BN,kBAAkB,EAAE,EAAE;IACtBQ,IAAI,EAAEA;GACN;AACF,CAAC;AAEYW,OAAA,CAAAY,YAAY,GAAG;EAC3BV;CACA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}