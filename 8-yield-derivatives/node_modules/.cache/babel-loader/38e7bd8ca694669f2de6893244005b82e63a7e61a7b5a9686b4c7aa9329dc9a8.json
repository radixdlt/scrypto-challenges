{"ast":null,"code":"import { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function sample(notifier) {\n  return operate(function (source, subscriber) {\n    var hasValue = false;\n    var lastValue = null;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      hasValue = true;\n      lastValue = value;\n    }));\n    var emit = function () {\n      if (hasValue) {\n        hasValue = false;\n        var value = lastValue;\n        lastValue = null;\n        subscriber.next(value);\n      }\n    };\n    notifier.subscribe(new OperatorSubscriber(subscriber, emit, noop));\n  });\n}","map":{"version":3,"names":["operate","noop","OperatorSubscriber","sample","notifier","source","subscriber","hasValue","lastValue","subscribe","value","emit","next"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/rxjs/src/internal/operators/sample.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * ![](sample.png)\n *\n * Whenever the `notifier` Observable emits a value, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * ## Example\n * On every click, sample the most recent \"seconds\" timer\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { sample } from 'rxjs/operators';\n *\n * const seconds = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = seconds.pipe(sample(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param notifier The Observable to use for sampling the\n * source Observable.\n * @return A function that returns an Observable that emits the results of\n * sampling the values emitted by the source Observable whenever the notifier\n * Observable emits value or completes.\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    let lastValue: T | null = null;\n    source.subscribe(\n      new OperatorSubscriber(subscriber, (value) => {\n        hasValue = true;\n        lastValue = value;\n      })\n    );\n    const emit = () => {\n      if (hasValue) {\n        hasValue = false;\n        const value = lastValue!;\n        lastValue = null;\n        subscriber.next(value);\n      }\n    };\n    notifier.subscribe(new OperatorSubscriber(subscriber, emit, noop));\n  });\n}\n"],"mappings":"AAEA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,IAAI,QAAQ,cAAc;AACnC,SAASC,kBAAkB,QAAQ,sBAAsB;AAwCzD,OAAM,SAAUC,MAAMA,CAAIC,QAAyB;EACjD,OAAOJ,OAAO,CAAC,UAACK,MAAM,EAAEC,UAAU;IAChC,IAAIC,QAAQ,GAAG,KAAK;IACpB,IAAIC,SAAS,GAAa,IAAI;IAC9BH,MAAM,CAACI,SAAS,CACd,IAAIP,kBAAkB,CAACI,UAAU,EAAE,UAACI,KAAK;MACvCH,QAAQ,GAAG,IAAI;MACfC,SAAS,GAAGE,KAAK;IACnB,CAAC,CAAC,CACH;IACD,IAAMC,IAAI,GAAG,SAAAA,CAAA;MACX,IAAIJ,QAAQ,EAAE;QACZA,QAAQ,GAAG,KAAK;QAChB,IAAMG,KAAK,GAAGF,SAAU;QACxBA,SAAS,GAAG,IAAI;QAChBF,UAAU,CAACM,IAAI,CAACF,KAAK,CAAC;;IAE1B,CAAC;IACDN,QAAQ,CAACK,SAAS,CAAC,IAAIP,kBAAkB,CAACI,UAAU,EAAEK,IAAI,EAAEV,IAAI,CAAC,CAAC;EACpE,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}