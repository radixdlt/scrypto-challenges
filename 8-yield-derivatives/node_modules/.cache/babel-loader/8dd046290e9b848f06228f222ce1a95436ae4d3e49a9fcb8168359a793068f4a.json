{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\";\n/**\n * Move an item, at index `from`, to index `to`, in a list of elements.\n * A new list will be created containing the new elements order.\n *\n * @func\n * @memberOf R\n * @since v0.27.1\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {Number} from The source index\n * @param {Number} to The destination index\n * @param {Array} list The list which will serve to realise the move\n * @return {Array} The new list reordered\n * @example\n *\n *      R.move(0, 2, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['b', 'c', 'a', 'd', 'e', 'f']\n *      R.move(-1, 0, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['f', 'a', 'b', 'c', 'd', 'e'] list rotation\n */\n\nvar move = /*#__PURE__*/\n_curry3(function (from, to, list) {\n  var length = list.length;\n  var result = list.slice();\n  var positiveFrom = from < 0 ? length + from : from;\n  var positiveTo = to < 0 ? length + to : to;\n  var item = result.splice(positiveFrom, 1);\n  return positiveFrom < 0 || positiveFrom >= list.length || positiveTo < 0 || positiveTo >= list.length ? list : [].concat(result.slice(0, positiveTo)).concat(item).concat(result.slice(positiveTo, list.length));\n});\nexport default move;","map":{"version":3,"names":["_curry3","move","from","to","list","length","result","slice","positiveFrom","positiveTo","item","splice","concat"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/ramda/es/move.js"],"sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\n/**\n * Move an item, at index `from`, to index `to`, in a list of elements.\n * A new list will be created containing the new elements order.\n *\n * @func\n * @memberOf R\n * @since v0.27.1\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {Number} from The source index\n * @param {Number} to The destination index\n * @param {Array} list The list which will serve to realise the move\n * @return {Array} The new list reordered\n * @example\n *\n *      R.move(0, 2, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['b', 'c', 'a', 'd', 'e', 'f']\n *      R.move(-1, 0, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['f', 'a', 'b', 'c', 'd', 'e'] list rotation\n */\n\nvar move =\n/*#__PURE__*/\n_curry3(function (from, to, list) {\n  var length = list.length;\n  var result = list.slice();\n  var positiveFrom = from < 0 ? length + from : from;\n  var positiveTo = to < 0 ? length + to : to;\n  var item = result.splice(positiveFrom, 1);\n  return positiveFrom < 0 || positiveFrom >= list.length || positiveTo < 0 || positiveTo >= list.length ? list : [].concat(result.slice(0, positiveTo)).concat(item).concat(result.slice(positiveTo, list.length));\n});\n\nexport default move;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,IAAI,GACR;AACAD,OAAO,CAAC,UAAUE,IAAI,EAAEC,EAAE,EAAEC,IAAI,EAAE;EAChC,IAAIC,MAAM,GAAGD,IAAI,CAACC,MAAM;EACxB,IAAIC,MAAM,GAAGF,IAAI,CAACG,KAAK,CAAC,CAAC;EACzB,IAAIC,YAAY,GAAGN,IAAI,GAAG,CAAC,GAAGG,MAAM,GAAGH,IAAI,GAAGA,IAAI;EAClD,IAAIO,UAAU,GAAGN,EAAE,GAAG,CAAC,GAAGE,MAAM,GAAGF,EAAE,GAAGA,EAAE;EAC1C,IAAIO,IAAI,GAAGJ,MAAM,CAACK,MAAM,CAACH,YAAY,EAAE,CAAC,CAAC;EACzC,OAAOA,YAAY,GAAG,CAAC,IAAIA,YAAY,IAAIJ,IAAI,CAACC,MAAM,IAAII,UAAU,GAAG,CAAC,IAAIA,UAAU,IAAIL,IAAI,CAACC,MAAM,GAAGD,IAAI,GAAG,EAAE,CAACQ,MAAM,CAACN,MAAM,CAACC,KAAK,CAAC,CAAC,EAAEE,UAAU,CAAC,CAAC,CAACG,MAAM,CAACF,IAAI,CAAC,CAACE,MAAM,CAACN,MAAM,CAACC,KAAK,CAACE,UAAU,EAAEL,IAAI,CAACC,MAAM,CAAC,CAAC;AAClN,CAAC,CAAC;AAEF,eAAeJ,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}