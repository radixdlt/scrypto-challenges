{"ast":null,"code":"import { __read, __spreadArray, __values } from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { arrRemove } from './util/arrRemove';\nvar Subscription = function () {\n  function Subscription(initialTeardown) {\n    this.initialTeardown = initialTeardown;\n    this.closed = false;\n    this._parentage = null;\n    this._teardowns = null;\n  }\n  Subscription.prototype.unsubscribe = function () {\n    var e_1, _a, e_2, _b;\n    var errors;\n    if (!this.closed) {\n      this.closed = true;\n      var _parentage = this._parentage;\n      if (Array.isArray(_parentage)) {\n        try {\n          for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {\n            var parent_1 = _parentage_1_1.value;\n            parent_1.remove(this);\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      } else {\n        _parentage === null || _parentage === void 0 ? void 0 : _parentage.remove(this);\n      }\n      var initialTeardown = this.initialTeardown;\n      if (isFunction(initialTeardown)) {\n        try {\n          initialTeardown();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n      var _teardowns = this._teardowns;\n      if (_teardowns) {\n        this._teardowns = null;\n        try {\n          for (var _teardowns_1 = __values(_teardowns), _teardowns_1_1 = _teardowns_1.next(); !_teardowns_1_1.done; _teardowns_1_1 = _teardowns_1.next()) {\n            var teardown_1 = _teardowns_1_1.value;\n            try {\n              execTeardown(teardown_1);\n            } catch (err) {\n              errors = errors !== null && errors !== void 0 ? errors : [];\n              if (err instanceof UnsubscriptionError) {\n                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));\n              } else {\n                errors.push(err);\n              }\n            }\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_teardowns_1_1 && !_teardowns_1_1.done && (_b = _teardowns_1.return)) _b.call(_teardowns_1);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  };\n  Subscription.prototype.add = function (teardown) {\n    var _a;\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        execTeardown(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n          teardown._addParent(this);\n        }\n        (this._teardowns = (_a = this._teardowns) !== null && _a !== void 0 ? _a : []).push(teardown);\n      }\n    }\n  };\n  Subscription.prototype._hasParent = function (parent) {\n    var _parentage = this._parentage;\n    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);\n  };\n  Subscription.prototype._addParent = function (parent) {\n    var _parentage = this._parentage;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  };\n  Subscription.prototype._removeParent = function (parent) {\n    var _parentage = this._parentage;\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  };\n  Subscription.prototype.remove = function (teardown) {\n    var _teardowns = this._teardowns;\n    _teardowns && arrRemove(_teardowns, teardown);\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  };\n  Subscription.EMPTY = function () {\n    var empty = new Subscription();\n    empty.closed = true;\n    return empty;\n  }();\n  return Subscription;\n}();\nexport { Subscription };\nexport var EMPTY_SUBSCRIPTION = Subscription.EMPTY;\nexport function isSubscription(value) {\n  return value instanceof Subscription || value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);\n}\nfunction execTeardown(teardown) {\n  if (isFunction(teardown)) {\n    teardown();\n  } else {\n    teardown.unsubscribe();\n  }\n}","map":{"version":3,"names":["isFunction","UnsubscriptionError","arrRemove","Subscription","initialTeardown","closed","_parentage","_teardowns","prototype","unsubscribe","errors","Array","isArray","_parentage_1","__values","_parentage_1_1","next","done","parent_1","value","remove","e","_teardowns_1","_teardowns_1_1","teardown_1","execTeardown","err","__spreadArray","__read","push","add","teardown","_hasParent","_addParent","_a","parent","includes","_removeParent","EMPTY","empty","EMPTY_SUBSCRIPTION","isSubscription"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/rxjs/src/internal/Subscription.ts"],"sourcesContent":["import { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic, Unsubscribable } from './types';\nimport { arrRemove } from './util/arrRemove';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY = (() => {\n    const empty = new Subscription();\n    empty.closed = true;\n    return empty;\n  })();\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   */\n  public closed = false;\n\n  private _parentage: Subscription[] | Subscription | null = null;\n\n  /**\n   * The list of registered teardowns to execute upon unsubscription. Adding and removing from this\n   * list occurs in the {@link #add} and {@link #remove} methods.\n   */\n  private _teardowns: Exclude<TeardownLogic, void>[] | null = null;\n\n  /**\n   * @param initialTeardown A function executed first as part of the teardown\n   * process that is kicked off when {@link #unsubscribe} is called.\n   */\n  constructor(private initialTeardown?: () => void) {}\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[] | undefined;\n\n    if (!this.closed) {\n      this.closed = true;\n\n      // Remove this from it's parents.\n      const { _parentage } = this;\n      if (Array.isArray(_parentage)) {\n        for (const parent of _parentage) {\n          parent.remove(this);\n        }\n      } else {\n        _parentage?.remove(this);\n      }\n\n      const { initialTeardown } = this;\n      if (isFunction(initialTeardown)) {\n        try {\n          initialTeardown();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n\n      const { _teardowns } = this;\n      if (_teardowns) {\n        this._teardowns = null;\n        for (const teardown of _teardowns) {\n          try {\n            execTeardown(teardown);\n          } catch (err) {\n            errors = errors ?? [];\n            if (err instanceof UnsubscriptionError) {\n              errors = [...errors, ...err.errors];\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  }\n\n  /**\n   * Adds a teardown to this subscription, so that teardown will be unsubscribed/called\n   * when this subscription is unsubscribed. If this subscription is already {@link #closed},\n   * because it has already been unsubscribed, then whatever teardown is passed to it\n   * will automatically be executed (unless the teardown itself is also a closed subscription).\n   *\n   * Closed Subscriptions cannot be added as teardowns to any subscription. Adding a closed\n   * subscription to a any subscription will result in no operation. (A noop).\n   *\n   * Adding a subscription to itself, or adding `null` or `undefined` will not perform any\n   * operation at all. (A noop).\n   *\n   * `Subscription` instances that are added to this instance will automatically remove themselves\n   * if they are unsubscribed. Functions and {@link Unsubscribable} objects that you wish to remove\n   * will need to be removed manually with {@link #remove}\n   *\n   * @param teardown The teardown logic to add to this subscription.\n   */\n  add(teardown: TeardownLogic): void {\n    // Only add the teardown if it's not undefined\n    // and don't add a subscription to itself.\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        // If this subscription is already closed,\n        // execute whatever teardown is handed to it automatically.\n        execTeardown(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          // We don't add closed subscriptions, and we don't add the same subscription\n          // twice. Subscription unsubscribe is idempotent.\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n          teardown._addParent(this);\n        }\n        (this._teardowns = this._teardowns ?? []).push(teardown);\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a this subscription already has a particular parent.\n   * This will signal that this subscription has already been added to the parent in question.\n   * @param parent the parent to check for\n   */\n  private _hasParent(parent: Subscription) {\n    const { _parentage } = this;\n    return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n  }\n\n  /**\n   * Adds a parent to this subscription so it can be removed from the parent if it\n   * unsubscribes on it's own.\n   *\n   * NOTE: THIS ASSUMES THAT {@link _hasParent} HAS ALREADY BEEN CHECKED.\n   * @param parent The parent subscription to add\n   */\n  private _addParent(parent: Subscription) {\n    const { _parentage } = this;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  }\n\n  /**\n   * Called on a child when it is removed via {@link #remove}.\n   * @param parent The parent to remove\n   */\n  private _removeParent(parent: Subscription) {\n    const { _parentage } = this;\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  }\n\n  /**\n   * Removes a teardown from this subscription that was previously added with the {@link #add} method.\n   *\n   * Note that `Subscription` instances, when unsubscribed, will automatically remove themselves\n   * from every other `Subscription` they have been added to. This means that using the `remove` method\n   * is not a common thing and should be used thoughtfully.\n   *\n   * If you add the same teardown instance of a function or an unsubscribable object to a `Subcription` instance\n   * more than once, you will need to call `remove` the same number of times to remove all instances.\n   *\n   * All teardown instances are removed to free up memory upon unsubscription.\n   *\n   * @param teardown The teardown to remove from this subscription\n   */\n  remove(teardown: Exclude<TeardownLogic, void>): void {\n    const { _teardowns } = this;\n    _teardowns && arrRemove(_teardowns, teardown);\n\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  }\n}\n\nexport const EMPTY_SUBSCRIPTION = Subscription.EMPTY;\n\nexport function isSubscription(value: any): value is Subscription {\n  return (\n    value instanceof Subscription ||\n    (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe))\n  );\n}\n\nfunction execTeardown(teardown: Unsubscribable | (() => void)) {\n  if (isFunction(teardown)) {\n    teardown();\n  } else {\n    teardown.unsubscribe();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}