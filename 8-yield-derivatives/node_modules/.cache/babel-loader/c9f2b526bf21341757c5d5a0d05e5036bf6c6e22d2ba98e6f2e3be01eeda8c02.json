{"ast":null,"code":"'use strict';\n\nvar parseUrl = require('url').parse;\nvar DEFAULT_PORTS = {\n  ftp: 21,\n  gopher: 70,\n  http: 80,\n  https: 443,\n  ws: 80,\n  wss: 443\n};\nvar stringEndsWith = String.prototype.endsWith || function (s) {\n  return s.length <= this.length && this.indexOf(s, this.length - s.length) !== -1;\n};\n\n/**\n * @param {string|object} url - The URL, or the result from url.parse.\n * @return {string} The URL of the proxy that should handle the request to the\n *  given URL. If no proxy is set, this will be an empty string.\n */\nfunction getProxyForUrl(url) {\n  var parsedUrl = typeof url === 'string' ? parseUrl(url) : url || {};\n  var proto = parsedUrl.protocol;\n  var hostname = parsedUrl.host;\n  var port = parsedUrl.port;\n  if (typeof hostname !== 'string' || !hostname || typeof proto !== 'string') {\n    return ''; // Don't proxy URLs without a valid scheme or host.\n  }\n  proto = proto.split(':', 1)[0];\n  // Stripping ports in this way instead of using parsedUrl.hostname to make\n  // sure that the brackets around IPv6 addresses are kept.\n  hostname = hostname.replace(/:\\d*$/, '');\n  port = parseInt(port) || DEFAULT_PORTS[proto] || 0;\n  if (!shouldProxy(hostname, port)) {\n    return ''; // Don't proxy URLs that match NO_PROXY.\n  }\n  var proxy = getEnv('npm_config_' + proto + '_proxy') || getEnv(proto + '_proxy') || getEnv('npm_config_proxy') || getEnv('all_proxy');\n  if (proxy && proxy.indexOf('://') === -1) {\n    // Missing scheme in proxy, default to the requested URL's scheme.\n    proxy = proto + '://' + proxy;\n  }\n  return proxy;\n}\n\n/**\n * Determines whether a given URL should be proxied.\n *\n * @param {string} hostname - The host name of the URL.\n * @param {number} port - The effective port of the URL.\n * @returns {boolean} Whether the given URL should be proxied.\n * @private\n */\nfunction shouldProxy(hostname, port) {\n  var NO_PROXY = (getEnv('npm_config_no_proxy') || getEnv('no_proxy')).toLowerCase();\n  if (!NO_PROXY) {\n    return true; // Always proxy if NO_PROXY is not set.\n  }\n  if (NO_PROXY === '*') {\n    return false; // Never proxy if wildcard is set.\n  }\n  return NO_PROXY.split(/[,\\s]/).every(function (proxy) {\n    if (!proxy) {\n      return true; // Skip zero-length hosts.\n    }\n    var parsedProxy = proxy.match(/^(.+):(\\d+)$/);\n    var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;\n    var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;\n    if (parsedProxyPort && parsedProxyPort !== port) {\n      return true; // Skip if ports don't match.\n    }\n    if (!/^[.*]/.test(parsedProxyHostname)) {\n      // No wildcards, so stop proxying if there is an exact match.\n      return hostname !== parsedProxyHostname;\n    }\n    if (parsedProxyHostname.charAt(0) === '*') {\n      // Remove leading wildcard.\n      parsedProxyHostname = parsedProxyHostname.slice(1);\n    }\n    // Stop proxying if the hostname ends with the no_proxy host.\n    return !stringEndsWith.call(hostname, parsedProxyHostname);\n  });\n}\n\n/**\n * Get the value for an environment variable.\n *\n * @param {string} key - The name of the environment variable.\n * @return {string} The value of the environment variable.\n * @private\n */\nfunction getEnv(key) {\n  return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';\n}\nexports.getProxyForUrl = getProxyForUrl;","map":{"version":3,"names":["parseUrl","require","parse","DEFAULT_PORTS","ftp","gopher","http","https","ws","wss","stringEndsWith","String","prototype","endsWith","s","length","indexOf","getProxyForUrl","url","parsedUrl","proto","protocol","hostname","host","port","split","replace","parseInt","shouldProxy","proxy","getEnv","NO_PROXY","toLowerCase","every","parsedProxy","match","parsedProxyHostname","parsedProxyPort","test","charAt","slice","call","key","process","env","toUpperCase","exports"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/proxy-from-env/index.js"],"sourcesContent":["'use strict';\n\nvar parseUrl = require('url').parse;\n\nvar DEFAULT_PORTS = {\n  ftp: 21,\n  gopher: 70,\n  http: 80,\n  https: 443,\n  ws: 80,\n  wss: 443,\n};\n\nvar stringEndsWith = String.prototype.endsWith || function(s) {\n  return s.length <= this.length &&\n    this.indexOf(s, this.length - s.length) !== -1;\n};\n\n/**\n * @param {string|object} url - The URL, or the result from url.parse.\n * @return {string} The URL of the proxy that should handle the request to the\n *  given URL. If no proxy is set, this will be an empty string.\n */\nfunction getProxyForUrl(url) {\n  var parsedUrl = typeof url === 'string' ? parseUrl(url) : url || {};\n  var proto = parsedUrl.protocol;\n  var hostname = parsedUrl.host;\n  var port = parsedUrl.port;\n  if (typeof hostname !== 'string' || !hostname || typeof proto !== 'string') {\n    return '';  // Don't proxy URLs without a valid scheme or host.\n  }\n\n  proto = proto.split(':', 1)[0];\n  // Stripping ports in this way instead of using parsedUrl.hostname to make\n  // sure that the brackets around IPv6 addresses are kept.\n  hostname = hostname.replace(/:\\d*$/, '');\n  port = parseInt(port) || DEFAULT_PORTS[proto] || 0;\n  if (!shouldProxy(hostname, port)) {\n    return '';  // Don't proxy URLs that match NO_PROXY.\n  }\n\n  var proxy =\n    getEnv('npm_config_' + proto + '_proxy') ||\n    getEnv(proto + '_proxy') ||\n    getEnv('npm_config_proxy') ||\n    getEnv('all_proxy');\n  if (proxy && proxy.indexOf('://') === -1) {\n    // Missing scheme in proxy, default to the requested URL's scheme.\n    proxy = proto + '://' + proxy;\n  }\n  return proxy;\n}\n\n/**\n * Determines whether a given URL should be proxied.\n *\n * @param {string} hostname - The host name of the URL.\n * @param {number} port - The effective port of the URL.\n * @returns {boolean} Whether the given URL should be proxied.\n * @private\n */\nfunction shouldProxy(hostname, port) {\n  var NO_PROXY =\n    (getEnv('npm_config_no_proxy') || getEnv('no_proxy')).toLowerCase();\n  if (!NO_PROXY) {\n    return true;  // Always proxy if NO_PROXY is not set.\n  }\n  if (NO_PROXY === '*') {\n    return false;  // Never proxy if wildcard is set.\n  }\n\n  return NO_PROXY.split(/[,\\s]/).every(function(proxy) {\n    if (!proxy) {\n      return true;  // Skip zero-length hosts.\n    }\n    var parsedProxy = proxy.match(/^(.+):(\\d+)$/);\n    var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;\n    var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;\n    if (parsedProxyPort && parsedProxyPort !== port) {\n      return true;  // Skip if ports don't match.\n    }\n\n    if (!/^[.*]/.test(parsedProxyHostname)) {\n      // No wildcards, so stop proxying if there is an exact match.\n      return hostname !== parsedProxyHostname;\n    }\n\n    if (parsedProxyHostname.charAt(0) === '*') {\n      // Remove leading wildcard.\n      parsedProxyHostname = parsedProxyHostname.slice(1);\n    }\n    // Stop proxying if the hostname ends with the no_proxy host.\n    return !stringEndsWith.call(hostname, parsedProxyHostname);\n  });\n}\n\n/**\n * Get the value for an environment variable.\n *\n * @param {string} key - The name of the environment variable.\n * @return {string} The value of the environment variable.\n * @private\n */\nfunction getEnv(key) {\n  return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';\n}\n\nexports.getProxyForUrl = getProxyForUrl;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}