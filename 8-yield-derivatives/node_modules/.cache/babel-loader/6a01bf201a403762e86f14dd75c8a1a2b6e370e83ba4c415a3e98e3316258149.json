{"ast":null,"code":"/**\n * Handle models (i.e. docs)\n * Serialization/deserialization\n * Copying\n * Querying, update\n */\n\nvar util = require('util'),\n  _ = require('underscore'),\n  modifierFunctions = {},\n  lastStepModifierFunctions = {},\n  comparisonFunctions = {},\n  logicalOperators = {},\n  arrayComparisonFunctions = {};\n\n/**\n * Check a key, throw an error if the key is non valid\n * @param {String} k key\n * @param {Model} v value, needed to treat the Date edge case\n * Non-treatable edge cases here: if part of the object if of the form { $$date: number } or { $$deleted: true }\n * Its serialized-then-deserialized version it will transformed into a Date object\n * But you really need to want it to trigger such behaviour, even when warned not to use '$' at the beginning of the field names...\n */\nfunction checkKey(k, v) {\n  if (typeof k === 'number') {\n    k = k.toString();\n  }\n  if (k[0] === '$' && !(k === '$$date' && typeof v === 'number') && !(k === '$$deleted' && v === true) && !(k === '$$indexCreated') && !(k === '$$indexRemoved')) {\n    throw new Error('Field names cannot begin with the $ character');\n  }\n  if (k.indexOf('.') !== -1) {\n    throw new Error('Field names cannot contain a .');\n  }\n}\n\n/**\n * Check a DB object and throw an error if it's not valid\n * Works by applying the above checkKey function to all fields recursively\n */\nfunction checkObject(obj) {\n  if (util.isArray(obj)) {\n    obj.forEach(function (o) {\n      checkObject(o);\n    });\n  }\n  if (typeof obj === 'object' && obj !== null) {\n    Object.keys(obj).forEach(function (k) {\n      checkKey(k, obj[k]);\n      checkObject(obj[k]);\n    });\n  }\n}\n\n/**\n * Serialize an object to be persisted to a one-line string\n * For serialization/deserialization, we use the native JSON parser and not eval or Function\n * That gives us less freedom but data entered in the database may come from users\n * so eval and the like are not safe\n * Accepted primitive types: Number, String, Boolean, Date, null\n * Accepted secondary types: Objects, Arrays\n */\nfunction serialize(obj) {\n  var res;\n  res = JSON.stringify(obj, function (k, v) {\n    checkKey(k, v);\n    if (v === undefined) {\n      return undefined;\n    }\n    if (v === null) {\n      return null;\n    }\n\n    // Hackish way of checking if object is Date (this way it works between execution contexts in node-webkit).\n    // We can't use value directly because for dates it is already string in this function (date.toJSON was already called), so we use this\n    if (typeof this[k].getTime === 'function') {\n      return {\n        $$date: this[k].getTime()\n      };\n    }\n    return v;\n  });\n  return res;\n}\n\n/**\n * From a one-line representation of an object generate by the serialize function\n * Return the object itself\n */\nfunction deserialize(rawData) {\n  return JSON.parse(rawData, function (k, v) {\n    if (k === '$$date') {\n      return new Date(v);\n    }\n    if (typeof v === 'string' || typeof v === 'number' || typeof v === 'boolean' || v === null) {\n      return v;\n    }\n    if (v && v.$$date) {\n      return v.$$date;\n    }\n    return v;\n  });\n}\n\n/**\n * Deep copy a DB object\n * The optional strictKeys flag (defaulting to false) indicates whether to copy everything or only fields\n * where the keys are valid, i.e. don't begin with $ and don't contain a .\n */\nfunction deepCopy(obj, strictKeys) {\n  var res;\n  if (typeof obj === 'boolean' || typeof obj === 'number' || typeof obj === 'string' || obj === null || util.isDate(obj)) {\n    return obj;\n  }\n  if (util.isArray(obj)) {\n    res = [];\n    obj.forEach(function (o) {\n      res.push(deepCopy(o, strictKeys));\n    });\n    return res;\n  }\n  if (typeof obj === 'object') {\n    res = {};\n    Object.keys(obj).forEach(function (k) {\n      if (!strictKeys || k[0] !== '$' && k.indexOf('.') === -1) {\n        res[k] = deepCopy(obj[k], strictKeys);\n      }\n    });\n    return res;\n  }\n  return undefined; // For now everything else is undefined. We should probably throw an error instead\n}\n\n/**\n * Tells if an object is a primitive type or a \"real\" object\n * Arrays are considered primitive\n */\nfunction isPrimitiveType(obj) {\n  return typeof obj === 'boolean' || typeof obj === 'number' || typeof obj === 'string' || obj === null || util.isDate(obj) || util.isArray(obj);\n}\n\n/**\n * Utility functions for comparing things\n * Assumes type checking was already done (a and b already have the same type)\n * compareNSB works for numbers, strings and booleans\n */\nfunction compareNSB(a, b) {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\nfunction compareArrays(a, b) {\n  var i, comp;\n  for (i = 0; i < Math.min(a.length, b.length); i += 1) {\n    comp = compareThings(a[i], b[i]);\n    if (comp !== 0) {\n      return comp;\n    }\n  }\n\n  // Common section was identical, longest one wins\n  return compareNSB(a.length, b.length);\n}\n\n/**\n * Compare { things U undefined }\n * Things are defined as any native types (string, number, boolean, null, date) and objects\n * We need to compare with undefined as it will be used in indexes\n * In the case of objects and arrays, we deep-compare\n * If two objects dont have the same type, the (arbitrary) type hierarchy is: undefined, null, number, strings, boolean, dates, arrays, objects\n * Return -1 if a < b, 1 if a > b and 0 if a = b (note that equality here is NOT the same as defined in areThingsEqual!)\n *\n * @param {Function} _compareStrings String comparing function, returning -1, 0 or 1, overriding default string comparison (useful for languages with accented letters)\n */\nfunction compareThings(a, b, _compareStrings) {\n  var aKeys,\n    bKeys,\n    comp,\n    i,\n    compareStrings = _compareStrings || compareNSB;\n\n  // undefined\n  if (a === undefined) {\n    return b === undefined ? 0 : -1;\n  }\n  if (b === undefined) {\n    return a === undefined ? 0 : 1;\n  }\n\n  // null\n  if (a === null) {\n    return b === null ? 0 : -1;\n  }\n  if (b === null) {\n    return a === null ? 0 : 1;\n  }\n\n  // Numbers\n  if (typeof a === 'number') {\n    return typeof b === 'number' ? compareNSB(a, b) : -1;\n  }\n  if (typeof b === 'number') {\n    return typeof a === 'number' ? compareNSB(a, b) : 1;\n  }\n\n  // Strings\n  if (typeof a === 'string') {\n    return typeof b === 'string' ? compareStrings(a, b) : -1;\n  }\n  if (typeof b === 'string') {\n    return typeof a === 'string' ? compareStrings(a, b) : 1;\n  }\n\n  // Booleans\n  if (typeof a === 'boolean') {\n    return typeof b === 'boolean' ? compareNSB(a, b) : -1;\n  }\n  if (typeof b === 'boolean') {\n    return typeof a === 'boolean' ? compareNSB(a, b) : 1;\n  }\n\n  // Dates\n  if (util.isDate(a)) {\n    return util.isDate(b) ? compareNSB(a.getTime(), b.getTime()) : -1;\n  }\n  if (util.isDate(b)) {\n    return util.isDate(a) ? compareNSB(a.getTime(), b.getTime()) : 1;\n  }\n\n  // Arrays (first element is most significant and so on)\n  if (util.isArray(a)) {\n    return util.isArray(b) ? compareArrays(a, b) : -1;\n  }\n  if (util.isArray(b)) {\n    return util.isArray(a) ? compareArrays(a, b) : 1;\n  }\n\n  // Objects\n  aKeys = Object.keys(a).sort();\n  bKeys = Object.keys(b).sort();\n  for (i = 0; i < Math.min(aKeys.length, bKeys.length); i += 1) {\n    comp = compareThings(a[aKeys[i]], b[bKeys[i]]);\n    if (comp !== 0) {\n      return comp;\n    }\n  }\n  return compareNSB(aKeys.length, bKeys.length);\n}\n\n// ==============================================================\n// Updating documents\n// ==============================================================\n\n/**\n * The signature of modifier functions is as follows\n * Their structure is always the same: recursively follow the dot notation while creating\n * the nested documents if needed, then apply the \"last step modifier\"\n * @param {Object} obj The model to modify\n * @param {String} field Can contain dots, in that case that means we will set a subfield recursively\n * @param {Model} value\n */\n\n/**\n * Set a field to a new value\n */\nlastStepModifierFunctions.$set = function (obj, field, value) {\n  obj[field] = value;\n};\n\n/**\n * Unset a field\n */\nlastStepModifierFunctions.$unset = function (obj, field, value) {\n  delete obj[field];\n};\n\n/**\n * Push an element to the end of an array field\n * Optional modifier $each instead of value to push several values\n * Optional modifier $slice to slice the resulting array, see https://docs.mongodb.org/manual/reference/operator/update/slice/\n * DiffÃ©reence with MongoDB: if $slice is specified and not $each, we act as if value is an empty array\n */\nlastStepModifierFunctions.$push = function (obj, field, value) {\n  // Create the array if it doesn't exist\n  if (!obj.hasOwnProperty(field)) {\n    obj[field] = [];\n  }\n  if (!util.isArray(obj[field])) {\n    throw new Error(\"Can't $push an element on non-array values\");\n  }\n  if (value !== null && typeof value === 'object' && value.$slice && value.$each === undefined) {\n    value.$each = [];\n  }\n  if (value !== null && typeof value === 'object' && value.$each) {\n    if (Object.keys(value).length >= 3 || Object.keys(value).length === 2 && value.$slice === undefined) {\n      throw new Error(\"Can only use $slice in cunjunction with $each when $push to array\");\n    }\n    if (!util.isArray(value.$each)) {\n      throw new Error(\"$each requires an array value\");\n    }\n    value.$each.forEach(function (v) {\n      obj[field].push(v);\n    });\n    if (value.$slice === undefined || typeof value.$slice !== 'number') {\n      return;\n    }\n    if (value.$slice === 0) {\n      obj[field] = [];\n    } else {\n      var start,\n        end,\n        n = obj[field].length;\n      if (value.$slice < 0) {\n        start = Math.max(0, n + value.$slice);\n        end = n;\n      } else if (value.$slice > 0) {\n        start = 0;\n        end = Math.min(n, value.$slice);\n      }\n      obj[field] = obj[field].slice(start, end);\n    }\n  } else {\n    obj[field].push(value);\n  }\n};\n\n/**\n * Add an element to an array field only if it is not already in it\n * No modification if the element is already in the array\n * Note that it doesn't check whether the original array contains duplicates\n */\nlastStepModifierFunctions.$addToSet = function (obj, field, value) {\n  var addToSet = true;\n\n  // Create the array if it doesn't exist\n  if (!obj.hasOwnProperty(field)) {\n    obj[field] = [];\n  }\n  if (!util.isArray(obj[field])) {\n    throw new Error(\"Can't $addToSet an element on non-array values\");\n  }\n  if (value !== null && typeof value === 'object' && value.$each) {\n    if (Object.keys(value).length > 1) {\n      throw new Error(\"Can't use another field in conjunction with $each\");\n    }\n    if (!util.isArray(value.$each)) {\n      throw new Error(\"$each requires an array value\");\n    }\n    value.$each.forEach(function (v) {\n      lastStepModifierFunctions.$addToSet(obj, field, v);\n    });\n  } else {\n    obj[field].forEach(function (v) {\n      if (compareThings(v, value) === 0) {\n        addToSet = false;\n      }\n    });\n    if (addToSet) {\n      obj[field].push(value);\n    }\n  }\n};\n\n/**\n * Remove the first or last element of an array\n */\nlastStepModifierFunctions.$pop = function (obj, field, value) {\n  if (!util.isArray(obj[field])) {\n    throw new Error(\"Can't $pop an element from non-array values\");\n  }\n  if (typeof value !== 'number') {\n    throw new Error(value + \" isn't an integer, can't use it with $pop\");\n  }\n  if (value === 0) {\n    return;\n  }\n  if (value > 0) {\n    obj[field] = obj[field].slice(0, obj[field].length - 1);\n  } else {\n    obj[field] = obj[field].slice(1);\n  }\n};\n\n/**\n * Removes all instances of a value from an existing array\n */\nlastStepModifierFunctions.$pull = function (obj, field, value) {\n  var arr, i;\n  if (!util.isArray(obj[field])) {\n    throw new Error(\"Can't $pull an element from non-array values\");\n  }\n  arr = obj[field];\n  for (i = arr.length - 1; i >= 0; i -= 1) {\n    if (match(arr[i], value)) {\n      arr.splice(i, 1);\n    }\n  }\n};\n\n/**\n * Increment a numeric field's value\n */\nlastStepModifierFunctions.$inc = function (obj, field, value) {\n  if (typeof value !== 'number') {\n    throw new Error(value + \" must be a number\");\n  }\n  if (typeof obj[field] !== 'number') {\n    if (!_.has(obj, field)) {\n      obj[field] = value;\n    } else {\n      throw new Error(\"Don't use the $inc modifier on non-number fields\");\n    }\n  } else {\n    obj[field] += value;\n  }\n};\n\n/**\n * Updates the value of the field, only if specified field is greater than the current value of the field\n */\nlastStepModifierFunctions.$max = function (obj, field, value) {\n  if (typeof obj[field] === 'undefined') {\n    obj[field] = value;\n  } else if (value > obj[field]) {\n    obj[field] = value;\n  }\n};\n\n/**\n * Updates the value of the field, only if specified field is smaller than the current value of the field\n */\nlastStepModifierFunctions.$min = function (obj, field, value) {\n  if (typeof obj[field] === 'undefined') {\n    obj[field] = value;\n  } else if (value < obj[field]) {\n    obj[field] = value;\n  }\n};\n\n// Given its name, create the complete modifier function\nfunction createModifierFunction(modifier) {\n  return function (obj, field, value) {\n    var fieldParts = typeof field === 'string' ? field.split('.') : field;\n    if (fieldParts.length === 1) {\n      lastStepModifierFunctions[modifier](obj, field, value);\n    } else {\n      if (obj[fieldParts[0]] === undefined) {\n        if (modifier === '$unset') {\n          return;\n        } // Bad looking specific fix, needs to be generalized modifiers that behave like $unset are implemented\n        obj[fieldParts[0]] = {};\n      }\n      modifierFunctions[modifier](obj[fieldParts[0]], fieldParts.slice(1), value);\n    }\n  };\n}\n\n// Actually create all modifier functions\nObject.keys(lastStepModifierFunctions).forEach(function (modifier) {\n  modifierFunctions[modifier] = createModifierFunction(modifier);\n});\n\n/**\n * Modify a DB object according to an update query\n */\nfunction modify(obj, updateQuery) {\n  var keys = Object.keys(updateQuery),\n    firstChars = _.map(keys, function (item) {\n      return item[0];\n    }),\n    dollarFirstChars = _.filter(firstChars, function (c) {\n      return c === '$';\n    }),\n    newDoc,\n    modifiers;\n  if (keys.indexOf('_id') !== -1 && updateQuery._id !== obj._id) {\n    throw new Error(\"You cannot change a document's _id\");\n  }\n  if (dollarFirstChars.length !== 0 && dollarFirstChars.length !== firstChars.length) {\n    throw new Error(\"You cannot mix modifiers and normal fields\");\n  }\n  if (dollarFirstChars.length === 0) {\n    // Simply replace the object with the update query contents\n    newDoc = deepCopy(updateQuery);\n    newDoc._id = obj._id;\n  } else {\n    // Apply modifiers\n    modifiers = _.uniq(keys);\n    newDoc = deepCopy(obj);\n    modifiers.forEach(function (m) {\n      var keys;\n      if (!modifierFunctions[m]) {\n        throw new Error(\"Unknown modifier \" + m);\n      }\n\n      // Can't rely on Object.keys throwing on non objects since ES6\n      // Not 100% satisfying as non objects can be interpreted as objects but no false negatives so we can live with it\n      if (typeof updateQuery[m] !== 'object') {\n        throw new Error(\"Modifier \" + m + \"'s argument must be an object\");\n      }\n      keys = Object.keys(updateQuery[m]);\n      keys.forEach(function (k) {\n        modifierFunctions[m](newDoc, k, updateQuery[m][k]);\n      });\n    });\n  }\n\n  // Check result is valid and return it\n  checkObject(newDoc);\n  if (obj._id !== newDoc._id) {\n    throw new Error(\"You can't change a document's _id\");\n  }\n  return newDoc;\n}\n;\n\n// ==============================================================\n// Finding documents\n// ==============================================================\n\n/**\n * Get a value from object with dot notation\n * @param {Object} obj\n * @param {String} field\n */\nfunction getDotValue(obj, field) {\n  var fieldParts = typeof field === 'string' ? field.split('.') : field,\n    i,\n    objs;\n  if (!obj) {\n    return undefined;\n  } // field cannot be empty so that means we should return undefined so that nothing can match\n\n  if (fieldParts.length === 0) {\n    return obj;\n  }\n  if (fieldParts.length === 1) {\n    return obj[fieldParts[0]];\n  }\n  if (util.isArray(obj[fieldParts[0]])) {\n    // If the next field is an integer, return only this item of the array\n    i = parseInt(fieldParts[1], 10);\n    if (typeof i === 'number' && !isNaN(i)) {\n      return getDotValue(obj[fieldParts[0]][i], fieldParts.slice(2));\n    }\n\n    // Return the array of values\n    objs = new Array();\n    for (i = 0; i < obj[fieldParts[0]].length; i += 1) {\n      objs.push(getDotValue(obj[fieldParts[0]][i], fieldParts.slice(1)));\n    }\n    return objs;\n  } else {\n    return getDotValue(obj[fieldParts[0]], fieldParts.slice(1));\n  }\n}\n\n/**\n * Check whether 'things' are equal\n * Things are defined as any native types (string, number, boolean, null, date) and objects\n * In the case of object, we check deep equality\n * Returns true if they are, false otherwise\n */\nfunction areThingsEqual(a, b) {\n  var aKeys, bKeys, i;\n\n  // Strings, booleans, numbers, null\n  if (a === null || typeof a === 'string' || typeof a === 'boolean' || typeof a === 'number' || b === null || typeof b === 'string' || typeof b === 'boolean' || typeof b === 'number') {\n    return a === b;\n  }\n\n  // Dates\n  if (util.isDate(a) || util.isDate(b)) {\n    return util.isDate(a) && util.isDate(b) && a.getTime() === b.getTime();\n  }\n\n  // Arrays (no match since arrays are used as a $in)\n  // undefined (no match since they mean field doesn't exist and can't be serialized)\n  if (!(util.isArray(a) && util.isArray(b)) && (util.isArray(a) || util.isArray(b)) || a === undefined || b === undefined) {\n    return false;\n  }\n\n  // General objects (check for deep equality)\n  // a and b should be objects at this point\n  try {\n    aKeys = Object.keys(a);\n    bKeys = Object.keys(b);\n  } catch (e) {\n    return false;\n  }\n  if (aKeys.length !== bKeys.length) {\n    return false;\n  }\n  for (i = 0; i < aKeys.length; i += 1) {\n    if (bKeys.indexOf(aKeys[i]) === -1) {\n      return false;\n    }\n    if (!areThingsEqual(a[aKeys[i]], b[aKeys[i]])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Check that two values are comparable\n */\nfunction areComparable(a, b) {\n  if (typeof a !== 'string' && typeof a !== 'number' && !util.isDate(a) && typeof b !== 'string' && typeof b !== 'number' && !util.isDate(b)) {\n    return false;\n  }\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Arithmetic and comparison operators\n * @param {Native value} a Value in the object\n * @param {Native value} b Value in the query\n */\ncomparisonFunctions.$lt = function (a, b) {\n  return areComparable(a, b) && a < b;\n};\ncomparisonFunctions.$lte = function (a, b) {\n  return areComparable(a, b) && a <= b;\n};\ncomparisonFunctions.$gt = function (a, b) {\n  return areComparable(a, b) && a > b;\n};\ncomparisonFunctions.$gte = function (a, b) {\n  return areComparable(a, b) && a >= b;\n};\ncomparisonFunctions.$ne = function (a, b) {\n  if (a === undefined) {\n    return true;\n  }\n  return !areThingsEqual(a, b);\n};\ncomparisonFunctions.$in = function (a, b) {\n  var i;\n  if (!util.isArray(b)) {\n    throw new Error(\"$in operator called with a non-array\");\n  }\n  for (i = 0; i < b.length; i += 1) {\n    if (areThingsEqual(a, b[i])) {\n      return true;\n    }\n  }\n  return false;\n};\ncomparisonFunctions.$nin = function (a, b) {\n  if (!util.isArray(b)) {\n    throw new Error(\"$nin operator called with a non-array\");\n  }\n  return !comparisonFunctions.$in(a, b);\n};\ncomparisonFunctions.$regex = function (a, b) {\n  if (!util.isRegExp(b)) {\n    throw new Error(\"$regex operator called with non regular expression\");\n  }\n  if (typeof a !== 'string') {\n    return false;\n  } else {\n    return b.test(a);\n  }\n};\ncomparisonFunctions.$exists = function (value, exists) {\n  if (exists || exists === '') {\n    // This will be true for all values of exists except false, null, undefined and 0\n    exists = true; // That's strange behaviour (we should only use true/false) but that's the way Mongo does it...\n  } else {\n    exists = false;\n  }\n  if (value === undefined) {\n    return !exists;\n  } else {\n    return exists;\n  }\n};\n\n// Specific to arrays\ncomparisonFunctions.$size = function (obj, value) {\n  if (!util.isArray(obj)) {\n    return false;\n  }\n  if (value % 1 !== 0) {\n    throw new Error(\"$size operator called without an integer\");\n  }\n  return obj.length == value;\n};\ncomparisonFunctions.$elemMatch = function (obj, value) {\n  if (!util.isArray(obj)) {\n    return false;\n  }\n  var i = obj.length;\n  var result = false; // Initialize result\n  while (i--) {\n    if (match(obj[i], value)) {\n      // If match for array element, return true\n      result = true;\n      break;\n    }\n  }\n  return result;\n};\narrayComparisonFunctions.$size = true;\narrayComparisonFunctions.$elemMatch = true;\n\n/**\n * Match any of the subqueries\n * @param {Model} obj\n * @param {Array of Queries} query\n */\nlogicalOperators.$or = function (obj, query) {\n  var i;\n  if (!util.isArray(query)) {\n    throw new Error(\"$or operator used without an array\");\n  }\n  for (i = 0; i < query.length; i += 1) {\n    if (match(obj, query[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Match all of the subqueries\n * @param {Model} obj\n * @param {Array of Queries} query\n */\nlogicalOperators.$and = function (obj, query) {\n  var i;\n  if (!util.isArray(query)) {\n    throw new Error(\"$and operator used without an array\");\n  }\n  for (i = 0; i < query.length; i += 1) {\n    if (!match(obj, query[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Inverted match of the query\n * @param {Model} obj\n * @param {Query} query\n */\nlogicalOperators.$not = function (obj, query) {\n  return !match(obj, query);\n};\n\n/**\n * Use a function to match\n * @param {Model} obj\n * @param {Query} query\n */\nlogicalOperators.$where = function (obj, fn) {\n  var result;\n  if (!_.isFunction(fn)) {\n    throw new Error(\"$where operator used without a function\");\n  }\n  result = fn.call(obj);\n  if (!_.isBoolean(result)) {\n    throw new Error(\"$where function must return boolean\");\n  }\n  return result;\n};\n\n/**\n * Tell if a given document matches a query\n * @param {Object} obj Document to check\n * @param {Object} query\n */\nfunction match(obj, query) {\n  var queryKeys, queryKey, queryValue, i;\n\n  // Primitive query against a primitive type\n  // This is a bit of a hack since we construct an object with an arbitrary key only to dereference it later\n  // But I don't have time for a cleaner implementation now\n  if (isPrimitiveType(obj) || isPrimitiveType(query)) {\n    return matchQueryPart({\n      needAKey: obj\n    }, 'needAKey', query);\n  }\n\n  // Normal query\n  queryKeys = Object.keys(query);\n  for (i = 0; i < queryKeys.length; i += 1) {\n    queryKey = queryKeys[i];\n    queryValue = query[queryKey];\n    if (queryKey[0] === '$') {\n      if (!logicalOperators[queryKey]) {\n        throw new Error(\"Unknown logical operator \" + queryKey);\n      }\n      if (!logicalOperators[queryKey](obj, queryValue)) {\n        return false;\n      }\n    } else {\n      if (!matchQueryPart(obj, queryKey, queryValue)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n;\n\n/**\n * Match an object against a specific { key: value } part of a query\n * if the treatObjAsValue flag is set, don't try to match every part separately, but the array as a whole\n */\nfunction matchQueryPart(obj, queryKey, queryValue, treatObjAsValue) {\n  var objValue = getDotValue(obj, queryKey),\n    i,\n    keys,\n    firstChars,\n    dollarFirstChars;\n\n  // Check if the value is an array if we don't force a treatment as value\n  if (util.isArray(objValue) && !treatObjAsValue) {\n    // If the queryValue is an array, try to perform an exact match\n    if (util.isArray(queryValue)) {\n      return matchQueryPart(obj, queryKey, queryValue, true);\n    }\n\n    // Check if we are using an array-specific comparison function\n    if (queryValue !== null && typeof queryValue === 'object' && !util.isRegExp(queryValue)) {\n      keys = Object.keys(queryValue);\n      for (i = 0; i < keys.length; i += 1) {\n        if (arrayComparisonFunctions[keys[i]]) {\n          return matchQueryPart(obj, queryKey, queryValue, true);\n        }\n      }\n    }\n\n    // If not, treat it as an array of { obj, query } where there needs to be at least one match\n    for (i = 0; i < objValue.length; i += 1) {\n      if (matchQueryPart({\n        k: objValue[i]\n      }, 'k', queryValue)) {\n        return true;\n      } // k here could be any string\n    }\n    return false;\n  }\n\n  // queryValue is an actual object. Determine whether it contains comparison operators\n  // or only normal fields. Mixed objects are not allowed\n  if (queryValue !== null && typeof queryValue === 'object' && !util.isRegExp(queryValue) && !util.isArray(queryValue)) {\n    keys = Object.keys(queryValue);\n    firstChars = _.map(keys, function (item) {\n      return item[0];\n    });\n    dollarFirstChars = _.filter(firstChars, function (c) {\n      return c === '$';\n    });\n    if (dollarFirstChars.length !== 0 && dollarFirstChars.length !== firstChars.length) {\n      throw new Error(\"You cannot mix operators and normal fields\");\n    }\n\n    // queryValue is an object of this form: { $comparisonOperator1: value1, ... }\n    if (dollarFirstChars.length > 0) {\n      for (i = 0; i < keys.length; i += 1) {\n        if (!comparisonFunctions[keys[i]]) {\n          throw new Error(\"Unknown comparison function \" + keys[i]);\n        }\n        if (!comparisonFunctions[keys[i]](objValue, queryValue[keys[i]])) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  // Using regular expressions with basic querying\n  if (util.isRegExp(queryValue)) {\n    return comparisonFunctions.$regex(objValue, queryValue);\n  }\n\n  // queryValue is either a native value or a normal object\n  // Basic matching is possible\n  if (!areThingsEqual(objValue, queryValue)) {\n    return false;\n  }\n  return true;\n}\n\n// Interface\nmodule.exports.serialize = serialize;\nmodule.exports.deserialize = deserialize;\nmodule.exports.deepCopy = deepCopy;\nmodule.exports.checkObject = checkObject;\nmodule.exports.isPrimitiveType = isPrimitiveType;\nmodule.exports.modify = modify;\nmodule.exports.getDotValue = getDotValue;\nmodule.exports.match = match;\nmodule.exports.areThingsEqual = areThingsEqual;\nmodule.exports.compareThings = compareThings;","map":{"version":3,"names":["util","require","_","modifierFunctions","lastStepModifierFunctions","comparisonFunctions","logicalOperators","arrayComparisonFunctions","checkKey","k","v","toString","Error","indexOf","checkObject","obj","isArray","forEach","o","Object","keys","serialize","res","JSON","stringify","undefined","getTime","$$date","deserialize","rawData","parse","Date","deepCopy","strictKeys","isDate","push","isPrimitiveType","compareNSB","a","b","compareArrays","i","comp","Math","min","length","compareThings","_compareStrings","aKeys","bKeys","compareStrings","sort","$set","field","value","$unset","$push","hasOwnProperty","$slice","$each","start","end","n","max","slice","$addToSet","addToSet","$pop","$pull","arr","match","splice","$inc","has","$max","$min","createModifierFunction","modifier","fieldParts","split","modify","updateQuery","firstChars","map","item","dollarFirstChars","filter","c","newDoc","modifiers","_id","uniq","m","getDotValue","objs","parseInt","isNaN","Array","areThingsEqual","e","areComparable","$lt","$lte","$gt","$gte","$ne","$in","$nin","$regex","isRegExp","test","$exists","exists","$size","$elemMatch","result","$or","query","$and","$not","$where","fn","isFunction","call","isBoolean","queryKeys","queryKey","queryValue","matchQueryPart","needAKey","treatObjAsValue","objValue","module","exports"],"sources":["/Users/mdabdurrazzak/RadInsu/node_modules/nedb/lib/model.js"],"sourcesContent":["/**\n * Handle models (i.e. docs)\n * Serialization/deserialization\n * Copying\n * Querying, update\n */\n\nvar util = require('util')\n  , _ = require('underscore')\n  , modifierFunctions = {}\n  , lastStepModifierFunctions = {}\n  , comparisonFunctions = {}\n  , logicalOperators = {}\n  , arrayComparisonFunctions = {}\n  ;\n\n\n/**\n * Check a key, throw an error if the key is non valid\n * @param {String} k key\n * @param {Model} v value, needed to treat the Date edge case\n * Non-treatable edge cases here: if part of the object if of the form { $$date: number } or { $$deleted: true }\n * Its serialized-then-deserialized version it will transformed into a Date object\n * But you really need to want it to trigger such behaviour, even when warned not to use '$' at the beginning of the field names...\n */\nfunction checkKey (k, v) {\n  if (typeof k === 'number') {\n    k = k.toString();\n  }\n\n  if (k[0] === '$' && !(k === '$$date' && typeof v === 'number') && !(k === '$$deleted' && v === true) && !(k === '$$indexCreated') && !(k === '$$indexRemoved')) {\n    throw new Error('Field names cannot begin with the $ character');\n  }\n\n  if (k.indexOf('.') !== -1) {\n    throw new Error('Field names cannot contain a .');\n  }\n}\n\n\n/**\n * Check a DB object and throw an error if it's not valid\n * Works by applying the above checkKey function to all fields recursively\n */\nfunction checkObject (obj) {\n  if (util.isArray(obj)) {\n    obj.forEach(function (o) {\n      checkObject(o);\n    });\n  }\n\n  if (typeof obj === 'object' && obj !== null) {\n    Object.keys(obj).forEach(function (k) {\n      checkKey(k, obj[k]);\n      checkObject(obj[k]);\n    });\n  }\n}\n\n\n/**\n * Serialize an object to be persisted to a one-line string\n * For serialization/deserialization, we use the native JSON parser and not eval or Function\n * That gives us less freedom but data entered in the database may come from users\n * so eval and the like are not safe\n * Accepted primitive types: Number, String, Boolean, Date, null\n * Accepted secondary types: Objects, Arrays\n */\nfunction serialize (obj) {\n  var res;\n\n  res = JSON.stringify(obj, function (k, v) {\n    checkKey(k, v);\n\n    if (v === undefined) { return undefined; }\n    if (v === null) { return null; }\n\n    // Hackish way of checking if object is Date (this way it works between execution contexts in node-webkit).\n    // We can't use value directly because for dates it is already string in this function (date.toJSON was already called), so we use this\n    if (typeof this[k].getTime === 'function') { return { $$date: this[k].getTime() }; }\n\n    return v;\n  });\n\n  return res;\n}\n\n\n/**\n * From a one-line representation of an object generate by the serialize function\n * Return the object itself\n */\nfunction deserialize (rawData) {\n  return JSON.parse(rawData, function (k, v) {\n    if (k === '$$date') { return new Date(v); }\n    if (typeof v === 'string' || typeof v === 'number' || typeof v === 'boolean' || v === null) { return v; }\n    if (v && v.$$date) { return v.$$date; }\n\n    return v;\n  });\n}\n\n\n/**\n * Deep copy a DB object\n * The optional strictKeys flag (defaulting to false) indicates whether to copy everything or only fields\n * where the keys are valid, i.e. don't begin with $ and don't contain a .\n */\nfunction deepCopy (obj, strictKeys) {\n  var res;\n\n  if ( typeof obj === 'boolean' ||\n       typeof obj === 'number' ||\n       typeof obj === 'string' ||\n       obj === null ||\n       (util.isDate(obj)) ) {\n    return obj;\n  }\n\n  if (util.isArray(obj)) {\n    res = [];\n    obj.forEach(function (o) { res.push(deepCopy(o, strictKeys)); });\n    return res;\n  }\n\n  if (typeof obj === 'object') {\n    res = {};\n    Object.keys(obj).forEach(function (k) {\n      if (!strictKeys || (k[0] !== '$' && k.indexOf('.') === -1)) {\n        res[k] = deepCopy(obj[k], strictKeys);\n      }\n    });\n    return res;\n  }\n\n  return undefined;   // For now everything else is undefined. We should probably throw an error instead\n}\n\n\n/**\n * Tells if an object is a primitive type or a \"real\" object\n * Arrays are considered primitive\n */\nfunction isPrimitiveType (obj) {\n  return ( typeof obj === 'boolean' ||\n       typeof obj === 'number' ||\n       typeof obj === 'string' ||\n       obj === null ||\n       util.isDate(obj) ||\n       util.isArray(obj));\n}\n\n\n/**\n * Utility functions for comparing things\n * Assumes type checking was already done (a and b already have the same type)\n * compareNSB works for numbers, strings and booleans\n */\nfunction compareNSB (a, b) {\n  if (a < b) { return -1; }\n  if (a > b) { return 1; }\n  return 0;\n}\n\nfunction compareArrays (a, b) {\n  var i, comp;\n\n  for (i = 0; i < Math.min(a.length, b.length); i += 1) {\n    comp = compareThings(a[i], b[i]);\n\n    if (comp !== 0) { return comp; }\n  }\n\n  // Common section was identical, longest one wins\n  return compareNSB(a.length, b.length);\n}\n\n\n/**\n * Compare { things U undefined }\n * Things are defined as any native types (string, number, boolean, null, date) and objects\n * We need to compare with undefined as it will be used in indexes\n * In the case of objects and arrays, we deep-compare\n * If two objects dont have the same type, the (arbitrary) type hierarchy is: undefined, null, number, strings, boolean, dates, arrays, objects\n * Return -1 if a < b, 1 if a > b and 0 if a = b (note that equality here is NOT the same as defined in areThingsEqual!)\n *\n * @param {Function} _compareStrings String comparing function, returning -1, 0 or 1, overriding default string comparison (useful for languages with accented letters)\n */\nfunction compareThings (a, b, _compareStrings) {\n  var aKeys, bKeys, comp, i\n    , compareStrings = _compareStrings || compareNSB;\n\n  // undefined\n  if (a === undefined) { return b === undefined ? 0 : -1; }\n  if (b === undefined) { return a === undefined ? 0 : 1; }\n\n  // null\n  if (a === null) { return b === null ? 0 : -1; }\n  if (b === null) { return a === null ? 0 : 1; }\n\n  // Numbers\n  if (typeof a === 'number') { return typeof b === 'number' ? compareNSB(a, b) : -1; }\n  if (typeof b === 'number') { return typeof a === 'number' ? compareNSB(a, b) : 1; }\n\n  // Strings\n  if (typeof a === 'string') { return typeof b === 'string' ? compareStrings(a, b) : -1; }\n  if (typeof b === 'string') { return typeof a === 'string' ? compareStrings(a, b) : 1; }\n\n  // Booleans\n  if (typeof a === 'boolean') { return typeof b === 'boolean' ? compareNSB(a, b) : -1; }\n  if (typeof b === 'boolean') { return typeof a === 'boolean' ? compareNSB(a, b) : 1; }\n\n  // Dates\n  if (util.isDate(a)) { return util.isDate(b) ? compareNSB(a.getTime(), b.getTime()) : -1; }\n  if (util.isDate(b)) { return util.isDate(a) ? compareNSB(a.getTime(), b.getTime()) : 1; }\n\n  // Arrays (first element is most significant and so on)\n  if (util.isArray(a)) { return util.isArray(b) ? compareArrays(a, b) : -1; }\n  if (util.isArray(b)) { return util.isArray(a) ? compareArrays(a, b) : 1; }\n\n  // Objects\n  aKeys = Object.keys(a).sort();\n  bKeys = Object.keys(b).sort();\n\n  for (i = 0; i < Math.min(aKeys.length, bKeys.length); i += 1) {\n    comp = compareThings(a[aKeys[i]], b[bKeys[i]]);\n\n    if (comp !== 0) { return comp; }\n  }\n\n  return compareNSB(aKeys.length, bKeys.length);\n}\n\n\n\n// ==============================================================\n// Updating documents\n// ==============================================================\n\n/**\n * The signature of modifier functions is as follows\n * Their structure is always the same: recursively follow the dot notation while creating\n * the nested documents if needed, then apply the \"last step modifier\"\n * @param {Object} obj The model to modify\n * @param {String} field Can contain dots, in that case that means we will set a subfield recursively\n * @param {Model} value\n */\n\n/**\n * Set a field to a new value\n */\nlastStepModifierFunctions.$set = function (obj, field, value) {\n  obj[field] = value;\n};\n\n\n/**\n * Unset a field\n */\nlastStepModifierFunctions.$unset = function (obj, field, value) {\n  delete obj[field];\n};\n\n\n/**\n * Push an element to the end of an array field\n * Optional modifier $each instead of value to push several values\n * Optional modifier $slice to slice the resulting array, see https://docs.mongodb.org/manual/reference/operator/update/slice/\n * DiffÃ©reence with MongoDB: if $slice is specified and not $each, we act as if value is an empty array\n */\nlastStepModifierFunctions.$push = function (obj, field, value) {\n  // Create the array if it doesn't exist\n  if (!obj.hasOwnProperty(field)) { obj[field] = []; }\n\n  if (!util.isArray(obj[field])) { throw new Error(\"Can't $push an element on non-array values\"); }\n\n  if (value !== null && typeof value === 'object' && value.$slice && value.$each === undefined) {\n    value.$each = [];\n  }\n\n  if (value !== null && typeof value === 'object' && value.$each) {\n    if (Object.keys(value).length >= 3 || (Object.keys(value).length === 2 && value.$slice === undefined)) { throw new Error(\"Can only use $slice in cunjunction with $each when $push to array\"); }\n    if (!util.isArray(value.$each)) { throw new Error(\"$each requires an array value\"); }\n\n    value.$each.forEach(function (v) {\n      obj[field].push(v);\n    });\n\n    if (value.$slice === undefined || typeof value.$slice !== 'number') { return; }\n\n    if (value.$slice === 0) {\n      obj[field] = [];\n    } else {\n      var start, end, n = obj[field].length;\n      if (value.$slice < 0) {\n        start = Math.max(0, n + value.$slice);\n        end = n;\n      } else if (value.$slice > 0) {\n        start = 0;\n        end = Math.min(n, value.$slice);\n      }\n      obj[field] = obj[field].slice(start, end);\n    }\n  } else {\n    obj[field].push(value);\n  }\n};\n\n\n/**\n * Add an element to an array field only if it is not already in it\n * No modification if the element is already in the array\n * Note that it doesn't check whether the original array contains duplicates\n */\nlastStepModifierFunctions.$addToSet = function (obj, field, value) {\n  var addToSet = true;\n\n  // Create the array if it doesn't exist\n  if (!obj.hasOwnProperty(field)) { obj[field] = []; }\n\n  if (!util.isArray(obj[field])) { throw new Error(\"Can't $addToSet an element on non-array values\"); }\n\n  if (value !== null && typeof value === 'object' && value.$each) {\n    if (Object.keys(value).length > 1) { throw new Error(\"Can't use another field in conjunction with $each\"); }\n    if (!util.isArray(value.$each)) { throw new Error(\"$each requires an array value\"); }\n\n    value.$each.forEach(function (v) {\n      lastStepModifierFunctions.$addToSet(obj, field, v);\n    });\n  } else {\n    obj[field].forEach(function (v) {\n      if (compareThings(v, value) === 0) { addToSet = false; }\n    });\n    if (addToSet) { obj[field].push(value); }\n  }\n};\n\n\n/**\n * Remove the first or last element of an array\n */\nlastStepModifierFunctions.$pop = function (obj, field, value) {\n  if (!util.isArray(obj[field])) { throw new Error(\"Can't $pop an element from non-array values\"); }\n  if (typeof value !== 'number') { throw new Error(value + \" isn't an integer, can't use it with $pop\"); }\n  if (value === 0) { return; }\n\n  if (value > 0) {\n    obj[field] = obj[field].slice(0, obj[field].length - 1);\n  } else {\n    obj[field] = obj[field].slice(1);\n  }\n};\n\n\n/**\n * Removes all instances of a value from an existing array\n */\nlastStepModifierFunctions.$pull = function (obj, field, value) {\n  var arr, i;\n\n  if (!util.isArray(obj[field])) { throw new Error(\"Can't $pull an element from non-array values\"); }\n\n  arr = obj[field];\n  for (i = arr.length - 1; i >= 0; i -= 1) {\n    if (match(arr[i], value)) {\n      arr.splice(i, 1);\n    }\n  }\n};\n\n\n/**\n * Increment a numeric field's value\n */\nlastStepModifierFunctions.$inc = function (obj, field, value) {\n  if (typeof value !== 'number') { throw new Error(value + \" must be a number\"); }\n\n  if (typeof obj[field] !== 'number') {\n    if (!_.has(obj, field)) {\n      obj[field] = value;\n    } else {\n      throw new Error(\"Don't use the $inc modifier on non-number fields\");\n    }\n  } else {\n    obj[field] += value;\n  }\n};\n\n/**\n * Updates the value of the field, only if specified field is greater than the current value of the field\n */\nlastStepModifierFunctions.$max = function (obj, field, value) {\n  if (typeof obj[field] === 'undefined') {\n    obj[field] = value;\n  } else if (value > obj[field]) {\n    obj[field] = value;\n  }\n};\n\n/**\n * Updates the value of the field, only if specified field is smaller than the current value of the field\n */\nlastStepModifierFunctions.$min = function (obj, field, value) {\n  if (typeof obj[field] === 'undefined') {Â \n    obj[field] = value;\n  } else if (value < obj[field]) {\n    obj[field] = value;\n  }\n};\n\n// Given its name, create the complete modifier function\nfunction createModifierFunction (modifier) {\n  return function (obj, field, value) {\n    var fieldParts = typeof field === 'string' ? field.split('.') : field;\n\n    if (fieldParts.length === 1) {\n      lastStepModifierFunctions[modifier](obj, field, value);\n    } else {\n      if (obj[fieldParts[0]] === undefined) {\n        if (modifier === '$unset') { return; }   // Bad looking specific fix, needs to be generalized modifiers that behave like $unset are implemented\n        obj[fieldParts[0]] = {};\n      }\n      modifierFunctions[modifier](obj[fieldParts[0]], fieldParts.slice(1), value);\n    }\n  };\n}\n\n// Actually create all modifier functions\nObject.keys(lastStepModifierFunctions).forEach(function (modifier) {\n  modifierFunctions[modifier] = createModifierFunction(modifier);\n});\n\n\n/**\n * Modify a DB object according to an update query\n */\nfunction modify (obj, updateQuery) {\n  var keys = Object.keys(updateQuery)\n    , firstChars = _.map(keys, function (item) { return item[0]; })\n    , dollarFirstChars = _.filter(firstChars, function (c) { return c === '$'; })\n    , newDoc, modifiers\n    ;\n\n  if (keys.indexOf('_id') !== -1 && updateQuery._id !== obj._id) { throw new Error(\"You cannot change a document's _id\"); }\n\n  if (dollarFirstChars.length !== 0 && dollarFirstChars.length !== firstChars.length) {\n    throw new Error(\"You cannot mix modifiers and normal fields\");\n  }\n\n  if (dollarFirstChars.length === 0) {\n    // Simply replace the object with the update query contents\n    newDoc = deepCopy(updateQuery);\n    newDoc._id = obj._id;\n  } else {\n    // Apply modifiers\n    modifiers = _.uniq(keys);\n    newDoc = deepCopy(obj);\n    modifiers.forEach(function (m) {\n      var keys;\n\n      if (!modifierFunctions[m]) { throw new Error(\"Unknown modifier \" + m); }\n\n      // Can't rely on Object.keys throwing on non objects since ES6\n      // Not 100% satisfying as non objects can be interpreted as objects but no false negatives so we can live with it\n      if (typeof updateQuery[m] !== 'object') {\n        throw new Error(\"Modifier \" + m + \"'s argument must be an object\");\n      }\n\n      keys = Object.keys(updateQuery[m]);\n      keys.forEach(function (k) {\n        modifierFunctions[m](newDoc, k, updateQuery[m][k]);\n      });\n    });\n  }\n\n  // Check result is valid and return it\n  checkObject(newDoc);\n\n  if (obj._id !== newDoc._id) { throw new Error(\"You can't change a document's _id\"); }\n  return newDoc;\n};\n\n\n// ==============================================================\n// Finding documents\n// ==============================================================\n\n/**\n * Get a value from object with dot notation\n * @param {Object} obj\n * @param {String} field\n */\nfunction getDotValue (obj, field) {\n  var fieldParts = typeof field === 'string' ? field.split('.') : field\n    , i, objs;\n\n  if (!obj) { return undefined; }   // field cannot be empty so that means we should return undefined so that nothing can match\n\n  if (fieldParts.length === 0) { return obj; }\n\n  if (fieldParts.length === 1) { return obj[fieldParts[0]]; }\n\n  if (util.isArray(obj[fieldParts[0]])) {\n    // If the next field is an integer, return only this item of the array\n    i = parseInt(fieldParts[1], 10);\n    if (typeof i === 'number' && !isNaN(i)) {\n      return getDotValue(obj[fieldParts[0]][i], fieldParts.slice(2))\n    }\n\n    // Return the array of values\n    objs = new Array();\n    for (i = 0; i < obj[fieldParts[0]].length; i += 1) {\n       objs.push(getDotValue(obj[fieldParts[0]][i], fieldParts.slice(1)));\n    }\n    return objs;\n  } else {\n    return getDotValue(obj[fieldParts[0]], fieldParts.slice(1));\n  }\n}\n\n\n/**\n * Check whether 'things' are equal\n * Things are defined as any native types (string, number, boolean, null, date) and objects\n * In the case of object, we check deep equality\n * Returns true if they are, false otherwise\n */\nfunction areThingsEqual (a, b) {\n  var aKeys , bKeys , i;\n\n  // Strings, booleans, numbers, null\n  if (a === null || typeof a === 'string' || typeof a === 'boolean' || typeof a === 'number' ||\n      b === null || typeof b === 'string' || typeof b === 'boolean' || typeof b === 'number') { return a === b; }\n\n  // Dates\n  if (util.isDate(a) || util.isDate(b)) { return util.isDate(a) && util.isDate(b) && a.getTime() === b.getTime(); }\n\n  // Arrays (no match since arrays are used as a $in)\n  // undefined (no match since they mean field doesn't exist and can't be serialized)\n  if ((!(util.isArray(a) && util.isArray(b)) && (util.isArray(a) || util.isArray(b))) || a === undefined || b === undefined) { return false; }\n\n  // General objects (check for deep equality)\n  // a and b should be objects at this point\n  try {\n    aKeys = Object.keys(a);\n    bKeys = Object.keys(b);\n  } catch (e) {\n    return false;\n  }\n\n  if (aKeys.length !== bKeys.length) { return false; }\n  for (i = 0; i < aKeys.length; i += 1) {\n    if (bKeys.indexOf(aKeys[i]) === -1) { return false; }\n    if (!areThingsEqual(a[aKeys[i]], b[aKeys[i]])) { return false; }\n  }\n  return true;\n}\n\n\n/**\n * Check that two values are comparable\n */\nfunction areComparable (a, b) {\n  if (typeof a !== 'string' && typeof a !== 'number' && !util.isDate(a) &&\n      typeof b !== 'string' && typeof b !== 'number' && !util.isDate(b)) {\n    return false;\n  }\n\n  if (typeof a !== typeof b) { return false; }\n\n  return true;\n}\n\n\n/**\n * Arithmetic and comparison operators\n * @param {Native value} a Value in the object\n * @param {Native value} b Value in the query\n */\ncomparisonFunctions.$lt = function (a, b) {\n  return areComparable(a, b) && a < b;\n};\n\ncomparisonFunctions.$lte = function (a, b) {\n  return areComparable(a, b) && a <= b;\n};\n\ncomparisonFunctions.$gt = function (a, b) {\n  return areComparable(a, b) && a > b;\n};\n\ncomparisonFunctions.$gte = function (a, b) {\n  return areComparable(a, b) && a >= b;\n};\n\ncomparisonFunctions.$ne = function (a, b) {\n  if (a === undefined) { return true; }\n  return !areThingsEqual(a, b);\n};\n\ncomparisonFunctions.$in = function (a, b) {\n  var i;\n\n  if (!util.isArray(b)) { throw new Error(\"$in operator called with a non-array\"); }\n\n  for (i = 0; i < b.length; i += 1) {\n    if (areThingsEqual(a, b[i])) { return true; }\n  }\n\n  return false;\n};\n\ncomparisonFunctions.$nin = function (a, b) {\n  if (!util.isArray(b)) { throw new Error(\"$nin operator called with a non-array\"); }\n\n  return !comparisonFunctions.$in(a, b);\n};\n\ncomparisonFunctions.$regex = function (a, b) {\n  if (!util.isRegExp(b)) { throw new Error(\"$regex operator called with non regular expression\"); }\n\n  if (typeof a !== 'string') {\n    return false\n  } else {\n    return b.test(a);\n  }\n};\n\ncomparisonFunctions.$exists = function (value, exists) {\n  if (exists || exists === '') {   // This will be true for all values of exists except false, null, undefined and 0\n    exists = true;                 // That's strange behaviour (we should only use true/false) but that's the way Mongo does it...\n  } else {\n    exists = false;\n  }\n\n  if (value === undefined) {\n    return !exists\n  } else {\n    return exists;\n  }\n};\n\n// Specific to arrays\ncomparisonFunctions.$size = function (obj, value) {\n    if (!util.isArray(obj)) { return false; }\n    if (value % 1 !== 0) { throw new Error(\"$size operator called without an integer\"); }\n\n    return (obj.length == value);\n};\ncomparisonFunctions.$elemMatch = function (obj, value) {\n  if (!util.isArray(obj)) { return false; }\n  var i = obj.length;\n  var result = false;   // Initialize result\n  while (i--) {\n    if (match(obj[i], value)) {   // If match for array element, return true\n      result = true;\n      break;\n    }\n  }\n  return result;\n};\narrayComparisonFunctions.$size = true;\narrayComparisonFunctions.$elemMatch = true;\n\n\n/**\n * Match any of the subqueries\n * @param {Model} obj\n * @param {Array of Queries} query\n */\nlogicalOperators.$or = function (obj, query) {\n  var i;\n\n  if (!util.isArray(query)) { throw new Error(\"$or operator used without an array\"); }\n\n  for (i = 0; i < query.length; i += 1) {\n    if (match(obj, query[i])) { return true; }\n  }\n\n  return false;\n};\n\n\n/**\n * Match all of the subqueries\n * @param {Model} obj\n * @param {Array of Queries} query\n */\nlogicalOperators.$and = function (obj, query) {\n  var i;\n\n  if (!util.isArray(query)) { throw new Error(\"$and operator used without an array\"); }\n\n  for (i = 0; i < query.length; i += 1) {\n    if (!match(obj, query[i])) { return false; }\n  }\n\n  return true;\n};\n\n\n/**\n * Inverted match of the query\n * @param {Model} obj\n * @param {Query} query\n */\nlogicalOperators.$not = function (obj, query) {\n  return !match(obj, query);\n};\n\n\n/**\n * Use a function to match\n * @param {Model} obj\n * @param {Query} query\n */\nlogicalOperators.$where = function (obj, fn) {\n  var result;\n\n  if (!_.isFunction(fn)) { throw new Error(\"$where operator used without a function\"); }\n\n  result = fn.call(obj);\n  if (!_.isBoolean(result)) { throw new Error(\"$where function must return boolean\"); }\n\n  return result;\n};\n\n\n/**\n * Tell if a given document matches a query\n * @param {Object} obj Document to check\n * @param {Object} query\n */\nfunction match (obj, query) {\n  var queryKeys, queryKey, queryValue, i;\n\n  // Primitive query against a primitive type\n  // This is a bit of a hack since we construct an object with an arbitrary key only to dereference it later\n  // But I don't have time for a cleaner implementation now\n  if (isPrimitiveType(obj) || isPrimitiveType(query)) {\n    return matchQueryPart({ needAKey: obj }, 'needAKey', query);\n  }\n\n  // Normal query\n  queryKeys = Object.keys(query);\n  for (i = 0; i < queryKeys.length; i += 1) {\n    queryKey = queryKeys[i];\n    queryValue = query[queryKey];\n\n    if (queryKey[0] === '$') {\n      if (!logicalOperators[queryKey]) { throw new Error(\"Unknown logical operator \" + queryKey); }\n      if (!logicalOperators[queryKey](obj, queryValue)) { return false; }\n    } else {\n      if (!matchQueryPart(obj, queryKey, queryValue)) { return false; }\n    }\n  }\n\n  return true;\n};\n\n\n/**\n * Match an object against a specific { key: value } part of a query\n * if the treatObjAsValue flag is set, don't try to match every part separately, but the array as a whole\n */\nfunction matchQueryPart (obj, queryKey, queryValue, treatObjAsValue) {\n  var objValue = getDotValue(obj, queryKey)\n    , i, keys, firstChars, dollarFirstChars;\n\n  // Check if the value is an array if we don't force a treatment as value\n  if (util.isArray(objValue) && !treatObjAsValue) {\n    // If the queryValue is an array, try to perform an exact match\n    if (util.isArray(queryValue)) {\n      return matchQueryPart(obj, queryKey, queryValue, true);\n    }\n\n    // Check if we are using an array-specific comparison function\n    if (queryValue !== null && typeof queryValue === 'object' && !util.isRegExp(queryValue)) {\n      keys = Object.keys(queryValue);\n      for (i = 0; i < keys.length; i += 1) {\n        if (arrayComparisonFunctions[keys[i]]) { return matchQueryPart(obj, queryKey, queryValue, true); }\n      }\n    }\n\n    // If not, treat it as an array of { obj, query } where there needs to be at least one match\n    for (i = 0; i < objValue.length; i += 1) {\n      if (matchQueryPart({ k: objValue[i] }, 'k', queryValue)) { return true; }   // k here could be any string\n    }\n    return false;\n  }\n\n  // queryValue is an actual object. Determine whether it contains comparison operators\n  // or only normal fields. Mixed objects are not allowed\n  if (queryValue !== null && typeof queryValue === 'object' && !util.isRegExp(queryValue) && !util.isArray(queryValue)) {\n    keys = Object.keys(queryValue);\n    firstChars = _.map(keys, function (item) { return item[0]; });\n    dollarFirstChars = _.filter(firstChars, function (c) { return c === '$'; });\n\n    if (dollarFirstChars.length !== 0 && dollarFirstChars.length !== firstChars.length) {\n      throw new Error(\"You cannot mix operators and normal fields\");\n    }\n\n    // queryValue is an object of this form: { $comparisonOperator1: value1, ... }\n    if (dollarFirstChars.length > 0) {\n      for (i = 0; i < keys.length; i += 1) {\n        if (!comparisonFunctions[keys[i]]) { throw new Error(\"Unknown comparison function \" + keys[i]); }\n\n        if (!comparisonFunctions[keys[i]](objValue, queryValue[keys[i]])) { return false; }\n      }\n      return true;\n    }\n  }\n\n  // Using regular expressions with basic querying\n  if (util.isRegExp(queryValue)) { return comparisonFunctions.$regex(objValue, queryValue); }\n\n  // queryValue is either a native value or a normal object\n  // Basic matching is possible\n  if (!areThingsEqual(objValue, queryValue)) { return false; }\n\n  return true;\n}\n\n\n// Interface\nmodule.exports.serialize = serialize;\nmodule.exports.deserialize = deserialize;\nmodule.exports.deepCopy = deepCopy;\nmodule.exports.checkObject = checkObject;\nmodule.exports.isPrimitiveType = isPrimitiveType;\nmodule.exports.modify = modify;\nmodule.exports.getDotValue = getDotValue;\nmodule.exports.match = match;\nmodule.exports.areThingsEqual = areThingsEqual;\nmodule.exports.compareThings = compareThings;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}