{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar operators_1 = require(\"rxjs/operators\");\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n  return operators_1.publish(selector)(this);\n}\nexports.publish = publish;","map":{"version":3,"names":["operators_1","require","publish","selector","exports"],"sources":["../src/compat/operator/publish.ts"],"sourcesContent":[null],"mappings":";;;;;AAEA,IAAAA,WAAA,GAAAC,OAAA;AAMA;AAEA;;;;;;;;;;;;;AAaA,SAAgBC,OAAOA,CAA4BC,QAAmD;EACpG,OAAOH,WAAA,CAAAE,OAAW,CAACC,QAAQ,CAAC,CAAC,IAAI,CAAC;AACpC;AAFAC,OAAA,CAAAF,OAAA,GAAAA,OAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}