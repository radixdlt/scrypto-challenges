"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.callRPC = callRPC;
exports.messages = messages;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _assertArgs = _interopRequireDefault(require("assert-args"));

var _circularJson = _interopRequireDefault(require("circular-json"));

var utils = _interopRequireWildcard(require("./utils"));

/**
 * Parses JSON-RPC 2.0 messages and sends responses.
 * @param {String} data - message data
 * @param {String} ns - namespace
 * @return {Object}
 */
function messages(_x, _x2) {
  return _messages.apply(this, arguments);
}
/**
 * Calls JSON-RPC 2.0 methods via WebSockets.
 * @param {String} data - message data
 * @param {String} ns - namespace
 * @return {Object}
 */


function _messages() {
  _messages = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(data, ns) {
    var msg_options,
        responses,
        _iteratorNormalCompletion,
        _didIteratorError,
        _iteratorError,
        _iterator,
        _step,
        message,
        _response,
        response,
        args,
        i,
        _args = arguments;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            (0, _assertArgs["default"])(_args, {
              "data": "string",
              "[ns]": "string"
            });
            msg_options = {};

            if (data instanceof ArrayBuffer) {
              msg_options.binary = true;
              data = Buffer.from(data).toString();
            }

            _context.prev = 3;
            data = _circularJson["default"].parse(data);
            _context.next = 11;
            break;

          case 7:
            _context.prev = 7;
            _context.t0 = _context["catch"](3);

            if (data.method) {
              this.socket.send(JSON.stringify({
                jsonrpc: "2.0",
                error: utils.createError(-32700, _context.t0.toString()),
                id: data.id || null
              }, msg_options));
            }

            return _context.abrupt("return");

          case 11:
            if (!data.method) {
              _context.next = 57;
              break;
            }

            if (!Array.isArray(data)) {
              _context.next = 49;
              break;
            }

            if (data.length) {
              _context.next = 15;
              break;
            }

            return _context.abrupt("return", this.socket.send(JSON.stringify({
              jsonrpc: "2.0",
              error: utils.createError(-32600, "Invalid array"),
              id: null
            }, msg_options)));

          case 15:
            responses = [];
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 19;
            _iterator = data[Symbol.iterator]();

          case 21:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context.next = 32;
              break;
            }

            message = _step.value;
            _context.next = 25;
            return this._runMethod(message, this.socket._id, ns);

          case 25:
            _response = _context.sent;

            if (_response) {
              _context.next = 28;
              break;
            }

            return _context.abrupt("continue", 29);

          case 28:
            responses.push(_response);

          case 29:
            _iteratorNormalCompletion = true;
            _context.next = 21;
            break;

          case 32:
            _context.next = 38;
            break;

          case 34:
            _context.prev = 34;
            _context.t1 = _context["catch"](19);
            _didIteratorError = true;
            _iteratorError = _context.t1;

          case 38:
            _context.prev = 38;
            _context.prev = 39;

            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }

          case 41:
            _context.prev = 41;

            if (!_didIteratorError) {
              _context.next = 44;
              break;
            }

            throw _iteratorError;

          case 44:
            return _context.finish(41);

          case 45:
            return _context.finish(38);

          case 46:
            if (responses.length) {
              _context.next = 48;
              break;
            }

            return _context.abrupt("return");

          case 48:
            return _context.abrupt("return", this.socket.send(_circularJson["default"].stringify(responses), msg_options));

          case 49:
            _context.next = 51;
            return this._runMethod(data, this.socket._id, ns);

          case 51:
            response = _context.sent;

            if (response) {
              _context.next = 54;
              break;
            }

            return _context.abrupt("return");

          case 54:
            return _context.abrupt("return", this.socket.send(_circularJson["default"].stringify(response), msg_options));

          case 57:
            if (!(data.result || data.error || data.notification)) {
              _context.next = 75;
              break;
            }

            if (!(data.notification && this.listeners(data.notification).length)) {
              _context.next = 64;
              break;
            }

            if (Object.keys(data.params).length) {
              _context.next = 61;
              break;
            }

            return _context.abrupt("return", this.emit(data.notification));

          case 61:
            args = [data.notification];
            if (data.params.constructor === Object) args.push(data.params);else // using for-loop instead of unshift/spread because performance is better
              for (i = 0; i < data.params.length; i++) {
                args.push(data.params[i]);
              }
            return _context.abrupt("return", this.emit.apply(this, args));

          case 64:
            if (this.queue[data.id]) {
              _context.next = 70;
              break;
            }

            if (!(data.method && data.params)) {
              _context.next = 69;
              break;
            }

            return _context.abrupt("return", this.emit(data.method, data.params));

          case 69:
            return _context.abrupt("return");

          case 70:
            if (this.queue[data.id].timeout) clearTimeout(this.queue[data.id].timeout);
            if (data.error) this.queue[data.id].promise[1](data.error);else this.queue[data.id].promise[0](data.result);
            this.queue[data.id] = null;
            _context.next = 76;
            break;

          case 75:
            console.log("TODO: this is a fail");

          case 76:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[3, 7], [19, 34, 38, 46], [39,, 41, 45]]);
  }));
  return _messages.apply(this, arguments);
}

function callRPC() {
  return _callRPC.apply(this, arguments);
}

function _callRPC() {
  _callRPC = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2() {
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _callRPC.apply(this, arguments);
}