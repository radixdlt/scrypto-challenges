"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
describe("Ptr", () => {
    describe("parse", () => {
        it("handles well-formed JSON Pointer strings correctly", () => {
            const cases = {
                "": [],
                "/": [""],
                "/ ": [" "],
                "/a~1b": ["a/b"],
                "/c%d": ["c%d"],
                "/e^f": ["e^f"],
                "/foo": ["foo"],
                "/foo/0": ["foo", "0"],
                "/g|h": ["g|h"],
                "/i\\j": ["i\\j"],
                "/k\"l": ["k\"l"],
                "/m~0n": ["m~n"],
                "/o~0~1p/q~1~0r": ["o~/p", "q/~r"],
                "/~0~0~0~0~0~1~1~1~1~1": ["~~~~~/////"],
            };
            for (const [input, output] of Object.entries(cases)) {
                const ptr = index_1.default.parse(input);
                expect(ptr.tokens).toEqual(output);
                expect(ptr.toString()).toEqual(input);
            }
        });
        it("throws an error for bad input", () => {
            expect(() => {
                index_1.default.parse(" ");
            }).toThrowError(new index_1.InvalidPtrError(" "));
        });
    });
    describe("eval", () => {
        it("handles evaluating JSON pointers against any input", () => {
            expect(index_1.default.parse("").eval(null)).toEqual(null);
            expect(index_1.default.parse("").eval(true)).toEqual(true);
            expect(index_1.default.parse("").eval(3.14)).toEqual(3.14);
            expect(index_1.default.parse("").eval("foo")).toEqual("foo");
            expect(index_1.default.parse("").eval([])).toEqual([]);
            expect(index_1.default.parse("").eval({})).toEqual({});
            expect(index_1.default.parse("/foo").eval({ foo: "bar" })).toEqual("bar");
            expect(index_1.default.parse("/0").eval(["bar"])).toEqual("bar");
            expect(index_1.default.parse("/foo/1/bar").eval({ foo: [null, { bar: "x" }] })).toEqual("x");
        });
        it("returns an error when an instance lacks a property", () => {
            expect(() => { index_1.default.parse("/foo").eval(3.14); }).toThrow(new index_1.EvalError(3.14, "foo"));
            expect(() => { index_1.default.parse("/0").eval([]); }).toThrow(new index_1.EvalError([], "0"));
            expect(() => { index_1.default.parse("/foo").eval({}); }).toThrow(new index_1.EvalError({}, "foo"));
        });
    });
});
//# sourceMappingURL=index.test.js.map