"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.signingKeyWithHardWareWallet = exports.path000H = void 0;
const crypto_1 = require("@radixdlt/crypto");
const operators_1 = require("rxjs/operators");
exports.path000H = crypto_1.HDPathRadix.create({
    address: { index: 0, isHardened: true },
});
const signingKeyWithHardWareWallet = (hardwareWallet, path, verificationPrompt = true) => hardwareWallet
    .getPublicKey({
    path,
    display: verificationPrompt,
    // display BIP32 path as part of derivation call.
    verifyAddressOnly: false,
})
    .pipe((0, operators_1.map)((publicKey) => ({
    publicKey,
    getPublicKeyDisplayOnlyAddress: () => {
        return hardwareWallet.getPublicKey({
            path,
            display: true,
            // Omits BIP32 path screen on Ledger.
            verifyAddressOnly: true,
        });
    },
    signHash: (hashedMessage) => hardwareWallet.doSignHash({
        hashToSign: hashedMessage,
        path,
    }),
    sign: (tx, nonXrdHRP) => hardwareWallet
        .doSignTransaction({ tx, path, nonXrdHRP })
        .pipe((0, operators_1.map)(o => o.signature)),
    keyExchange: (publicKeyOfOtherParty, display) => hardwareWallet.doKeyExchange({
        display,
        path,
        publicKeyOfOtherParty,
    }),
})));
exports.signingKeyWithHardWareWallet = signingKeyWithHardWareWallet;
//# sourceMappingURL=hardwareWallet.js.map