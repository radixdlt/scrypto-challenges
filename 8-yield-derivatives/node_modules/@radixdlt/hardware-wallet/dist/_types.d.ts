/// <reference types="node" />
import { Observable } from 'rxjs';
import { ECPointOnCurveT, HDPathRadixT, PublicKeyT, SignatureT } from '@radixdlt/crypto';
import { BuiltTransactionReadyToSign } from '@radixdlt/primitives';
export declare type SemVerT = Readonly<{
    major: number;
    minor: number;
    patch: number;
    equals: (other: SemVerT) => boolean;
    toString: () => string;
}>;
export declare type AtPath = Readonly<{
    path?: HDPathRadixT;
}>;
export declare type GetPublicKeyInput = AtPath & Readonly<{
    display?: boolean;
    verifyAddressOnly?: boolean;
}>;
export declare type SignTXOutput = Readonly<{
    signature: SignatureT;
    signatureV: number;
    hashCalculatedByLedger: Buffer;
}>;
export declare type SignHashInput = GetPublicKeyInput & Readonly<{
    hashToSign: Buffer;
}>;
export declare type KeyExchangeInput = AtPath & Readonly<{
    publicKeyOfOtherParty: PublicKeyT;
    display?: 'encrypt' | 'decrypt';
}>;
export declare type HardwareSigningKeyT = Readonly<{
    keyExchange: (publicKeyOfOtherParty: PublicKeyT, display?: 'encrypt' | 'decrypt') => Observable<ECPointOnCurveT>;
    publicKey: PublicKeyT;
    getPublicKeyDisplayOnlyAddress: () => Observable<PublicKeyT>;
    signHash: (hashedMessage: Buffer) => Observable<SignatureT>;
    sign: (tx: BuiltTransactionReadyToSign, nonXrdHRP?: string) => Observable<SignatureT>;
}>;
export declare type SignTransactionInput = Readonly<{
    tx: BuiltTransactionReadyToSign;
    path: HDPathRadixT;
    nonXrdHRP?: string;
}>;
export declare type HardwareWalletT = Readonly<{
    getVersion: () => Observable<SemVerT>;
    getPublicKey: (input: GetPublicKeyInput) => Observable<PublicKeyT>;
    doSignHash: (input: SignHashInput) => Observable<SignatureT>;
    doSignTransaction: (input: SignTransactionInput) => Observable<SignTXOutput>;
    doKeyExchange: (input: KeyExchangeInput) => Observable<ECPointOnCurveT>;
    makeSigningKey: (path: HDPathRadixT, verificationPrompt?: boolean) => Observable<HardwareSigningKeyT>;
}>;
//# sourceMappingURL=_types.d.ts.map