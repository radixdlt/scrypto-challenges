"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.msgFromError = void 0;
const _1 = require("./");
// type ErrorNotificationIsh = {
// 	errors: Error[]
// }
const isString = (something) => typeof something === 'string';
const isNonEmptyString = (something) => isString(something) && something.length > 0;
const isMessageOwner = (something) => {
    const inspection = something;
    return (inspection.message !== undefined && isNonEmptyString(inspection.message));
};
const isErrorsOwner = (something) => {
    const inspection = something;
    return inspection.errors !== undefined && _1.isArray(inspection.errors);
};
const isFailureOwner = (something) => {
    const inspection = something;
    return (inspection.failure !== undefined && isNonEmptyString(inspection.failure));
};
const isErrorMessageOwner = (something) => {
    const inspection = something;
    return inspection.error !== undefined && isNonEmptyString(inspection.error);
};
const isErrorCodeOwner = (something) => {
    const inspection = something;
    return inspection.code !== undefined && isNonEmptyString(inspection.code);
};
const isNestedErrorOwner = (something) => {
    const inspection = something;
    if (!inspection.error) {
        return false;
    }
    const err = inspection.error;
    return (isMessageOwner(err) ||
        isFailureOwner(err) ||
        isErrorMessageOwner(err) ||
        isErrorCodeOwner(err) ||
        isErrorsOwner(err));
};
const msgFromError = (e, dumpJSON = true) => {
    if (isNonEmptyString(e))
        return e;
    if (isMessageOwner(e))
        return e.message;
    if (isFailureOwner(e))
        return e.failure;
    if (isErrorMessageOwner(e))
        return e.error;
    if (isErrorCodeOwner(e))
        return e.code;
    if (isErrorsOwner(e)) {
        return e.errors.map(inner => exports.msgFromError(inner)).join(`, `);
    }
    if (isNestedErrorOwner(e)) {
        const inner = e.error;
        return exports.msgFromError(inner);
    }
    if (_1.isArray(e)) {
        return e.map(inner => exports.msgFromError(inner)).join(`, `);
    }
    else {
        if (dumpJSON) {
            const dump = JSON.stringify(e, null, 4);
            return `Unknown (json: ${dump})`;
        }
        else {
            return 'Unknown (maybe not an error?)';
        }
    }
};
exports.msgFromError = msgFromError;
//# sourceMappingURL=extractErrorMessage.js.map