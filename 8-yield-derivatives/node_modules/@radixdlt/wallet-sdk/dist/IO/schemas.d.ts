import { ResultAsync } from 'neverthrow';
import { z } from 'zod';
export type Account = z.infer<typeof Account>;
export declare const Account: z.ZodObject<{
    address: z.ZodString;
    label: z.ZodString;
    appearanceId: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    address: string;
    label: string;
    appearanceId: number;
}, {
    address: string;
    label: string;
    appearanceId: number;
}>;
export type Proof = z.infer<typeof Proof>;
export declare const Proof: z.ZodObject<{
    publicKey: z.ZodString;
    signature: z.ZodString;
    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
}, "strip", z.ZodTypeAny, {
    publicKey: string;
    signature: string;
    curve: "curve25519" | "secp256k1";
}, {
    publicKey: string;
    signature: string;
    curve: "curve25519" | "secp256k1";
}>;
export type AccountProof = z.infer<typeof AccountProof>;
export declare const AccountProof: z.ZodObject<{
    accountAddress: z.ZodString;
    proof: z.ZodObject<{
        publicKey: z.ZodString;
        signature: z.ZodString;
        curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
    }, "strip", z.ZodTypeAny, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }>;
}, "strip", z.ZodTypeAny, {
    accountAddress: string;
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
}, {
    accountAddress: string;
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
}>;
export type Persona = z.infer<typeof Persona>;
export declare const Persona: z.ZodObject<{
    identityAddress: z.ZodString;
    label: z.ZodString;
}, "strip", z.ZodTypeAny, {
    label: string;
    identityAddress: string;
}, {
    label: string;
    identityAddress: string;
}>;
export declare const personaDataFullNameVariant: {
    readonly western: "western";
    readonly eastern: "eastern";
};
export type PersonaDataNameVariant = z.infer<typeof PersonaDataNameVariant>;
export declare const PersonaDataNameVariant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
export type PersonaDataName = z.infer<typeof PersonaDataName>;
export declare const PersonaDataName: z.ZodObject<{
    variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
    familyName: z.ZodString;
    nickname: z.ZodString;
    givenNames: z.ZodString;
}, "strip", z.ZodTypeAny, {
    variant: "western" | "eastern";
    familyName: string;
    nickname: string;
    givenNames: string;
}, {
    variant: "western" | "eastern";
    familyName: string;
    nickname: string;
    givenNames: string;
}>;
export type NumberOfValues = z.infer<typeof NumberOfValues>;
export declare const NumberOfValues: z.ZodObject<{
    quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
    quantity: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    quantifier: "exactly" | "atLeast";
    quantity: number;
}, {
    quantifier: "exactly" | "atLeast";
    quantity: number;
}>;
export type AccountsRequestItem = z.infer<typeof AccountsRequestItem>;
export declare const AccountsRequestItem: z.ZodObject<{
    challenge: z.ZodOptional<z.ZodString>;
    numberOfAccounts: z.ZodObject<{
        quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
        quantity: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    }, {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    }>;
}, "strip", z.ZodTypeAny, {
    numberOfAccounts: {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    };
    challenge?: string | undefined;
}, {
    numberOfAccounts: {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    };
    challenge?: string | undefined;
}>;
export type AccountsRequestResponseItem = z.infer<typeof AccountsRequestResponseItem>;
export declare const AccountsRequestResponseItem: z.ZodEffects<z.ZodObject<{
    accounts: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
        label: z.ZodString;
        appearanceId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        address: string;
        label: string;
        appearanceId: number;
    }, {
        address: string;
        label: string;
        appearanceId: number;
    }>, "many">;
    challenge: z.ZodOptional<z.ZodString>;
    proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
        accountAddress: z.ZodString;
        proof: z.ZodObject<{
            publicKey: z.ZodString;
            signature: z.ZodString;
            curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
        }, "strip", z.ZodTypeAny, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }>;
    }, "strip", z.ZodTypeAny, {
        accountAddress: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    }, {
        accountAddress: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
    challenge?: string | undefined;
    proofs?: {
        accountAddress: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    }[] | undefined;
}, {
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
    challenge?: string | undefined;
    proofs?: {
        accountAddress: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    }[] | undefined;
}>, {
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
    challenge?: string | undefined;
    proofs?: {
        accountAddress: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    }[] | undefined;
}, {
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
    challenge?: string | undefined;
    proofs?: {
        accountAddress: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    }[] | undefined;
}>;
export type PersonaDataRequestItem = z.infer<typeof PersonaDataRequestItem>;
export declare const PersonaDataRequestItem: z.ZodObject<{
    isRequestingName: z.ZodOptional<z.ZodBoolean>;
    numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodObject<{
        quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
        quantity: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    }, {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    }>>;
    numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodObject<{
        quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
        quantity: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    }, {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    isRequestingName?: boolean | undefined;
    numberOfRequestedEmailAddresses?: {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    } | undefined;
    numberOfRequestedPhoneNumbers?: {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    } | undefined;
}, {
    isRequestingName?: boolean | undefined;
    numberOfRequestedEmailAddresses?: {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    } | undefined;
    numberOfRequestedPhoneNumbers?: {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    } | undefined;
}>;
export type PersonaDataRequestResponseItem = z.infer<typeof PersonaDataRequestResponseItem>;
export declare const PersonaDataRequestResponseItem: z.ZodObject<{
    name: z.ZodOptional<z.ZodObject<{
        variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
        familyName: z.ZodString;
        nickname: z.ZodString;
        givenNames: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        variant: "western" | "eastern";
        familyName: string;
        nickname: string;
        givenNames: string;
    }, {
        variant: "western" | "eastern";
        familyName: string;
        nickname: string;
        givenNames: string;
    }>>;
    emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    name?: {
        variant: "western" | "eastern";
        familyName: string;
        nickname: string;
        givenNames: string;
    } | undefined;
    emailAddresses?: string[] | undefined;
    phoneNumbers?: string[] | undefined;
}, {
    name?: {
        variant: "western" | "eastern";
        familyName: string;
        nickname: string;
        givenNames: string;
    } | undefined;
    emailAddresses?: string[] | undefined;
    phoneNumbers?: string[] | undefined;
}>;
export type ResetRequestItem = z.infer<typeof ResetRequestItem>;
export declare const ResetRequestItem: z.ZodObject<{
    accounts: z.ZodBoolean;
    personaData: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    accounts: boolean;
    personaData: boolean;
}, {
    accounts: boolean;
    personaData: boolean;
}>;
export type LoginRequestResponseItem = z.infer<typeof LoginRequestResponseItem>;
export declare const LoginRequestResponseItem: z.ZodEffects<z.ZodObject<{
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
    challenge: z.ZodOptional<z.ZodString>;
    proof: z.ZodOptional<z.ZodObject<{
        publicKey: z.ZodString;
        signature: z.ZodString;
        curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
    }, "strip", z.ZodTypeAny, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }>>;
}, "strip", z.ZodTypeAny, {
    persona: {
        label: string;
        identityAddress: string;
    };
    challenge?: string | undefined;
    proof?: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    } | undefined;
}, {
    persona: {
        label: string;
        identityAddress: string;
    };
    challenge?: string | undefined;
    proof?: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    } | undefined;
}>, {
    persona: {
        label: string;
        identityAddress: string;
    };
    challenge?: string | undefined;
    proof?: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    } | undefined;
}, {
    persona: {
        label: string;
        identityAddress: string;
    };
    challenge?: string | undefined;
    proof?: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    } | undefined;
}>;
export type WalletUnauthorizedRequestItems = z.infer<typeof WalletUnauthorizedRequestItems>;
export declare const WalletUnauthorizedRequestItems: z.ZodObject<{
    discriminator: z.ZodLiteral<"unauthorizedRequest">;
    oneTimeAccounts: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodOptional<z.ZodString>;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        isRequestingName: z.ZodOptional<z.ZodBoolean>;
        numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
        numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
}, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
}>;
export type AuthUsePersonaRequestItem = z.infer<typeof AuthUsePersonaRequestItem>;
export declare const AuthUsePersonaRequestItem: z.ZodObject<{
    discriminator: z.ZodLiteral<"usePersona">;
    identityAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    identityAddress: string;
    discriminator: "usePersona";
}, {
    identityAddress: string;
    discriminator: "usePersona";
}>;
export type AuthLoginWithoutChallengeRequestItem = z.infer<typeof AuthLoginWithoutChallengeRequestItem>;
export declare const AuthLoginWithoutChallengeRequestItem: z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithoutChallenge">;
}, "strip", z.ZodTypeAny, {
    discriminator: "loginWithoutChallenge";
}, {
    discriminator: "loginWithoutChallenge";
}>;
export type AuthLoginWithChallengeRequestItem = z.infer<typeof AuthLoginWithChallengeRequestItem>;
export declare const AuthLoginWithChallengeRequestItem: z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithChallenge">;
    challenge: z.ZodString;
}, "strip", z.ZodTypeAny, {
    challenge: string;
    discriminator: "loginWithChallenge";
}, {
    challenge: string;
    discriminator: "loginWithChallenge";
}>;
export declare const AuthLoginRequestItem: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithoutChallenge">;
}, "strip", z.ZodTypeAny, {
    discriminator: "loginWithoutChallenge";
}, {
    discriminator: "loginWithoutChallenge";
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithChallenge">;
    challenge: z.ZodString;
}, "strip", z.ZodTypeAny, {
    challenge: string;
    discriminator: "loginWithChallenge";
}, {
    challenge: string;
    discriminator: "loginWithChallenge";
}>]>;
export declare const AuthRequestItem: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"usePersona">;
    identityAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    identityAddress: string;
    discriminator: "usePersona";
}, {
    identityAddress: string;
    discriminator: "usePersona";
}>, z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithoutChallenge">;
}, "strip", z.ZodTypeAny, {
    discriminator: "loginWithoutChallenge";
}, {
    discriminator: "loginWithoutChallenge";
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithChallenge">;
    challenge: z.ZodString;
}, "strip", z.ZodTypeAny, {
    challenge: string;
    discriminator: "loginWithChallenge";
}, {
    challenge: string;
    discriminator: "loginWithChallenge";
}>]>]>;
export type WalletAuthorizedRequestItems = z.infer<typeof WalletAuthorizedRequestItems>;
export declare const WalletAuthorizedRequestItems: z.ZodObject<{
    discriminator: z.ZodLiteral<"authorizedRequest">;
    auth: z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"usePersona">;
        identityAddress: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        identityAddress: string;
        discriminator: "usePersona";
    }, {
        identityAddress: string;
        discriminator: "usePersona";
    }>, z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithoutChallenge">;
    }, "strip", z.ZodTypeAny, {
        discriminator: "loginWithoutChallenge";
    }, {
        discriminator: "loginWithoutChallenge";
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithChallenge">;
        challenge: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        challenge: string;
        discriminator: "loginWithChallenge";
    }, {
        challenge: string;
        discriminator: "loginWithChallenge";
    }>]>]>;
    reset: z.ZodOptional<z.ZodObject<{
        accounts: z.ZodBoolean;
        personaData: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        accounts: boolean;
        personaData: boolean;
    }, {
        accounts: boolean;
        personaData: boolean;
    }>>;
    oneTimeAccounts: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodOptional<z.ZodString>;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }>>;
    ongoingAccounts: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodOptional<z.ZodString>;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        isRequestingName: z.ZodOptional<z.ZodBoolean>;
        numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
        numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }>>;
    ongoingPersonaData: z.ZodOptional<z.ZodObject<{
        isRequestingName: z.ZodOptional<z.ZodBoolean>;
        numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
        numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "authorizedRequest";
    auth: {
        identityAddress: string;
        discriminator: "usePersona";
    } | {
        discriminator: "loginWithoutChallenge";
    } | {
        challenge: string;
        discriminator: "loginWithChallenge";
    };
    reset?: {
        accounts: boolean;
        personaData: boolean;
    } | undefined;
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    ongoingAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
    ongoingPersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
}, {
    discriminator: "authorizedRequest";
    auth: {
        identityAddress: string;
        discriminator: "usePersona";
    } | {
        discriminator: "loginWithoutChallenge";
    } | {
        challenge: string;
        discriminator: "loginWithChallenge";
    };
    reset?: {
        accounts: boolean;
        personaData: boolean;
    } | undefined;
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    ongoingAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
    ongoingPersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
}>;
export type WalletRequestItems = z.infer<typeof WalletRequestItems>;
export declare const WalletRequestItems: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"unauthorizedRequest">;
    oneTimeAccounts: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodOptional<z.ZodString>;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        isRequestingName: z.ZodOptional<z.ZodBoolean>;
        numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
        numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
}, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"authorizedRequest">;
    auth: z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"usePersona">;
        identityAddress: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        identityAddress: string;
        discriminator: "usePersona";
    }, {
        identityAddress: string;
        discriminator: "usePersona";
    }>, z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithoutChallenge">;
    }, "strip", z.ZodTypeAny, {
        discriminator: "loginWithoutChallenge";
    }, {
        discriminator: "loginWithoutChallenge";
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithChallenge">;
        challenge: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        challenge: string;
        discriminator: "loginWithChallenge";
    }, {
        challenge: string;
        discriminator: "loginWithChallenge";
    }>]>]>;
    reset: z.ZodOptional<z.ZodObject<{
        accounts: z.ZodBoolean;
        personaData: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        accounts: boolean;
        personaData: boolean;
    }, {
        accounts: boolean;
        personaData: boolean;
    }>>;
    oneTimeAccounts: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodOptional<z.ZodString>;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }>>;
    ongoingAccounts: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodOptional<z.ZodString>;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        isRequestingName: z.ZodOptional<z.ZodBoolean>;
        numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
        numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }>>;
    ongoingPersonaData: z.ZodOptional<z.ZodObject<{
        isRequestingName: z.ZodOptional<z.ZodBoolean>;
        numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
        numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "authorizedRequest";
    auth: {
        identityAddress: string;
        discriminator: "usePersona";
    } | {
        discriminator: "loginWithoutChallenge";
    } | {
        challenge: string;
        discriminator: "loginWithChallenge";
    };
    reset?: {
        accounts: boolean;
        personaData: boolean;
    } | undefined;
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    ongoingAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
    ongoingPersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
}, {
    discriminator: "authorizedRequest";
    auth: {
        identityAddress: string;
        discriminator: "usePersona";
    } | {
        discriminator: "loginWithoutChallenge";
    } | {
        challenge: string;
        discriminator: "loginWithChallenge";
    };
    reset?: {
        accounts: boolean;
        personaData: boolean;
    } | undefined;
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    ongoingAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
    ongoingPersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
}>]>;
export type SendTransactionItem = z.infer<typeof SendTransactionItem>;
export declare const SendTransactionItem: z.ZodObject<{
    transactionManifest: z.ZodString;
    version: z.ZodNumber;
    blobs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    transactionManifest: string;
    version: number;
    blobs?: string[] | undefined;
    message?: string | undefined;
}, {
    transactionManifest: string;
    version: number;
    blobs?: string[] | undefined;
    message?: string | undefined;
}>;
export type WalletTransactionItems = z.infer<typeof WalletTransactionItems>;
export declare const WalletTransactionItems: z.ZodObject<{
    discriminator: z.ZodLiteral<"transaction">;
    send: z.ZodObject<{
        transactionManifest: z.ZodString;
        version: z.ZodNumber;
        blobs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        message: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        transactionManifest: string;
        version: number;
        blobs?: string[] | undefined;
        message?: string | undefined;
    }, {
        transactionManifest: string;
        version: number;
        blobs?: string[] | undefined;
        message?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    discriminator: "transaction";
    send: {
        transactionManifest: string;
        version: number;
        blobs?: string[] | undefined;
        message?: string | undefined;
    };
}, {
    discriminator: "transaction";
    send: {
        transactionManifest: string;
        version: number;
        blobs?: string[] | undefined;
        message?: string | undefined;
    };
}>;
export type SendTransactionResponseItem = z.infer<typeof SendTransactionResponseItem>;
export declare const SendTransactionResponseItem: z.ZodObject<{
    transactionIntentHash: z.ZodString;
}, "strip", z.ZodTypeAny, {
    transactionIntentHash: string;
}, {
    transactionIntentHash: string;
}>;
export type WalletTransactionResponseItems = z.infer<typeof WalletTransactionResponseItems>;
declare const WalletTransactionResponseItems: z.ZodObject<{
    discriminator: z.ZodLiteral<"transaction">;
    send: z.ZodObject<{
        transactionIntentHash: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        transactionIntentHash: string;
    }, {
        transactionIntentHash: string;
    }>;
}, "strip", z.ZodTypeAny, {
    discriminator: "transaction";
    send: {
        transactionIntentHash: string;
    };
}, {
    discriminator: "transaction";
    send: {
        transactionIntentHash: string;
    };
}>;
export type CancelRequest = z.infer<typeof CancelRequest>;
export declare const CancelRequest: z.ZodObject<{
    discriminator: z.ZodLiteral<"cancelRequest">;
}, "strip", z.ZodTypeAny, {
    discriminator: "cancelRequest";
}, {
    discriminator: "cancelRequest";
}>;
export type WalletInteractionItems = z.infer<typeof WalletInteractionItems>;
export declare const WalletInteractionItems: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"unauthorizedRequest">;
    oneTimeAccounts: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodOptional<z.ZodString>;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        isRequestingName: z.ZodOptional<z.ZodBoolean>;
        numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
        numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
}, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"authorizedRequest">;
    auth: z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"usePersona">;
        identityAddress: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        identityAddress: string;
        discriminator: "usePersona";
    }, {
        identityAddress: string;
        discriminator: "usePersona";
    }>, z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithoutChallenge">;
    }, "strip", z.ZodTypeAny, {
        discriminator: "loginWithoutChallenge";
    }, {
        discriminator: "loginWithoutChallenge";
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithChallenge">;
        challenge: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        challenge: string;
        discriminator: "loginWithChallenge";
    }, {
        challenge: string;
        discriminator: "loginWithChallenge";
    }>]>]>;
    reset: z.ZodOptional<z.ZodObject<{
        accounts: z.ZodBoolean;
        personaData: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        accounts: boolean;
        personaData: boolean;
    }, {
        accounts: boolean;
        personaData: boolean;
    }>>;
    oneTimeAccounts: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodOptional<z.ZodString>;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }>>;
    ongoingAccounts: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodOptional<z.ZodString>;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        isRequestingName: z.ZodOptional<z.ZodBoolean>;
        numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
        numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }>>;
    ongoingPersonaData: z.ZodOptional<z.ZodObject<{
        isRequestingName: z.ZodOptional<z.ZodBoolean>;
        numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
        numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "authorizedRequest";
    auth: {
        identityAddress: string;
        discriminator: "usePersona";
    } | {
        discriminator: "loginWithoutChallenge";
    } | {
        challenge: string;
        discriminator: "loginWithChallenge";
    };
    reset?: {
        accounts: boolean;
        personaData: boolean;
    } | undefined;
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    ongoingAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
    ongoingPersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
}, {
    discriminator: "authorizedRequest";
    auth: {
        identityAddress: string;
        discriminator: "usePersona";
    } | {
        discriminator: "loginWithoutChallenge";
    } | {
        challenge: string;
        discriminator: "loginWithChallenge";
    };
    reset?: {
        accounts: boolean;
        personaData: boolean;
    } | undefined;
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    ongoingAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
    ongoingPersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
}>]>, z.ZodObject<{
    discriminator: z.ZodLiteral<"transaction">;
    send: z.ZodObject<{
        transactionManifest: z.ZodString;
        version: z.ZodNumber;
        blobs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        message: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        transactionManifest: string;
        version: number;
        blobs?: string[] | undefined;
        message?: string | undefined;
    }, {
        transactionManifest: string;
        version: number;
        blobs?: string[] | undefined;
        message?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    discriminator: "transaction";
    send: {
        transactionManifest: string;
        version: number;
        blobs?: string[] | undefined;
        message?: string | undefined;
    };
}, {
    discriminator: "transaction";
    send: {
        transactionManifest: string;
        version: number;
        blobs?: string[] | undefined;
        message?: string | undefined;
    };
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"cancelRequest">;
}, "strip", z.ZodTypeAny, {
    discriminator: "cancelRequest";
}, {
    discriminator: "cancelRequest";
}>]>;
export type Metadata = z.infer<typeof Metadata>;
export declare const Metadata: z.ZodObject<{
    version: z.ZodLiteral<2>;
    networkId: z.ZodNumber;
    dAppDefinitionAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    version: 2;
    networkId: number;
    dAppDefinitionAddress: string;
}, {
    version: 2;
    networkId: number;
    dAppDefinitionAddress: string;
}>;
export type WalletInteraction = z.infer<typeof WalletInteraction>;
export declare const WalletInteraction: z.ZodObject<{
    interactionId: z.ZodString;
    metadata: z.ZodObject<{
        version: z.ZodLiteral<2>;
        networkId: z.ZodNumber;
        dAppDefinitionAddress: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        version: 2;
        networkId: number;
        dAppDefinitionAddress: string;
    }, {
        version: 2;
        networkId: number;
        dAppDefinitionAddress: string;
    }>;
    items: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"unauthorizedRequest">;
        oneTimeAccounts: z.ZodOptional<z.ZodObject<{
            challenge: z.ZodOptional<z.ZodString>;
            numberOfAccounts: z.ZodObject<{
                quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
                quantity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        }, {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        }>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            isRequestingName: z.ZodOptional<z.ZodBoolean>;
            numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodObject<{
                quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
                quantity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }>>;
            numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodObject<{
                quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
                quantity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        }, {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        oneTimePersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
    }, {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        oneTimePersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"authorizedRequest">;
        auth: z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"usePersona">;
            identityAddress: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            identityAddress: string;
            discriminator: "usePersona";
        }, {
            identityAddress: string;
            discriminator: "usePersona";
        }>, z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"loginWithoutChallenge">;
        }, "strip", z.ZodTypeAny, {
            discriminator: "loginWithoutChallenge";
        }, {
            discriminator: "loginWithoutChallenge";
        }>, z.ZodObject<{
            discriminator: z.ZodLiteral<"loginWithChallenge">;
            challenge: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            challenge: string;
            discriminator: "loginWithChallenge";
        }, {
            challenge: string;
            discriminator: "loginWithChallenge";
        }>]>]>;
        reset: z.ZodOptional<z.ZodObject<{
            accounts: z.ZodBoolean;
            personaData: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            accounts: boolean;
            personaData: boolean;
        }, {
            accounts: boolean;
            personaData: boolean;
        }>>;
        oneTimeAccounts: z.ZodOptional<z.ZodObject<{
            challenge: z.ZodOptional<z.ZodString>;
            numberOfAccounts: z.ZodObject<{
                quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
                quantity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        }, {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        }>>;
        ongoingAccounts: z.ZodOptional<z.ZodObject<{
            challenge: z.ZodOptional<z.ZodString>;
            numberOfAccounts: z.ZodObject<{
                quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
                quantity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        }, {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        }>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            isRequestingName: z.ZodOptional<z.ZodBoolean>;
            numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodObject<{
                quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
                quantity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }>>;
            numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodObject<{
                quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
                quantity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        }, {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        }>>;
        ongoingPersonaData: z.ZodOptional<z.ZodObject<{
            isRequestingName: z.ZodOptional<z.ZodBoolean>;
            numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodObject<{
                quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
                quantity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }>>;
            numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodObject<{
                quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
                quantity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        }, {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "authorizedRequest";
        auth: {
            identityAddress: string;
            discriminator: "usePersona";
        } | {
            discriminator: "loginWithoutChallenge";
        } | {
            challenge: string;
            discriminator: "loginWithChallenge";
        };
        reset?: {
            accounts: boolean;
            personaData: boolean;
        } | undefined;
        oneTimeAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        ongoingAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        oneTimePersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
        ongoingPersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
    }, {
        discriminator: "authorizedRequest";
        auth: {
            identityAddress: string;
            discriminator: "usePersona";
        } | {
            discriminator: "loginWithoutChallenge";
        } | {
            challenge: string;
            discriminator: "loginWithChallenge";
        };
        reset?: {
            accounts: boolean;
            personaData: boolean;
        } | undefined;
        oneTimeAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        ongoingAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        oneTimePersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
        ongoingPersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
    }>]>, z.ZodObject<{
        discriminator: z.ZodLiteral<"transaction">;
        send: z.ZodObject<{
            transactionManifest: z.ZodString;
            version: z.ZodNumber;
            blobs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            message: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            transactionManifest: string;
            version: number;
            blobs?: string[] | undefined;
            message?: string | undefined;
        }, {
            transactionManifest: string;
            version: number;
            blobs?: string[] | undefined;
            message?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "transaction";
        send: {
            transactionManifest: string;
            version: number;
            blobs?: string[] | undefined;
            message?: string | undefined;
        };
    }, {
        discriminator: "transaction";
        send: {
            transactionManifest: string;
            version: number;
            blobs?: string[] | undefined;
            message?: string | undefined;
        };
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"cancelRequest">;
    }, "strip", z.ZodTypeAny, {
        discriminator: "cancelRequest";
    }, {
        discriminator: "cancelRequest";
    }>]>;
}, "strip", z.ZodTypeAny, {
    interactionId: string;
    metadata: {
        version: 2;
        networkId: number;
        dAppDefinitionAddress: string;
    };
    items: {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        oneTimePersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
    } | {
        discriminator: "authorizedRequest";
        auth: {
            identityAddress: string;
            discriminator: "usePersona";
        } | {
            discriminator: "loginWithoutChallenge";
        } | {
            challenge: string;
            discriminator: "loginWithChallenge";
        };
        reset?: {
            accounts: boolean;
            personaData: boolean;
        } | undefined;
        oneTimeAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        ongoingAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        oneTimePersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
        ongoingPersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
    } | {
        discriminator: "transaction";
        send: {
            transactionManifest: string;
            version: number;
            blobs?: string[] | undefined;
            message?: string | undefined;
        };
    } | {
        discriminator: "cancelRequest";
    };
}, {
    interactionId: string;
    metadata: {
        version: 2;
        networkId: number;
        dAppDefinitionAddress: string;
    };
    items: {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        oneTimePersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
    } | {
        discriminator: "authorizedRequest";
        auth: {
            identityAddress: string;
            discriminator: "usePersona";
        } | {
            discriminator: "loginWithoutChallenge";
        } | {
            challenge: string;
            discriminator: "loginWithChallenge";
        };
        reset?: {
            accounts: boolean;
            personaData: boolean;
        } | undefined;
        oneTimeAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        ongoingAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        oneTimePersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
        ongoingPersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
    } | {
        discriminator: "transaction";
        send: {
            transactionManifest: string;
            version: number;
            blobs?: string[] | undefined;
            message?: string | undefined;
        };
    } | {
        discriminator: "cancelRequest";
    };
}>;
export type WalletUnauthorizedRequestResponseItems = z.infer<typeof WalletUnauthorizedRequestResponseItems>;
declare const WalletUnauthorizedRequestResponseItems: z.ZodObject<{
    discriminator: z.ZodLiteral<"unauthorizedRequest">;
    oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
        challenge: z.ZodOptional<z.ZodString>;
        proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodObject<{
            variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
            familyName: z.ZodString;
            nickname: z.ZodString;
            givenNames: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }>>;
        emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}>;
export type AuthLoginWithoutChallengeRequestResponseItem = z.infer<typeof AuthLoginWithoutChallengeRequestResponseItem>;
export declare const AuthLoginWithoutChallengeRequestResponseItem: z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithoutChallenge">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
}, "strip", z.ZodTypeAny, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithoutChallenge";
}, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithoutChallenge";
}>;
export type AuthLoginWithChallengeRequestResponseItem = z.infer<typeof AuthLoginWithChallengeRequestResponseItem>;
export declare const AuthLoginWithChallengeRequestResponseItem: z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithChallenge">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
    challenge: z.ZodString;
    proof: z.ZodObject<{
        publicKey: z.ZodString;
        signature: z.ZodString;
        curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
    }, "strip", z.ZodTypeAny, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }>;
}, "strip", z.ZodTypeAny, {
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
    challenge: string;
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithChallenge";
}, {
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
    challenge: string;
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithChallenge";
}>;
export declare const AuthLoginRequestResponseItem: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithoutChallenge">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
}, "strip", z.ZodTypeAny, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithoutChallenge";
}, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithoutChallenge";
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithChallenge">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
    challenge: z.ZodString;
    proof: z.ZodObject<{
        publicKey: z.ZodString;
        signature: z.ZodString;
        curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
    }, "strip", z.ZodTypeAny, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }>;
}, "strip", z.ZodTypeAny, {
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
    challenge: string;
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithChallenge";
}, {
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
    challenge: string;
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithChallenge";
}>]>;
export type AuthUsePersonaRequestResponseItem = z.infer<typeof AuthUsePersonaRequestResponseItem>;
declare const AuthUsePersonaRequestResponseItem: z.ZodObject<{
    discriminator: z.ZodLiteral<"usePersona">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
}, "strip", z.ZodTypeAny, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "usePersona";
}, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "usePersona";
}>;
export type AuthRequestResponseItem = z.infer<typeof AuthRequestResponseItem>;
export declare const AuthRequestResponseItem: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"usePersona">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
}, "strip", z.ZodTypeAny, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "usePersona";
}, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "usePersona";
}>, z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithoutChallenge">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
}, "strip", z.ZodTypeAny, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithoutChallenge";
}, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithoutChallenge";
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithChallenge">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
    challenge: z.ZodString;
    proof: z.ZodObject<{
        publicKey: z.ZodString;
        signature: z.ZodString;
        curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
    }, "strip", z.ZodTypeAny, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }>;
}, "strip", z.ZodTypeAny, {
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
    challenge: string;
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithChallenge";
}, {
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
    challenge: string;
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithChallenge";
}>]>]>;
export type WalletAuthorizedRequestResponseItems = z.infer<typeof WalletAuthorizedRequestResponseItems>;
export declare const WalletAuthorizedRequestResponseItems: z.ZodObject<{
    discriminator: z.ZodLiteral<"authorizedRequest">;
    auth: z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"usePersona">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    }, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    }>, z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithoutChallenge">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    }, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithChallenge">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
        challenge: z.ZodString;
        proof: z.ZodObject<{
            publicKey: z.ZodString;
            signature: z.ZodString;
            curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
        }, "strip", z.ZodTypeAny, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }>;
    }, "strip", z.ZodTypeAny, {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    }, {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    }>]>]>;
    oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
        challenge: z.ZodOptional<z.ZodString>;
        proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>>;
    ongoingAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
        challenge: z.ZodOptional<z.ZodString>;
        proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodObject<{
            variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
            familyName: z.ZodString;
            nickname: z.ZodString;
            givenNames: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }>>;
        emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }>>;
    ongoingPersonaData: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodObject<{
            variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
            familyName: z.ZodString;
            nickname: z.ZodString;
            givenNames: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }>>;
        emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "authorizedRequest";
    auth: {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    } | {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    } | {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    };
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    ongoingAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
    ongoingPersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}, {
    discriminator: "authorizedRequest";
    auth: {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    } | {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    } | {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    };
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    ongoingAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
    ongoingPersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}>;
export type WalletRequestResponseItems = z.infer<typeof WalletRequestResponseItems>;
export declare const WalletRequestResponseItems: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"unauthorizedRequest">;
    oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
        challenge: z.ZodOptional<z.ZodString>;
        proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodObject<{
            variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
            familyName: z.ZodString;
            nickname: z.ZodString;
            givenNames: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }>>;
        emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"authorizedRequest">;
    auth: z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"usePersona">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    }, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    }>, z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithoutChallenge">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    }, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithChallenge">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
        challenge: z.ZodString;
        proof: z.ZodObject<{
            publicKey: z.ZodString;
            signature: z.ZodString;
            curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
        }, "strip", z.ZodTypeAny, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }>;
    }, "strip", z.ZodTypeAny, {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    }, {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    }>]>]>;
    oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
        challenge: z.ZodOptional<z.ZodString>;
        proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>>;
    ongoingAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
        challenge: z.ZodOptional<z.ZodString>;
        proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodObject<{
            variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
            familyName: z.ZodString;
            nickname: z.ZodString;
            givenNames: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }>>;
        emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }>>;
    ongoingPersonaData: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodObject<{
            variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
            familyName: z.ZodString;
            nickname: z.ZodString;
            givenNames: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }>>;
        emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "authorizedRequest";
    auth: {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    } | {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    } | {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    };
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    ongoingAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
    ongoingPersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}, {
    discriminator: "authorizedRequest";
    auth: {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    } | {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    } | {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    };
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    ongoingAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
    ongoingPersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}>]>;
export type WalletInteractionResponseItems = z.infer<typeof WalletInteractionResponseItems>;
declare const WalletInteractionResponseItems: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"unauthorizedRequest">;
    oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
        challenge: z.ZodOptional<z.ZodString>;
        proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodObject<{
            variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
            familyName: z.ZodString;
            nickname: z.ZodString;
            givenNames: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }>>;
        emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"authorizedRequest">;
    auth: z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"usePersona">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    }, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    }>, z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithoutChallenge">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    }, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithChallenge">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
        challenge: z.ZodString;
        proof: z.ZodObject<{
            publicKey: z.ZodString;
            signature: z.ZodString;
            curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
        }, "strip", z.ZodTypeAny, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }>;
    }, "strip", z.ZodTypeAny, {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    }, {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    }>]>]>;
    oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
        challenge: z.ZodOptional<z.ZodString>;
        proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>>;
    ongoingAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
        challenge: z.ZodOptional<z.ZodString>;
        proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodObject<{
            variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
            familyName: z.ZodString;
            nickname: z.ZodString;
            givenNames: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }>>;
        emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }>>;
    ongoingPersonaData: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodObject<{
            variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
            familyName: z.ZodString;
            nickname: z.ZodString;
            givenNames: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }>>;
        emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "authorizedRequest";
    auth: {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    } | {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    } | {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    };
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    ongoingAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
    ongoingPersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}, {
    discriminator: "authorizedRequest";
    auth: {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    } | {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    } | {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    };
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    ongoingAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
    ongoingPersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}>]>, z.ZodObject<{
    discriminator: z.ZodLiteral<"transaction">;
    send: z.ZodObject<{
        transactionIntentHash: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        transactionIntentHash: string;
    }, {
        transactionIntentHash: string;
    }>;
}, "strip", z.ZodTypeAny, {
    discriminator: "transaction";
    send: {
        transactionIntentHash: string;
    };
}, {
    discriminator: "transaction";
    send: {
        transactionIntentHash: string;
    };
}>]>;
export type WalletInteractionSuccessResponse = z.infer<typeof WalletInteractionSuccessResponse>;
export declare const WalletInteractionSuccessResponse: z.ZodObject<{
    discriminator: z.ZodLiteral<"success">;
    interactionId: z.ZodString;
    items: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"unauthorizedRequest">;
        oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
            challenge: z.ZodOptional<z.ZodString>;
            proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
                accountAddress: z.ZodString;
                proof: z.ZodObject<{
                    publicKey: z.ZodString;
                    signature: z.ZodString;
                    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
                }, "strip", z.ZodTypeAny, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }>;
            }, "strip", z.ZodTypeAny, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            name: z.ZodOptional<z.ZodObject<{
                variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
                familyName: z.ZodString;
                nickname: z.ZodString;
                givenNames: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }>>;
            emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }, {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"authorizedRequest">;
        auth: z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"usePersona">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        }, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        }>, z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"loginWithoutChallenge">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        }, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        }>, z.ZodObject<{
            discriminator: z.ZodLiteral<"loginWithChallenge">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
            challenge: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        }, {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        }>]>]>;
        oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
            challenge: z.ZodOptional<z.ZodString>;
            proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
                accountAddress: z.ZodString;
                proof: z.ZodObject<{
                    publicKey: z.ZodString;
                    signature: z.ZodString;
                    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
                }, "strip", z.ZodTypeAny, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }>;
            }, "strip", z.ZodTypeAny, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>>;
        ongoingAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
            challenge: z.ZodOptional<z.ZodString>;
            proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
                accountAddress: z.ZodString;
                proof: z.ZodObject<{
                    publicKey: z.ZodString;
                    signature: z.ZodString;
                    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
                }, "strip", z.ZodTypeAny, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }>;
            }, "strip", z.ZodTypeAny, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            name: z.ZodOptional<z.ZodObject<{
                variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
                familyName: z.ZodString;
                nickname: z.ZodString;
                givenNames: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }>>;
            emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }>>;
        ongoingPersonaData: z.ZodOptional<z.ZodObject<{
            name: z.ZodOptional<z.ZodObject<{
                variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
                familyName: z.ZodString;
                nickname: z.ZodString;
                givenNames: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }>>;
            emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }, {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }>]>, z.ZodObject<{
        discriminator: z.ZodLiteral<"transaction">;
        send: z.ZodObject<{
            transactionIntentHash: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            transactionIntentHash: string;
        }, {
            transactionIntentHash: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    }, {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    }>]>;
}, "strip", z.ZodTypeAny, {
    discriminator: "success";
    interactionId: string;
    items: {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    } | {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    } | {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    };
}, {
    discriminator: "success";
    interactionId: string;
    items: {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    } | {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    } | {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    };
}>;
export type WalletInteractionFailureResponse = z.infer<typeof WalletInteractionFailureResponse>;
export declare const WalletInteractionFailureResponse: z.ZodObject<{
    discriminator: z.ZodLiteral<"failure">;
    interactionId: z.ZodString;
    error: z.ZodString;
    message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    error: string;
    discriminator: "failure";
    interactionId: string;
    message?: string | undefined;
}, {
    error: string;
    discriminator: "failure";
    interactionId: string;
    message?: string | undefined;
}>;
export type WalletInteractionResponse = z.infer<typeof WalletInteractionResponse>;
export declare const WalletInteractionResponse: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"success">;
    interactionId: z.ZodString;
    items: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"unauthorizedRequest">;
        oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
            challenge: z.ZodOptional<z.ZodString>;
            proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
                accountAddress: z.ZodString;
                proof: z.ZodObject<{
                    publicKey: z.ZodString;
                    signature: z.ZodString;
                    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
                }, "strip", z.ZodTypeAny, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }>;
            }, "strip", z.ZodTypeAny, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            name: z.ZodOptional<z.ZodObject<{
                variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
                familyName: z.ZodString;
                nickname: z.ZodString;
                givenNames: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }>>;
            emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }, {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"authorizedRequest">;
        auth: z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"usePersona">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        }, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        }>, z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"loginWithoutChallenge">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        }, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        }>, z.ZodObject<{
            discriminator: z.ZodLiteral<"loginWithChallenge">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
            challenge: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        }, {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        }>]>]>;
        oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
            challenge: z.ZodOptional<z.ZodString>;
            proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
                accountAddress: z.ZodString;
                proof: z.ZodObject<{
                    publicKey: z.ZodString;
                    signature: z.ZodString;
                    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
                }, "strip", z.ZodTypeAny, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }>;
            }, "strip", z.ZodTypeAny, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>>;
        ongoingAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
            challenge: z.ZodOptional<z.ZodString>;
            proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
                accountAddress: z.ZodString;
                proof: z.ZodObject<{
                    publicKey: z.ZodString;
                    signature: z.ZodString;
                    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
                }, "strip", z.ZodTypeAny, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }>;
            }, "strip", z.ZodTypeAny, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            name: z.ZodOptional<z.ZodObject<{
                variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
                familyName: z.ZodString;
                nickname: z.ZodString;
                givenNames: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }>>;
            emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }>>;
        ongoingPersonaData: z.ZodOptional<z.ZodObject<{
            name: z.ZodOptional<z.ZodObject<{
                variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
                familyName: z.ZodString;
                nickname: z.ZodString;
                givenNames: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }>>;
            emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }, {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }>]>, z.ZodObject<{
        discriminator: z.ZodLiteral<"transaction">;
        send: z.ZodObject<{
            transactionIntentHash: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            transactionIntentHash: string;
        }, {
            transactionIntentHash: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    }, {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    }>]>;
}, "strip", z.ZodTypeAny, {
    discriminator: "success";
    interactionId: string;
    items: {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    } | {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    } | {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    };
}, {
    discriminator: "success";
    interactionId: string;
    items: {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    } | {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    } | {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    };
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"failure">;
    interactionId: z.ZodString;
    error: z.ZodString;
    message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    error: string;
    discriminator: "failure";
    interactionId: string;
    message?: string | undefined;
}, {
    error: string;
    discriminator: "failure";
    interactionId: string;
    message?: string | undefined;
}>]>;
export declare const ExtensionInteraction: z.ZodObject<{
    interactionId: z.ZodString;
    discriminator: z.ZodLiteral<"extensionStatus">;
}, "strip", z.ZodTypeAny, {
    discriminator: "extensionStatus";
    interactionId: string;
}, {
    discriminator: "extensionStatus";
    interactionId: string;
}>;
export type ExtensionInteraction = z.infer<typeof ExtensionInteraction>;
export declare const messageLifeCycleEventType: {
    readonly extensionStatus: "extensionStatus";
    readonly receivedByExtension: "receivedByExtension";
    readonly receivedByWallet: "receivedByWallet";
    readonly requestCancelSuccess: "requestCancelSuccess";
    readonly requestCancelFail: "requestCancelFail";
};
export declare const MessageLifeCycleExtensionStatusEvent: z.ZodObject<{
    eventType: z.ZodLiteral<"extensionStatus">;
    interactionId: z.ZodString;
    isWalletLinked: z.ZodBoolean;
    isExtensionAvailable: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    interactionId: string;
    eventType: "extensionStatus";
    isWalletLinked: boolean;
    isExtensionAvailable: boolean;
}, {
    interactionId: string;
    eventType: "extensionStatus";
    isWalletLinked: boolean;
    isExtensionAvailable: boolean;
}>;
export type MessageLifeCycleExtensionStatusEvent = z.infer<typeof MessageLifeCycleExtensionStatusEvent>;
export declare const MessageLifeCycleEvent: z.ZodObject<{
    eventType: z.ZodUnion<[z.ZodLiteral<"extensionStatus">, z.ZodLiteral<"receivedByExtension">, z.ZodLiteral<"receivedByWallet">, z.ZodLiteral<"requestCancelSuccess">, z.ZodLiteral<"requestCancelFail">]>;
    interactionId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    interactionId: string;
    eventType: "extensionStatus" | "receivedByExtension" | "receivedByWallet" | "requestCancelSuccess" | "requestCancelFail";
}, {
    interactionId: string;
    eventType: "extensionStatus" | "receivedByExtension" | "receivedByWallet" | "requestCancelSuccess" | "requestCancelFail";
}>;
export type MessageLifeCycleEvent = z.infer<typeof MessageLifeCycleEvent>;
export type IncomingMessage = z.infer<typeof IncomingMessage>;
declare const IncomingMessage: z.ZodUnion<[z.ZodObject<{
    eventType: z.ZodUnion<[z.ZodLiteral<"extensionStatus">, z.ZodLiteral<"receivedByExtension">, z.ZodLiteral<"receivedByWallet">, z.ZodLiteral<"requestCancelSuccess">, z.ZodLiteral<"requestCancelFail">]>;
    interactionId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    interactionId: string;
    eventType: "extensionStatus" | "receivedByExtension" | "receivedByWallet" | "requestCancelSuccess" | "requestCancelFail";
}, {
    interactionId: string;
    eventType: "extensionStatus" | "receivedByExtension" | "receivedByWallet" | "requestCancelSuccess" | "requestCancelFail";
}>, z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"success">;
    interactionId: z.ZodString;
    items: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"unauthorizedRequest">;
        oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
            challenge: z.ZodOptional<z.ZodString>;
            proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
                accountAddress: z.ZodString;
                proof: z.ZodObject<{
                    publicKey: z.ZodString;
                    signature: z.ZodString;
                    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
                }, "strip", z.ZodTypeAny, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }>;
            }, "strip", z.ZodTypeAny, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            name: z.ZodOptional<z.ZodObject<{
                variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
                familyName: z.ZodString;
                nickname: z.ZodString;
                givenNames: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }>>;
            emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }, {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"authorizedRequest">;
        auth: z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"usePersona">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        }, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        }>, z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"loginWithoutChallenge">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        }, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        }>, z.ZodObject<{
            discriminator: z.ZodLiteral<"loginWithChallenge">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
            challenge: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        }, {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        }>]>]>;
        oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
            challenge: z.ZodOptional<z.ZodString>;
            proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
                accountAddress: z.ZodString;
                proof: z.ZodObject<{
                    publicKey: z.ZodString;
                    signature: z.ZodString;
                    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
                }, "strip", z.ZodTypeAny, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }>;
            }, "strip", z.ZodTypeAny, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>>;
        ongoingAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
            challenge: z.ZodOptional<z.ZodString>;
            proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
                accountAddress: z.ZodString;
                proof: z.ZodObject<{
                    publicKey: z.ZodString;
                    signature: z.ZodString;
                    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
                }, "strip", z.ZodTypeAny, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }>;
            }, "strip", z.ZodTypeAny, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            name: z.ZodOptional<z.ZodObject<{
                variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
                familyName: z.ZodString;
                nickname: z.ZodString;
                givenNames: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }>>;
            emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }>>;
        ongoingPersonaData: z.ZodOptional<z.ZodObject<{
            name: z.ZodOptional<z.ZodObject<{
                variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
                familyName: z.ZodString;
                nickname: z.ZodString;
                givenNames: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }>>;
            emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }, {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }>]>, z.ZodObject<{
        discriminator: z.ZodLiteral<"transaction">;
        send: z.ZodObject<{
            transactionIntentHash: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            transactionIntentHash: string;
        }, {
            transactionIntentHash: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    }, {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    }>]>;
}, "strip", z.ZodTypeAny, {
    discriminator: "success";
    interactionId: string;
    items: {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    } | {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    } | {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    };
}, {
    discriminator: "success";
    interactionId: string;
    items: {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    } | {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    } | {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    };
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"failure">;
    interactionId: z.ZodString;
    error: z.ZodString;
    message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    error: string;
    discriminator: "failure";
    interactionId: string;
    message?: string | undefined;
}, {
    error: string;
    discriminator: "failure";
    interactionId: string;
    message?: string | undefined;
}>]>]>;
export declare const eventType: {
    readonly outgoingMessage: "radix#chromeExtension#send";
    readonly incomingMessage: "radix#chromeExtension#receive";
};
export type CallbackFns = {
    eventCallback: (messageEvent: MessageLifeCycleEvent['eventType']) => void;
    requestControl: (api: {
        cancelRequest: () => ResultAsync<'requestCancelSuccess', 'requestCancelFail'>;
        getRequest: () => WalletInteraction;
    }) => void;
};
export {};
