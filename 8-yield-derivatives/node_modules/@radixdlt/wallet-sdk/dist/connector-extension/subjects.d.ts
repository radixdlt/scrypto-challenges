import { Subject } from 'rxjs';
export type Subjects = ReturnType<typeof Subjects>;
export declare const Subjects: () => {
    outgoingMessageSubject: Subject<{
        interactionId: string;
        metadata: {
            version: 2;
            networkId: number;
            dAppDefinitionAddress: string;
        };
        items: {
            discriminator: "unauthorizedRequest";
            oneTimeAccounts?: {
                numberOfAccounts: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                };
                challenge?: string | undefined;
            } | undefined;
            oneTimePersonaData?: {
                isRequestingName?: boolean | undefined;
                numberOfRequestedEmailAddresses?: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                } | undefined;
                numberOfRequestedPhoneNumbers?: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                } | undefined;
            } | undefined;
        } | {
            discriminator: "authorizedRequest";
            auth: {
                identityAddress: string;
                discriminator: "usePersona";
            } | {
                discriminator: "loginWithoutChallenge";
            } | {
                challenge: string;
                discriminator: "loginWithChallenge";
            };
            reset?: {
                accounts: boolean;
                personaData: boolean;
            } | undefined;
            oneTimeAccounts?: {
                numberOfAccounts: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                };
                challenge?: string | undefined;
            } | undefined;
            ongoingAccounts?: {
                numberOfAccounts: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                };
                challenge?: string | undefined;
            } | undefined;
            oneTimePersonaData?: {
                isRequestingName?: boolean | undefined;
                numberOfRequestedEmailAddresses?: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                } | undefined;
                numberOfRequestedPhoneNumbers?: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                } | undefined;
            } | undefined;
            ongoingPersonaData?: {
                isRequestingName?: boolean | undefined;
                numberOfRequestedEmailAddresses?: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                } | undefined;
                numberOfRequestedPhoneNumbers?: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                } | undefined;
            } | undefined;
        } | {
            discriminator: "transaction";
            send: {
                transactionManifest: string;
                version: number;
                blobs?: string[] | undefined;
                message?: string | undefined;
            };
        } | {
            discriminator: "cancelRequest";
        };
    } | {
        discriminator: "extensionStatus";
        interactionId: string;
    }>;
    incomingMessageSubject: Subject<{
        discriminator: "success";
        interactionId: string;
        items: {
            discriminator: "transaction";
            send: {
                transactionIntentHash: string;
            };
        } | {
            discriminator: "unauthorizedRequest";
            oneTimeAccounts?: {
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
                challenge?: string | undefined;
                proofs?: {
                    accountAddress: string;
                    proof: {
                        publicKey: string;
                        signature: string;
                        curve: "curve25519" | "secp256k1";
                    };
                }[] | undefined;
            } | undefined;
            oneTimePersonaData?: {
                name?: {
                    variant: "western" | "eastern";
                    familyName: string;
                    nickname: string;
                    givenNames: string;
                } | undefined;
                emailAddresses?: string[] | undefined;
                phoneNumbers?: string[] | undefined;
            } | undefined;
        } | {
            discriminator: "authorizedRequest";
            auth: {
                persona: {
                    label: string;
                    identityAddress: string;
                };
                discriminator: "loginWithoutChallenge";
            } | {
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                challenge: string;
                persona: {
                    label: string;
                    identityAddress: string;
                };
                discriminator: "loginWithChallenge";
            } | {
                persona: {
                    label: string;
                    identityAddress: string;
                };
                discriminator: "usePersona";
            };
            oneTimeAccounts?: {
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
                challenge?: string | undefined;
                proofs?: {
                    accountAddress: string;
                    proof: {
                        publicKey: string;
                        signature: string;
                        curve: "curve25519" | "secp256k1";
                    };
                }[] | undefined;
            } | undefined;
            ongoingAccounts?: {
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
                challenge?: string | undefined;
                proofs?: {
                    accountAddress: string;
                    proof: {
                        publicKey: string;
                        signature: string;
                        curve: "curve25519" | "secp256k1";
                    };
                }[] | undefined;
            } | undefined;
            oneTimePersonaData?: {
                name?: {
                    variant: "western" | "eastern";
                    familyName: string;
                    nickname: string;
                    givenNames: string;
                } | undefined;
                emailAddresses?: string[] | undefined;
                phoneNumbers?: string[] | undefined;
            } | undefined;
            ongoingPersonaData?: {
                name?: {
                    variant: "western" | "eastern";
                    familyName: string;
                    nickname: string;
                    givenNames: string;
                } | undefined;
                emailAddresses?: string[] | undefined;
                phoneNumbers?: string[] | undefined;
            } | undefined;
        };
    } | {
        error: string;
        discriminator: "failure";
        interactionId: string;
        message?: string | undefined;
    } | {
        interactionId: string;
        eventType: "extensionStatus";
        isWalletLinked: boolean;
        isExtensionAvailable: boolean;
    } | {
        interactionId: string;
        eventType: "extensionStatus" | "receivedByExtension" | "receivedByWallet" | "requestCancelSuccess" | "requestCancelFail";
    }>;
    responseSubject: Subject<{
        discriminator: "success";
        interactionId: string;
        items: {
            discriminator: "transaction";
            send: {
                transactionIntentHash: string;
            };
        } | {
            discriminator: "unauthorizedRequest";
            oneTimeAccounts?: {
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
                challenge?: string | undefined;
                proofs?: {
                    accountAddress: string;
                    proof: {
                        publicKey: string;
                        signature: string;
                        curve: "curve25519" | "secp256k1";
                    };
                }[] | undefined;
            } | undefined;
            oneTimePersonaData?: {
                name?: {
                    variant: "western" | "eastern";
                    familyName: string;
                    nickname: string;
                    givenNames: string;
                } | undefined;
                emailAddresses?: string[] | undefined;
                phoneNumbers?: string[] | undefined;
            } | undefined;
        } | {
            discriminator: "authorizedRequest";
            auth: {
                persona: {
                    label: string;
                    identityAddress: string;
                };
                discriminator: "loginWithoutChallenge";
            } | {
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                challenge: string;
                persona: {
                    label: string;
                    identityAddress: string;
                };
                discriminator: "loginWithChallenge";
            } | {
                persona: {
                    label: string;
                    identityAddress: string;
                };
                discriminator: "usePersona";
            };
            oneTimeAccounts?: {
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
                challenge?: string | undefined;
                proofs?: {
                    accountAddress: string;
                    proof: {
                        publicKey: string;
                        signature: string;
                        curve: "curve25519" | "secp256k1";
                    };
                }[] | undefined;
            } | undefined;
            ongoingAccounts?: {
                accounts: {
                    address: string;
                    label: string;
                    appearanceId: number;
                }[];
                challenge?: string | undefined;
                proofs?: {
                    accountAddress: string;
                    proof: {
                        publicKey: string;
                        signature: string;
                        curve: "curve25519" | "secp256k1";
                    };
                }[] | undefined;
            } | undefined;
            oneTimePersonaData?: {
                name?: {
                    variant: "western" | "eastern";
                    familyName: string;
                    nickname: string;
                    givenNames: string;
                } | undefined;
                emailAddresses?: string[] | undefined;
                phoneNumbers?: string[] | undefined;
            } | undefined;
            ongoingPersonaData?: {
                name?: {
                    variant: "western" | "eastern";
                    familyName: string;
                    nickname: string;
                    givenNames: string;
                } | undefined;
                emailAddresses?: string[] | undefined;
                phoneNumbers?: string[] | undefined;
            } | undefined;
        };
    } | {
        error: string;
        discriminator: "failure";
        interactionId: string;
        message?: string | undefined;
    }>;
    messageLifeCycleEventSubject: Subject<{
        interactionId: string;
        eventType: "extensionStatus" | "receivedByExtension" | "receivedByWallet" | "requestCancelSuccess" | "requestCancelFail";
    }>;
};
