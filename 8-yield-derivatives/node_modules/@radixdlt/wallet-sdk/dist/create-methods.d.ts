import { AppLogger } from './wallet-sdk';
import { CallbackFns, Metadata, SendTransactionItem, WalletRequestItems } from './IO';
import { ConnectorExtensionClient } from './connector-extension/connector-extension-client';
export type CreateMethodsInput = Metadata & Partial<{
    logger: AppLogger;
}>;
export type CreateMethods = ReturnType<typeof createMethods>;
export declare const createMethods: (input: CreateMethodsInput, connectorExtensionClient: ConnectorExtensionClient) => {
    request: (items: WalletRequestItems, callbackFns?: Partial<CallbackFns>) => import("neverthrow").ResultAsync<{
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    } | {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }, import("./wallet-sdk").SdkError>;
    sendTransaction: (items: SendTransactionItem, callbackFns?: Partial<CallbackFns>) => import("neverthrow").ResultAsync<{
        transactionIntentHash: string;
    }, import("./wallet-sdk").SdkError>;
    extensionStatus$: import("rxjs").Observable<{
        interactionId: string;
        eventType: "extensionStatus";
        isWalletLinked: boolean;
        isExtensionAvailable: boolean;
    }>;
    openPopup: () => void;
};
