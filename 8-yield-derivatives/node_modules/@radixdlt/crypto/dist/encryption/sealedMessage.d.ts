/// <reference types="node" />
import { Result } from 'neverthrow';
import { AES_GCM_SealedBoxT } from '../symmetric-encryption';
import { SealedMessageT } from './_types';
import { PublicKeyT } from '../elliptic-curve';
export declare const __validateTag: (buffer: Buffer) => Result<Buffer, Error>;
export declare const __validateNonce: (buffer: Buffer) => Result<Buffer, Error>;
export declare const SealedMessage: {
    nonceByteCount: number;
    authTagByteCount: number;
    create: (input: Readonly<{
        ephemeralPublicKey: PublicKeyT;
        nonce: Buffer;
        authTag: Buffer;
        ciphertext: Buffer;
    }>) => Result<SealedMessageT, Error>;
    fromAESSealedBox: (aesSealedBox: AES_GCM_SealedBoxT, ephemeralPublicKey: PublicKeyT) => Result<SealedMessageT, Error>;
    fromBuffer: (buffer: Buffer) => Result<SealedMessageT, Error>;
};
//# sourceMappingURL=sealedMessage.d.ts.map