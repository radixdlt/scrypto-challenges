/// <reference types="node" />
import { EncryptedMessageT, EncryptionScheme, PlaintextMessageT, SealedMessageT } from './_types';
import { Result } from 'neverthrow';
export declare const __validateEncryptedMessageLength: (buffer: Buffer) => Result<Buffer, Error>;
export declare const Message: {
    maxLength: number;
    maxLengthOfCipherTextOfSealedMsg: number;
    minLengthEncryptedMessage: number;
    createEncrypted: (encryptionScheme: EncryptionScheme, sealedMessage: SealedMessageT) => Result<EncryptedMessageT, Error>;
    createPlaintext: (message: string | Buffer) => PlaintextMessageT;
    fromBuffer: (buf: Buffer) => Result<EncryptedMessageT | PlaintextMessageT, Error>;
    plaintextToString: (plaintext: Buffer, startAt?: number) => string;
    isPlaintext: (rawHex: string) => boolean;
    isEncrypted: (rawHex: string) => boolean;
    isHexEncoded: (rawHex: string) => boolean;
};
//# sourceMappingURL=message.d.ts.map