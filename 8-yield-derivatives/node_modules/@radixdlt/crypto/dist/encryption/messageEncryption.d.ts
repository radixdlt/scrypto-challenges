/// <reference types="node" />
import { ResultAsync } from 'neverthrow';
import { EncryptedMessageT, MessageDecryptionInput, MessageEncryptionInput } from './_types';
import { PublicKeyT } from '../elliptic-curve';
declare type DeterministicMessageEncryptionInput = MessageEncryptionInput & Readonly<{
    nonce: Buffer;
    ephemeralPublicKey: PublicKeyT;
}>;
export declare const MessageEncryption: {
    __encryptDeterministic: (input: DeterministicMessageEncryptionInput) => ResultAsync<EncryptedMessageT, Error>;
    encodePlaintext: (plaintext: Buffer | string) => Buffer;
    encrypt: (input: MessageEncryptionInput) => ResultAsync<EncryptedMessageT, Error>;
    decrypt: (input: MessageDecryptionInput) => ResultAsync<Buffer, Error>;
};
export {};
//# sourceMappingURL=messageEncryption.d.ts.map