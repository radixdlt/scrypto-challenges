"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HDPathRadix = exports.BIP44 = exports.bip44Purpose = exports.RADIX_COIN_TYPE = void 0;
const neverthrow_1 = require("neverthrow");
const bip32_1 = require("../bip32");
const bip32PathComponent_1 = require("../bip32PathComponent");
const util_1 = require("@radixdlt/util");
exports.RADIX_COIN_TYPE = 1022;
const bip44Component = (input) => {
    const componentResult = bip32PathComponent_1.BIP32PathComponent.create(input);
    if (componentResult.isErr()) {
        throw new Error(`Incorrect implementation, should always be able to create BIP44 component. Underlying error: '${(0, util_1.msgFromError)(componentResult.error)}'.`);
    }
    return Object.assign(Object.assign({}, componentResult.value), { name: input.name });
};
exports.bip44Purpose = bip44Component({
    index: 44,
    isHardened: true,
    level: 1,
    name: 'purpose',
});
const bip44CoinType = (index) => bip44Component({
    index: index,
    isHardened: true,
    level: 2,
    name: 'coin type',
});
const bip44Account = (index) => bip44Component({
    index: index,
    isHardened: true,
    level: 3,
    name: 'account',
});
const bip44Change = (index) => bip44Component({
    index: index,
    isHardened: false,
    level: 4,
    name: 'change',
});
const create = (input) => {
    var _a, _b, _c, _d;
    const purpose = exports.bip44Purpose;
    const coinType = bip44CoinType((_a = input.coinType) !== null && _a !== void 0 ? _a : exports.RADIX_COIN_TYPE);
    const account = bip44Account((_b = input.account) !== null && _b !== void 0 ? _b : 0);
    const change = bip44Change((_c = input.change) !== null && _c !== void 0 ? _c : 0);
    const addressIndex = bip44Component({
        index: input.address.index,
        isHardened: (_d = input.address.isHardened) !== null && _d !== void 0 ? _d : true,
        level: 5,
        name: 'address index',
    });
    const pathComponents = [purpose, coinType, account, change, addressIndex];
    const bip32 = bip32_1.BIP32.unsafeCreate(pathComponents);
    return Object.assign(Object.assign({}, bip32), { purpose,
        coinType,
        account,
        change,
        addressIndex,
        pathComponents });
};
const fromComponents = (bip32Components) => bip32_1.BIP32.create(bip32Components).andThen(bip32 => radixPathFromString(bip32.toString()));
const createRadixPath = (input) => create(input);
const validateBIP44Component = (expected, component) => {
    if (component.level !== expected.level)
        return (0, neverthrow_1.err)(new Error('Wrong level in BIP44 path'));
    if (component.isHardened !== expected.isHardened)
        return (0, neverthrow_1.err)(new Error(`Wrong hardened value, expected component at level ${component.level} to${expected.isHardened ? '' : ' NOT'} be hardened, but it is${component.isHardened ? '' : ' NOT'}.`));
    if (expected.name) {
        if (component.name !== expected.name)
            return (0, neverthrow_1.err)(new Error('Wrong name'));
    }
    if (expected.index) {
        if (component.index !== expected.index) {
            return (0, neverthrow_1.err)(new Error(`Wrong index, component.index: ${component.index}, expected.index: ${expected.index}, whole expected: ${JSON.stringify(expected, null, 4)}, component: ${JSON.stringify(component, null, 4)}`));
        }
    }
    return (0, neverthrow_1.ok)(component);
};
const validateBIP44Purpose = validateBIP44Component.bind(null, exports.bip44Purpose);
const validateBIP44CoinType = validateBIP44Component.bind(null, Object.assign(Object.assign({}, bip44CoinType(0)), { index: undefined }));
const validateBIP44Account = validateBIP44Component.bind(null, Object.assign(Object.assign({}, bip44Account(0)), { index: undefined }));
const validateBIP44Change = validateBIP44Component.bind(null, Object.assign(Object.assign({}, bip44Change(0)), { index: undefined }));
const fromString = (path) => bip32_1.BIP32.fromString(path).andThen((bip32) => {
    const components = bip32.pathComponents;
    if (components.length !== 5)
        return (0, neverthrow_1.err)(new Error(`We require BIP44 to have five components: purpose / cointype / account / change / address`));
    return (0, neverthrow_1.combine)([
        validateBIP44Purpose(Object.assign(Object.assign({}, components[0]), { name: 'purpose' })),
        validateBIP44CoinType(Object.assign(Object.assign({}, components[1]), { name: 'coin type' })),
        validateBIP44Account(Object.assign(Object.assign({}, components[2]), { name: 'account' })),
        validateBIP44Change(Object.assign(Object.assign({}, components[3]), { name: 'change' })),
        (0, neverthrow_1.ok)(Object.assign(Object.assign({}, components[4]), { name: 'address index' })),
    ]).map((bip44Components) => (Object.assign(Object.assign({}, bip32), { purpose: bip44Components[0], coinType: bip44Components[1], account: bip44Components[2], change: bip44Components[3], addressIndex: bip44Components[4], pathComponents: bip44Components })));
});
const extractValueFromIndex = (pathComponent) => {
    const { index, isHardened } = pathComponent;
    if (index >= bip32PathComponent_1.hardenedIncrement && !isHardened)
        return (0, neverthrow_1.err)(new Error(`Incorrect values passed, index is hardened, but you believed it to not be. Index: ${index}`));
    if (index < bip32PathComponent_1.hardenedIncrement && isHardened)
        return (0, neverthrow_1.err)(new Error('Incorrect values passed, index is not hardened, but you believed it to be. Index: ${index}'));
    return (0, neverthrow_1.ok)(isHardened ? index - bip32PathComponent_1.hardenedIncrement : index);
};
const radixPathFromString = (path) => fromString(path).andThen(bip44 => extractValueFromIndex(bip44.coinType).andThen(coinType => coinType === exports.RADIX_COIN_TYPE
    ? (0, neverthrow_1.ok)(bip44)
    : (0, neverthrow_1.err)(new Error(`Incorrect coin type, expected Radix coin type: ${exports.RADIX_COIN_TYPE}, but got: ${coinType}`))));
exports.BIP44 = {
    create,
    fromString,
};
exports.HDPathRadix = {
    create: createRadixPath,
    fromString: radixPathFromString,
    fromComponents,
};
//# sourceMappingURL=bip44.js.map