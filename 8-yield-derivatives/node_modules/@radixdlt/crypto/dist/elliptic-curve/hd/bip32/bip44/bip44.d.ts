import { Result } from 'neverthrow';
import { BIP32PathComponentT, Int32 } from '../_types';
import { BIP44T, BIP44ChangeIndex, HDPathRadixT } from './_types';
export declare const RADIX_COIN_TYPE: Int32;
export declare const bip44Purpose: BIP32PathComponentT;
export declare const BIP44: {
    create: (input: Readonly<{
        coinType?: Int32;
        account?: Int32;
        change?: BIP44ChangeIndex;
        address: Readonly<{
            index: Int32;
            isHardened?: boolean;
        }>;
    }>) => BIP44T;
    fromString: (path: string) => Result<BIP44T, Error>;
};
export declare const HDPathRadix: {
    create: (input: Readonly<{
        account?: Int32;
        change?: BIP44ChangeIndex;
        address: Readonly<{
            index: Int32;
            isHardened?: boolean;
        }>;
    }>) => HDPathRadixT;
    fromString: (path: string) => Result<HDPathRadixT, Error>;
    fromComponents: (bip32Components: BIP32PathComponentT[]) => Result<HDPathRadixT, Error>;
};
//# sourceMappingURL=bip44.d.ts.map