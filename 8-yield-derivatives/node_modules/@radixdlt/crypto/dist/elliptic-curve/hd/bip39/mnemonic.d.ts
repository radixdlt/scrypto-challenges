/// <reference types="node" />
import { Result } from 'neverthrow';
import { LanguageT, MnemomicT, StrengthT } from './_types';
import { SecureRandom } from '@radixdlt/util';
export declare const wordlistFromLanguage: (language: LanguageT) => string[];
export declare const languagesSupportedByBIP39: LanguageT[];
export declare const mnemonicStrengthSupportedByBIP39: StrengthT[];
export declare const strengthFromWordCount: (wordCount: number) => Result<StrengthT, Error>;
export declare const entropyInBitsFromWordCount: (wordCount: number) => number;
export declare const byteCountFromEntropyStrength: (strenght: StrengthT) => number;
export declare const Mnemonic: {
    generateNew: (input?: Readonly<{
        strength?: StrengthT | undefined;
        language?: LanguageT | undefined;
        secureRandom?: SecureRandom | undefined;
    }> | undefined) => MnemomicT;
    fromEntropy: (input: Readonly<{
        entropy: Buffer;
        language?: LanguageT;
    }>) => Result<MnemomicT, Error>;
    fromPhraseInLanguage: (input: Readonly<{
        phrase: string;
        language: LanguageT;
    }>) => Result<MnemomicT, Error>;
    fromWordsInLanguage: (input: Readonly<{
        words: string[];
        language: LanguageT;
    }>) => Result<MnemomicT, Error>;
    fromEnglishPhrase: (phrase: string) => Result<MnemomicT, Error>;
    fromEnglishWords: (words: string[]) => Result<MnemomicT, Error>;
};
//# sourceMappingURL=mnemonic.d.ts.map