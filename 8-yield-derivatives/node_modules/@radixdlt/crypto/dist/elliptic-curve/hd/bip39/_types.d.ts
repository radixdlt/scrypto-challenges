/// <reference types="node" />
import { BIP32T } from '../bip32';
import { PrivateKeyT, PublicKeyT } from '../../_types';
export declare type HDNodeT = Readonly<{
    publicKey: PublicKeyT;
    privateKey: PrivateKeyT;
    chainCode: Buffer;
    derive: (path: BIP32T) => HDNodeT;
    toJSON: () => Readonly<{
        xpriv: string;
        xpub: string;
    }>;
}>;
export declare type HDMasterSeedT = Readonly<{
    seed: Buffer;
    masterNode: () => HDNodeT;
}>;
export declare enum StrengthT {
    WORD_COUNT_12 = 128,
    WORD_COUNT_15 = 160,
    WORD_COUNT_18 = 192,
    WORD_COUNT_21 = 224,
    WORD_COUNT_24 = 256
}
export declare enum LanguageT {
    CZECH = 0,
    CHINESE_SIMPLIFIED = 1,
    CHINESE_TRADITIONAL = 2,
    KOREAN = 3,
    FRENCH = 4,
    ITALIAN = 5,
    SPANISH = 6,
    JAPANESE = 7,
    PORTUGUESE = 8,
    ENGLISH = 9
}
export declare type MnemonicProps = Readonly<{
    strength: StrengthT;
    entropy: Buffer;
    words: string[];
    phrase: string;
    language: LanguageT;
}>;
export declare type MnemomicT = MnemonicProps & Readonly<{
    toString: () => string;
    equals: (other: MnemomicT) => boolean;
}>;
//# sourceMappingURL=_types.d.ts.map