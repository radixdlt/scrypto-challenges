"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Secp256k1 = exports.CurveForm = void 0;
const uint256_1 = require("@radixdlt/uint256");
const ecPointOnCurve_1 = require("./ecPointOnCurve");
const generator = ecPointOnCurve_1.ECPointOnCurve.fromXY({
    x: new uint256_1.UInt256('79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', 16),
    y: new uint256_1.UInt256('483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', 16),
})._unsafeUnwrap();
const order = new uint256_1.UInt256('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141', 16);
const fieldSize = new uint256_1.UInt256('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F', 16);
var CurveForm;
(function (CurveForm) {
    /// Short Weierstrass (Weierstra√ü) form (`ùëÜ`), commonly used by `secp256k1`
    CurveForm["SHORT_WEIERSTRASS"] = "ShortWeierstrass";
})(CurveForm = exports.CurveForm || (exports.CurveForm = {}));
/// The curve E: `y¬≤ = x¬≥ + ax + b` over Fp
/// `secp256k1` Also known as the `Bitcoin curve` (though used by us at Radix, Ethereum, Zilliqa)
exports.Secp256k1 = {
    name: 'secp256k1',
    form: CurveForm.SHORT_WEIERSTRASS,
    order: order,
    fieldSize: fieldSize,
    generator: generator,
};
//# sourceMappingURL=secp256k1.js.map