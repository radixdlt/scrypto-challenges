/// <reference types="node" />
import { UInt256 } from '@radixdlt/uint256';
import { Result } from 'neverthrow';
import { SecureRandom } from '@radixdlt/util';
import { PrivateKeyT } from './_types';
export declare const fromBuffer: (buffer: Buffer) => Result<PrivateKeyT, Error>;
export declare const fromHex: (privateKeyHexString: string) => Result<PrivateKeyT, Error>;
export declare const PrivateKey: {
    generateNew: (secureRandom?: SecureRandom) => PrivateKeyT;
    fromScalar: (scalar: UInt256) => Result<PrivateKeyT, Error>;
    fromHex: (privateKeyHexString: string) => Result<PrivateKeyT, Error>;
    fromBuffer: (buffer: Buffer) => Result<PrivateKeyT, Error>;
};
//# sourceMappingURL=privateKey.d.ts.map