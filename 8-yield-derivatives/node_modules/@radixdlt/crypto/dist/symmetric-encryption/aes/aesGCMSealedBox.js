"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AES_GCM_SealedBox = void 0;
const neverthrow_1 = require("neverthrow");
const util_1 = require("@radixdlt/util");
const utils_1 = require("../../utils");
const tagLength = 16;
const nonceLength = 12;
const cipherMinLength = 1;
const __validateNonce = utils_1.validateLength.bind(null, nonceLength, 'nonce (IV)');
const __validateTag = utils_1.validateLength.bind(null, tagLength, 'auth tag');
const __validateAESSealedBoxCiphertext = utils_1.validateMinLength.bind(null, cipherMinLength, 'ciphertext');
/*
 * returns combined buffers: `nonce || tag || cipher`
 * */
const combineSealedBoxProps = (input) => Buffer.concat([input.nonce, input.authTag, input.ciphertext]);
const create = (input) => (0, neverthrow_1.combine)([
    __validateNonce(input.nonce),
    __validateTag(input.authTag),
    __validateAESSealedBoxCiphertext(input.ciphertext),
]).map(_ => (Object.assign(Object.assign({}, input), { combined: () => combineSealedBoxProps(input), equals: (other) => (0, util_1.buffersEquals)(other.nonce, input.nonce) &&
        (0, util_1.buffersEquals)(other.authTag, input.authTag) &&
        (0, util_1.buffersEquals)(other.ciphertext, input.ciphertext) })));
/* Buffer is: `nonce || tag || cipher` */
const aesSealedBoxFromBuffer = (buffer) => {
    const readNextBuffer = util_1.readBuffer.bind(null, buffer)();
    return (0, neverthrow_1.combine)([
        readNextBuffer(nonceLength),
        readNextBuffer(tagLength),
        readNextBuffer(buffer.length - nonceLength - tagLength),
    ])
        .map((parsed) => {
        const nonce = parsed[0];
        const authTag = parsed[1];
        const ciphertext = parsed[2];
        return {
            nonce,
            authTag,
            ciphertext,
        };
    })
        .andThen(create);
};
exports.AES_GCM_SealedBox = {
    fromCombinedBuffer: aesSealedBoxFromBuffer,
    create,
    nonceLength,
    tagLength,
};
//# sourceMappingURL=aesGCMSealedBox.js.map