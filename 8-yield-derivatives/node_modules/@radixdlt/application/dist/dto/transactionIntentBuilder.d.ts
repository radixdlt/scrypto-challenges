import { ExecutedAction, IntendedAction, StakeTokensAction, TransferTokensAction, UnstakeTokensAction } from '../actions';
import { TransactionIntentBuilderT } from './_types';
import { AccountAddressT } from '../../../account';
import { Result } from 'neverthrow';
import { PublicKeyT } from '../../../crypto';
export declare const singleRecipientFromActions: (mine: PublicKeyT, actions: UserAction[]) => Result<PublicKeyT, Error>;
export declare const isTransferTokensAction: (something: unknown) => something is TransferTokensAction;
export declare const isStakeTokensAction: (something: unknown) => something is StakeTokensAction;
export declare const isUnstakeTokensAction: (something: unknown) => something is UnstakeTokensAction;
declare type UserAction = IntendedAction | ExecutedAction;
export declare const getUniqueAddresses: (input: Readonly<{
    action: UserAction;
    includeFrom?: boolean;
    includeTo?: boolean;
}>) => AccountAddressT[];
export declare const flatMapAddressesOf: (input: Readonly<{
    actions: UserAction[];
    includeFrom?: boolean;
    includeTo?: boolean;
}>) => AccountAddressT[];
export declare const TransactionIntentBuilder: {
    create: () => TransactionIntentBuilderT;
};
export {};
//# sourceMappingURL=transactionIntentBuilder.d.ts.map