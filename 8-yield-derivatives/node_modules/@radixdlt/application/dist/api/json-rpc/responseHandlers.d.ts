/// <reference types="node" />
import { Result } from 'neverthrow';
import { BuildTransactionEndpoint, SubmitTransactionEndpoint, LookupTransactionEndpoint, NetworkIdEndpoint, NetworkTransactionDemandEndpoint, NetworkTransactionThroughputEndpoint, StakePositionsEndpoint, FinalizeTransactionEndpoint, TokenBalancesEndpoint, TokenInfoEndpoint, TransactionHistoryEndpoint, TransactionStatusEndpoint, UnstakePositionsEndpoint, ValidatorsEndpoint } from './_types';
export declare type RPCRequestFailureResponse = Readonly<{
    failure: string;
}>;
export declare const handleTransactionHistoryResponse: (json: TransactionHistoryEndpoint.Response) => Result<{
    transactions: {
        message: string | undefined;
        txID: Readonly<{
            __witness: "isTXId";
            __hex: string;
            toString: () => string;
            equals: (other: Readonly<any>) => boolean;
        }>;
        sentAt: Date;
        status: import("../..").TransactionStatus;
        fee: import("@radixdlt/uint256").UInt256;
        actions: import("../..").ExecutedAction[];
    }[];
    cursor: string;
}, Error[]>;
export declare const handleLookupTXResponse: (json: LookupTransactionEndpoint.Response) => Result<{
    message: string | undefined;
    txID: Readonly<{
        __witness: "isTXId";
        __hex: string;
        toString: () => string;
        equals: (other: Readonly<any>) => boolean;
    }>;
    sentAt: Date;
    status: import("../..").TransactionStatus;
    fee: import("@radixdlt/uint256").UInt256;
    actions: import("../..").ExecutedAction[];
}, Error[]>;
export declare const handleNetworkIdResponse: (json: NetworkIdEndpoint.Response) => Result<NetworkIdEndpoint.DecodedResponse, Error[]>;
export declare const handleTokenBalancesResponse: (json: TokenBalancesEndpoint.Response) => Result<TokenBalancesEndpoint.DecodedResponse, Error[]>;
export declare const handleValidatorsResponse: (json: ValidatorsEndpoint.Response) => Result<Readonly<{
    validators: Readonly<{
        address: import("packages/account/dist").ValidatorAddressT;
        ownerAddress: import("packages/account/dist").AccountAddressT;
        name: string;
        infoURL: URL;
        totalDelegatedStake: import("@radixdlt/uint256").UInt256;
        ownerDelegation: import("@radixdlt/uint256").UInt256;
        validatorFee: number;
        registered: boolean;
        isExternalStakeAccepted: boolean;
        uptimePercentage: number;
        proposalsMissed: number;
        proposalsCompleted: number;
    }>[];
}>, Error[]>;
export declare const handleLookupValidatorResponse: (json: Readonly<{
    address: string;
    ownerAddress: string;
    name: string;
    infoURL: string;
    totalDelegatedStake: string;
    ownerDelegation: string;
    validatorFee: string;
    registered: boolean;
    isExternalStakeAccepted: boolean;
    uptimePercentage: string;
    proposalsMissed: number;
    proposalsCompleted: number;
}>) => Result<Readonly<{
    address: import("packages/account/dist").ValidatorAddressT;
    ownerAddress: import("packages/account/dist").AccountAddressT;
    name: string;
    infoURL: URL;
    totalDelegatedStake: import("@radixdlt/uint256").UInt256;
    ownerDelegation: import("@radixdlt/uint256").UInt256;
    validatorFee: number;
    registered: boolean;
    isExternalStakeAccepted: boolean;
    uptimePercentage: number;
    proposalsMissed: number;
    proposalsCompleted: number;
}>, Error[]>;
export declare const handleTokenInfoResponse: (json: TokenInfoEndpoint.Response) => Result<Readonly<{
    name: string;
    rri: Readonly<{
        hash: Buffer;
        __witness: "isRRI";
        network: import("packages/primitives/dist").Network;
        name: string;
        toString: () => string;
        equals: (other: Readonly<any>) => boolean;
    }>;
    symbol: string;
    description?: string | undefined;
    granularity: import("@radixdlt/uint256").UInt256;
    isSupplyMutable: boolean;
    currentSupply: import("@radixdlt/uint256").UInt256;
    tokenInfoURL?: URL | undefined;
    iconURL?: URL | undefined;
}>, Error[]>;
export declare const handleStakesResponse: (json: StakePositionsEndpoint.Response) => Result<import("../..").StakePositions, Error[]>;
export declare const handleUnstakesResponse: (json: UnstakePositionsEndpoint.Response) => Result<import("../..").UnstakePositions, Error[]>;
export declare const handleTransactionStatusResponse: (json: TransactionStatusEndpoint.Response) => Result<TransactionStatusEndpoint.DecodedResponse, Error[]>;
export declare const handleNetworkxThroughputResponse: (json: NetworkTransactionThroughputEndpoint.Response) => Result<Readonly<{
    tps: number;
}>, Error[]>;
export declare const handleNetworkxDemandResponse: (json: NetworkTransactionDemandEndpoint.Response) => Result<Readonly<{
    tps: number;
}>, Error[]>;
export declare const handleBuildTransactionResponse: (json: BuildTransactionEndpoint.Response) => Result<BuildTransactionEndpoint.DecodedResponse, Error[]>;
export declare const handleFinalizeTransactionResponse: (json: FinalizeTransactionEndpoint.Response) => Result<FinalizeTransactionEndpoint.DecodedResponse, Error[]>;
export declare const handleSubmitTransactionResponse: (json: SubmitTransactionEndpoint.Response) => Result<SubmitTransactionEndpoint.DecodedResponse, Error[]>;
//# sourceMappingURL=responseHandlers.d.ts.map