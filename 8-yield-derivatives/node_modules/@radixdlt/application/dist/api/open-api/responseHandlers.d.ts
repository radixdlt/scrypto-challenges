import { TokenInfoEndpoint, NativeTokenInfoEndpoint, AccountBalancesEndpoint, BuildTransactionEndpoint, FinalizeTransactionEndpoint, TransactionEndpoint, StakePositionsEndpoint, UnstakePositionsEndpoint, AccountTransactionsEndpoint, ValidatorEndpoint, ValidatorsEndpoint, GatewayEndpoint, RecentTransactionEndpoint } from './_types';
import { ReturnOfAPICall } from '@radixdlt/networking';
import { Result } from 'neverthrow';
export declare const handleGatewayResponse: (json: ReturnOfAPICall<'gatewayPost'>) => Result<GatewayEndpoint.DecodedResponse, Error[]>;
export declare const handleTokenInfoResponse: (json: ReturnOfAPICall<'tokenPost'>) => Result<TokenInfoEndpoint.DecodedResponse, Error[]>;
export declare const handleNativeTokenResponse: (json: ReturnOfAPICall<'tokenNativePost'>) => Result<NativeTokenInfoEndpoint.DecodedResponse, Error[]>;
export declare const handleStakePositionsResponse: (json: ReturnOfAPICall<'accountStakesPost'>) => Result<StakePositionsEndpoint.DecodedResponse, Error[]>;
export declare const handleUnstakePositionsResponse: (json: ReturnOfAPICall<'accountUnstakesPost'>) => Result<UnstakePositionsEndpoint.DecodedResponse, Error[]>;
export declare const handleAccountTransactionsResponse: (json: ReturnOfAPICall<'accountTransactionsPost'>) => Result<AccountTransactionsEndpoint.DecodedResponse, Error[]>;
export declare const handleRecentTransactionResponse: (json: ReturnOfAPICall<'transactionRecentPost'>) => Result<RecentTransactionEndpoint.DecodedResponse, Error[]>;
export declare const handleAccountBalancesResponse: (json: ReturnOfAPICall<'accountBalancesPost'>) => Result<AccountBalancesEndpoint.DecodedResponse, Error[]>;
export declare const handleValidatorResponse: (json: ReturnOfAPICall<'validatorPost'>) => Result<ValidatorEndpoint.DecodedResponse, Error[]>;
export declare const handleValidatorsResponse: (json: ReturnOfAPICall<'validatorsPost'>) => Result<ValidatorsEndpoint.DecodedResponse, Error[]>;
export declare const handleBuildTransactionResponse: (json: ReturnOfAPICall<'transactionBuildPost'>) => Result<BuildTransactionEndpoint.DecodedResponse, Error[]>;
export declare const handleFinalizeTransactionResponse: (json: ReturnOfAPICall<'transactionFinalizePost'>) => Result<FinalizeTransactionEndpoint.DecodedResponse, Error[]>;
export declare const handleSubmitTransactionResponse: (json: ReturnOfAPICall<'transactionSubmitPost'>) => Result<{
    txID: Readonly<{
        __witness: "isTXId";
        __hex: string;
        toString: () => string;
        equals: (other: Readonly<any>) => boolean;
    }>;
}, Error[]>;
export declare const handleTransactionResponse: (json: ReturnOfAPICall<'transactionStatusPost'>) => Result<TransactionEndpoint.DecodedResponse, Error[]>;
//# sourceMappingURL=responseHandlers.d.ts.map