export declare const amountDecoder: (...keys: string[]) => import("packages/data-formats/dist/json/_types").Decoder;
export declare const dateDecoder: (...keys: string[]) => import("packages/data-formats/dist/json/_types").Decoder;
export declare const RRIDecoder: (...keys: string[]) => import("packages/data-formats/dist/json/_types").Decoder;
export declare const URLDecoder: (...keys: string[]) => import("packages/data-formats/dist/json/_types").Decoder;
export declare const transactionIdentifierDecoder: (...keys: string[]) => import("packages/data-formats/dist/json/_types").Decoder;
export declare const networkDecoder: (...keys: string[]) => import("packages/data-formats/dist/json/_types").Decoder;
export declare const addressDecoder: (...keys: string[]) => import("packages/data-formats/dist/json/_types").Decoder;
export declare const validatorAddressDecoder: (...keys: string[]) => import("packages/data-formats/dist/json/_types").Decoder;
export declare const addressObjectDecoder: (...keys: string[]) => import("packages/data-formats/dist/json/_types").Decoder;
export declare const validatorAddressObjectDecoder: (...keys: string[]) => import("packages/data-formats/dist/json/_types").Decoder;
export declare const addressFromUnsafe: (address: string) => import("neverthrow").Result<import("@radixdlt/account").ValidatorAddressT, Error> | import("neverthrow").Result<import("@radixdlt/account").AccountAddressT, Error> | undefined;
export declare const addressRegexDecoder: (...keys: string[]) => import("packages/data-formats/dist/json/_types").Decoder;
//# sourceMappingURL=decoders.d.ts.map