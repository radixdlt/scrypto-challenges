import { NodeAPI, NodeT } from './_types';
import { Observable } from 'rxjs';
import { AccountAddressT, ResourceIdentifierT, ValidatorAddressT } from '../../../account';
import { FinalizedTransaction, SignedTransaction, TransactionHistoryRequestInput, RecentTransactionsRequestInput, TransactionIntent, TransactionIdentifierT } from '../dto';
import { AccountTransactionsEndpoint, BuildTransactionEndpoint, NativeTokenInfoEndpoint, StakePositionsEndpoint, SubmitTransactionEndpoint, TokenInfoEndpoint, UnstakePositionsEndpoint, ValidatorEndpoint, ValidatorsEndpoint, FinalizeTransactionEndpoint, TransactionEndpoint, RecentTransactionEndpoint } from './open-api/_types';
export declare const radixCoreAPI: (node: NodeT, api: NodeAPI) => {
    setHeaders: (newHeaders: Record<string, string>) => Record<string, string>;
    node: Readonly<{
        url: URL;
    }>;
    validators: (input: string) => Observable<ValidatorsEndpoint.DecodedResponse>;
    lookupValidator: (input: ValidatorAddressT) => Observable<ValidatorEndpoint.DecodedResponse>;
    networkId: () => Observable<import("packages/primitives/dist").Network>;
    tokenBalancesForAddress: (address: AccountAddressT) => Observable<import("./open-api/_types").AccountBalancesEndpoint.DecodedResponse>;
    transactionHistory: (input: TransactionHistoryRequestInput) => Observable<AccountTransactionsEndpoint.DecodedResponse>;
    recentTransactions: (input: RecentTransactionsRequestInput) => Observable<RecentTransactionEndpoint.DecodedResponse>;
    nativeToken: (network: string) => Observable<NativeTokenInfoEndpoint.DecodedResponse>;
    tokenInfo: (rri: ResourceIdentifierT) => Observable<TokenInfoEndpoint.DecodedResponse>;
    stakesForAddress: (address: AccountAddressT) => Observable<StakePositionsEndpoint.DecodedResponse>;
    unstakesForAddress: (address: AccountAddressT) => Observable<UnstakePositionsEndpoint.DecodedResponse>;
    transactionStatus: (txID: TransactionIdentifierT, network: string) => Observable<TransactionEndpoint.DecodedResponse>;
    buildTransaction: (transactionIntent: TransactionIntent, from: AccountAddressT) => Observable<BuildTransactionEndpoint.DecodedResponse>;
    finalizeTransaction: (network: string, signedTransaction: SignedTransaction) => Observable<FinalizeTransactionEndpoint.DecodedResponse>;
    submitSignedTransaction: (network: string, finalizedTx: FinalizedTransaction) => Observable<SubmitTransactionEndpoint.DecodedResponse>;
};
//# sourceMappingURL=radixCoreAPI.d.ts.map