import { StatisticsApi, ValidatorUptimeCollectionItem, ValidatorsUptimeResponse } from '../generated';
import { RuntimeConfiguration } from '../runtime';
export declare class Statistics {
    innerClient: StatisticsApi;
    configuration?: RuntimeConfiguration | undefined;
    constructor(innerClient: StatisticsApi, configuration?: RuntimeConfiguration | undefined);
    /**
     * Returns uptime statistics for given validators. Request is split into multiple requests if there are more addresses than configured limit.
     * You can change limit by passing `maxValidatorsUptimeCount` during gateway instantiation.
     *
     * @param addresses list of validator addresses
     * @param from optional starting date (timestamp) or state verson from which uptime should be calculated
     * @param to optional end date (timestamp) or state verson from which uptime should be calculated
     * @returns list of validator uptime collection items
     */
    getValidatorsUptimeFromTo(addresses: string[], from?: Date | number, to?: Date | number): Promise<ValidatorUptimeCollectionItem[]>;
    getValidatorsUptime(validator_addresses: string[]): Promise<ValidatorsUptimeResponse>;
}
