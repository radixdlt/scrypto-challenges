/**
 * Radix Gateway API - Babylon
 * This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic state on the RadixDLT ledger, and intelligently handle transaction submission.  It is designed for use by wallets and explorers, and for light queries from front-end dApps. For exchange/asset integrations, back-end dApp integrations, or simple use cases, you should consider using the Core API on a Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.  The Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway), which is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract and index data from the network.  This document is an API reference documentation, visit [User Guide](https://docs.radixdlt.com/) to learn more about how to run a Gateway of your own.  ## Migration guide  Please see [the latest release notes](https://github.com/radixdlt/babylon-gateway/releases).  ## Integration and forward compatibility guarantees  All responses may have additional fields added at any release, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects.  When the Radix protocol is updated, new functionality may be added, and so discriminated unions returned by the API may need to be updated to have new variants added, corresponding to the updated data. Clients may need to update in advance to be able to handle these new variants when a protocol update comes out.  On the very rare occasions we need to make breaking changes to the API, these will be warned in advance with deprecation notices on previous versions. These deprecation notices will include a safe migration path. Deprecation notes or breaking changes will be flagged clearly in release notes for new versions of the Gateway.  The Gateway DB schema is not subject to any compatibility guarantees, and may be changed at any release. DB changes will be flagged in the release notes so clients doing custom DB integrations can prepare.
 *
 * The version of the OpenAPI document: v1.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { StateEntityDetailsRequest, StateEntityDetailsResponse, StateEntityFungibleResourceVaultsPageRequest, StateEntityFungibleResourceVaultsPageResponse, StateEntityFungiblesPageRequest, StateEntityFungiblesPageResponse, StateEntityMetadataPageRequest, StateEntityMetadataPageResponse, StateEntityNonFungibleIdsPageRequest, StateEntityNonFungibleIdsPageResponse, StateEntityNonFungibleResourceVaultsPageRequest, StateEntityNonFungibleResourceVaultsPageResponse, StateEntityNonFungiblesPageRequest, StateEntityNonFungiblesPageResponse, StateKeyValueStoreDataRequest, StateKeyValueStoreDataResponse, StateKeyValueStoreKeysRequest, StateKeyValueStoreKeysResponse, StateNonFungibleDataRequest, StateNonFungibleDataResponse, StateNonFungibleIdsRequest, StateNonFungibleIdsResponse, StateNonFungibleLocationRequest, StateNonFungibleLocationResponse, StateValidatorsListRequest, StateValidatorsListResponse } from '../models';
export interface EntityFungibleResourceVaultPageRequest {
    stateEntityFungibleResourceVaultsPageRequest: StateEntityFungibleResourceVaultsPageRequest;
}
export interface EntityFungiblesPageRequest {
    stateEntityFungiblesPageRequest: StateEntityFungiblesPageRequest;
}
export interface EntityMetadataPageRequest {
    stateEntityMetadataPageRequest: StateEntityMetadataPageRequest;
}
export interface EntityNonFungibleIdsPageRequest {
    stateEntityNonFungibleIdsPageRequest: StateEntityNonFungibleIdsPageRequest;
}
export interface EntityNonFungibleResourceVaultPageRequest {
    stateEntityNonFungibleResourceVaultsPageRequest: StateEntityNonFungibleResourceVaultsPageRequest;
}
export interface EntityNonFungiblesPageRequest {
    stateEntityNonFungiblesPageRequest: StateEntityNonFungiblesPageRequest;
}
export interface KeyValueStoreDataRequest {
    stateKeyValueStoreDataRequest: StateKeyValueStoreDataRequest;
}
export interface KeyValueStoreKeysRequest {
    stateKeyValueStoreKeysRequest: StateKeyValueStoreKeysRequest;
}
export interface NonFungibleDataRequest {
    stateNonFungibleDataRequest: StateNonFungibleDataRequest;
}
export interface NonFungibleIdsRequest {
    stateNonFungibleIdsRequest: StateNonFungibleIdsRequest;
}
export interface NonFungibleLocationRequest {
    stateNonFungibleLocationRequest: StateNonFungibleLocationRequest;
}
export interface StateEntityDetailsOperationRequest {
    stateEntityDetailsRequest: StateEntityDetailsRequest;
}
export interface StateValidatorsListOperationRequest {
    stateValidatorsListRequest: StateValidatorsListRequest;
}
/**
 *
 */
export declare class StateApi extends runtime.BaseAPI {
    /**
     * Returns vaults for fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get page of Global Entity Fungible Resource Vaults
     */
    entityFungibleResourceVaultPageRaw(requestParameters: EntityFungibleResourceVaultPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateEntityFungibleResourceVaultsPageResponse>>;
    /**
     * Returns vaults for fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get page of Global Entity Fungible Resource Vaults
     */
    entityFungibleResourceVaultPage(requestParameters: EntityFungibleResourceVaultPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateEntityFungibleResourceVaultsPageResponse>;
    /**
     * Returns the total amount of each fungible resource owned by a given global entity. Result can be aggregated globally or per vault. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get page of Global Entity Fungible Resource Balances
     */
    entityFungiblesPageRaw(requestParameters: EntityFungiblesPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateEntityFungiblesPageResponse>>;
    /**
     * Returns the total amount of each fungible resource owned by a given global entity. Result can be aggregated globally or per vault. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get page of Global Entity Fungible Resource Balances
     */
    entityFungiblesPage(requestParameters: EntityFungiblesPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateEntityFungiblesPageResponse>;
    /**
     * Returns all the metadata properties associated with a given global entity. The returned response is in a paginated format, ordered by first appearance on the ledger.
     * Get Entity Metadata Page
     */
    entityMetadataPageRaw(requestParameters: EntityMetadataPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateEntityMetadataPageResponse>>;
    /**
     * Returns all the metadata properties associated with a given global entity. The returned response is in a paginated format, ordered by first appearance on the ledger.
     * Get Entity Metadata Page
     */
    entityMetadataPage(requestParameters: EntityMetadataPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateEntityMetadataPageResponse>;
    /**
     * Returns all non-fungible IDs of a given non-fungible resource owned by a given entity. The returned response is in a paginated format, ordered by the resource\'s first appearence on the ledger.
     * Get page of Non-Fungibles in Vault
     */
    entityNonFungibleIdsPageRaw(requestParameters: EntityNonFungibleIdsPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateEntityNonFungibleIdsPageResponse>>;
    /**
     * Returns all non-fungible IDs of a given non-fungible resource owned by a given entity. The returned response is in a paginated format, ordered by the resource\'s first appearence on the ledger.
     * Get page of Non-Fungibles in Vault
     */
    entityNonFungibleIdsPage(requestParameters: EntityNonFungibleIdsPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateEntityNonFungibleIdsPageResponse>;
    /**
     * Returns vaults for non fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get page of Global Entity Non-Fungible Resource Vaults
     */
    entityNonFungibleResourceVaultPageRaw(requestParameters: EntityNonFungibleResourceVaultPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateEntityNonFungibleResourceVaultsPageResponse>>;
    /**
     * Returns vaults for non fungible resource owned by a given global entity. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get page of Global Entity Non-Fungible Resource Vaults
     */
    entityNonFungibleResourceVaultPage(requestParameters: EntityNonFungibleResourceVaultPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateEntityNonFungibleResourceVaultsPageResponse>;
    /**
     * Returns the total amount of each non-fungible resource owned by a given global entity. Result can be aggregated globally or per vault. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get page of Global Entity Non-Fungible Resource Balances
     */
    entityNonFungiblesPageRaw(requestParameters: EntityNonFungiblesPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateEntityNonFungiblesPageResponse>>;
    /**
     * Returns the total amount of each non-fungible resource owned by a given global entity. Result can be aggregated globally or per vault. The returned response is in a paginated format, ordered by the resource\'s first appearance on the ledger.
     * Get page of Global Entity Non-Fungible Resource Balances
     */
    entityNonFungiblesPage(requestParameters: EntityNonFungiblesPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateEntityNonFungiblesPageResponse>;
    /**
     * Returns data (value) associated with a given key of a given key-value store. [Check detailed documentation for explanation](#section/How-to-query-the-content-of-a-key-value-store-inside-a-component)
     * Get KeyValueStore Data
     */
    keyValueStoreDataRaw(requestParameters: KeyValueStoreDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateKeyValueStoreDataResponse>>;
    /**
     * Returns data (value) associated with a given key of a given key-value store. [Check detailed documentation for explanation](#section/How-to-query-the-content-of-a-key-value-store-inside-a-component)
     * Get KeyValueStore Data
     */
    keyValueStoreData(requestParameters: KeyValueStoreDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateKeyValueStoreDataResponse>;
    /**
     * Allows to iterate over key value store keys.
     * Get KeyValueStore Keys
     */
    keyValueStoreKeysRaw(requestParameters: KeyValueStoreKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateKeyValueStoreKeysResponse>>;
    /**
     * Allows to iterate over key value store keys.
     * Get KeyValueStore Keys
     */
    keyValueStoreKeys(requestParameters: KeyValueStoreKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateKeyValueStoreKeysResponse>;
    /**
     * Returns data associated with a given non-fungible ID of a given non-fungible resource.
     * Get Non-Fungible Data
     */
    nonFungibleDataRaw(requestParameters: NonFungibleDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateNonFungibleDataResponse>>;
    /**
     * Returns data associated with a given non-fungible ID of a given non-fungible resource.
     * Get Non-Fungible Data
     */
    nonFungibleData(requestParameters: NonFungibleDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateNonFungibleDataResponse>;
    /**
     * Returns the non-fungible IDs of a given non-fungible resource. Returned response is in a paginated format, ordered by their first appearance on the ledger.
     * Get page of Non-Fungible Ids in Resource Collection
     */
    nonFungibleIdsRaw(requestParameters: NonFungibleIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateNonFungibleIdsResponse>>;
    /**
     * Returns the non-fungible IDs of a given non-fungible resource. Returned response is in a paginated format, ordered by their first appearance on the ledger.
     * Get page of Non-Fungible Ids in Resource Collection
     */
    nonFungibleIds(requestParameters: NonFungibleIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateNonFungibleIdsResponse>;
    /**
     * Returns location of a given non-fungible ID.
     * Get Non-Fungible Location
     */
    nonFungibleLocationRaw(requestParameters: NonFungibleLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateNonFungibleLocationResponse>>;
    /**
     * Returns location of a given non-fungible ID.
     * Get Non-Fungible Location
     */
    nonFungibleLocation(requestParameters: NonFungibleLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateNonFungibleLocationResponse>;
    /**
     * Returns detailed information for collection of entities. Aggregate resources globally by default.
     * Get Entity Details
     */
    stateEntityDetailsRaw(requestParameters: StateEntityDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateEntityDetailsResponse>>;
    /**
     * Returns detailed information for collection of entities. Aggregate resources globally by default.
     * Get Entity Details
     */
    stateEntityDetails(requestParameters: StateEntityDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateEntityDetailsResponse>;
    /**
     * Get Validators List
     */
    stateValidatorsListRaw(requestParameters: StateValidatorsListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateValidatorsListResponse>>;
    /**
     * Get Validators List
     */
    stateValidatorsList(requestParameters: StateValidatorsListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateValidatorsListResponse>;
}
