import { ConfigurationParameters } from './generated';
import { State, Statistics, Status, Stream, Transaction } from './subapis';
import { RuntimeConfiguration } from './runtime';
export * from './generated';
export * from './subapis';
export * from './helpers';
export type GatewayApiClientSettings = ConfigurationParameters & {
    /**
     * Maximum number of addresses that can be queried at once when using /state/entity/details endpoint
     */
    maxAddressesCount?: number;
    /**
     * Maximum number of NFT IDs that can be queried at once when using /state/non-fungible/data endpoint
     */
    maxNftIdsCount?: number;
    /**
     * Maximum number of validator addresses that can be queried when using /statistics/validators/uptime endpoint
     */
    maxValidatorsUptimeCount?: number;
    /**
     * Application name required for statistics purposes.
     */
    applicationName: string;
    /**
     * Application version which can be used for statistics purposes.
     */
    applicationVersion?: string;
    /**
     * Application dApp definition address which can be used for statistics purposes.
     */
    applicationDappDefinitionAddress?: string;
    /**
     * Network ID of the network the client is connecting to. It's used to determine the gateway URL.
     * It's discarded if `basePath` is provided.
     */
    networkId?: number;
};
export declare class GatewayApiClient {
    static initialize(settings: GatewayApiClientSettings): GatewayApiClient;
    private static constructConfiguration;
    state: State;
    stream: Stream;
    status: Status;
    transaction: Transaction;
    statistics: Statistics;
    private lowLevel;
    constructor(configuration: RuntimeConfiguration);
}
