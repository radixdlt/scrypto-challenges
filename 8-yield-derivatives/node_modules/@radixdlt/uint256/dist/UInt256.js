"use strict";
exports.__esModule = true;
var m = require("./arithmetic");
var UInt256 = /** @class */ (function () {
    function UInt256(param, radix) {
        if (radix === void 0) { radix = 10; }
        this.compareTo = this.cmp;
        this.subtract = this.sub;
        this.divideAndRemainder = this.divmod;
        this.divide = this.div;
        this.multiply = this.mul;
        this.remainder = this.mod;
        this.shiftRight = this.shr;
        this.shiftLeft = this.shl;
        this.isMutable = false;
        if (!param) {
            return this;
        }
        if (param instanceof ArrayBuffer) {
            if (param.byteLength === m.BYTES && !m.eq(param, 0)) {
                this.buffer = param;
            }
            else {
                throw new TypeError('NAN');
            }
            return this.optimize();
        }
        if (param instanceof UInt256) {
            if (param.buffer) {
                this.buffer = param.buffer.slice(0);
            }
            return this;
        }
        if (typeof param === 'number') {
            if (param < 0 || param > m.JSNUMBER_MAX_INTEGER) {
                throw new TypeError('NAN');
            }
            if (param !== 0) {
                this.buffer = m.numberToBuffer(param);
            }
            return this;
        }
        var prefixed = 'xX'.indexOf(param[1]) !== -1;
        if (radix === 16 || prefixed) {
            this.buffer = new ArrayBuffer(m.BYTES);
            if (m.fromHex(this.buffer, param, prefixed)) {
                throw new TypeError('NAN');
            }
            return this.optimize();
        }
        if (radix > m.RADIX_MAX || radix < m.RADIX_MIN) {
            throw new TypeError('NAN');
        }
        for (var i = 0; i < param.length; i += 1) {
            var chr = parseInt(param.charAt(i), radix);
            if (isNaN(chr)) {
                throw new TypeError('NAN');
            }
            this.mul(radix, true).add(chr, true);
        }
        return this;
    }
    UInt256.valueOf = function (val) {
        return new UInt256(val);
    };
    UInt256.prototype.mutable = function (mutable) {
        if (mutable === void 0) { mutable = true; }
        this.isMutable = mutable;
        return this;
    };
    UInt256.prototype.pow = function (rval, mutate) {
        if (rval < 0) {
            throw new Error('NAN');
        }
        var lval = (mutate && this) || this.copy();
        if (rval === 0) {
            lval.buffer = new UInt256(1).buffer;
            return lval;
        }
        if (!lval.buffer) {
            return lval;
        }
        var rv = (mutate && this.copy()) || this;
        // tslint:disable-next-line:no-increment-decrement
        while (--rval) {
            m.mul(lval.buffer, rv.buffer);
        }
        return lval.optimize();
    };
    UInt256.prototype.add = function (rval, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var lval = (mutate && this) || this.copy();
        if (typeof rval === 'number') {
            if (rval < 0 || rval > m.JSNUMBER_MAX_INTEGER) {
                throw new TypeError('NAN');
            }
            if (rval !== 0) {
                if (!lval.buffer) {
                    lval.buffer = m.numberToBuffer(rval);
                    return lval;
                }
                m.add(lval.buffer, rval);
                lval.optimize();
            }
            return lval;
        }
        if (!rval.buffer) {
            return lval;
        }
        if (!lval.buffer) {
            lval.buffer = rval.buffer.slice(0);
            return lval;
        }
        m.add(lval.buffer, rval.buffer);
        return lval.optimize();
    };
    UInt256.prototype.safeAdd = function (rval, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var res = this.add(rval);
        if (this.gt(res)) {
            throw new TypeError('OF');
        }
        if (mutate) {
            this.buffer = res.buffer;
            return this;
        }
        return res;
    };
    UInt256.prototype.gcd = function (rval, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var t = this.mod(rval);
        var num = rval.copy();
        var denom = t;
        while (denom.neq(0)) {
            t = num.mod(denom, true);
            num = denom;
            denom = t;
        }
        if (!mutate) {
            return num;
        }
        this.buffer = num.buffer;
        return this;
    };
    UInt256.prototype.sub = function (rval, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var lval = (mutate && this) || this.copy();
        if (typeof rval === 'number') {
            if (rval < 0 || rval > m.JSNUMBER_MAX_INTEGER) {
                throw new TypeError('NAN');
            }
            if (rval !== 0) {
                if (!lval.buffer) {
                    lval.buffer = m.numberToBuffer(rval);
                    m.comp(lval.buffer);
                    return lval;
                }
                m.sub(lval.buffer, rval);
                lval.optimize();
            }
            return lval;
        }
        if (!rval.buffer) {
            return lval;
        }
        if (!lval.buffer) {
            lval.buffer = rval.buffer.slice(0);
            m.comp(lval.buffer);
            return lval;
        }
        m.sub(lval.buffer, rval.buffer);
        return lval.optimize();
    };
    UInt256.prototype.safeSub = function (rval, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        if (this.lt(rval)) {
            throw new TypeError('OF');
        }
        return this.sub(rval, mutate);
    };
    UInt256.prototype.divmod = function (rval) {
        var lval = this.copy();
        rval = new UInt256(rval);
        if (!lval.buffer) {
            return [lval, lval.copy()];
        }
        if (m.divmod(lval.buffer, rval.buffer)) {
            throw new TypeError('DBZ');
        }
        return [rval.optimize(), lval.optimize()];
    };
    UInt256.prototype.div = function (rval, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var lval = (mutate && this) || this.copy();
        if (!lval.buffer) {
            return lval;
        }
        rval = new UInt256(rval);
        if (m.divmod(lval.buffer, rval.buffer)) {
            throw new TypeError('DBZ');
        }
        lval.buffer = rval.buffer;
        return lval.optimize();
    };
    UInt256.prototype.mod = function (rval, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var lval = (mutate && this) || this.copy();
        if (!lval.buffer) {
            return lval;
        }
        rval = new UInt256(rval);
        if (m.divmod(lval.buffer, rval.buffer)) {
            throw new TypeError('DBZ');
        }
        return lval.optimize();
    };
    UInt256.prototype.mul = function (rval, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var lval = (mutate && this) || this.copy();
        if (!lval.buffer) {
            return lval;
        }
        if (typeof rval === 'number') {
            if (rval < 0 || rval > m.JSNUMBER_MAX_INTEGER) {
                throw new TypeError('NAN');
            }
            if (rval === 0) {
                delete lval.buffer;
                return lval;
            }
            m.mul(lval.buffer, rval);
            return lval.optimize();
        }
        if (!rval.buffer) {
            delete lval.buffer;
            return lval;
        }
        m.mul(lval.buffer, rval.buffer);
        return lval.optimize();
    };
    UInt256.prototype.safeMul = function (rval, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        if (this.eq(0)) {
            return (mutate && this) || this.copy();
        }
        var res = this.mul(rval);
        if (res.div(this).neq(rval)) {
            throw new TypeError('OF');
        }
        if (mutate) {
            this.buffer = res.buffer;
            return this;
        }
        return res;
    };
    UInt256.prototype.and = function (rval, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var lval = (mutate && this) || this.copy();
        if (!lval.buffer) {
            return lval;
        }
        if (typeof rval === 'number') {
            if (rval < 0 || rval > m.JSNUMBER_MAX_INTEGER) {
                throw new TypeError('NAN');
            }
            if (rval === 0) {
                delete lval.buffer;
                return lval;
            }
            m.and(lval.buffer, rval);
            return lval;
        }
        if (!rval.buffer) {
            delete lval.buffer;
            return lval;
        }
        m.and(lval.buffer, rval.buffer);
        return lval;
    };
    UInt256.prototype.andNot = function (rval, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var lval = (mutate && this) || this.copy();
        if (!lval.buffer) {
            return lval;
        }
        if (typeof rval === 'number') {
            if (rval < 0 || rval > m.JSNUMBER_MAX_INTEGER) {
                throw new TypeError('NAN');
            }
            if (rval === 0) {
                return lval;
            }
            m.andNot(lval.buffer, rval);
            return lval.optimize();
        }
        if (!rval.buffer) {
            return lval;
        }
        m.andNot(lval.buffer, rval.buffer);
        return lval.optimize();
    };
    UInt256.prototype.or = function (rval, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var lval = (mutate && this) || this.copy();
        if (!lval.buffer) {
            lval.buffer = new UInt256(rval).buffer;
            return lval;
        }
        if (typeof rval === 'number') {
            if (rval < 0 || rval > m.JSNUMBER_MAX_INTEGER) {
                throw new TypeError('NAN');
            }
            if (rval === 0) {
                return lval;
            }
            m.or(lval.buffer, rval);
            return lval;
        }
        if (!rval.buffer) {
            return lval;
        }
        m.or(lval.buffer, rval.buffer);
        return lval;
    };
    UInt256.prototype.xor = function (rval, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var lval = (mutate && this) || this.copy();
        if (!lval.buffer) {
            lval.buffer = new UInt256(rval).buffer;
            return lval;
        }
        if (typeof rval === 'number') {
            if (rval < 0 || rval > m.JSNUMBER_MAX_INTEGER) {
                throw new TypeError('NAN');
            }
            if (rval === 0) {
                return lval;
            }
            m.xor(lval.buffer, rval);
            return lval.optimize();
        }
        if (!rval.buffer) {
            return lval;
        }
        m.xor(lval.buffer, rval.buffer);
        return lval.optimize();
    };
    UInt256.prototype.not = function (mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var lval = (mutate && this) || this.copy();
        lval.buffer = lval.buffer || new ArrayBuffer(m.BYTES);
        m.not(lval.buffer);
        return lval.optimize();
    };
    UInt256.prototype.shl = function (shift, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var lval = (mutate && this) || this.copy();
        if (shift < 0 || shift > m.JSNUMBER_MAX_INTEGER) {
            throw new TypeError('NAN');
        }
        if (!lval.buffer) {
            return lval;
        }
        m.shl(lval.buffer, shift);
        return lval.optimize();
    };
    UInt256.prototype.shr = function (shift, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var lval = (mutate && this) || this.copy();
        if (shift < 0 || shift > m.JSNUMBER_MAX_INTEGER) {
            throw new TypeError('NAN');
        }
        if (!lval.buffer) {
            return lval;
        }
        m.shr(lval.buffer, shift);
        return lval.optimize();
    };
    UInt256.prototype.eq = function (rval) {
        if (typeof rval === 'number') {
            if (rval < 0 || rval > m.JSNUMBER_MAX_INTEGER) {
                throw new TypeError('NAN');
            }
            if (!this.buffer) {
                return rval === 0;
            }
            return m.eq(this.buffer, rval);
        }
        if (!this.buffer) {
            return !rval.buffer || m.eq(rval.buffer, 0);
        }
        return m.eq(this.buffer, rval.buffer || 0);
    };
    UInt256.prototype.neq = function (rval) {
        return !this.eq(rval);
    };
    UInt256.prototype.cmp = function (rval) {
        if (typeof rval === 'number') {
            if (rval < 0 || rval > m.JSNUMBER_MAX_INTEGER) {
                throw new TypeError('NAN');
            }
            if (!this.buffer) {
                return (rval > 0 && -1) || (rval < 0 && 1) || 0;
            }
            return m.cmp(this.buffer, rval);
        }
        if (!this.buffer) {
            if (!rval.buffer) {
                return 0;
            }
            return m.cmp(rval.buffer, 0) * -1;
        }
        return m.cmp(this.buffer, rval.buffer || 0);
    };
    UInt256.prototype.lte = function (rval) {
        return this.cmp(rval) <= 0;
    };
    UInt256.prototype.lt = function (rval) {
        return this.cmp(rval) < 0;
    };
    UInt256.prototype.gte = function (rval) {
        return this.cmp(rval) >= 0;
    };
    UInt256.prototype.gt = function (rval) {
        return this.cmp(rval) > 0;
    };
    UInt256.prototype.copy = function () {
        if (!this.buffer) {
            return new UInt256();
        }
        return new UInt256(this.buffer.slice(0));
    };
    UInt256.prototype.valueOf = function () {
        if (!this.buffer) {
            return 0;
        }
        return m.toNumber(this.buffer);
    };
    UInt256.prototype.toString = function (radix) {
        if (radix === void 0) { radix = 10; }
        if (!this.buffer) {
            return '0';
        }
        if (radix === 16) {
            return m.toHex(this.buffer);
        }
        if (radix > m.RADIX_MAX || radix < m.RADIX_MIN) {
            radix = 10;
        }
        if (m.cmp(this.buffer, m.JSNUMBER_MAX_INTEGER) <= 0) {
            return this.valueOf().toString(radix);
        }
        var out = '';
        var divmod = [];
        divmod[0] = this;
        divmod[1] = new UInt256(0);
        do {
            divmod = divmod[0].divmod(radix);
            out = m.ALPHABET.charAt(divmod[1].valueOf() & m.BYTE_MASK) + out;
        } while (divmod[0].buffer);
        return out;
    };
    UInt256.prototype.toJSON = function () {
        return this.toString();
    };
    UInt256.prototype.toByteArray = function () {
        if (!this.buffer) {
            return new Uint8Array(new ArrayBuffer(m.BYTES));
        }
        return new Uint8Array(this.buffer.slice(0));
    };
    UInt256.prototype.testBit = function (n) {
        if (!this.buffer) {
            return false;
        }
        var buffer = this.buffer.slice(0);
        m.shr(buffer, n);
        m.and(buffer, 1);
        return m.eq(buffer, 1);
    };
    UInt256.prototype.setBit = function (n, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var lval = (mutate && this) || this.copy();
        lval.buffer = lval.buffer || new ArrayBuffer(m.BYTES);
        var nbuffer = new ArrayBuffer(m.BYTES);
        m.add(nbuffer, 1);
        m.shl(nbuffer, n);
        m.or(lval.buffer, nbuffer);
        return lval;
    };
    UInt256.prototype.flipBit = function (n, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var lval = (mutate && this) || this.copy();
        lval.buffer = lval.buffer || new ArrayBuffer(m.BYTES);
        var nbuffer = new ArrayBuffer(m.BYTES);
        m.add(nbuffer, 1);
        m.shl(nbuffer, n);
        m.xor(lval.buffer, nbuffer);
        return lval.optimize();
    };
    UInt256.prototype.clearBit = function (n, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var lval = (mutate && this) || this.copy();
        if (!lval.buffer) {
            return lval;
        }
        var nbuffer = new ArrayBuffer(m.BYTES);
        m.add(nbuffer, 1);
        m.shl(nbuffer, n);
        m.not(nbuffer);
        m.and(lval.buffer, nbuffer);
        return lval.optimize();
    };
    UInt256.prototype.bitCount = function () {
        if (!this.buffer) {
            return 0;
        }
        return m.pop(this.buffer);
    };
    UInt256.prototype.negate = function (mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var lval = (mutate && this) || this.copy();
        lval.buffer = lval.buffer || new ArrayBuffer(m.BYTES);
        m.comp(lval.buffer);
        return lval.optimize();
    };
    UInt256.prototype.min = function (rval, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var lval = (mutate && this) || this.copy();
        rval = new UInt256(rval);
        if (rval.lt(lval)) {
            lval.buffer = rval.buffer;
        }
        return lval;
    };
    UInt256.prototype.max = function (rval, mutate) {
        if (mutate === void 0) { mutate = this.isMutable; }
        var lval = (mutate && this) || this.copy();
        rval = new UInt256(rval);
        if (rval.gt(lval)) {
            lval.buffer = rval.buffer;
        }
        return lval;
    };
    UInt256.prototype.optimize = function () {
        if (!this.buffer) {
            return this;
        }
        if (m.eq(this.buffer, 0)) {
            delete this.buffer;
        }
        return this;
    };
    return UInt256;
}());
exports.UInt256 = UInt256;
function U256(param, param2) {
    if (typeof param === 'string') {
        return new UInt256(param, param2);
    }
    return new UInt256(param);
}
exports.U256 = U256;
/* tslint:enable:function-name */
