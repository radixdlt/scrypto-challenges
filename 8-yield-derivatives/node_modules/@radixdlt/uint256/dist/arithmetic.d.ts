export declare const ALPHABET = "0123456789abcdef";
export declare const BYTES = 32;
export declare const BYTE_MASK = 255;
export declare const WORDS: number;
export declare const WORD_LENGTH = 16;
export declare const WORD_MASK = 65535;
export declare const DWORDS: number;
export declare const DWORD_LENGTH = 32;
export declare const DWORD_MASK = 4294967295;
export declare const JSNUMBER_MAX_INTEGER = 9007199254740991;
export declare const RADIX_MIN = 2;
export declare const RADIX_MAX = 16;
export declare function fromHex(buffer: ArrayBuffer, str: string, prefixed: boolean): number;
export declare function toHex(buffer: ArrayBuffer): string;
export declare function toNumber(buffer: ArrayBuffer): number;
export declare function numberToBuffer(num: number): ArrayBuffer;
export declare function add(lval: ArrayBuffer, rval: ArrayBuffer | number): void;
export declare function not(lval: ArrayBuffer): void;
export declare function and(lval: ArrayBuffer, rval: ArrayBuffer | number): void;
export declare function andNot(lval: ArrayBuffer, rval: ArrayBuffer | number): void;
export declare function or(lval: ArrayBuffer, rval: ArrayBuffer | number): void;
export declare function xor(lval: ArrayBuffer, rval: ArrayBuffer | number): void;
export declare function comp(lval: ArrayBuffer): void;
export declare function sub(lval: ArrayBuffer, rval: ArrayBuffer | number): void;
export declare function eq(lval: ArrayBuffer, rval: ArrayBuffer | number): boolean;
export declare function cmp(lval: ArrayBuffer, rval: ArrayBuffer | number): number;
export declare function shl(lval: ArrayBuffer, shift: number): void;
export declare function shr(lval: ArrayBuffer, shift: number): void;
export declare function mul(lval: ArrayBuffer, rval: ArrayBuffer | number): void;
export declare function bits(lval: ArrayBuffer): number;
export declare function divmod(lval: ArrayBuffer, rval?: ArrayBuffer): number;
export declare function pop(lval: ArrayBuffer): number;
