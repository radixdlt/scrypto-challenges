export declare class UInt256 {
    buffer?: ArrayBuffer;
    compareTo: (rval: number | UInt256) => number;
    subtract: (rval: number | UInt256, mutate?: boolean) => UInt256;
    divideAndRemainder: (rval: number | UInt256) => UInt256[];
    divide: (rval: number | UInt256, mutate?: boolean) => UInt256;
    multiply: (rval: number | UInt256, mutate?: boolean) => UInt256;
    remainder: (rval: number | UInt256, mutate?: boolean) => UInt256;
    shiftRight: (shift: number, mutate?: boolean) => UInt256;
    shiftLeft: (shift: number, mutate?: boolean) => UInt256;
    private isMutable;
    constructor(numberOrBufferCopy?: number | UInt256 | ArrayBuffer);
    constructor(str?: string, radix?: number);
    static valueOf(val: number): UInt256;
    mutable(mutable?: boolean): UInt256;
    pow(rval: number, mutate?: boolean): UInt256;
    add(rval: UInt256 | number, mutate?: boolean): UInt256;
    safeAdd(rval: UInt256 | number, mutate?: boolean): UInt256;
    gcd(rval: UInt256, mutate?: boolean): UInt256;
    sub(rval: UInt256 | number, mutate?: boolean): UInt256;
    safeSub(rval: UInt256 | number, mutate?: boolean): UInt256;
    divmod(rval: UInt256 | number): UInt256[];
    div(rval: UInt256 | number, mutate?: boolean): UInt256;
    mod(rval: UInt256 | number, mutate?: boolean): UInt256;
    mul(rval: UInt256 | number, mutate?: boolean): UInt256;
    safeMul(rval: UInt256 | number, mutate?: boolean): UInt256;
    and(rval: UInt256 | number, mutate?: boolean): UInt256;
    andNot(rval: UInt256 | number, mutate?: boolean): UInt256;
    or(rval: UInt256 | number, mutate?: boolean): UInt256;
    xor(rval: UInt256 | number, mutate?: boolean): UInt256;
    not(mutate?: boolean): UInt256;
    shl(shift: number, mutate?: boolean): UInt256;
    shr(shift: number, mutate?: boolean): UInt256;
    eq(rval: UInt256 | number): boolean;
    neq(rval: UInt256 | number): boolean;
    cmp(rval: UInt256 | number): number;
    lte(rval: UInt256 | number): boolean;
    lt(rval: UInt256 | number): boolean;
    gte(rval: UInt256 | number): boolean;
    gt(rval: UInt256 | number): boolean;
    copy(): UInt256;
    valueOf(): number;
    toString(radix?: number): string;
    toJSON(): string;
    toByteArray(): Uint8Array;
    testBit(n: number): boolean;
    setBit(n: number, mutate?: boolean): UInt256;
    flipBit(n: number, mutate?: boolean): UInt256;
    clearBit(n: number, mutate?: boolean): UInt256;
    bitCount(): number;
    negate(mutate?: boolean): UInt256;
    min(rval: UInt256 | number, mutate?: boolean): UInt256;
    max(rval: UInt256 | number, mutate?: boolean): UInt256;
    private optimize;
}
export declare function U256(num: number): UInt256;
export declare function U256(str: string, radix?: number): UInt256;
