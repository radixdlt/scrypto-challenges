/// <reference types="node" />
import { Result } from 'neverthrow';
import { Bech32T } from './_types';
export declare enum Encoding {
    BECH32 = "bech32",
    BECH32m = "bech32m"
}
export declare const defaultEncoding = Encoding.BECH32;
export declare type Bech32EncodeInput = Readonly<{
    hrp: string;
    data: Buffer;
    encoding?: Encoding;
    maxLength?: number;
}>;
export declare type Bech32DecodeInput = Readonly<{
    bechString: string;
    encoding?: Encoding;
    maxLength?: number;
}>;
export declare const Bech32: {
    convertDataToBech32: (data: Buffer) => Result<Buffer, Error>;
    convertDataFromBech32: (bech32Data: Buffer) => Result<Buffer, Error>;
    decode: (input: Bech32DecodeInput) => Result<Bech32T, Error>;
    encode: (input: Bech32EncodeInput) => Result<Bech32T, Error>;
};
//# sourceMappingURL=bech32.d.ts.map