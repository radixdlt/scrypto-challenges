import { SigningKeychainT } from './_types';
import { KeystoreT, MnemomicT } from '@radixdlt/crypto';
import { ResultAsync } from 'neverthrow';
export declare const isSwitchToIndex: (something: unknown) => something is Readonly<{
    toIndex: number;
}>;
export declare const SigningKeychain: {
    create: (input: Readonly<{
        mnemonic: MnemomicT;
        startWithInitialSigningKey?: boolean;
    }>) => SigningKeychainT;
    fromKeystore: (input: Readonly<{
        keystore: KeystoreT;
        password: string;
        startWithInitialSigningKey?: boolean;
    }>) => ResultAsync<SigningKeychainT, Error>;
    byLoadingAndDecryptingKeystore: (input: Readonly<{
        password: string;
        load: () => Promise<KeystoreT>;
        startWithInitialSigningKey?: boolean;
    }>) => ResultAsync<SigningKeychainT, Error>;
    byEncryptingMnemonicAndSavingKeystore: (input: Readonly<{
        mnemonic: MnemomicT;
        password: string;
        save: (keystoreToSave: KeystoreT) => Promise<void>;
        startWithInitialSigningKey?: boolean | undefined;
    }>) => ResultAsync<SigningKeychainT, Error>;
};
//# sourceMappingURL=signingKeychain.d.ts.map