import { PrivateKeyT, HDPathRadixT, HDMasterSeedT, HDNodeT } from '@radixdlt/crypto';
import { SigningKeyT, PrivateKeyToSigningKeyInput } from './_types';
import { HardwareSigningKeyT } from '@radixdlt/hardware-wallet';
export declare const isSigningKey: (something: unknown) => something is SigningKeyT;
export declare const SigningKey: {
    __unsafeFromPrivateKeyAtHDPath: (input: Readonly<{
        privateKey: PrivateKeyT;
        hdPath: HDPathRadixT;
    }>) => SigningKeyT;
    fromPrivateKey: (input: PrivateKeyToSigningKeyInput) => SigningKeyT;
    byDerivingNodeAtPath: (input: Readonly<{
        hdPath: HDPathRadixT;
        deriveNodeAtPath: () => HDNodeT;
    }>) => SigningKeyT;
    fromHDPathWithHWSigningKey: (input: Readonly<{
        hdPath: HDPathRadixT;
        hardwareSigningKey: HardwareSigningKeyT;
    }>) => SigningKeyT;
    fromHDPathWithHDMasterNode: (input: Readonly<{
        hdPath: HDPathRadixT;
        hdMasterNode: HDNodeT;
    }>) => SigningKeyT;
    fromHDPathWithHDMasterSeed: (input: Readonly<{
        hdPath: HDPathRadixT;
        hdMasterSeed: HDMasterSeedT;
    }>) => SigningKeyT;
};
//# sourceMappingURL=signingKey.d.ts.map