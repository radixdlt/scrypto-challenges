/// <reference types="node" />
import { Result } from 'neverthrow';
import { PublicKeyT } from '@radixdlt/crypto';
import { ValidatorAddressT } from './_types';
import { Network } from '@radixdlt/primitives';
export declare const isValidatorAddress: (something: unknown) => something is ValidatorAddressT;
export declare type ValidatorAddressUnsafeInput = string | Buffer;
export declare type ValidatorAddressOrUnsafeInput = ValidatorAddressUnsafeInput | ValidatorAddressT;
export declare const isValidatorAddressOrUnsafeInput: (something: unknown) => something is ValidatorAddressOrUnsafeInput;
export declare const ValidatorAddress: {
    fromUnsafe: (input: ValidatorAddressOrUnsafeInput) => Result<ValidatorAddressT, Error>;
    fromPublicKeyAndNetwork: (input: Readonly<{
        publicKey: PublicKeyT;
        network: Network;
    }>) => ValidatorAddressT;
};
//# sourceMappingURL=validatorAddress.d.ts.map