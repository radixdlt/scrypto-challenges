/// <reference types="node" />
import { Result } from 'neverthrow';
import { PublicKeyT } from '@radixdlt/crypto';
import { AccountAddressT } from './_types';
import { Network } from '@radixdlt/primitives';
export declare const isAccountAddress: (something: unknown) => something is AccountAddressT;
export declare type AccountAddressUnsafeInput = string | Buffer;
export declare type AddressOrUnsafeInput = AccountAddressUnsafeInput | AccountAddressT;
export declare const isAccountAddressOrUnsafeInput: (something: unknown) => something is AddressOrUnsafeInput;
export declare const AccountAddress: {
    isAccountAddress: (something: unknown) => something is AccountAddressT;
    fromUnsafe: (input: AddressOrUnsafeInput) => Result<AccountAddressT, Error>;
    fromPublicKeyAndNetwork: (input: Readonly<{
        publicKey: PublicKeyT;
        network: Network;
    }>) => AccountAddressT;
};
//# sourceMappingURL=accountAddress.d.ts.map