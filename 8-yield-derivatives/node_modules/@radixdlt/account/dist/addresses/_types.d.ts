/// <reference types="node" />
import { PublicKeyT } from '@radixdlt/crypto';
import { Network } from '@radixdlt/primitives';
export declare type ResourceIdentifierT = Readonly<{
    hash: Buffer;
    __witness: 'isRRI';
    network: Network;
    name: string;
    toString: () => string;
    equals: (other: ResourceIdentifierT) => boolean;
}>;
export declare enum AddressTypeT {
    VALIDATOR = "VALIDATOR_ADDRESS",
    ACCOUNT = "ACCOUNT_ADDRESS"
}
export declare type AbstractAddressT = Readonly<{
    addressType: AddressTypeT;
    network: Network;
    publicKey: PublicKeyT;
    toString: () => string;
    equals: (other: AbstractAddressT) => boolean;
}>;
export declare type AccountAddressT = AbstractAddressT & Readonly<{
    addressType: AddressTypeT.ACCOUNT;
    equals: (other: AccountAddressT) => boolean;
}>;
export declare type ValidatorAddressT = AbstractAddressT & Readonly<{
    addressType: AddressTypeT.VALIDATOR;
    equals: (other: ValidatorAddressT) => boolean;
}>;
//# sourceMappingURL=_types.d.ts.map