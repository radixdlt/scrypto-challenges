/// <reference types="node" />
import { Result } from 'neverthrow';
import { PublicKeyT } from '@radixdlt/crypto';
import { Network } from '@radixdlt/primitives';
import { ResourceIdentifierT } from './_types';
export declare const isResourceIdentifier: (something: ResourceIdentifierT | unknown) => something is Readonly<{
    hash: Buffer;
    __witness: "isRRI";
    network: Network;
    name: string;
    toString: () => string;
    equals: (other: Readonly<any>) => boolean;
}>;
export declare type ResourceIdentifierUnsafeInput = string | Buffer;
export declare const isResourceIdentifierUnsafeInput: (something: unknown) => something is ResourceIdentifierUnsafeInput;
export declare type ResourceIdentifierOrUnsafeInput = ResourceIdentifierT | ResourceIdentifierUnsafeInput;
export declare const isResourceIdentifierOrUnsafeInput: (something: unknown) => something is ResourceIdentifierOrUnsafeInput;
export declare const ResourceIdentifier: {
    systemRRIForNetwork: (input: Readonly<{
        name: string;
        network: Network;
    }>) => Result<ResourceIdentifierT, Error>;
    fromPublicKeyAndNameAndNetwork: (input: Readonly<{
        publicKey: PublicKeyT;
        name: string;
        network: Network;
    }>) => Result<ResourceIdentifierT, Error>;
    fromUnsafe: (input: ResourceIdentifierOrUnsafeInput) => Result<ResourceIdentifierT, Error>;
};
//# sourceMappingURL=resourceIdentifier.d.ts.map