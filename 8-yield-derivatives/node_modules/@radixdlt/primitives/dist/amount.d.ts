import { UInt256InputUnsafe } from './uint256-extensions';
import { Result } from 'neverthrow';
import { AmountT } from './_types';
import { UInt256 } from '@radixdlt/uint256';
export declare type AmountUnsafeInput = UInt256InputUnsafe;
export declare const isAmountUnsafeInput: (something: unknown) => something is UInt256InputUnsafe;
export declare type AmountOrUnsafeInput = AmountT | AmountUnsafeInput;
export declare const isAmount: (something: unknown) => something is UInt256;
export declare const isAmountOrUnsafeInput: (something: unknown) => something is AmountOrUnsafeInput;
export declare const Amount: {
    fromUnsafe: (input: AmountOrUnsafeInput) => Result<AmountT, Error>;
    isAmountMultipleOf: (input: Readonly<{
        amount: AmountT;
        granularity: AmountT;
    }>) => boolean;
};
//# sourceMappingURL=amount.d.ts.map