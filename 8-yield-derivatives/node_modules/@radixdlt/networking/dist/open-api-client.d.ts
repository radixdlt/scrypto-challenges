import 'isomorphic-fetch';
import { Client } from './_types';
import { ResultAsync } from 'neverthrow';
import { TransactionBuildResponse } from './open-api/api';
import { AccountApiFactory, ValidatorApiFactory, TransactionApiFactory, TokenApiFactory, StatusApiFactory } from '.';
import { AxiosResponse } from 'axios';
export declare type ReturnOfAPICall<Name extends MethodName> = Name extends 'transactionBuildPost' ? AxiosResponse<TransactionBuildResponse> : Awaited<ReturnType<ClientInterface[Name]>>;
export declare type InputOfAPICall<Name extends MethodName> = Parameters<ClientInterface[Name]>[0];
export declare type ClientInterface = ReturnType<typeof AccountApiFactory> & ReturnType<typeof ValidatorApiFactory> & ReturnType<typeof TransactionApiFactory> & ReturnType<typeof TokenApiFactory> & ReturnType<typeof StatusApiFactory>;
export declare type MethodName = keyof ClientInterface;
export declare type Response = ReturnOfAPICall<MethodName>;
declare const call: (client: ClientInterface) => <M extends "accountBalancesPost" | "accountDerivePost" | "accountStakesPost" | "accountTransactionsPost" | "accountUnstakesPost" | "gatewayPost" | "tokenDerivePost" | "tokenNativePost" | "tokenPost" | "transactionBuildPost" | "transactionFinalizePost" | "transactionRecentPost" | "transactionRulesPost" | "transactionStatusPost" | "transactionSubmitPost" | "validatorDerivePost" | "validatorPost" | "validatorStakesPost" | "validatorsPost">(method: M, params: InputOfAPICall<M>, headers?: Record<string, string> | undefined) => ResultAsync<ReturnOfAPICall<M>, Error>;
export declare type OpenApiClientCall = ReturnType<typeof call>;
export declare const openApiClient: Client<'open-api'>;
export {};
//# sourceMappingURL=open-api-client.d.ts.map