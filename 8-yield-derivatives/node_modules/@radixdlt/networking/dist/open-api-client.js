"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.openApiClient = void 0;
require("isomorphic-fetch");
const util_1 = require("../../util");
const uuid_1 = require("uuid");
const neverthrow_1 = require("neverthrow");
const ramda_1 = require("ramda");
const _1 = require(".");
const open_api_1 = require("./open-api");
const defaultHeaders = [
    'X-Radixdlt-Method',
    'X-Radixdlt-Correlation-Id',
    'X-Radixdlt-Target-Gw-Api',
];
const correlationID = (0, uuid_1.v4)();
const handleError = (error) => {
    var _a, _b;
    util_1.log.debug(error);
    if (error.isAxiosError && ((_a = error.response) === null || _a === void 0 ? void 0 : _a.data)) {
        return (0, neverthrow_1.err)(Object.assign({ code: (_b = error.response.data.code) !== null && _b !== void 0 ? _b : error.response.status }, (typeof error.response.data === 'object'
            ? error.response.data
            : { message: error.response.data })));
    }
    else {
        return (0, neverthrow_1.err)({ message: error.message });
    }
};
const call = (client) => (method, params, headers) => 
// @ts-ignore
(0, ramda_1.pipe)(() => util_1.log.info(`Sending api request with method ${method}. ${JSON.stringify(params, null, 2)}`), () => neverthrow_1.ResultAsync.fromPromise(
// @ts-ignore
client[method](params, {
    headers: Object.assign({ [defaultHeaders[0]]: method, [defaultHeaders[1]]: correlationID, [defaultHeaders[2]]: _1.apiVersion }, headers),
}).then(response => {
    util_1.log.info(`Response from api with method ${method}`, JSON.stringify(response.data, null, 2));
    return response;
}), 
// @ts-ignore
handleError))();
const openApiClient = (url) => {
    const configuration = new open_api_1.Configuration({
        basePath: url.toString().slice(0, -1),
    });
    const api = [
        _1.AccountApiFactory,
        _1.ValidatorApiFactory,
        _1.TransactionApiFactory,
        _1.TokenApiFactory,
        _1.StatusApiFactory,
    ].reduce((acc, factory) => (Object.assign(Object.assign({}, acc), factory(configuration))), {});
    return {
        type: 'open-api',
        call: call(api),
    };
};
exports.openApiClient = openApiClient;
//# sourceMappingURL=open-api-client.js.map