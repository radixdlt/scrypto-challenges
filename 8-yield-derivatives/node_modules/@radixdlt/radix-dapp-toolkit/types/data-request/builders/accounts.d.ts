import { z } from 'zod';
export type AccountsRequestBuilder = {
    atLeast: (n: number) => AccountsRequestBuilder;
    exactly: (n: number) => AccountsRequestBuilder;
    withProof: (value?: boolean) => AccountsRequestBuilder;
    reset: (value?: boolean) => AccountsRequestBuilder;
};
export type OneTimeAccountsRequestBuilder = {
    atLeast: (n: number) => OneTimeAccountsRequestBuilder;
    exactly: (n: number) => OneTimeAccountsRequestBuilder;
    withProof: (value?: boolean) => OneTimeAccountsRequestBuilder;
};
export type AccountsDataRequest = z.infer<typeof AccountsDataRequestSchema>;
export declare const AccountsDataRequestSchema: z.ZodObject<{
    numberOfAccounts: z.ZodObject<{
        quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
        quantity: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    }, {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    }>;
    withProof: z.ZodOptional<z.ZodBoolean>;
    reset: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    numberOfAccounts: {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    };
    withProof?: boolean | undefined;
    reset?: boolean | undefined;
}, {
    numberOfAccounts: {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    };
    withProof?: boolean | undefined;
    reset?: boolean | undefined;
}>;
export declare const accounts: () => AccountsRequestBuilder;
