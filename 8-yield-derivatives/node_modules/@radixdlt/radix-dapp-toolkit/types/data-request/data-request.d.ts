import { DataRequestBuilderItem } from './builders';
import { StateClient } from '../state/state';
import { RequestItemClient } from '../request-items/request-item-client';
import { WalletClient } from '../wallet/wallet-client';
import { DataRequestStateClient } from './data-request-state';
import { WalletData } from '../state/types';
import { AwaitedWalletDataRequestResult, RequestInterceptorFactoryOutput, WalletDataRequestResult } from '../_types';
export type DataRequestClient = ReturnType<typeof DataRequestClient>;
export declare const DataRequestClient: ({ stateClient, requestItemClient, walletClient, useCache, dataRequestStateClient, requestInterceptor, }: {
    stateClient: StateClient;
    requestItemClient: RequestItemClient;
    walletClient: WalletClient;
    dataRequestStateClient: DataRequestStateClient;
    useCache: boolean;
    requestInterceptor: RequestInterceptorFactoryOutput;
}) => {
    provideChallengeGenerator: (fn: () => Promise<string>) => void;
    provideDataRequestControl: (fn: (walletData: WalletData) => Promise<any>) => void;
    provideConnectResponseCallback: (fn: (result: AwaitedWalletDataRequestResult) => any) => void;
    sendOneTimeRequest: (...items: DataRequestBuilderItem[]) => WalletDataRequestResult;
    setState: (...items: DataRequestBuilderItem[]) => {
        sendRequest: () => WalletDataRequestResult;
    };
    sendRequest: ({ isConnect, oneTime, }: {
        isConnect: boolean;
        oneTime: boolean;
    }) => WalletDataRequestResult;
    updateSharedData: () => WalletDataRequestResult;
};
