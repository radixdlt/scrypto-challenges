import { WalletAuthorizedRequestItems, WalletUnauthorizedRequestItems } from '@radixdlt/wallet-sdk';
import { Result } from 'neverthrow';
import { z } from 'zod';
export type TransformRdtDataRequestToWalletRequestInput = z.infer<typeof TransformRdtDataRequestToWalletRequestInput>;
export declare const TransformRdtDataRequestToWalletRequestInput: z.ZodObject<{
    accounts: z.ZodOptional<z.ZodObject<{
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
        reset: z.ZodBoolean;
        oneTime: z.ZodBoolean;
        challenge: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        reset: boolean;
        oneTime: boolean;
        challenge?: string | undefined;
    }, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        reset: boolean;
        oneTime: boolean;
        challenge?: string | undefined;
    }>>;
    personaData: z.ZodOptional<z.ZodObject<{
        fullName: z.ZodOptional<z.ZodBoolean>;
        phoneNumbers: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
        emailAddresses: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
        reset: z.ZodBoolean;
        oneTime: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        reset: boolean;
        fullName?: boolean | undefined;
        phoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        emailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        oneTime?: boolean | undefined;
    }, {
        reset: boolean;
        fullName?: boolean | undefined;
        phoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        emailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        oneTime?: boolean | undefined;
    }>>;
    persona: z.ZodOptional<z.ZodObject<{
        identityAddress: z.ZodOptional<z.ZodString>;
        label: z.ZodOptional<z.ZodString>;
        challenge: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        identityAddress?: string | undefined;
        label?: string | undefined;
        challenge?: string | undefined;
    }, {
        identityAddress?: string | undefined;
        label?: string | undefined;
        challenge?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    accounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        reset: boolean;
        oneTime: boolean;
        challenge?: string | undefined;
    } | undefined;
    personaData?: {
        reset: boolean;
        fullName?: boolean | undefined;
        phoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        emailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        oneTime?: boolean | undefined;
    } | undefined;
    persona?: {
        identityAddress?: string | undefined;
        label?: string | undefined;
        challenge?: string | undefined;
    } | undefined;
}, {
    accounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        reset: boolean;
        oneTime: boolean;
        challenge?: string | undefined;
    } | undefined;
    personaData?: {
        reset: boolean;
        fullName?: boolean | undefined;
        phoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        emailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        oneTime?: boolean | undefined;
    } | undefined;
    persona?: {
        identityAddress?: string | undefined;
        label?: string | undefined;
        challenge?: string | undefined;
    } | undefined;
}>;
export declare const transformRdtDataRequestToWalletRequest: (isConnect: boolean, input: TransformRdtDataRequestToWalletRequestInput) => Result<WalletUnauthorizedRequestItems | WalletAuthorizedRequestItems, never>;
