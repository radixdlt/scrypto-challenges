import { z } from 'zod';
export declare const proofType: {
    readonly persona: "persona";
    readonly account: "account";
};
export type SignedChallengePersona = z.infer<typeof SignedChallengePersona>;
export declare const SignedChallengePersona: z.ZodObject<{
    challenge: z.ZodString;
    proof: z.ZodObject<{
        publicKey: z.ZodString;
        signature: z.ZodString;
        curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
    }, "strip", z.ZodTypeAny, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }>;
    address: z.ZodString;
    type: z.ZodLiteral<"persona">;
}, "strip", z.ZodTypeAny, {
    address: string;
    type: "persona";
    challenge: string;
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
}, {
    address: string;
    type: "persona";
    challenge: string;
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
}>;
export type SignedChallengeAccount = z.infer<typeof SignedChallengeAccount>;
export declare const SignedChallengeAccount: z.ZodObject<{
    challenge: z.ZodString;
    proof: z.ZodObject<{
        publicKey: z.ZodString;
        signature: z.ZodString;
        curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
    }, "strip", z.ZodTypeAny, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }>;
    address: z.ZodString;
    type: z.ZodLiteral<"account">;
}, "strip", z.ZodTypeAny, {
    address: string;
    type: "account";
    challenge: string;
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
}, {
    address: string;
    type: "account";
    challenge: string;
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
}>;
export type SignedChallenge = z.infer<typeof SignedChallenge>;
export declare const SignedChallenge: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    challenge: z.ZodString;
    proof: z.ZodObject<{
        publicKey: z.ZodString;
        signature: z.ZodString;
        curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
    }, "strip", z.ZodTypeAny, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }>;
    address: z.ZodString;
    type: z.ZodLiteral<"persona">;
}, "strip", z.ZodTypeAny, {
    address: string;
    type: "persona";
    challenge: string;
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
}, {
    address: string;
    type: "persona";
    challenge: string;
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
}>, z.ZodObject<{
    challenge: z.ZodString;
    proof: z.ZodObject<{
        publicKey: z.ZodString;
        signature: z.ZodString;
        curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
    }, "strip", z.ZodTypeAny, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }>;
    address: z.ZodString;
    type: z.ZodLiteral<"account">;
}, "strip", z.ZodTypeAny, {
    address: string;
    type: "account";
    challenge: string;
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
}, {
    address: string;
    type: "account";
    challenge: string;
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
}>]>;
export declare const WalletDataPersonaDataFullName: z.ZodObject<{
    entry: z.ZodLiteral<"fullName">;
    fields: z.ZodObject<{
        variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
        familyName: z.ZodString;
        nickname: z.ZodString;
        givenNames: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        variant: "western" | "eastern";
        familyName: string;
        nickname: string;
        givenNames: string;
    }, {
        variant: "western" | "eastern";
        familyName: string;
        nickname: string;
        givenNames: string;
    }>;
}, "strip", z.ZodTypeAny, {
    entry: "fullName";
    fields: {
        variant: "western" | "eastern";
        familyName: string;
        nickname: string;
        givenNames: string;
    };
}, {
    entry: "fullName";
    fields: {
        variant: "western" | "eastern";
        familyName: string;
        nickname: string;
        givenNames: string;
    };
}>;
export declare const WalletDataPersonaDataEmailAddresses: z.ZodObject<{
    entry: z.ZodLiteral<"emailAddresses">;
    fields: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    entry: "emailAddresses";
    fields: string[];
}, {
    entry: "emailAddresses";
    fields: string[];
}>;
export declare const WalletDataPersonaDataPhoneNumbersAddresses: z.ZodObject<{
    entry: z.ZodLiteral<"phoneNumbers">;
    fields: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    entry: "phoneNumbers";
    fields: string[];
}, {
    entry: "phoneNumbers";
    fields: string[];
}>;
export type WalletDataPersonaData = z.infer<typeof WalletDataPersonaData>;
export declare const WalletDataPersonaData: z.ZodDiscriminatedUnion<"entry", [z.ZodObject<{
    entry: z.ZodLiteral<"fullName">;
    fields: z.ZodObject<{
        variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
        familyName: z.ZodString;
        nickname: z.ZodString;
        givenNames: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        variant: "western" | "eastern";
        familyName: string;
        nickname: string;
        givenNames: string;
    }, {
        variant: "western" | "eastern";
        familyName: string;
        nickname: string;
        givenNames: string;
    }>;
}, "strip", z.ZodTypeAny, {
    entry: "fullName";
    fields: {
        variant: "western" | "eastern";
        familyName: string;
        nickname: string;
        givenNames: string;
    };
}, {
    entry: "fullName";
    fields: {
        variant: "western" | "eastern";
        familyName: string;
        nickname: string;
        givenNames: string;
    };
}>, z.ZodObject<{
    entry: z.ZodLiteral<"emailAddresses">;
    fields: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    entry: "emailAddresses";
    fields: string[];
}, {
    entry: "emailAddresses";
    fields: string[];
}>, z.ZodObject<{
    entry: z.ZodLiteral<"phoneNumbers">;
    fields: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    entry: "phoneNumbers";
    fields: string[];
}, {
    entry: "phoneNumbers";
    fields: string[];
}>]>;
export type WalletData = z.infer<typeof WalletData>;
export declare const WalletData: z.ZodObject<{
    accounts: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
        label: z.ZodString;
        appearanceId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        address: string;
        label: string;
        appearanceId: number;
    }, {
        address: string;
        label: string;
        appearanceId: number;
    }>, "many">;
    personaData: z.ZodArray<z.ZodDiscriminatedUnion<"entry", [z.ZodObject<{
        entry: z.ZodLiteral<"fullName">;
        fields: z.ZodObject<{
            variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
            familyName: z.ZodString;
            nickname: z.ZodString;
            givenNames: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        entry: "fullName";
        fields: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        };
    }, {
        entry: "fullName";
        fields: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        };
    }>, z.ZodObject<{
        entry: z.ZodLiteral<"emailAddresses">;
        fields: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        entry: "emailAddresses";
        fields: string[];
    }, {
        entry: "emailAddresses";
        fields: string[];
    }>, z.ZodObject<{
        entry: z.ZodLiteral<"phoneNumbers">;
        fields: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        entry: "phoneNumbers";
        fields: string[];
    }, {
        entry: "phoneNumbers";
        fields: string[];
    }>]>, "many">;
    persona: z.ZodOptional<z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>>;
    proofs: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        challenge: z.ZodString;
        proof: z.ZodObject<{
            publicKey: z.ZodString;
            signature: z.ZodString;
            curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
        }, "strip", z.ZodTypeAny, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }>;
        address: z.ZodString;
        type: z.ZodLiteral<"persona">;
    }, "strip", z.ZodTypeAny, {
        address: string;
        type: "persona";
        challenge: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    }, {
        address: string;
        type: "persona";
        challenge: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    }>, z.ZodObject<{
        challenge: z.ZodString;
        proof: z.ZodObject<{
            publicKey: z.ZodString;
            signature: z.ZodString;
            curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
        }, "strip", z.ZodTypeAny, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }>;
        address: z.ZodString;
        type: z.ZodLiteral<"account">;
    }, "strip", z.ZodTypeAny, {
        address: string;
        type: "account";
        challenge: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    }, {
        address: string;
        type: "account";
        challenge: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
    personaData: ({
        entry: "fullName";
        fields: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        };
    } | {
        entry: "emailAddresses";
        fields: string[];
    } | {
        entry: "phoneNumbers";
        fields: string[];
    })[];
    proofs: ({
        address: string;
        type: "persona";
        challenge: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    } | {
        address: string;
        type: "account";
        challenge: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    })[];
    persona?: {
        label: string;
        identityAddress: string;
    } | undefined;
}, {
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
    personaData: ({
        entry: "fullName";
        fields: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        };
    } | {
        entry: "emailAddresses";
        fields: string[];
    } | {
        entry: "phoneNumbers";
        fields: string[];
    })[];
    proofs: ({
        address: string;
        type: "persona";
        challenge: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    } | {
        address: string;
        type: "account";
        challenge: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    })[];
    persona?: {
        label: string;
        identityAddress: string;
    } | undefined;
}>;
export type SharedData = z.infer<typeof SharedData>;
export declare const SharedData: z.ZodObject<{
    persona: z.ZodOptional<z.ZodObject<{
        proof: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        proof: boolean;
    }, {
        proof: boolean;
    }>>;
    ongoingAccounts: z.ZodOptional<z.ZodObject<{
        numberOfAccounts: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
        proof: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        proof: boolean;
        numberOfAccounts?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }, {
        proof: boolean;
        numberOfAccounts?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }>>;
    ongoingPersonaData: z.ZodOptional<z.ZodObject<{
        isRequestingName: z.ZodOptional<z.ZodBoolean>;
        numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
        numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    persona?: {
        proof: boolean;
    } | undefined;
    ongoingAccounts?: {
        proof: boolean;
        numberOfAccounts?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
    ongoingPersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
}, {
    persona?: {
        proof: boolean;
    } | undefined;
    ongoingAccounts?: {
        proof: boolean;
        numberOfAccounts?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
    ongoingPersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
        numberOfRequestedPhoneNumbers?: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        } | undefined;
    } | undefined;
}>;
export type RdtState = z.infer<typeof RdtState>;
export declare const RdtState: z.ZodObject<{
    loggedInTimestamp: z.ZodString;
    walletData: z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
        personaData: z.ZodArray<z.ZodDiscriminatedUnion<"entry", [z.ZodObject<{
            entry: z.ZodLiteral<"fullName">;
            fields: z.ZodObject<{
                variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
                familyName: z.ZodString;
                nickname: z.ZodString;
                givenNames: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            entry: "fullName";
            fields: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            };
        }, {
            entry: "fullName";
            fields: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            };
        }>, z.ZodObject<{
            entry: z.ZodLiteral<"emailAddresses">;
            fields: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            entry: "emailAddresses";
            fields: string[];
        }, {
            entry: "emailAddresses";
            fields: string[];
        }>, z.ZodObject<{
            entry: z.ZodLiteral<"phoneNumbers">;
            fields: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            entry: "phoneNumbers";
            fields: string[];
        }, {
            entry: "phoneNumbers";
            fields: string[];
        }>]>, "many">;
        persona: z.ZodOptional<z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>>;
        proofs: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            challenge: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
            address: z.ZodString;
            type: z.ZodLiteral<"persona">;
        }, "strip", z.ZodTypeAny, {
            address: string;
            type: "persona";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            address: string;
            type: "persona";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, z.ZodObject<{
            challenge: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
            address: z.ZodString;
            type: z.ZodLiteral<"account">;
        }, "strip", z.ZodTypeAny, {
            address: string;
            type: "account";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            address: string;
            type: "account";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>]>, "many">;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        personaData: ({
            entry: "fullName";
            fields: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            };
        } | {
            entry: "emailAddresses";
            fields: string[];
        } | {
            entry: "phoneNumbers";
            fields: string[];
        })[];
        proofs: ({
            address: string;
            type: "persona";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        } | {
            address: string;
            type: "account";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        })[];
        persona?: {
            label: string;
            identityAddress: string;
        } | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        personaData: ({
            entry: "fullName";
            fields: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            };
        } | {
            entry: "emailAddresses";
            fields: string[];
        } | {
            entry: "phoneNumbers";
            fields: string[];
        })[];
        proofs: ({
            address: string;
            type: "persona";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        } | {
            address: string;
            type: "account";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        })[];
        persona?: {
            label: string;
            identityAddress: string;
        } | undefined;
    }>;
    sharedData: z.ZodObject<{
        persona: z.ZodOptional<z.ZodObject<{
            proof: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            proof: boolean;
        }, {
            proof: boolean;
        }>>;
        ongoingAccounts: z.ZodOptional<z.ZodObject<{
            numberOfAccounts: z.ZodOptional<z.ZodObject<{
                quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
                quantity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }>>;
            proof: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            proof: boolean;
            numberOfAccounts?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        }, {
            proof: boolean;
            numberOfAccounts?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        }>>;
        ongoingPersonaData: z.ZodOptional<z.ZodObject<{
            isRequestingName: z.ZodOptional<z.ZodBoolean>;
            numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodObject<{
                quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
                quantity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }>>;
            numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodObject<{
                quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
                quantity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        }, {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        persona?: {
            proof: boolean;
        } | undefined;
        ongoingAccounts?: {
            proof: boolean;
            numberOfAccounts?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
        ongoingPersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
    }, {
        persona?: {
            proof: boolean;
        } | undefined;
        ongoingAccounts?: {
            proof: boolean;
            numberOfAccounts?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
        ongoingPersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    loggedInTimestamp: string;
    walletData: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        personaData: ({
            entry: "fullName";
            fields: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            };
        } | {
            entry: "emailAddresses";
            fields: string[];
        } | {
            entry: "phoneNumbers";
            fields: string[];
        })[];
        proofs: ({
            address: string;
            type: "persona";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        } | {
            address: string;
            type: "account";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        })[];
        persona?: {
            label: string;
            identityAddress: string;
        } | undefined;
    };
    sharedData: {
        persona?: {
            proof: boolean;
        } | undefined;
        ongoingAccounts?: {
            proof: boolean;
            numberOfAccounts?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
        ongoingPersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
    };
}, {
    loggedInTimestamp: string;
    walletData: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        personaData: ({
            entry: "fullName";
            fields: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            };
        } | {
            entry: "emailAddresses";
            fields: string[];
        } | {
            entry: "phoneNumbers";
            fields: string[];
        })[];
        proofs: ({
            address: string;
            type: "persona";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        } | {
            address: string;
            type: "account";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        })[];
        persona?: {
            label: string;
            identityAddress: string;
        } | undefined;
    };
    sharedData: {
        persona?: {
            proof: boolean;
        } | undefined;
        ongoingAccounts?: {
            proof: boolean;
            numberOfAccounts?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
        ongoingPersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
            numberOfRequestedPhoneNumbers?: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            } | undefined;
        } | undefined;
    };
}>;
export declare const walletDataDefault: WalletData;
