import { Logger } from 'tslog';
import { StateSubjects } from './subjects';
import { StorageProvider } from '../_types';
import { RdtState } from './types';
export type StateClient = ReturnType<typeof StateClient>;
export declare const StateClient: (key: string, storageClient: StorageProvider, options: Partial<{
    subjects: StateSubjects;
    logger: Logger<unknown>;
}>) => {
    setState: (state: Partial<RdtState>) => void;
    getState: () => {
        walletData: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            personaData: ({
                entry: "fullName";
                fields: {
                    variant: "western" | "eastern";
                    familyName: string;
                    nickname: string;
                    givenNames: string;
                };
            } | {
                entry: "emailAddresses";
                fields: string[];
            } | {
                entry: "phoneNumbers";
                fields: string[];
            })[];
            proofs: ({
                address: string;
                type: "persona";
                challenge: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            } | {
                address: string;
                type: "account";
                challenge: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            })[];
            persona?: {
                label: string;
                identityAddress: string;
            } | undefined;
        };
        sharedData: {
            persona?: {
                proof: boolean;
            } | undefined;
            ongoingAccounts?: {
                proof: boolean;
                numberOfAccounts?: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                } | undefined;
            } | undefined;
            ongoingPersonaData?: {
                isRequestingName?: boolean | undefined;
                numberOfRequestedEmailAddresses?: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                } | undefined;
                numberOfRequestedPhoneNumbers?: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                } | undefined;
            } | undefined;
        };
        loggedInTimestamp: string;
    };
    walletData$: import("rxjs").Observable<{
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        personaData: ({
            entry: "fullName";
            fields: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            };
        } | {
            entry: "emailAddresses";
            fields: string[];
        } | {
            entry: "phoneNumbers";
            fields: string[];
        })[];
        proofs: ({
            address: string;
            type: "persona";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        } | {
            address: string;
            type: "account";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        })[];
        persona?: {
            label: string;
            identityAddress: string;
        } | undefined;
    }>;
    getWalletData: () => {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        personaData: ({
            entry: "fullName";
            fields: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            };
        } | {
            entry: "emailAddresses";
            fields: string[];
        } | {
            entry: "phoneNumbers";
            fields: string[];
        })[];
        proofs: ({
            address: string;
            type: "persona";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        } | {
            address: string;
            type: "account";
            challenge: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        })[];
        persona?: {
            label: string;
            identityAddress: string;
        } | undefined;
    };
    state$: import("rxjs").Observable<{
        walletData: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            personaData: ({
                entry: "fullName";
                fields: {
                    variant: "western" | "eastern";
                    familyName: string;
                    nickname: string;
                    givenNames: string;
                };
            } | {
                entry: "emailAddresses";
                fields: string[];
            } | {
                entry: "phoneNumbers";
                fields: string[];
            })[];
            proofs: ({
                address: string;
                type: "persona";
                challenge: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            } | {
                address: string;
                type: "account";
                challenge: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            })[];
            persona?: {
                label: string;
                identityAddress: string;
            } | undefined;
        };
        sharedData: {
            persona?: {
                proof: boolean;
            } | undefined;
            ongoingAccounts?: {
                proof: boolean;
                numberOfAccounts?: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                } | undefined;
            } | undefined;
            ongoingPersonaData?: {
                isRequestingName?: boolean | undefined;
                numberOfRequestedEmailAddresses?: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                } | undefined;
                numberOfRequestedPhoneNumbers?: {
                    quantifier: "exactly" | "atLeast";
                    quantity: number;
                } | undefined;
            } | undefined;
        };
        loggedInTimestamp: string;
    }>;
    patchState: (state: Partial<RdtState>) => void;
    reset: () => void;
    stateInitialized$: import("rxjs").Observable<boolean>;
    destroy: () => void;
};
