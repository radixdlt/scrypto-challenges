import { Logger } from 'tslog';
import { Account, RequestItem } from '@radixdlt/connect-button';
import { ConnectButtonProvider } from '../_types';
import { ConnectButtonSubjects } from './subjects';
export declare const isMobile: () => boolean;
export type ConnectButtonClient = ReturnType<typeof ConnectButtonClient>;
export declare const ConnectButtonClient: (input: {
    onConnect?: ((done: (input?: {
        challenge: string;
    }) => void) => void) | undefined;
    subjects?: {
        onConnect: import("rxjs").Subject<{
            challenge: string;
        } | undefined>;
        onDisconnect: import("rxjs").Subject<void>;
        onUpdateSharedData: import("rxjs").Subject<void>;
        connected: import("rxjs").ReplaySubject<boolean>;
        requestItems: import("rxjs").BehaviorSubject<RequestItem[]>;
        onCancelRequestItem: import("rxjs").Subject<string>;
        accounts: import("rxjs").BehaviorSubject<Account[]>;
        onShowPopover: import("rxjs").Subject<void>;
        status: import("rxjs").BehaviorSubject<"error" | "pending" | "success" | "default">;
        loggedInTimestamp: import("rxjs").BehaviorSubject<string>;
        isMobile: import("rxjs").BehaviorSubject<boolean>;
        isWalletLinked: import("rxjs").BehaviorSubject<boolean>;
        isExtensionAvailable: import("rxjs").BehaviorSubject<boolean>;
        fullWidth: import("rxjs").BehaviorSubject<boolean>;
        activeTab: import("rxjs").BehaviorSubject<"sharing" | "requests">;
        mode: import("rxjs").BehaviorSubject<"light" | "dark">;
        theme: import("rxjs").BehaviorSubject<"radix-blue" | "black" | "white-with-outline" | "white">;
        avatarUrl: import("rxjs").BehaviorSubject<string>;
        personaLabel: import("rxjs").BehaviorSubject<string>;
        personaData: import("rxjs").BehaviorSubject<{
            value: string;
            field: string;
        }[]>;
        dAppName: import("rxjs").BehaviorSubject<string>;
        onLinkClick: import("rxjs").Subject<{
            type: "transaction" | "account";
            data: string;
        }>;
    } | undefined;
    logger?: Logger<unknown> | undefined;
}) => ConnectButtonProvider;
