"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = void 0;
var ajv_1 = __importDefault(require("ajv"));
var generate_method_id_1 = require("../generate-method-id");
var parameter_validation_error_1 = __importDefault(require("./parameter-validation-error"));
var method_not_found_error_1 = __importDefault(require("./method-not-found-error"));
var helper_functions_1 = require("../helper-functions");
var neverthrow_1 = require("neverthrow");
var dereference_document_1 = __importDefault(require("../dereference-document"));
var isByName = function (params) { return !Array.isArray(params); };
var isByPosition = function (params) { return Array.isArray(params); };
/**
 * Validates a particular method call against the OpenRPC definition for the method.
 *
 * @param methodName the name of the method in the OpenRPC Document.
 * @param params the param values that you want validated.
 *
 * @returns an array of parameter validation errors, or if there are none, an empty array.
 * if the method name is invalid, a [[MethodNotFoundError]] is returned.
 *
 * @example
 * ```typescript
 *
 * import { petstore } from "@open-rpc/examples";
 * const petStoreMethodCallValidator = new MethodCallValidator(petstore);
 * const errors = petStoreMethodCallValidator.validate("list_pets", []);
 * // errors.length === 0
 * ```
 *
 */
exports.validate = function (document_, methodName, params) { return __awaiter(void 0, void 0, void 0, function () {
    var ajvValidator, document, method, paramMap, errors;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                ajvValidator = new ajv_1.default();
                return [4 /*yield*/, dereference_document_1.default(document_)
                    // @ts-ignore
                ];
            case 1:
                document = _a.sent();
                // @ts-ignore
                document.methods.forEach(function (method) {
                    var params = method.params;
                    if (method.params === undefined)
                        return;
                    params.forEach(function (param) {
                        if (param.schema === undefined)
                            return;
                        ajvValidator.addSchema(param.schema, generate_method_id_1.generateMethodParamId(method, param));
                    });
                });
                if (methodName === "rpc.discover")
                    return [2 /*return*/, neverthrow_1.ok(undefined)];
                method = helper_functions_1.find(document.methods, function (o) { return o.name == methodName; });
                if (!method) {
                    return [2 /*return*/, neverthrow_1.err([new method_not_found_error_1.default(methodName, document, params)])];
                }
                if (method.params) {
                    paramMap = method.params;
                    errors = helper_functions_1.compact(paramMap.map(function (param, index) {
                        var input;
                        if (method.paramStructure === "by-position" && isByPosition(params)) {
                            input = params[index];
                        }
                        else if (method.paramStructure === "by-name" && isByName(params)) {
                            input = params[param.name];
                        }
                        if (!method.paramStructure) {
                            if (isByPosition(params)) {
                                input = params[index];
                            }
                            if (isByName(params)) {
                                input = params[param.name];
                            }
                        }
                        if (input === undefined && !param.required) {
                            return;
                        }
                        if (param.schema !== undefined) {
                            var idForMethod = generate_method_id_1.generateMethodParamId(method, param);
                            var isValid = ajvValidator.validate(idForMethod, input);
                            var errors_1 = ajvValidator.errors;
                            if (!isValid) {
                                return new parameter_validation_error_1.default(index, param.schema, input, errors_1);
                            }
                        }
                    }));
                    return [2 /*return*/, errors.length > 0 ? neverthrow_1.err(errors) : neverthrow_1.ok(undefined)];
                }
                else {
                    return [2 /*return*/, neverthrow_1.ok(undefined)];
                }
                return [2 /*return*/];
        }
    });
}); };
