"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidFileSystemPathError = exports.InvalidRemoteURLError = exports.NotResolvableError = exports.NonJsonRefError = void 0;
/**
 * Error thrown when the fetched reference is not properly formatted JSON or is encoded
 * incorrectly
 *
 * @example
 * ```typescript
 *
 * import Dereferencer, { NonJsonRefError } from "@json-schema-tools/dereferencer";
 * const dereffer = new Dereferencer({});
 * try { await dereffer.resolve(); }
 * catch(e) {
 *   if (e instanceof NonJsonRefError) { ... }
 * }
 * ```
 *
 */
var NonJsonRefError = /** @class */ (function () {
    function NonJsonRefError(obj, nonJson) {
        this.name = "NonJsonRefError";
        this.message = [
            "NonJsonRefError",
            "The resolved value at the reference: ".concat(obj.$ref, " was not JSON.parse 'able"),
            "The non-json content in question: ".concat(nonJson),
        ].join("\n");
    }
    return NonJsonRefError;
}());
exports.NonJsonRefError = NonJsonRefError;
var NotResolvableError = /** @class */ (function () {
    function NotResolvableError(ref) {
        this.name = "NotResolvableError";
        this.message = [
            "NotResolvableError",
            "Could not resolve the reference: ".concat(ref),
            "No protocol handler was found, and it was not found to be an internal reference",
        ].join("\n");
    }
    return NotResolvableError;
}());
exports.NotResolvableError = NotResolvableError;
/**
 * Error thrown when given an invalid file system path as a reference.
 *
 */
var InvalidRemoteURLError = /** @class */ (function () {
    function InvalidRemoteURLError(ref) {
        this.name = "InvalidRemoteURLError";
        this.message = [
            "InvalidRemoteURLError",
            "The url was not resolvable: ".concat(ref),
        ].join("\n");
    }
    return InvalidRemoteURLError;
}());
exports.InvalidRemoteURLError = InvalidRemoteURLError;
/**
 * Error thrown when given an invalid file system path as a reference.
 *
 * @example
 * ```typescript
 *
 * import Dereferencer, { InvalidFileSystemPathError } from "@json-schema-tools/dereferencer";
 * const dereffer = new Dereferencer({});
 * try { await dereffer.resolve(); }
 * catch(e) {
 *   if (e instanceof InvalidFileSystemPathError) { ... }
 * }
 * ```
 *
 */
var InvalidFileSystemPathError = /** @class */ (function () {
    function InvalidFileSystemPathError(ref) {
        this.name = "InvalidFileSystemPathError";
        this.message = [
            "InvalidFileSystemPathError",
            "The path was not resolvable: ".concat(ref),
        ].join("\n");
    }
    return InvalidFileSystemPathError;
}());
exports.InvalidFileSystemPathError = InvalidFileSystemPathError;
