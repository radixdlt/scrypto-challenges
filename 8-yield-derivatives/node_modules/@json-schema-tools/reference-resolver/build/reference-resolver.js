"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var errors_1 = require("./errors");
var resolve_pointer_1 = __importDefault(require("./resolve-pointer"));
var isUrlLike = function (s) {
    return s.includes("://");
};
var ReferenceResolver = /** @class */ (function () {
    function ReferenceResolver(protocolHandlerMap) {
        this.protocolHandlerMap = protocolHandlerMap;
    }
    /**
     * Given a $ref string, it will return the underlying pointed-to value.
     * For remote references, the root object is not used.
     */
    ReferenceResolver.prototype.resolve = function (ref, root) {
        if (root === void 0) { root = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var hashFragmentSplit, hashFragment, hashlessRef, relativePathSchema, e_1, schema, _i, _a, protocol, maybeSchema, schema;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        // Check if its an internal reference that starts from the root
                        // Internal references.
                        if (ref[0] === "#") {
                            return [2 /*return*/, Promise.resolve((0, resolve_pointer_1.default)(ref, root))];
                        }
                        hashFragmentSplit = ref.split("#");
                        if (hashFragmentSplit.length > 1) {
                            hashFragment = hashFragmentSplit[hashFragmentSplit.length - 1];
                        }
                        hashlessRef = hashFragmentSplit[0];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.protocolHandlerMap.file(hashlessRef, root)];
                    case 2:
                        relativePathSchema = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _b.sent();
                        throw new errors_1.NonJsonRefError({ $ref: ref }, e_1.message);
                    case 4:
                        if (relativePathSchema !== undefined) {
                            schema = relativePathSchema;
                            if (hashFragment) {
                                schema = (0, resolve_pointer_1.default)(hashFragment, schema);
                            }
                            return [2 /*return*/, schema];
                        }
                        else if (isUrlLike(ref) === false) {
                            throw new errors_1.InvalidFileSystemPathError(ref);
                        }
                        _i = 0, _a = Object.keys(this.protocolHandlerMap);
                        _b.label = 5;
                    case 5:
                        if (!(_i < _a.length)) return [3 /*break*/, 8];
                        protocol = _a[_i];
                        if (!hashlessRef.startsWith(protocol)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.protocolHandlerMap[protocol](hashlessRef, root)];
                    case 6:
                        maybeSchema = _b.sent();
                        if (maybeSchema !== undefined) {
                            schema = maybeSchema;
                            if (hashFragment) {
                                schema = (0, resolve_pointer_1.default)(hashFragment, schema);
                            }
                            return [2 /*return*/, schema];
                        }
                        _b.label = 7;
                    case 7:
                        _i++;
                        return [3 /*break*/, 5];
                    case 8: 
                    // if we get to the end and nothing has handled it yet, then we are hooped.
                    throw new errors_1.NotResolvableError(ref);
                }
            });
        });
    };
    return ReferenceResolver;
}());
exports.default = ReferenceResolver;
