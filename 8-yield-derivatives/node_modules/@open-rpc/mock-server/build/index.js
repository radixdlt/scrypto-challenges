"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serviceMode = void 0;
var server_js_1 = require("@open-rpc/server-js");
var lodash_1 = __importDefault(require("lodash"));
var schema_utils_js_1 = require("@open-rpc/schema-utils-js");
var examples_1 = __importDefault(require("@open-rpc/examples"));
var makePrefix = function (sluggedDocumentTitle, version) {
    return lodash_1.default.camelCase(sluggedDocumentTitle) + "-" + version + "-";
};
var exNames = Object.values(examples_1.default).map(function (doc) { return makePrefix(doc.info.title, doc.info.version); });
var prefixToDocumentMap = {};
var createServiceMethodMapping = function (s, document) {
    return {
        mock: function (openrpcDocument) { return __awaiter(void 0, void 0, void 0, function () {
            var prefix, prefixedOpenRPCDocument, parsedDoc, router;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        prefix = makePrefix(openrpcDocument.info.title, openrpcDocument.info.version);
                        prefixedOpenRPCDocument = __assign(__assign({}, openrpcDocument), { methods: lodash_1.default.map(openrpcDocument.methods, function (method) { return (__assign(__assign({}, method), { name: "" + prefix + method.name })); }) });
                        prefixedOpenRPCDocument.methods.push();
                        return [4 /*yield*/, schema_utils_js_1.parseOpenRPCDocument(prefixedOpenRPCDocument)];
                    case 1:
                        parsedDoc = _a.sent();
                        prefixToDocumentMap[prefix] = openrpcDocument;
                        router = s.addRouter(parsedDoc, { mockMode: true });
                        if (exNames.indexOf(makePrefix(openrpcDocument.info.title, openrpcDocument.info.version)) === -1) {
                            setTimeout(function () { return s.removeRouter(router); }, 15 * 60 * 1000);
                        }
                        console.log("New service added: ", prefix); // eslint-disable-line
                        return [2 /*return*/, prefix.slice(0, -1)];
                }
            });
        }); },
    };
};
exports.serviceMode = function (port, openrpcDocument) {
    var options = {
        openrpcDocument: openrpcDocument,
        transportConfigs: [
            {
                options: {
                    middleware: [
                        function (req, res, next) {
                            if (req.url === "/") {
                                return next();
                            }
                            var url = req.url.replace("/", "");
                            var _a = url.split("-"), title = _a[0], version = _a[1];
                            var prefix = makePrefix(title, version);
                            if (req.body.method === "rpc.discover") {
                                res.setHeader("Content-Type", "application/json");
                                var response = {
                                    id: req.body.id,
                                    jsonrpc: "2.0",
                                    result: prefixToDocumentMap[prefix],
                                };
                                res.end(JSON.stringify(response));
                                return;
                            }
                            req.body.method = "" + prefix + req.body.method;
                            return next();
                        },
                    ],
                    port: port,
                },
                type: "HTTPTransport",
            },
        ],
    };
    var serviceServer = new server_js_1.Server(options);
    var methodMapping = createServiceMethodMapping(serviceServer, openrpcDocument);
    serviceServer.addRouter(openrpcDocument, methodMapping);
    console.log("Created Server with options: port - " + port); // eslint-disable-line
    return serviceServer;
};
var server = function (port, openrpcDocument) {
    var options = {
        methodMapping: { mockMode: true },
        openrpcDocument: openrpcDocument,
        transportConfigs: [
            {
                options: {
                    middleware: [],
                    port: port,
                },
                type: "HTTPTransport",
            },
        ],
    };
    return new server_js_1.Server(options);
};
exports.default = server;
