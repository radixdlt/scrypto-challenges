"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenRPCDocumentDereferencingError = void 0;
var dereferencer_1 = __importDefault(require("@json-schema-tools/dereferencer"));
var reference_resolver_1 = __importDefault(require("@json-schema-tools/reference-resolver"));
var fast_safe_stringify_1 = __importDefault(require("fast-safe-stringify"));
/**
 * Provides an error interface for OpenRPC Document dereferencing problems
 *
 * @category Errors
 *
 */
var OpenRPCDocumentDereferencingError = /** @class */ (function () {
    /**
     * @param e The error that originated from jsonSchemaRefParser
     */
    function OpenRPCDocumentDereferencingError(e) {
        this.name = "OpenRPCDocumentDereferencingError";
        this.message = "The json schema provided cannot be dereferenced. Received Error: \n " + e;
    }
    return OpenRPCDocumentDereferencingError;
}());
exports.OpenRPCDocumentDereferencingError = OpenRPCDocumentDereferencingError;
var derefItem = function (item, doc) { return __awaiter(void 0, void 0, void 0, function () {
    var $ref, err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                $ref = item.$ref;
                if ($ref === undefined) {
                    return [2 /*return*/, item];
                }
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, reference_resolver_1.default($ref, doc)];
            case 2: return [2 /*return*/, _a.sent()];
            case 3:
                err_1 = _a.sent();
                throw new OpenRPCDocumentDereferencingError([
                    "unable to eval pointer against OpenRPC Document.",
                    "error type: " + err_1.name,
                    "instance: " + err_1.instance,
                    "token: " + err_1.token,
                    "pointer: " + $ref,
                    "reference object: " + fast_safe_stringify_1.default(item)
                ].join("\n"));
            case 4: return [2 /*return*/];
        }
    });
}); };
var derefItems = function (items, doc) { return __awaiter(void 0, void 0, void 0, function () {
    var dereffed, _i, items_1, i, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                dereffed = [];
                _i = 0, items_1 = items;
                _c.label = 1;
            case 1:
                if (!(_i < items_1.length)) return [3 /*break*/, 4];
                i = items_1[_i];
                _b = (_a = dereffed).push;
                return [4 /*yield*/, derefItem(i, doc)];
            case 2:
                _b.apply(_a, [_c.sent()]);
                _c.label = 3;
            case 3:
                _i++;
                return [3 /*break*/, 1];
            case 4: return [2 /*return*/, dereffed];
        }
    });
}); };
var handleSchemaWithSchemaComponents = function (s, schemaComponents) { return __awaiter(void 0, void 0, void 0, function () {
    var dereffer, dereffed, e_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (s === true || s === false) {
                    return [2 /*return*/, Promise.resolve(s)];
                }
                if (schemaComponents !== undefined) {
                    s.components = { schemas: schemaComponents };
                }
                dereffer = new dereferencer_1.default(s);
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, dereffer.resolve()];
            case 2:
                dereffed = _a.sent();
                if (dereffed !== true && dereffed !== false) {
                    delete dereffed.components;
                }
                return [2 /*return*/, dereffed];
            case 3:
                e_1 = _a.sent();
                throw new OpenRPCDocumentDereferencingError([
                    "Unable to parse reference inside of JSONSchema",
                    s.title ? "Schema Title: " + s.title : "",
                    "error message: " + e_1.message,
                    "schema in question: " + fast_safe_stringify_1.default(s)
                ].join("\n"));
            case 4: return [2 /*return*/];
        }
    });
}); };
var handleSchemaComponents = function (doc) { return __awaiter(void 0, void 0, void 0, function () {
    var schemas, schemaKeys, _i, schemaKeys_1, k, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (doc.components === undefined) {
                    return [2 /*return*/, Promise.resolve(doc)];
                }
                if (doc.components.schemas === undefined) {
                    return [2 /*return*/, Promise.resolve(doc)];
                }
                schemas = doc.components.schemas;
                schemaKeys = Object.keys(schemas);
                _i = 0, schemaKeys_1 = schemaKeys;
                _c.label = 1;
            case 1:
                if (!(_i < schemaKeys_1.length)) return [3 /*break*/, 4];
                k = schemaKeys_1[_i];
                _a = schemas;
                _b = k;
                return [4 /*yield*/, handleSchemaWithSchemaComponents(schemas[k], schemas)];
            case 2:
                _a[_b] = _c.sent();
                _c.label = 3;
            case 3:
                _i++;
                return [3 /*break*/, 1];
            case 4: return [2 /*return*/, doc];
        }
    });
}); };
var handleSchemasInsideContentDescriptorComponents = function (doc) { return __awaiter(void 0, void 0, void 0, function () {
    var cds, cdsKeys, componentSchemas, _i, cdsKeys_1, cdK, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (doc.components === undefined) {
                    return [2 /*return*/, Promise.resolve(doc)];
                }
                if (doc.components.contentDescriptors === undefined) {
                    return [2 /*return*/, Promise.resolve(doc)];
                }
                cds = doc.components.contentDescriptors;
                cdsKeys = Object.keys(cds);
                componentSchemas = {};
                if (doc.components.schemas) {
                    componentSchemas = doc.components.schemas;
                }
                _i = 0, cdsKeys_1 = cdsKeys;
                _b.label = 1;
            case 1:
                if (!(_i < cdsKeys_1.length)) return [3 /*break*/, 4];
                cdK = cdsKeys_1[_i];
                _a = cds[cdK];
                return [4 /*yield*/, handleSchemaWithSchemaComponents(cds[cdK].schema, componentSchemas)];
            case 2:
                _a.schema = _b.sent();
                _b.label = 3;
            case 3:
                _i++;
                return [3 /*break*/, 1];
            case 4: return [2 /*return*/, doc];
        }
    });
}); };
var handleMethod = function (method, doc) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, _b, _c, _d, _i, _e, exPairing, _f, _g, _h, _j, componentSchemas, params, _k, params_1, p, _l, result, _m;
    return __generator(this, function (_o) {
        switch (_o.label) {
            case 0:
                if (!(method.tags !== undefined)) return [3 /*break*/, 2];
                _a = method;
                return [4 /*yield*/, derefItems(method.tags, doc)];
            case 1:
                _a.tags = _o.sent();
                _o.label = 2;
            case 2:
                if (!(method.errors !== undefined)) return [3 /*break*/, 4];
                _b = method;
                return [4 /*yield*/, derefItems(method.errors, doc)];
            case 3:
                _b.errors = _o.sent();
                _o.label = 4;
            case 4:
                if (!(method.links !== undefined)) return [3 /*break*/, 6];
                _c = method;
                return [4 /*yield*/, derefItems(method.links, doc)];
            case 5:
                _c.links = _o.sent();
                _o.label = 6;
            case 6:
                if (!(method.examples !== undefined)) return [3 /*break*/, 12];
                _d = method;
                return [4 /*yield*/, derefItems(method.examples, doc)];
            case 7:
                _d.examples = _o.sent();
                _i = 0, _e = method.examples;
                _o.label = 8;
            case 8:
                if (!(_i < _e.length)) return [3 /*break*/, 12];
                exPairing = _e[_i];
                _f = exPairing;
                return [4 /*yield*/, derefItems(exPairing.params, doc)];
            case 9:
                _f.params = _o.sent();
                _g = exPairing;
                return [4 /*yield*/, derefItem(exPairing.result, doc)];
            case 10:
                _g.result = _o.sent();
                _o.label = 11;
            case 11:
                _i++;
                return [3 /*break*/, 8];
            case 12:
                _h = method;
                return [4 /*yield*/, derefItems(method.params, doc)];
            case 13:
                _h.params = _o.sent();
                _j = method;
                return [4 /*yield*/, derefItem(method.result, doc)];
            case 14:
                _j.result = _o.sent();
                componentSchemas = {};
                if (doc.components && doc.components.schemas) {
                    componentSchemas = doc.components.schemas;
                }
                params = method.params;
                _k = 0, params_1 = params;
                _o.label = 15;
            case 15:
                if (!(_k < params_1.length)) return [3 /*break*/, 18];
                p = params_1[_k];
                _l = p;
                return [4 /*yield*/, handleSchemaWithSchemaComponents(p.schema, componentSchemas)];
            case 16:
                _l.schema = _o.sent();
                _o.label = 17;
            case 17:
                _k++;
                return [3 /*break*/, 15];
            case 18:
                result = method.result;
                _m = result;
                return [4 /*yield*/, handleSchemaWithSchemaComponents(result.schema, componentSchemas)];
            case 19:
                _m.schema = _o.sent();
                return [2 /*return*/, method];
        }
    });
}); };
/**
 * replaces $ref's within a document and its schemas. The replaced value will be a javascript object reference to the
 * real schema / open-rpc component
 *
 * @param schema The OpenRPC document
 *
 * @returns The same OpenRPC Document that was passed in, but with all $ref's dereferenced.
 *
 * @throws [[OpenRPCDocumentDereferencingError]]
 *
 * @example
 * ```typescript
 *
 * const { OpenRPC } from "@open-rpc/meta-schema"
 * const { dereferenceDocument } from "@open-rpc/schema-utils-js";
 *
 * try {
 *   const dereffedDocument = await dereferenceDocument({ ... }) as OpenRPC;
 * } catch (e) {
 *   // handle validation errors
 * }
 * ```
 *
 */
function dereferenceDocument(openrpcDocument) {
    return __awaiter(this, void 0, void 0, function () {
        var derefDoc, methods, _i, _a, method, _b, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    derefDoc = __assign({}, openrpcDocument);
                    return [4 /*yield*/, handleSchemaComponents(derefDoc)];
                case 1:
                    derefDoc = _d.sent();
                    return [4 /*yield*/, handleSchemasInsideContentDescriptorComponents(derefDoc)];
                case 2:
                    derefDoc = _d.sent();
                    methods = [];
                    _i = 0, _a = derefDoc.methods;
                    _d.label = 3;
                case 3:
                    if (!(_i < _a.length)) return [3 /*break*/, 6];
                    method = _a[_i];
                    _c = (_b = methods).push;
                    return [4 /*yield*/, handleMethod(method, derefDoc)];
                case 4:
                    _c.apply(_b, [_d.sent()]);
                    _d.label = 5;
                case 5:
                    _i++;
                    return [3 /*break*/, 3];
                case 6:
                    derefDoc.methods = methods;
                    return [2 /*return*/, derefDoc];
            }
        });
    });
}
exports.default = dereferenceDocument;
