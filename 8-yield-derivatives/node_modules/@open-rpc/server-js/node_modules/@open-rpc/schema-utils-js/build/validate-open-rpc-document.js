"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenRPCDocumentValidationError = void 0;
var meta_schema_1 = __importDefault(require("@open-rpc/meta-schema"));
var ajv_1 = __importDefault(require("ajv"));
/**
 * @ignore
 */
/**
 * Provides an error interface for OpenRPC Document validation
 *
 * @category Errors
 *
 */
var OpenRPCDocumentValidationError = /** @class */ (function () {
    /**
     * @param errors The errors received by ajv.errors.
     */
    function OpenRPCDocumentValidationError(errors) {
        this.name = "OpenRPCDocumentDereferencingError";
        this.message = [
            "Error validating OpenRPC Document against @open-rpc/meta-schema.",
            "The errors found are as follows:",
            JSON.stringify(errors, undefined, "  "),
        ].join("\n");
    }
    return OpenRPCDocumentValidationError;
}());
exports.OpenRPCDocumentValidationError = OpenRPCDocumentValidationError;
/**
 * Returns any JSON Schema validation errors that are found with the OpenRPC document passed in.
 *
 * @param document OpenRPC Document to validate.
 *
 * @returns Either true if everything checks out, or a well formatted error.
 *
 * @example
 * ```typescript
 *
 * const { types } from "@open-rpc/meta-schema"
 * const { validateOpenRPCDocument } from "@open-rpc/schema-utils-js";
 * const badOpenRPCDocument = {};
 * const errors = validateOpenRPCDocument({});
 * if (errors) {
 *   // handle errors
 * }
 * ```
 *
 */
function validateOpenRPCDocument(document) {
    var ajv = new ajv_1.default();
    var metaSchemaCopy = __assign({}, meta_schema_1.default);
    delete metaSchemaCopy.definitions.JSONSchema.$id;
    delete metaSchemaCopy.definitions.JSONSchema.$schema;
    delete metaSchemaCopy.$schema;
    delete metaSchemaCopy.$id;
    ajv.validate(metaSchemaCopy, document);
    if (ajv.errors) {
        return new OpenRPCDocumentValidationError(ajv.errors);
    }
    else {
        return true;
    }
}
exports.default = validateOpenRPCDocument;
