"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Provides an error interface for handling when a function call has invalid parameters.
 */
var ParameterValidationError = /** @class */ (function () {
    /**
     * @param paramIndex The index of the param that for this error (index
     * of the param in MethodObject.params).
     * @param expectedSchema The expected JSON Schema for the passed in value.
     * @param receievedParam The value of the param passed to the method call.
     * @param errors The errors recieved by ajv
     */
    function ParameterValidationError(paramIndex, expectedSchema, receievedParam, errors) {
        this.paramIndex = paramIndex;
        this.expectedSchema = expectedSchema;
        this.receievedParam = receievedParam;
        this.name = "ParameterValidationError";
        this.message = [
            "Expected param at " + (typeof paramIndex === "string" ? "key" : "position") + ": ",
            paramIndex,
            " to match the json schema: ",
            JSON.stringify(expectedSchema, undefined, "  "),
            ". The function received instead ",
            receievedParam,
            ".",
            "The Validation errors: \n",
            JSON.stringify(errors)
        ].join("");
    }
    return ParameterValidationError;
}());
exports.default = ParameterValidationError;
