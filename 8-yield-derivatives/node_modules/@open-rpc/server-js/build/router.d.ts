import { OpenrpcDocument } from "@open-rpc/meta-schema";
export interface MethodMapping {
    [methodName: string]: (...params: any) => Promise<any>;
}
export interface MockModeSettings {
    mockMode: boolean;
}
export declare type TMethodHandler = (...args: any) => Promise<any>;
export declare class Router {
    private openrpcDocument;
    static methodNotFoundHandler(methodName: string): {
        error: {
            code: number;
            data: string;
            message: string;
        };
    };
    private methods;
    private methodCallValidator;
    constructor(openrpcDocument: OpenrpcDocument, methodMapping: MethodMapping | MockModeSettings);
    call(methodName: string, params: any): Promise<{
        result: any;
        error?: undefined;
    } | {
        error: {
            code: number;
            message: string;
            data: any;
        };
        result?: undefined;
    } | {
        error: {
            code: number;
            message: string;
            data?: undefined;
        };
        result?: undefined;
    }>;
    isMethodImplemented(methodName: string): boolean;
    private serviceDiscoveryHandler;
    private buildMockMethodMapping;
    private invalidParamsHandler;
}
