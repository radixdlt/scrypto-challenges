"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cors_1 = __importDefault(require("cors"));
const body_parser_1 = require("body-parser");
const connect_1 = __importDefault(require("connect"));
const http2_1 = __importDefault(require("http2"));
const http_1 = __importDefault(require("http"));
const server_transport_1 = __importDefault(require("./server-transport"));
const ws_1 = __importDefault(require("ws"));
class WebSocketServerTransport extends server_transport_1.default {
    constructor(options) {
        super();
        this.options = options;
        options.allowHTTP1 = true;
        const app = connect_1.default();
        const corsOptions = options.cors || WebSocketServerTransport.defaultCorsOptions;
        this.options = {
            ...options,
            middleware: [
                cors_1.default(corsOptions),
                body_parser_1.json({
                    limit: "1mb"
                }),
                ...options.middleware,
            ],
        };
        this.options.middleware.forEach((mw) => app.use(mw));
        if (!this.options.cert && !this.options.key) {
            this.server = http_1.default.createServer((req, res) => app(req, res));
        }
        else {
            this.server = http2_1.default.createSecureServer(options, (req, res) => app(req, res));
        }
        this.wss = new ws_1.default.Server({ server: this.server });
        this.wss.on("connection", (ws) => {
            ws.on("message", (message) => this.webSocketRouterHandler(JSON.parse(message), ws.send.bind(ws)));
            ws.on("close", () => ws.removeAllListeners());
        });
    }
    start() {
        this.server.listen(this.options.port);
    }
    stop() {
        this.wss.removeAllListeners();
        this.wss.close();
        this.server.close();
    }
    async webSocketRouterHandler(req, respondWith) {
        let result = null;
        if (req instanceof Array) {
            result = await Promise.all(req.map((r) => super.routerHandler(r)));
        }
        else {
            result = await super.routerHandler(req);
        }
        respondWith(JSON.stringify(result));
    }
}
exports.default = WebSocketServerTransport;
WebSocketServerTransport.defaultCorsOptions = { origin: "*" };
