"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const server_transport_1 = __importDefault(require("./server-transport"));
const node_ipc_1 = __importDefault(require("node-ipc"));
class IPCServerTransport extends server_transport_1.default {
    constructor(options) {
        super();
        this.options = options;
        const udpOption = (options.udp) ? `udp${(options.ipv6) ? "6" : "4"}` : undefined;
        node_ipc_1.default.config.id = options.id;
        node_ipc_1.default.config.logger = () => {
            // noop
        };
        node_ipc_1.default.serveNet(undefined, options.port, udpOption, () => {
            node_ipc_1.default.server.on("message", (data, socket) => {
                const req = JSON.parse(data);
                this.ipcRouterHandler(req, (result) => {
                    node_ipc_1.default.server.emit(socket, "message", result);
                });
            });
        });
        this.server = node_ipc_1.default.server;
    }
    start() {
        this.server.start(this.options.port);
    }
    stop() {
        this.server.stop();
    }
    async ipcRouterHandler(req, respondWith) {
        let result = null;
        if (req instanceof Array) {
            result = await Promise.all(req.map((jsonrpcReq) => super.routerHandler(jsonrpcReq)));
        }
        else {
            result = await super.routerHandler(req);
        }
        respondWith(JSON.stringify(result));
    }
}
exports.default = IPCServerTransport;
