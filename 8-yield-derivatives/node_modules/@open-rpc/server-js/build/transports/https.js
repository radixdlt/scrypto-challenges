"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cors_1 = __importDefault(require("cors"));
const body_parser_1 = require("body-parser");
const connect_1 = __importDefault(require("connect"));
const http2_1 = __importDefault(require("http2"));
const server_transport_1 = __importDefault(require("./server-transport"));
class HTTPSServerTransport extends server_transport_1.default {
    constructor(options) {
        super();
        this.options = options;
        options.allowHTTP1 = true;
        const app = connect_1.default();
        const corsOptions = options.cors || HTTPSServerTransport.defaultCorsOptions;
        this.options = {
            ...options,
            middleware: [
                cors_1.default(corsOptions),
                body_parser_1.json({
                    limit: "1mb"
                }),
                ...options.middleware,
            ],
        };
        this.options.middleware.forEach((mw) => app.use(mw));
        app.use(this.httpsRouterHandler.bind(this));
        this.server = http2_1.default.createSecureServer(options, (req, res) => app(req, res));
    }
    start() {
        this.server.listen(this.options.port);
    }
    stop() {
        this.server.close();
    }
    async httpsRouterHandler(req, res) {
        let result = null;
        if (req.body instanceof Array) {
            result = await Promise.all(req.body.map((r) => super.routerHandler(r)));
        }
        else {
            result = await super.routerHandler(req.body);
        }
        res.setHeader("Content-Type", "application/json");
        res.end(JSON.stringify(result));
    }
}
exports.default = HTTPSServerTransport;
HTTPSServerTransport.defaultCorsOptions = { origin: "*" };
