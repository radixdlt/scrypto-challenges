"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var typescript_map_1 = require("typescript-map");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var RadixTokenDefinition_1 = require("../token/RadixTokenDefinition");
var atommodel_1 = require("../atommodel");
var RadixTokenDefinitionAccountSystem = /** @class */ (function () {
    function RadixTokenDefinitionAccountSystem(address) {
        this.address = address;
        this.name = 'TOKENS';
        this.tokenDefinitions = new typescript_map_1.TSMap();
        this.tokenDefinitionSubject = new rxjs_1.Subject();
        this.processedAtomHIDs = new typescript_map_1.TSMap();
        // Empty constructor
    }
    RadixTokenDefinitionAccountSystem.prototype.processAtomUpdate = function (atomUpdate) {
        if (!atomUpdate.atom.containsParticle(atommodel_1.RadixTokenDefinitionParticle, atommodel_1.RadixUnallocatedTokensParticle)) {
            return;
        }
        if (atomUpdate.action === 'STORE') {
            this.processStoreAtom(atomUpdate);
        }
        else if (atomUpdate.action === 'DELETE') {
            this.processDeleteAtom(atomUpdate);
        }
    };
    RadixTokenDefinitionAccountSystem.prototype.processStoreAtom = function (atomUpdate) {
        var e_1, _a, e_2, _b, e_3, _c;
        var atom = atomUpdate.atom;
        if (this.processedAtomHIDs.has(atom.getAidString())) {
            return;
        }
        this.processedAtomHIDs.set(atom.getAidString(), true);
        try {
            for (var _d = tslib_1.__values(atom.getParticleGroups()), _e = _d.next(); !_e.done; _e = _d.next()) {
                var particleGroup = _e.value;
                var tokenDefinition = void 0;
                if (particleGroup.containsParticle(atommodel_1.RadixTokenDefinitionParticle)) {
                    try {
                        // Token definition
                        for (var _f = (e_2 = void 0, tslib_1.__values(particleGroup.getParticles())), _g = _f.next(); !_g.done; _g = _f.next()) {
                            var spunParticle = _g.value;
                            if (spunParticle.particle instanceof atommodel_1.RadixTokenDefinitionParticle && spunParticle.spin === atommodel_1.RadixSpin.UP) {
                                this.createOrUpdateTokenDefinition(spunParticle.particle);
                            }
                            else if (spunParticle.particle instanceof atommodel_1.RadixUnallocatedTokensParticle) {
                                var particle = spunParticle.particle;
                                tokenDefinition = this.getOrCreateTokenDefinition(particle.getTokenDefinitionReference());
                                if (spunParticle.spin === atommodel_1.RadixSpin.UP) {
                                    tokenDefinition.unallocatedTokens.set(particle.getHidString(), particle);
                                }
                                else {
                                    tokenDefinition.unallocatedTokens.delete(particle.getHidString());
                                }
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                else if (particleGroup.containsParticle(atommodel_1.RadixUnallocatedTokensParticle)
                    && particleGroup.containsParticle(atommodel_1.RadixTransferrableTokensParticle)) {
                    try {
                        // Mint or burn
                        for (var _h = (e_3 = void 0, tslib_1.__values(particleGroup.getParticles())), _j = _h.next(); !_j.done; _j = _h.next()) {
                            var spunParticle = _j.value;
                            if (spunParticle.particle instanceof atommodel_1.RadixUnallocatedTokensParticle) {
                                var particle = spunParticle.particle;
                                tokenDefinition = this.getOrCreateTokenDefinition(particle.getTokenDefinitionReference());
                                if (spunParticle.spin === atommodel_1.RadixSpin.UP) {
                                    tokenDefinition.unallocatedTokens.set(particle.getHidString(), particle);
                                    tokenDefinition.addTotalSupply(particle.getAmount().neg());
                                }
                                else {
                                    tokenDefinition.unallocatedTokens.delete(particle.getHidString());
                                    tokenDefinition.addTotalSupply(particle.getAmount());
                                }
                            }
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
                if (tokenDefinition) {
                    this.tokenDefinitionSubject.next(tokenDefinition);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    RadixTokenDefinitionAccountSystem.prototype.processDeleteAtom = function (atomUpdate) {
        var e_4, _a, e_5, _b, e_6, _c;
        var atom = atomUpdate.atom;
        if (!this.processedAtomHIDs.has(atom.getAidString())) {
            return;
        }
        this.processedAtomHIDs.delete(atom.getAidString());
        try {
            for (var _d = tslib_1.__values(atom.getParticleGroups()), _e = _d.next(); !_e.done; _e = _d.next()) {
                var particleGroup = _e.value;
                var tokenDefinition = void 0;
                if (particleGroup.containsParticle(atommodel_1.RadixTokenDefinitionParticle)) {
                    try {
                        // Token definition
                        for (var _f = (e_5 = void 0, tslib_1.__values(particleGroup.getParticles())), _g = _f.next(); !_g.done; _g = _f.next()) {
                            var spunParticle = _g.value;
                            if (spunParticle.particle instanceof atommodel_1.RadixTokenDefinitionParticle && spunParticle.spin === atommodel_1.RadixSpin.DOWN) {
                                this.createOrUpdateTokenDefinition(spunParticle.particle);
                            }
                            else if (spunParticle.particle instanceof atommodel_1.RadixUnallocatedTokensParticle) {
                                var particle = spunParticle.particle;
                                tokenDefinition = this.getOrCreateTokenDefinition(particle.getTokenDefinitionReference());
                                if (spunParticle.spin === atommodel_1.RadixSpin.DOWN) {
                                    tokenDefinition.unallocatedTokens.set(particle.getHidString(), particle);
                                }
                                else {
                                    tokenDefinition.unallocatedTokens.delete(particle.getHidString());
                                }
                            }
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                }
                else if (particleGroup.containsParticle(atommodel_1.RadixUnallocatedTokensParticle)
                    && particleGroup.containsParticle(atommodel_1.RadixTransferrableTokensParticle)) {
                    try {
                        // Mint or burn
                        for (var _h = (e_6 = void 0, tslib_1.__values(particleGroup.getParticles())), _j = _h.next(); !_j.done; _j = _h.next()) {
                            var spunParticle = _j.value;
                            if (spunParticle.particle instanceof atommodel_1.RadixUnallocatedTokensParticle) {
                                var particle = spunParticle.particle;
                                tokenDefinition = this.getOrCreateTokenDefinition(particle.getTokenDefinitionReference());
                                if (spunParticle.spin === atommodel_1.RadixSpin.DOWN) {
                                    tokenDefinition.unallocatedTokens.set(particle.getHidString(), particle);
                                    tokenDefinition.addTotalSupply(particle.getAmount().neg());
                                }
                                else {
                                    tokenDefinition.unallocatedTokens.delete(particle.getHidString());
                                    tokenDefinition.addTotalSupply(particle.getAmount());
                                }
                            }
                        }
                    }
                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
                    finally {
                        try {
                            if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                        }
                        finally { if (e_6) throw e_6.error; }
                    }
                }
                if (tokenDefinition) {
                    this.tokenDefinitionSubject.next(tokenDefinition);
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_4) throw e_4.error; }
        }
    };
    RadixTokenDefinitionAccountSystem.prototype.createOrUpdateTokenDefinition = function (particle) {
        var reference = particle.getTokenDefinitionReference();
        var tokenDefinition = this.getOrCreateTokenDefinition(reference);
        tokenDefinition.symbol = reference.getName();
        tokenDefinition.name = particle.name;
        tokenDefinition.description = particle.description;
        tokenDefinition.granularity = particle.granularity;
        tokenDefinition.iconUrl = particle.iconUrl;
        var mintPermissions = particle.permissions.mint;
        if (mintPermissions === atommodel_1.RadixTokenPermissionsValues.TOKEN_CREATION_ONLY || mintPermissions === atommodel_1.RadixTokenPermissionsValues.NONE) {
            tokenDefinition.tokenSupplyType = RadixTokenDefinition_1.RadixTokenSupplyType.FIXED;
        }
        else if (mintPermissions === atommodel_1.RadixTokenPermissionsValues.TOKEN_OWNER_ONLY || mintPermissions === atommodel_1.RadixTokenPermissionsValues.ALL) {
            tokenDefinition.tokenSupplyType = RadixTokenDefinition_1.RadixTokenSupplyType.MUTABLE;
        }
        else {
            throw new Error("Token particle with MINT permissions " + mintPermissions + " not supported");
        }
        this.tokenDefinitionSubject.next(tokenDefinition);
    };
    RadixTokenDefinitionAccountSystem.prototype.getOrCreateTokenDefinition = function (reference) {
        if (!this.tokenDefinitions.has(reference.getName())) {
            this.tokenDefinitions.set(reference.getName(), new RadixTokenDefinition_1.RadixTokenDefinition(reference.address, reference.getName()));
        }
        return this.tokenDefinitions.get(reference.getName());
    };
    RadixTokenDefinitionAccountSystem.prototype.getTokenDefinition = function (symbol) {
        if (this.tokenDefinitions.has(symbol)) {
            return this.tokenDefinitions.get(symbol);
        }
        return null;
    };
    // Subscribe for symbol
    RadixTokenDefinitionAccountSystem.prototype.getTokenDefinitionObservable = function (symbol) {
        var _this = this;
        return rxjs_1.Observable.create(function (observer) {
            if (_this.tokenDefinitions.has(symbol)) {
                observer.next(_this.tokenDefinitions.get(symbol));
            }
            _this.tokenDefinitionSubject
                .pipe(operators_1.filter(function (x) { return x.symbol === symbol; }))
                .subscribe(observer);
        });
    };
    RadixTokenDefinitionAccountSystem.prototype.getAllTokenDefinitionObservable = function () {
        return this.tokenDefinitionSubject.share();
    };
    return RadixTokenDefinitionAccountSystem;
}());
exports.RadixTokenDefinitionAccountSystem = RadixTokenDefinitionAccountSystem;
//# sourceMappingURL=data:application/json;base64,