"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var typescript_map_1 = require("typescript-map");
var atommodel_1 = require("../atommodel");
var RadixDecryptionAccountSystem_1 = require("./RadixDecryptionAccountSystem");
var bn_js_1 = tslib_1.__importDefault(require("bn.js"));
var RadixTokenManager_1 = require("../token/RadixTokenManager");
var decimal_js_1 = tslib_1.__importDefault(require("decimal.js"));
var RadixTokenDefinition_1 = require("../token/RadixTokenDefinition");
var RadixTransferAccountSystem = /** @class */ (function () {
    function RadixTransferAccountSystem(address) {
        this.address = address;
        this.name = 'TRANSFER';
        this.transactions = new typescript_map_1.TSMap();
        this.balance = {};
        this.tokenUnitsBalance = {};
        this.transactionSubject = new rxjs_1.Subject();
        this.unspentConsumables = new typescript_map_1.TSMap();
        this.spentConsumables = new typescript_map_1.TSMap();
        // Add default radix token to balance
        this.balance[RadixTokenManager_1.radixTokenManager.nativeToken.toString()] = new bn_js_1.default(0);
        this.balanceSubject = new rxjs_1.BehaviorSubject(this.balance);
        this.tokenUnitsBalance[RadixTokenManager_1.radixTokenManager.nativeToken.toString()] = new decimal_js_1.default(0);
        this.tokenUnitsBalanceSubject = new rxjs_1.BehaviorSubject(this.tokenUnitsBalance);
    }
    RadixTransferAccountSystem.prototype.processAtomUpdate = function (atomUpdate) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var atom;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        atom = atomUpdate.atom;
                        if (!atom.containsParticle(atommodel_1.RadixTransferrableTokensParticle)) {
                            return [2 /*return*/];
                        }
                        if (!(atomUpdate.action === 'STORE')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.processStoreAtom(atomUpdate)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        if (!(atomUpdate.action === 'DELETE')) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.processDeleteAtom(atomUpdate)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    RadixTransferAccountSystem.prototype.processStoreAtom = function (atomUpdate) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var atom, transactionUpdate, transaction, consumables, consumables_1, consumables_1_1, consumable, spin, particle, tokenClassReference, ownedByMe, quantity, hid, numberOfParticipants, tokenId;
            var e_1, _a;
            return tslib_1.__generator(this, function (_b) {
                atom = atomUpdate.atom;
                // Skip existing atoms
                if (this.transactions.has(atom.getAidString())) {
                    return [2 /*return*/];
                }
                transactionUpdate = {
                    action: 'STORE',
                    aid: atom.getAidString(),
                    transaction: {
                        aid: atom.getAidString(),
                        balance: {},
                        tokenUnitsBalance: {},
                        fee: 0,
                        participants: {},
                        timestamp: atom.getTimestamp(),
                        message: '',
                        unique: atom.getParticlesOfType(atommodel_1.RadixUniqueParticle).map(function (p) { return p.getRRI().toString(); }),
                    },
                };
                transaction = transactionUpdate.transaction;
                // Get transaction message
                if (atomUpdate.processedData.decryptedData
                    && atomUpdate.processedData.decryptedData.decryptionState !== RadixDecryptionAccountSystem_1.RadixDecryptionState.CANNOT_DECRYPT) {
                    transaction.message = atomUpdate.processedData.decryptedData.data;
                }
                consumables = atom.getSpunParticlesOfType(atommodel_1.RadixTransferrableTokensParticle);
                try {
                    // Get transaction details
                    for (consumables_1 = tslib_1.__values(consumables), consumables_1_1 = consumables_1.next(); !consumables_1_1.done; consumables_1_1 = consumables_1.next()) {
                        consumable = consumables_1_1.value;
                        spin = consumable.spin;
                        particle = consumable.particle;
                        tokenClassReference = particle.getTokenDefinitionReference();
                        ownedByMe = particle.getOwner().equals(this.address);
                        // TODO: Implement Fees when they change to token fees
                        // Assumes POW fee
                        if (ownedByMe) {
                            quantity = new bn_js_1.default(0);
                            hid = particle.getHidString();
                            if (spin === atommodel_1.RadixSpin.DOWN) {
                                quantity.isub(particle.getAmount());
                                this.unspentConsumables.delete(hid);
                                this.spentConsumables.set(hid, particle);
                            }
                            else if (spin === atommodel_1.RadixSpin.UP) {
                                quantity.iadd(particle.getAmount());
                                if (!this.spentConsumables.has(hid)) {
                                    this.unspentConsumables.set(hid, particle);
                                }
                            }
                            if (!(tokenClassReference.toString() in transaction.balance)) {
                                transaction.balance[tokenClassReference.toString()] = new bn_js_1.default(0);
                            }
                            transaction.balance[tokenClassReference.toString()].iadd(quantity);
                        }
                        else {
                            transaction.participants[particle.getOwner().toString()] = particle.getOwner();
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (consumables_1_1 && !consumables_1_1.done && (_a = consumables_1.return)) _a.call(consumables_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                // Not a transfer
                if (Object.keys(transaction.balance).length === 0) {
                    return [2 /*return*/];
                }
                numberOfParticipants = Object.keys(transaction.participants).length;
                if (numberOfParticipants > 2) {
                    throw new Error("Invalid number of transaction participants = " + numberOfParticipants);
                }
                // Update balance
                for (tokenId in transaction.balance) {
                    // Load tokenclass from network
                    // const tokenClass = await radixTokenManager.getTokenClass(tokenId)
                    if (!(tokenId in this.balance) || !this.balance[tokenId]) {
                        this.balance[tokenId] = new bn_js_1.default(0);
                    }
                    this.balance[tokenId].iadd(transaction.balance[tokenId]);
                    // Token units
                    transaction.tokenUnitsBalance[tokenId] = RadixTokenDefinition_1.RadixTokenDefinition.fromSubunitsToDecimal(transaction.balance[tokenId]);
                    if (!(tokenId in this.tokenUnitsBalance) || !this.balance[tokenId]) {
                        this.tokenUnitsBalance[tokenId] = new decimal_js_1.default(0);
                    }
                    this.tokenUnitsBalance[tokenId] = this.tokenUnitsBalance[tokenId].add(transaction.tokenUnitsBalance[tokenId]);
                }
                this.transactions.set(transactionUpdate.aid, transaction);
                this.balanceSubject.next(this.balance);
                this.tokenUnitsBalanceSubject.next(this.tokenUnitsBalance);
                this.transactionSubject.next(transactionUpdate);
                return [2 /*return*/];
            });
        });
    };
    RadixTransferAccountSystem.prototype.processDeleteAtom = function (atomUpdate) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var atom, id, transaction, transactionUpdate, tokenId;
            return tslib_1.__generator(this, function (_a) {
                atom = atomUpdate.atom;
                // Skip nonexisting atoms
                if (!this.transactions.has(atom.getAidString())) {
                    return [2 /*return*/];
                }
                id = atom.getAidString();
                transaction = this.transactions.get(id);
                transactionUpdate = {
                    action: 'DELETE',
                    aid: id,
                    transaction: transaction,
                };
                // Update balance
                for (tokenId in transaction.balance) {
                    // Load tokenclass from network
                    // const tokenClass = await radixTokenManager.getTokenClass(tokenId)
                    if (!(tokenId in this.balance) || !this.balance[tokenId]) {
                        this.balance[tokenId] = new bn_js_1.default(0);
                    }
                    this.balance[tokenId].isub(transaction.balance[tokenId]);
                    // Token units
                    transaction.tokenUnitsBalance[tokenId] = RadixTokenDefinition_1.RadixTokenDefinition.fromSubunitsToDecimal(transaction.balance[tokenId]);
                    if (!(tokenId in this.tokenUnitsBalance) || !this.balance[tokenId]) {
                        this.tokenUnitsBalance[tokenId] = new decimal_js_1.default(0);
                    }
                    this.tokenUnitsBalance[tokenId] = this.tokenUnitsBalance[tokenId].sub(transaction.tokenUnitsBalance[tokenId]);
                }
                this.transactions.delete(transactionUpdate.aid);
                this.balanceSubject.next(this.balance);
                this.tokenUnitsBalanceSubject.next(this.tokenUnitsBalance);
                this.transactionSubject.next(transactionUpdate);
                return [2 /*return*/];
            });
        });
    };
    RadixTransferAccountSystem.prototype.getAllTransactions = function () {
        var _this = this;
        return rxjs_1.Observable.create(function (observer) {
            var e_2, _a;
            try {
                // Send all old transactions
                for (var _b = tslib_1.__values(_this.transactions.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var transaction = _c.value;
                    var transactionUpdate = {
                        action: 'STORE',
                        aid: transaction.aid,
                        transaction: transaction,
                    };
                    observer.next(transactionUpdate);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            // Subscribe for new ones
            _this.transactionSubject.subscribe(observer);
        });
    };
    RadixTransferAccountSystem.prototype.getUnspentConsumables = function () {
        return this.unspentConsumables.values();
    };
    RadixTransferAccountSystem.prototype.getTokenUnitsBalanceUpdates = function () {
        return this.tokenUnitsBalanceSubject.share();
    };
    return RadixTransferAccountSystem;
}());
exports.default = RadixTransferAccountSystem;
//# sourceMappingURL=data:application/json;base64,