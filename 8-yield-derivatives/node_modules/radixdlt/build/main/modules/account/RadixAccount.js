"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var typescript_map_1 = require("typescript-map");
var __1 = require("../..");
var RadixLogger_1 = require("../common/RadixLogger");
var atommodel_1 = require("../atommodel");
var RadixUtil_1 = require("../common/RadixUtil");
var RadixAccount = /** @class */ (function () {
    /**
     * Creates an instance of radix account.
     * @param address Address of the account
     * @param [plain] If set to false, will not create default account systems.
     * Use this for accounts that will not be connected to the network
     */
    function RadixAccount(address, plain) {
        var _this = this;
        if (plain === void 0) { plain = false; }
        this.address = address;
        this.accountSystems = new typescript_map_1.TSMap();
        this.synced = new rxjs_1.BehaviorSubject(false);
        this.connectionStatus = new rxjs_1.BehaviorSubject('STARTING');
        this.openNodeConnection = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a, error_1;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.connectionStatus.next('CONNECTING');
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        _a = this;
                        return [4 /*yield*/, __1.radixUniverse.getNodeConnection(this.address.getShard())];
                    case 2:
                        _a.nodeConnection = _b.sent();
                        this.nodeConnection.on('closed', this._onConnectionClosed);
                        // Subscribe to events
                        this.atomSubscription = this.nodeConnection.subscribe(this.address.toString());
                        this.atomSubscription.subscribe({
                            next: this._onAtomReceived,
                            error: function (error) { return RadixLogger_1.logger.error('Subscription error:', error); },
                        });
                        this.connectionStatus.next('CONNECTED');
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _b.sent();
                        RadixLogger_1.logger.error(error_1);
                        setTimeout(this._onConnectionClosed, 1000);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Unsubscribes the node connection to the stream of past and future atoms associated with this address account
         *
         * @returns A promise with the result of the unsubscription call
         */
        this.closeNodeConnection = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.connectionStatus.next('DISCONNECTED');
                if (this.nodeConnection) {
                    this.nodeConnection.removeListener('closed', this._onConnectionClosed);
                    return [2 /*return*/, this.nodeConnection.unsubscribe(this.getAddress())];
                }
                return [2 /*return*/];
            });
        }); };
        this._onAtomReceived = function (atomUpdate) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a, _b, system, e_1_1;
            var e_1, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 5, 6, 7]);
                        _a = tslib_1.__values(this.accountSystems.values()), _b = _a.next();
                        _d.label = 1;
                    case 1:
                        if (!!_b.done) return [3 /*break*/, 4];
                        system = _b.value;
                        return [4 /*yield*/, system.processAtomUpdate(atomUpdate)];
                    case 2:
                        _d.sent();
                        _d.label = 3;
                    case 3:
                        _b = _a.next();
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 7];
                    case 6:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 7:
                        this.synced.next(atomUpdate.isHead);
                        return [2 /*return*/];
                }
            });
        }); };
        this._onConnectionClosed = function () {
            // Get a new one
            _this.openNodeConnection();
        };
        if (!plain) {
            this.cacheSystem = new __1.RadixCacheAccountSystem(address);
            this.addAccountSystem(this.cacheSystem);
            this.decryptionSystem = new __1.RadixDecryptionAccountSystem();
            this.addAccountSystem(this.decryptionSystem);
            this.tokenDefinitionSystem = new __1.RadixTokenDefinitionAccountSystem(address);
            this.addAccountSystem(this.tokenDefinitionSystem);
            this.transferSystem = new __1.RadixTransferAccountSystem(address);
            this.addAccountSystem(this.transferSystem);
            this.dataSystem = new __1.RadixDataAccountSystem(address);
            this.addAccountSystem(this.dataSystem);
            this.messagingSystem = new __1.RadixMessagingAccountSystem(address);
            this.addAccountSystem(this.messagingSystem);
        }
    }
    /**
     * Create an instance of radix account from an address
     * @param address string address
     * @param [plain] If set to false, will not create default account systems.
     * Use this for accounts that will not be connected to the network
     * @returns
     */
    RadixAccount.fromAddress = function (address, plain) {
        if (plain === void 0) { plain = false; }
        return new RadixAccount(atommodel_1.RadixAddress.fromAddress(address), plain);
    };
    /**
     * Create an instance of a Radix account from an arbitrary byte buffer. This
     * could e.g. be a friendly name of an account, in which case it would be
     * created as <code>Buffer.from('friendly name')</code>.
     *
     * @param seed Buffer seed for the address
     * @param [plain] If set to true, will not create default account systems.
     * Use this for accounts that will not be connected to the network.
     * @returns a new Radix account.
     */
    RadixAccount.fromSeed = function (seed, plain) {
        if (plain === void 0) { plain = false; }
        var hash = RadixUtil_1.radixHash(seed);
        return new RadixAccount(atommodel_1.RadixAddress.fromPrivate(hash), plain);
    };
    RadixAccount.prototype.enableDecryption = function (decryptionProvider) {
        this.decryptionSystem.decryptionProvider = decryptionProvider;
    };
    RadixAccount.prototype.enableCache = function (cacheProvider) {
        var _this = this;
        this.cacheSystem.atomCache = cacheProvider;
        // Load atoms from cache
        return this.cacheSystem.loadAtoms().then(function (atoms) {
            var e_2, _a;
            try {
                for (var atoms_1 = tslib_1.__values(atoms), atoms_1_1 = atoms_1.next(); !atoms_1_1.done; atoms_1_1 = atoms_1.next()) {
                    var atom = atoms_1_1.value;
                    _this._onAtomReceived({
                        action: 'STORE',
                        atom: atom,
                        processedData: {},
                        isHead: false,
                    });
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (atoms_1_1 && !atoms_1_1.done && (_a = atoms_1.return)) _a.call(atoms_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    };
    RadixAccount.prototype.getAddress = function () {
        return this.address.getAddress();
    };
    RadixAccount.prototype.addAccountSystem = function (system) {
        if (this.accountSystems.has(system.name)) {
            throw new Error("System \"" + system.name + "\" already exists in account, you can only have one of each system per account");
        }
        this.accountSystems.set(system.name, system);
        return system;
    };
    RadixAccount.prototype.removeAccountSystem = function (name) {
        if (this.accountSystems.has(name)) {
            this.accountSystems.delete(name);
        }
    };
    RadixAccount.prototype.getSystem = function (name) {
        if (this.accountSystems.has(name)) {
            return this.accountSystems.get(name);
        }
        throw new Error("System \"" + name + "\" doesn't exist in account");
    };
    /**
     * An observable that tells you when the account is in sync with the network
     *
     * @returns An observable which sends 'true' whenever the account has received and processed new information form the network
     */
    RadixAccount.prototype.isSynced = function () {
        return this.synced.share();
    };
    return RadixAccount;
}());
exports.default = RadixAccount;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhBY2NvdW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvYWNjb3VudC9SYWRpeEFjY291bnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkJBQTJEO0FBQzNELGlEQUFzQztBQUV0QywyQkFXZTtBQUdmLHFEQUE4QztBQUM5QywwQ0FBNkQ7QUFDN0QsaURBQWdEO0FBRWhEO0lBZ0JJOzs7OztPQUtHO0lBQ0gsc0JBQXFCLE9BQXFCLEVBQUUsS0FBYTtRQUF6RCxpQkFvQkM7UUFwQjJDLHNCQUFBLEVBQUEsYUFBYTtRQUFwQyxZQUFPLEdBQVAsT0FBTyxDQUFjO1FBcEJsQyxtQkFBYyxHQUFzQyxJQUFJLHNCQUFLLEVBQUUsQ0FBQTtRQUUvRCxXQUFNLEdBQTZCLElBQUksc0JBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUU5RCxxQkFBZ0IsR0FBNEIsSUFBSSxzQkFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBMkgzRSx1QkFBa0IsR0FBRzs7Ozs7d0JBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUE7Ozs7d0JBR3BDLEtBQUEsSUFBSSxDQUFBO3dCQUFrQixxQkFBTSxpQkFBYSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBQTs7d0JBQXBGLEdBQUssY0FBYyxHQUFHLFNBQThELENBQUE7d0JBQ3BGLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQTt3QkFFMUQsc0JBQXNCO3dCQUN0QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO3dCQUU5RSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxD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