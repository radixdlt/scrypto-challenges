"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var typescript_map_1 = require("typescript-map");
var operators_1 = require("rxjs/operators");
var atommodel_1 = require("../atommodel");
var RadixDataAccountSystem = /** @class */ (function () {
    function RadixDataAccountSystem(address) {
        this.address = address;
        this.name = 'DATA';
        this.applicationDataSubject = new rxjs_1.Subject();
        this.applicationData = new typescript_map_1.TSMap();
    }
    RadixDataAccountSystem.prototype.processAtomUpdate = function (atomUpdate) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                if (!('decryptedData' in atomUpdate.processedData)) {
                    return [2 /*return*/];
                }
                if (atomUpdate.action === 'STORE') {
                    this.processStoreAtom(atomUpdate);
                }
                else if (atomUpdate.action === 'DELETE') {
                    this.processDeleteAtom(atomUpdate);
                }
                return [2 /*return*/];
            });
        });
    };
    RadixDataAccountSystem.prototype.processStoreAtom = function (atomUpdate) {
        var atom = atomUpdate.atom;
        var aid = atom.getAidString();
        var signatures = atom.signatures;
        var applicationId = atomUpdate.processedData.decryptedData.application;
        // Skip existing atoms
        if (this.applicationData.has(applicationId) &&
            this.applicationData.get(applicationId).has(aid)) {
            return;
        }
        var applicationData = {
            aid: aid,
            payload: atomUpdate.processedData.decryptedData,
            timestamp: atom.getTimestamp(),
            signatures: signatures,
        };
        var applicationDataUpdate = {
            action: 'STORE',
            aid: aid,
            applicationId: applicationId,
            data: applicationData,
            signatures: signatures,
        };
        if (!this.applicationData.has(applicationId)) {
            this.applicationData.set(applicationId, new typescript_map_1.TSMap());
        }
        this.applicationData.get(applicationId).set(aid, applicationData);
        this.applicationDataSubject.next(applicationDataUpdate);
    };
    RadixDataAccountSystem.prototype.processDeleteAtom = function (atomUpdate) {
        var atom = atomUpdate.atom;
        var aid = atom.getAidString();
        var signatures = atom.signatures;
        var applicationId = atomUpdate.processedData.decryptedData.application;
        // Skip nonexisting atoms
        if (!this.applicationData.has(applicationId) ||
            !this.applicationData.get(applicationId).has(aid)) {
            return;
        }
        var applicationData = this.applicationData.get(applicationId).get(aid);
        var applicationDataUpdate = {
            action: 'DELETE',
            aid: aid,
            applicationId: applicationId,
            data: applicationData,
            signatures: signatures,
        };
        this.applicationData.get(applicationId).delete(aid);
        this.applicationDataSubject.next(applicationDataUpdate);
    };
    /**
     * Gets application data messages by application id and optionally by signer
     *
     * @param applicationId - Application id of the payload atoms
     * @param [addresses] - List of account addreses to filter application messages by signer
     * @returns An observable subscribed to old and new application messages that met the filter requirements
     */
    RadixDataAccountSystem.prototype.getApplicationData = function (applicationId, addresses) {
        var _this = this;
        // Pre-calculate signatureIds
        var signatureIds = !addresses ? undefined : addresses.map(function (a) { return atommodel_1.RadixAddress.fromAddress(a).getUID().toString(); });
        return rxjs_1.Observable.create(function (observer) {
            var e_1, _a;
            // Send all old data
            if (_this.applicationData.has(applicationId)) {
                var _loop_1 = function (applicationData) {
                    if (!signatureIds
                        || signatureIds.length === 0
                        || signatureIds.some(function (s) { return Object.keys(applicationData.signatures).includes(s); })) {
                        var applicationDataUpdate = {
                            action: 'STORE',
                            aid: applicationData.aid,
                            applicationId: applicationId,
                            data: applicationData,
                            signatures: applicationData.signatures,
                        };
                        observer.next(applicationDataUpdate);
                    }
                };
                try {
                    for (var _b = tslib_1.__values(_this.applicationData
                        .get(applicationId)
                        .values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var applicationData = _c.value;
                        _loop_1(applicationData);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            // Subscribe for new ones
            _this.applicationDataSubject
                .pipe(operators_1.filter(function (update) {
                return update.applicationId === applicationId
                    && (!signatureIds
                        || signatureIds.length === 0
                        || signatureIds.some(function (s) { return Object.keys(update.signatures).includes(s); }));
            }))
                .subscribe(observer);
        });
    };
    return RadixDataAccountSystem;
}());
exports.default = RadixDataAccountSystem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhEYXRhQWNjb3VudFN5c3RlbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2FjY291bnQvUmFkaXhEYXRhQWNjb3VudFN5c3RlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBb0Q7QUFDcEQsaURBQXNDO0FBQ3RDLDRDQUF1QztBQU12QywwQ0FBa0Y7QUFFbEY7SUFLSSxnQ0FBcUIsT0FBcUI7UUFBckIsWUFBTyxHQUFQLE9BQU8sQ0FBYztRQUpuQyxTQUFJLEdBQUcsTUFBTSxDQUFBO1FBQ2IsMkJBQXNCLEdBQXdDLElBQUksY0FBTyxFQUFFLENBQUE7UUFDM0Usb0JBQWUsR0FBdUQsSUFBSSxzQkFBSyxFQUFFLENBQUE7SUFFM0MsQ0FBQztJQUVqQyxrREFBaUIsR0FBOUIsVUFBK0IsVUFBMkI7OztnQkFDdEQsSUFBSSxDQUFDLENBQUMsZUFBZSxJQUFJLFVBQVUsQ0FBQyxhQUFhLENBQUMsRUFBRTtvQkFDaEQsc0JBQU07aUJBQ1Q7Z0JBRUQsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLE9BQU8sRUFBRTtvQkFDL0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFBO2lCQUNwQztxQkFBTSxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssUUFBUSxFQUFFO29CQUN2QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUE7aUJBQ3JDOzs7O0tBQ0o7SUFFTyxpREFBZ0IsR0FBeEIsVUFBeUIsVUFBMkI7UUFDaEQsSUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQTtRQUM1QixJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUE7UUFDL0IsSUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQTtRQUNsQyxJQUFNLGFBQWEsR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUE7UUFF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