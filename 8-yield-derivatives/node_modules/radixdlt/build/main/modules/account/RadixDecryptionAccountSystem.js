"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var atommodel_1 = require("../atommodel");
var RadixDecryptionState;
(function (RadixDecryptionState) {
    RadixDecryptionState["DECRYPTED"] = "DECRYPTED";
    RadixDecryptionState["NOT_ENCRYPTED"] = "NOT_ENCRYPTED";
    RadixDecryptionState["CANNOT_DECRYPT"] = "CANNOT_DECRYPT";
})(RadixDecryptionState = exports.RadixDecryptionState || (exports.RadixDecryptionState = {}));
var RadixDecryptionAccountSystem = /** @class */ (function () {
    function RadixDecryptionAccountSystem(decryptionProvider) {
        this.name = 'DECRYPTION';
        if (decryptionProvider) {
            this.decryptionProvider = decryptionProvider;
        }
    }
    RadixDecryptionAccountSystem.prototype.processAtomUpdate = function (atomUpdate) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var atom, messageParticles, dataParticle, encryptorParticle, decryptedData, protectors, payload, decrypted, error_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        atom = atomUpdate.atom;
                        messageParticles = atom.getParticlesOfType(atommodel_1.RadixMessageParticle);
                        dataParticle = messageParticles.find(function (p) {
                            return p.getMetaData('application') !== 'encryptor';
                        });
                        encryptorParticle = messageParticles.find(function (p) {
                            return p.getMetaData('application') === 'encryptor';
                        });
                        if (!(dataParticle)) {
                            return [2 /*return*/];
                        }
                        if (!encryptorParticle) return [3 /*break*/, 5];
                        protectors = encryptorParticle.getData().asJSON().map(function (p) { return Buffer.from(p, 'base64'); });
                        payload = dataParticle.getData().bytes;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.decryptionProvider.decryptECIESPayloadWithProtectors(protectors, payload)];
                    case 2:
                        decrypted = _a.sent();
                        decryptedData = {
                            data: decrypted.toString(),
                            decryptionState: RadixDecryptionState.DECRYPTED,
                            application: dataParticle.getMetaData('application'),
                            from: dataParticle.from,
                            to: dataParticle.getAddresses(),
                        };
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        decryptedData = {
                            data: dataParticle.getData().toString(),
                            decryptionState: RadixDecryptionState.CANNOT_DECRYPT,
                            application: dataParticle.getMetaData('application'),
                            from: dataParticle.from,
                            to: dataParticle.getAddresses(),
                        };
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        decryptedData = {
                            data: dataParticle.getData().bytes.toString(),
                            decryptionState: RadixDecryptionState.NOT_ENCRYPTED,
                            application: dataParticle.getMetaData('application'),
                            from: dataParticle.from,
                            to: dataParticle.getAddresses(),
                        };
                        _a.label = 6;
                    case 6:
                        atomUpdate.processedData.decryptedData = decryptedData;
                        return [2 /*return*/];
                }
            });
        });
    };
    return RadixDecryptionAccountSystem;
}());
exports.RadixDecryptionAccountSystem = RadixDecryptionAccountSystem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhEZWNyeXB0aW9uQWNjb3VudFN5c3RlbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2FjY291bnQvUmFkaXhEZWNyeXB0aW9uQWNjb3VudFN5c3RlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFJQSwwQ0FBNkY7QUFHN0YsSUFBWSxvQkFJWDtBQUpELFdBQVksb0JBQW9CO0lBQzVCLCtDQUF1QixDQUFBO0lBQ3ZCLHVEQUErQixDQUFBO0lBQy9CLHlEQUFpQyxDQUFBO0FBQ3JDLENBQUMsRUFKVyxvQkFBb0IsR0FBcEIsNEJBQW9CLEtBQXBCLDRCQUFvQixRQUkvQjtBQVVEO0lBSUksc0NBQVksa0JBQTRDO1FBSGpELFNBQUksR0FBRyxZQUFZLENBQUE7UUFJdEIsSUFBSSxrQkFBa0IsRUFBRTtZQUNwQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUE7U0FDL0M7SUFDTCxDQUFDO0lBRVksd0RBQWlCLEdBQTlCLFVBQStCLFVBQTJCOzs7Ozs7d0JBQ2hELElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFBO3dCQUN0QixnQkFBZ0IsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsZ0NBQW9CLENBQUMsQ0FBQTt3QkFFaEUsWUFBWSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFBLENBQUM7NEJBQ3hDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsS0FBSyxXQUFXLENBQUE7d0JBQ3ZELENBQUMsQ0FBQyxDQUFBO3dCQUVJLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFBLENBQUM7NEJBQzdDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsS0FBSyxXQUFXLENBQUE7d0JBQ3ZELENBQUMsQ0FBQyxDQUFBO3dCQUVGLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFOzRCQUNqQixzQkFBTTt5QkFDVDs2QkFLRyxpQkFBaUIsRUFBakIsd0JBQWlCO3dCQUNYLFVBQVUsR0FBSSxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLEVBQWUsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsRUFBeEIsQ0FBd0IsQ0FBQyxDQUFBO3dCQUNsRyxPQUFPLEdBQUcsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQTs7Ozt3QkFHdEIscUJBQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGlDQUFpQyxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsRUFBQTs7d0JBQWhHLFNBQVMsR0FBRyxTQUFvRjt3QkFFdEcsYUFBYSxHQUFHOzRCQUNaLElBQUksRUFBRSxTQUFTLENBQUMsUUFBUSxFQUFFOzRCQUMxQixlQUFlLEVBQUUsb0JBQW9CLENBQUMsU0FBUzs0QkFDL0MsV0FBVyxFQUFFLFlBQVksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDOzRCQUNwRCxJQUFJLEVBQUUsWUFBWSxDQUFDLElBQUk7NEJBQ3ZCLEVBQUUsRUFBRSxZQUFZLENBQUMsWUFBWSxFQUFFO3lCQUNsQyxDQUFBOzs7O3dCQUVELGFBQWEsR0FBRzs0QkFDWixJQUFJLEVBQUUsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRTs0QkFDdkMsZUFBZSxFQUFFLG9CQUFvQixDQUFDLGNBQWM7NEJBQ3BELFdBQVcsRUFBRSxZQUFZLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQzs0QkFDcEQsSUFBSSxFQUFFLFlBQVksQ0FBQyxJQUFJOzRCQUN2QixFQUFFLEVBQUUsWUFBWSxDQUFDLFlBQVksRUFBRTt5QkFDbEMsQ0FBQTs7Ozt3QkFHTCxhQUFhLEdBQUc7NEJBQ1osSUFBSSxFQUFFLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFOzRCQUM3QyxlQUFlLEVBQUUsb0JBQW9CLENBQUMsYUFBYTs0QkFDbkQsV0FBVyxFQUFFLFlBQVksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDOzRCQUNwRCxJQUFJLEVBQUUsWUFBWSxDQUFDLElBQUk7NEJBQ3ZCLEVBQUUsRUFBRSxZQUFZLENBQUMsWUFBWSxFQUFFO3lCQUNsQyxDQUFBOzs7d0JBR0wsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFBOzs7OztLQUV6RDtJQUNMLG1DQUFDO0FBQUQsQ0FBQyxBQWpFRCxJQWlFQztBQWpFWSxvRUFBNEIifQ==