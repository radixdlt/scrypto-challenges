"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var __1 = require("../..");
var atommodel_1 = require("../atommodel");
var rxjs_1 = require("rxjs");
var typescript_map_1 = require("typescript-map");
var operators_1 = require("rxjs/operators");
var RadixTokenDefinition_1 = require("./RadixTokenDefinition");
/**
 * A singleton class for loading information about tokens
 */
var RadixTokenManager = /** @class */ (function () {
    function RadixTokenManager() {
        this.tokens = {};
        this.tokenSubscriptions = new typescript_map_1.TSMap();
        this.accounts = new typescript_map_1.TSMap();
        this.allTokenUpdateSubject = new rxjs_1.Subject();
        this.initialized = false;
    }
    RadixTokenManager.prototype.initialize = function (genesis, nativeToken) {
        var e_1, _a;
        this.nativeToken = nativeToken;
        var systemAccount = new __1.RadixAccount(nativeToken.address);
        try {
            for (var genesis_1 = tslib_1.__values(genesis), genesis_1_1 = genesis_1.next(); !genesis_1_1.done; genesis_1_1 = genesis_1.next()) {
                var atom = genesis_1_1.value;
                systemAccount._onAtomReceived({
                    action: 'STORE',
                    atom: atom,
                    processedData: {},
                    isHead: false,
                });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (genesis_1_1 && !genesis_1_1.done && (_a = genesis_1.return)) _a.call(genesis_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.accounts.set(systemAccount.getAddress(), systemAccount);
        this.addTokenDefinitionSubscription(nativeToken.toString());
        this.initialized = true;
    };
    RadixTokenManager.prototype.getTokenDefinitionObservable = function (referenceURI) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkInitialized();
                        if (!!this.tokenSubscriptions.has(referenceURI)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.addTokenDefinitionSubscription(referenceURI)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, this.tokenSubscriptions.get(referenceURI).share()];
                }
            });
        });
    };
    RadixTokenManager.prototype.addTokenDefinitionSubscription = function (referenceURI) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var reference, account, placeholderTokenDefinition, bs;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        reference = atommodel_1.RRI.fromString(referenceURI);
                        return [4 /*yield*/, this.getAccount(reference.getAddress())];
                    case 1:
                        account = _a.sent();
                        placeholderTokenDefinition = new RadixTokenDefinition_1.RadixTokenDefinition(reference.getAddress(), reference.getName());
                        bs = new rxjs_1.BehaviorSubject(placeholderTokenDefinition);
                        account.tokenDefinitionSystem.getTokenDefinitionObservable(reference.getName()).subscribe(bs);
                        this.tokenSubscriptions.set(referenceURI, bs);
                        bs.subscribe(function (tokenDefinition) {
                            _this.tokens[referenceURI] = tokenDefinition;
                        });
                        bs.subscribe(this.allTokenUpdateSubject);
                        return [2 /*return*/];
                }
            });
        });
    };
    RadixTokenManager.prototype.getTokenDefinition = function (referenceURI) {
        var _this = this;
        this.checkInitialized();
        return new Promise(function (resolve, reject) {
            var reference = atommodel_1.RRI.fromString(referenceURI);
            _this.getAccount(reference.getAddress()).then(function (account) {
                account.isSynced().pipe(operators_1.filter(function (val) { return val === true; }), operators_1.take(1), operators_1.timeout(5000)).subscribe(null, function (error) { reject(new Error('Timeout tying to fetch token information from network')); }, function () {
                    // Account is synced
                    var tokenDefinition = account.tokenDefinitionSystem.getTokenDefinition(reference.getName());
                    if (tokenDefinition) {
                        resolve(tokenDefinition);
                    }
                    else {
                        reject(new Error('Token definition does not exist in the account'));
                    }
                });
            });
        });
    };
    RadixTokenManager.prototype.getTokenDefinitionNoLoad = function (referenceURI) {
        return this.tokens[referenceURI];
    };
    RadixTokenManager.prototype.getAccount = function (address) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var account;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.accounts.has(address.toString())) return [3 /*break*/, 1];
                        return [2 /*return*/, this.accounts.get(address.toString())];
                    case 1:
                        account = new __1.RadixAccount(address);
                        return [4 /*yield*/, account.openNodeConnection()];
                    case 2:
                        _a.sent();
                        this.accounts.set(address.toString(), account);
                        return [2 /*return*/, account];
                }
            });
        });
    };
    RadixTokenManager.prototype.checkInitialized = function () {
        if (!this.initialized) {
            throw new Error('Token Manager not initialized');
        }
    };
    RadixTokenManager.prototype.getAllTokenDefinitionUpdates = function () {
        return this.allTokenUpdateSubject.share();
    };
    /**
     * Return a list of the current tokens in the manager.
     *
     * @returns
     * @memberof RadixToken
     */
    RadixTokenManager.prototype.getCurrentTokens = function () {
        this.checkInitialized();
        return this.tokens;
    };
    return RadixTokenManager;
}());
exports.RadixTokenManager = RadixTokenManager;
exports.radixTokenManager = new RadixTokenManager();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhUb2tlbk1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy90b2tlbi9SYWRpeFRva2VuTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQkFBb0M7QUFDcEMsMENBQTJEO0FBQzNELDZCQUEyRDtBQUMzRCxpREFBc0M7QUFDdEMsNENBQW1FO0FBQ25FLCtEQUE4RDtBQUU5RDs7R0FFRztBQUNIO0lBQUE7UUFDVyxXQUFNLEdBQTJDLEVBQUUsQ0FBQTtRQUVsRCx1QkFBa0IsR0FBeUQsSUFBSSxzQkFBSyxFQUFFLENBQUE7UUFDdkYsYUFBUSxHQUFnQyxJQUFJLHNCQUFLLEVBQUUsQ0FBQTtRQUNsRCwwQkFBcUIsR0FBa0MsSUFBSSxjQUFPLEVBQUUsQ0FBQTtRQUlwRSxnQkFBVyxHQUFHLEtBQUssQ0FBQTtJQXFIL0IsQ0FBQztJQW5IVSxzQ0FBVSxHQUFqQixVQUFrQixPQUFvQixFQUFFLFdBQWdCOztRQUNwRCxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQTtRQUU5QixJQUFNLGFBQWEsR0FBRyxJQUFJLGdCQUFZLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFBOztZQUUzRCxLQUFtQixJQUFBLFlBQUEsaUJBQUEsT0FBTyxDQUFBLGdDQUFBLHFEQUFFO2dCQUF2QixJQUFNLElBQUksb0JBQUE7Z0JBQ1gsYUFBYSxDQUFDLGVBQWUsQ0FBQztvQkFDMUIsTUFBTSxFQUFFLE9BQU87b0JBQ2YsSUFBSSxNQUFBO29CQUNKLGFBQWEsRUFBRSxFQUFFO29CQUNqQixNQUFNLEVBQUUsS0FBSztpQkFDaEIsQ0FBQyxDQUFBO2FBQ0w7Ozs7Ozs7OztRQUVELElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsRUFBRSxhQUFhLENBQUMsQ0FBQTtRQUU1RCxJQUFJLENBQUMsOEJBQThCLENBQUMsV0FBVyxDQUFDLFFBQVEs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