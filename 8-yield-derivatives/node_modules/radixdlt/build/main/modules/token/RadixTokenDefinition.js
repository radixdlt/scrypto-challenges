"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var bn_js_1 = tslib_1.__importDefault(require("bn.js"));
var decimal_js_1 = require("decimal.js");
var __1 = require("../..");
var typescript_map_1 = require("typescript-map");
var RadixTokenSupplyType;
(function (RadixTokenSupplyType) {
    RadixTokenSupplyType["FIXED"] = "fixed";
    RadixTokenSupplyType["MUTABLE"] = "mutable";
})(RadixTokenSupplyType = exports.RadixTokenSupplyType || (exports.RadixTokenSupplyType = {}));
var NonExpDecimal = decimal_js_1.Decimal.clone({ toExpPos: 9e15, toExpNeg: -9e15 });
var RadixTokenDefinition = /** @class */ (function () {
    function RadixTokenDefinition(address, symbol, name, description, granularity, tokenSupplyType, totalSupply, unallocatedTokens, iconUrl) {
        if (granularity === void 0) { granularity = new bn_js_1.default(1); }
        this.totalSupply = new bn_js_1.default(0);
        this.unallocatedTokens = new typescript_map_1.TSMap();
        this.address = address;
        this.symbol = symbol;
        if (name) {
            this.name = name;
        }
        if (description) {
            this.description = description;
        }
        if (tokenSupplyType) {
            this.tokenSupplyType = tokenSupplyType;
        }
        if (totalSupply) {
            this.totalSupply = totalSupply;
        }
        if (granularity) {
            this.granularity = new __1.RadixUInt256(granularity);
        }
        if (unallocatedTokens) {
            this.unallocatedTokens = unallocatedTokens;
        }
        if (iconUrl) {
            this.iconUrl = iconUrl;
        }
    }
    /**
     * Convert actual decimal token amount to integer subunits stored on the ledger
     * @param amount
     * @returns subunits
     */
    RadixTokenDefinition.fromDecimalToSubunits = function (amount) {
        var inUnits = new NonExpDecimal(amount);
        return new bn_js_1.default(inUnits
            .times(this.SUBUNITS)
            .truncated()
            .toString(), 10);
    };
    /**
     * Convert subunits token amount to actual decimal token amount
     * @param amount
     * @returns token units
     */
    RadixTokenDefinition.fromSubunitsToDecimal = function (amount) {
        var inSubunits = new NonExpDecimal(amount.toString(10));
        return new decimal_js_1.Decimal(inSubunits.dividedBy(this.SUBUNITS));
    };
    RadixTokenDefinition.prototype.addTotalSupply = function (difference) {
        this.totalSupply.iadd(new bn_js_1.default(difference));
    };
    RadixTokenDefinition.prototype.getTotalSupply = function () {
        return this.totalSupply;
    };
    RadixTokenDefinition.prototype.getTokenUnitsTotalSupply = function () {
        return RadixTokenDefinition.fromSubunitsToDecimal(this.getTotalSupply());
    };
    RadixTokenDefinition.prototype.getGranularity = function () {
        return this.granularity.value;
    };
    RadixTokenDefinition.prototype.getTokenUnitsGranularity = function () {
        return RadixTokenDefinition.fromSubunitsToDecimal(this.getGranularity());
    };
    RadixTokenDefinition.prototype.getUnallocatedTokens = function () {
        return this.unallocatedTokens.values();
    };
    RadixTokenDefinition.prototype.getUnallocatedSupply = function () {
        var e_1, _a;
        var supply = new bn_js_1.default(0);
        try {
            for (var _b = tslib_1.__values(this.getUnallocatedTokens()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var unallocatedTokens = _c.value;
                supply.iadd(unallocatedTokens.getAmount());
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return supply;
    };
    // All radix tokens are store with 18 subunits
    RadixTokenDefinition.SUBUNITS = new decimal_js_1.Decimal(10).pow(18);
    return RadixTokenDefinition;
}());
exports.RadixTokenDefinition = RadixTokenDefinition;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhUb2tlbkRlZmluaXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy90b2tlbi9SYWRpeFRva2VuRGVmaW5pdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3REFBc0I7QUFDdEIseUNBQW9DO0FBRXBDLDJCQUFvQztBQUVwQyxpREFBdUM7QUFFdkMsSUFBWSxvQkFHWDtBQUhELFdBQVksb0JBQW9CO0lBQzVCLHVDQUFlLENBQUE7SUFDZiwyQ0FBbUIsQ0FBQTtBQUN2QixDQUFDLEVBSFcsb0JBQW9CLEdBQXBCLDRCQUFvQixLQUFwQiw0QkFBb0IsUUFHL0I7QUFFRCxJQUFNLGFBQWEsR0FBRyxvQkFBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtBQUV4RTtJQWVJLDhCQUNJLE9BQXFCLEVBQ3JCLE1BQWMsRUFDZCxJQUFhLEVBQ2IsV0FBb0IsRUFDcEIsV0FBdUIsRUFDdkIsZUFBc0MsRUFDdEMsV0FBZ0IsRUFDaEIsaUJBQWlFLEVBQ2pFLE9BQWdCO1FBSmhCLDRCQUFBLEVBQUEsa0JBQWtCLGVBQUUsQ0FBQyxDQUFDLENBQUM7UUFYcEIsZ0JBQVcsR0FBTyxJQUFJLGVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUczQixzQkFBaUIsR0FBa0QsSUFBSSxzQkFBSyxFQUFFLENBQUE7UUFjakYsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDdEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7UUFFcEIsSUFBSSxJQUFJLEVBQUU7WUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtTQUFFO1FBQzlCLElBQUksV0FBVyxFQUFFO1lBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUE7U0FBRTtRQUNuRCxJQUFJLGVBQWUsRUFBRTtZQUFFLElB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