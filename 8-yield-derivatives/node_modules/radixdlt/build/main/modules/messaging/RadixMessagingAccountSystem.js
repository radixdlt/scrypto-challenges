"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var typescript_map_1 = require("typescript-map");
var RadixDecryptionAccountSystem_1 = require("../account/RadixDecryptionAccountSystem");
var RadixMessagingAccountSystem = /** @class */ (function () {
    function RadixMessagingAccountSystem(address) {
        this.address = address;
        this.name = 'RADIX-MESSAGING';
        this.messageSubject = new rxjs_1.Subject();
        this.chats = new typescript_map_1.TSMap();
        this.messages = new typescript_map_1.TSMap();
    }
    RadixMessagingAccountSystem.prototype.processAtomUpdate = function (atomUpdate) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                if (!('decryptedData' in atomUpdate.processedData) ||
                    atomUpdate.processedData.decryptedData.application !== 'message' ||
                    atomUpdate.processedData.decryptedData.decryptionState === RadixDecryptionAccountSystem_1.RadixDecryptionState.CANNOT_DECRYPT) {
                    return [2 /*return*/];
                }
                if (atomUpdate.action === 'STORE') {
                    this.processStoreAtom(atomUpdate);
                }
                else if (atomUpdate.action === 'DELETE') {
                    this.processDeleteAtom(atomUpdate);
                }
                return [2 /*return*/];
            });
        });
    };
    RadixMessagingAccountSystem.prototype.startNewChat = function (to) {
        // Create new chat
        var chatId = to.getAddress();
        if (this.chats.has(chatId)) {
            return;
        }
        var chatDescription = {
            address: to.getAddress(),
            chat_id: chatId,
            title: chatId,
            last_message_timestamp: Date.now(),
            messages: new typescript_map_1.TSMap(),
        };
        // Add at the top
        this.chats.set(chatId, chatDescription);
    };
    RadixMessagingAccountSystem.prototype.processStoreAtom = function (atomUpdate) {
        var atom = atomUpdate.atom;
        var aid = atom.getAidString();
        var signatures = atom.signatures;
        var decryptedData = atomUpdate.processedData.decryptedData;
        // Skip existing atoms
        if (this.messages.has(aid)) {
            return;
        }
        var from = decryptedData.from;
        var to = decryptedData.to.find(function (a) { return !a.equals(from); });
        if (!to) {
            throw new Error('A message needs to have at least one other recipient');
        }
        // Chat id
        var address = null;
        var isMine = false;
        if (from.equals(this.address)) {
            address = to;
            isMine = true;
        }
        else {
            address = from;
        }
        if (address === null) {
            throw new Error('Error processing a radix-message atom: neither of addresses is owned by this account');
        }
        var chatId = address.toString();
        var message = {
            aid: aid,
            chat_id: chatId,
            to: to,
            from: from,
            content: decryptedData.data,
            timestamp: atom.getTimestamp(),
            is_mine: isMine,
            encryptionState: decryptedData.decryptionState,
        };
        // Find existing chat
        // Otherwise create new chat
        if (!this.chats.has(chatId)) {
            var newChatDescription = {
                address: address.getAddress(),
                chat_id: chatId,
                title: chatId,
                last_message_timestamp: message.timestamp,
                messages: new typescript_map_1.TSMap(),
            };
            this.chats.set(chatId, newChatDescription);
        }
        var chatDescription = this.chats.get(chatId);
        if (message.timestamp > chatDescription.last_message_timestamp) {
            chatDescription.last_message_timestamp = message.timestamp;
        }
        chatDescription.messages.set(aid, message);
        // Move chat to the top
        this.chats.delete(chatId);
        this.chats.set(chatId, chatDescription);
        this.messages.set(aid, message);
        var messageUpdate = {
            action: 'STORE',
            aid: aid,
            message: message,
        };
        this.messageSubject.next(messageUpdate);
    };
    RadixMessagingAccountSystem.prototype.processDeleteAtom = function (atomUpdate) {
        var atom = atomUpdate.atom;
        var aid = atom.getAidString();
        // Skip nonexisting atoms
        if (!this.messages.has(aid)) {
            return;
        }
        var message = this.messages.get(aid);
        this.chats.get(message.chat_id).messages.delete(aid);
        this.messages.delete(aid);
        var messageUpdate = {
            action: 'DELETE',
            aid: aid,
            message: message,
        };
        this.messageSubject.next(messageUpdate);
    };
    RadixMessagingAccountSystem.prototype.getAllMessages = function () {
        var _this = this;
        return rxjs_1.Observable.create(function (observer) {
            var e_1, _a;
            try {
                // Send all old transactions
                for (var _b = tslib_1.__values(_this.messages.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var message = _c.value;
                    var messageUpdate = {
                        action: 'STORE',
                        aid: message.aid,
                        message: message,
                    };
                    observer.next(messageUpdate);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            // Subscribe for new ones
            _this.messageSubject.subscribe(observer);
        });
    };
    return RadixMessagingAccountSystem;
}());
exports.default = RadixMessagingAccountSystem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhNZXNzYWdpbmdBY2NvdW50U3lzdGVtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvbWVzc2FnaW5nL1JhZGl4TWVzc2FnaW5nQWNjb3VudFN5c3RlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBb0Q7QUFDcEQsaURBQXNDO0FBTXRDLHdGQUFtRztBQUduRztJQU9JLHFDQUFxQixPQUFxQjtRQUFyQixZQUFPLEdBQVAsT0FBTyxDQUFjO1FBTm5DLFNBQUksR0FBRyxpQkFBaUIsQ0FBQTtRQUN4QixtQkFBYyxHQUFnQyxJQUFJLGNBQU8sRUFBRSxDQUFBO1FBRTNELFVBQUssR0FBNkIsSUFBSSxzQkFBSyxFQUFFLENBQUE7UUFDN0MsYUFBUSxHQUFnQyxJQUFJLHNCQUFLLEVBQUUsQ0FBQTtJQUViLENBQUM7SUFFakMsdURBQWlCLEdBQTlCLFVBQStCLFVBQTJCOzs7Z0JBQ3RELElBQUksQ0FBQyxDQUFDLGVBQWUsSUFBSSxVQUFVLENBQUMsYUFBYSxDQUFDO29CQUM5QyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEtBQUssU0FBUztvQkFDaEUsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsZUFBZSxLQUFLLG1EQUFvQixDQUFDLGNBQWMsRUFBRTtvQkFDaEcsc0JBQU07aUJBQ1Q7Z0JBRUQsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLE9BQU8sRUFBRTtvQkFDL0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFBO2lCQUNwQztxQkFBTSxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssUUFBUSxFQUFFO29CQUN2QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUE7aUJBQ3JDOzs7O0tBQ0o7SUFFTSxrREFBWSxHQUFuQixVQUFvQixFQUFnQjtRQUNoQyxrQkFBa0I7UUFDbEIsSUFBTSxNQUFNLEdBQUcsRUFBRSxD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