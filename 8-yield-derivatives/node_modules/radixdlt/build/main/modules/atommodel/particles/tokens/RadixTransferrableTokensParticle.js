"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var __1 = require("../..");
var bn_js_1 = tslib_1.__importDefault(require("bn.js"));
/**
 *  A particle which represents an amount of consumable and consuming, tranferable fungible tokens
 *  owned by some key owner and stored in an account.
 */
var RadixTransferrableTokensParticle = /** @class */ (function (_super) {
    tslib_1.__extends(RadixTransferrableTokensParticle, _super);
    function RadixTransferrableTokensParticle(amount, granularity, address, nonce, tokenReference, tokenPermissions, planck) {
        var _this = this;
        if (amount.isZero()) {
            throw new Error('Ammount cannot be zero');
        }
        planck = planck ? planck : Math.floor(Date.now() / 60000 + 60000);
        _this = _super.call(this) || this;
        _this.address = address;
        _this.granularity = new __1.RadixUInt256(granularity);
        _this.tokenDefinitionReference = tokenReference;
        _this.amount = new __1.RadixUInt256(amount);
        _this.planck = planck;
        _this.nonce = nonce;
        _this.permissions = tokenPermissions;
        return _this;
    }
    RadixTransferrableTokensParticle.prototype.getAddress = function () {
        return this.address;
    };
    RadixTransferrableTokensParticle.prototype.getAddresses = function () {
        return [this.address];
    };
    RadixTransferrableTokensParticle.prototype.getType = function () {
        return __1.RadixFungibleType.TRANSFER;
    };
    RadixTransferrableTokensParticle.prototype.getPlanck = function () {
        return this.planck;
    };
    RadixTransferrableTokensParticle.prototype.getNonce = function () {
        return this.nonce;
    };
    RadixTransferrableTokensParticle.prototype.getTokenDefinitionReference = function () {
        return this.tokenDefinitionReference;
    };
    RadixTransferrableTokensParticle.prototype.getOwner = function () {
        return this.address;
    };
    RadixTransferrableTokensParticle.prototype.getAmount = function () {
        return this.amount.value;
    };
    RadixTransferrableTokensParticle.prototype.getGranularity = function () {
        return this.granularity.value;
    };
    RadixTransferrableTokensParticle.prototype.getTokenPermissions = function () {
        return this.permissions;
    };
    tslib_1.__decorate([
        __1.includeDSON,
        __1.includeJSON,
        tslib_1.__metadata("design:type", __1.RadixAddress)
    ], RadixTransferrableTokensParticle.prototype, "address", void 0);
    tslib_1.__decorate([
        __1.includeDSON,
        __1.includeJSON,
        tslib_1.__metadata("design:type", __1.RRI)
    ], RadixTransferrableTokensParticle.prototype, "tokenDefinitionReference", void 0);
    tslib_1.__decorate([
        __1.includeDSON,
        __1.includeJSON,
        tslib_1.__metadata("design:type", __1.RadixUInt256)
    ], RadixTransferrableTokensParticle.prototype, "granularity", void 0);
    tslib_1.__decorate([
        __1.includeDSON,
        __1.includeJSON,
        tslib_1.__metadata("design:type", Number)
    ], RadixTransferrableTokensParticle.prototype, "planck", void 0);
    tslib_1.__decorate([
        __1.includeDSON,
        __1.includeJSON,
        tslib_1.__metadata("design:type", Number)
    ], RadixTransferrableTokensParticle.prototype, "nonce", void 0);
    tslib_1.__decorate([
        __1.includeDSON,
        __1.includeJSON,
        tslib_1.__metadata("design:type", __1.RadixUInt256)
    ], RadixTransferrableTokensParticle.prototype, "amount", void 0);
    tslib_1.__decorate([
        __1.includeDSON,
        __1.includeJSON,
        tslib_1.__metadata("design:type", Object)
    ], RadixTransferrableTokensParticle.prototype, "permissions", void 0);
    RadixTransferrableTokensParticle = tslib_1.__decorate([
        __1.RadixSerializer.registerClass('radix.particles.transferrable_tokens'),
        tslib_1.__metadata("design:paramtypes", [bn_js_1.default,
            bn_js_1.default,
            __1.RadixAddress, Number, __1.RRI, Object, Number])
    ], RadixTransferrableTokensParticle);
    return RadixTransferrableTokensParticle;
}(__1.RadixParticle));
exports.RadixTransferrableTokensParticle = RadixTransferrableTokensParticle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhUcmFuc2ZlcnJhYmxlVG9rZW5zUGFydGljbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy9hdG9tbW9kZWwvcGFydGljbGVzL3Rva2Vucy9SYWRpeFRyYW5zZmVycmFibGVUb2tlbnNQYXJ0aWNsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQkFhYztBQUVkLHdEQUFzQjtBQUV0Qjs7O0dBR0c7QUFFSDtJQUFzRCw0REFBYTtJQThCL0QsMENBQ0ksTUFBVSxFQUNWLFdBQWUsRUFDZixPQUFxQixFQUNyQixLQUFhLEVBQ2IsY0FBbUIsRUFDbkIsZ0JBQXVDLEVBQ3ZDLE1BQWU7UUFQbkIsaUJBd0JDO1FBZkcsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO1NBQzVDO1FBRUQsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUE7UUFFakUsUUFBQSxpQkFBTyxTQUFBO1FBRVAsS0FBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDdEIsS0FBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGdCQUFZLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDaEQsS0FBSSxDQUFDLHdCQUF3QixHQUFHLGNBQWMsQ0FBQTtRQUM5QyxLQUFJLENBQUMsTUFBTSxHQUFHLElBQUksZ0JBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUN0QyxLQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtRQUNwQixLQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtRQUNsQixLQUFJLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFBOztJQUN2QyxDQUFDO0lBRU0scURBQVUsR0FBakI7UUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUE7SUFDdkIsQ0FBQztJQUVNLHVEQUFZLEdBQW5CO1FBQ0ksT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUN6QixDQUFDO0lBRU0sa0RBQU8sR0FBZDtRQUNJLE9BQU8scUJBQWlCLENBQUMsUUFBUSxDQUFBO0lBQ3JDLENBQUM7SUFFTSxvREFBUyxHQUFoQjtRQUNJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQTtJQUN0QixDQUFDO0lBRU0sbURBQVEsR0FBZjtRQUNJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNyQixDQUFDO0lBRU0sc0VBQTJCLEdBQWxDO1FBQ0ksT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUE7SUFDeEMsQ0FBQztJQUVNLG1EQUFRLEdBQWY7UUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUE7SUFDdkIsQ0FBQztJQUVNLG9EQUFTLEdBQWhCO1FBQ0ksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQTtJQUM1QixDQUFDO0lBRU0seURBQWMsR0FBckI7UUFDSSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFBO0lBQ2pDLENBQUM7SUFFTSw4REFBbUIsR0FBMUI7UUFDSSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUE7SUFDM0IsQ0FBQztJQTFGRDtRQUZDLGVBQVc7UUFDWCxlQUFXOzBDQUNJLGdCQUFZO3FFQUFBO0lBSTVCO1FBRkMsZUFBVztRQUNYLGVBQVc7MENBQ3FCLE9BQUc7c0ZBQUE7SUFJcEM7UUFGQyxlQUFXO1FBQ1gsZUFBVzswQ0FDUSxnQkFBWTt5RUFBQTtJQUloQztRQUZDLGVBQVc7UUFDWCxlQUFXOztvRUFDUztJQUlyQjtRQUZDLGVBQVc7UUFDWCxlQUFXOzttRUFDUTtJQUlwQjtRQUZDLGVBQVc7UUFDWCxlQUFXOzBDQUNHLGdCQUFZO29FQUFBO0lBSTNCO1FBRkMsZUFBVztRQUNYLGVBQVc7O3lFQUM2QjtJQTVCaEMsZ0NBQWdDO1FBRDVDLG1CQUFlLENBQUMsYUFBYSxDQUFDLHNDQUFzQyxDQUFDO2lEQWdDdEQsZUFBRTtZQUNHLGVBQUU7WUFDTixnQkFBWSxVQUVMLE9BQUc7T0FuQ2QsZ0NBQWdDLENBK0Y1QztJQUFELHVDQUFDO0NBQUEsQUEvRkQsQ0FBc0QsaUJBQWEsR0ErRmxFO0FBL0ZZLDRFQUFnQyJ9