"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var cbor_1 = tslib_1.__importDefault(require("cbor"));
var typescript_map_1 = require("typescript-map");
var RadixLogger_1 = require("../../common/RadixLogger");
require("reflect-metadata");
var RadixUtil_1 = require("../../common/RadixUtil");
exports.JSON_PROPERTIES_KEY = 'JSON_SERIALIZATION_PROPERTIES';
exports.DSON_PROPERTIES_KEY = 'DSON_SERIALIZATION_PROPERTIES';
/**
 * Decorator to register a property for JSON serialization.
 *   Stores property names in the prototype metadata
 * @param target
 * @param propertyName
 */
function includeJSON(target, propertyName) {
    registerPropertyForSerialization(target, propertyName, exports.JSON_PROPERTIES_KEY);
}
exports.includeJSON = includeJSON;
/**
 * Decorator to register a property for DSON serialization.
 *   Stores property names in the prototype metadata
 * @param target
 * @param propertyName
 */
function includeDSON(target, propertyName) {
    registerPropertyForSerialization(target, propertyName, exports.DSON_PROPERTIES_KEY);
}
exports.includeDSON = includeDSON;
/**
 * Registers property for serialization.
 *   Stores an array of property names in the prototype metadata.
 *   Inherits from the object prototype chain.
 * @param target
 * @param propertyName
 * @param metadataKey
 */
function registerPropertyForSerialization(target, propertyName, metadataKey) {
    // Avoid modifying parent metadata, clone instead
    if (!Reflect.hasOwnMetadata(metadataKey, target)) {
        var props = [];
        if (Reflect.hasMetadata(metadataKey, target)) {
            // Clone parent metadata
            props = Reflect.getMetadata(metadataKey, target).slice(0);
        }
        Reflect.defineMetadata(metadataKey, props, target);
    }
    Reflect.getMetadata(metadataKey, target).push(propertyName);
    Reflect.getMetadata(metadataKey, target).sort();
}
var RadixSerializer = /** @class */ (function () {
    function RadixSerializer() {
    }
    /**
     * Decorator to register a class for serialization
     * @param serializer serializer id
     * @returns
     */
    RadixSerializer.registerClass = function (serializer) {
        var _this = this;
        return function (constructor) {
            constructor.SERIALIZER = serializer;
            _this.classes.set(serializer, constructor);
        };
    };
    /**
     * Registers advanced 'primitive' types for serialization
     * @param tag
     * @returns
     */
    RadixSerializer.registerPrimitive = function (tag) {
        var _this = this;
        return function (constructor) {
            _this.primitives.set(tag, constructor);
        };
    };
    RadixSerializer.toJSON = function (data) {
        var e_1, _a;
        if (Array.isArray(data)) {
            var output = [];
            try {
                for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                    var item = data_1_1.value;
                    output.push(RadixSerializer.toJSON(item));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return output;
        }
        else if (typeof data === 'number' ||
            typeof data === 'boolean') {
            return data;
        }
        else if (typeof data === 'string') {
            return ":str:" + data;
        }
        else if (data !== null && typeof data === 'object') {
            if (typeof data.toJSON === 'function') {
                return data.toJSON();
            }
            else {
                var output = {};
                for (var key in data) {
                    var serialized = RadixSerializer.toJSON(data[key]);
                    if (!RadixUtil_1.isEmpty(serialized)) {
                        output[key] = serialized;
                    }
                }
                return output;
            }
        }
    };
    RadixSerializer.fromJSON = function (json) {
        var e_2, _a;
        if (Array.isArray(json)) {
            var output = [];
            try {
                for (var json_1 = tslib_1.__values(json), json_1_1 = json_1.next(); !json_1_1.done; json_1_1 = json_1.next()) {
                    var item = json_1_1.value;
                    output.push(RadixSerializer.fromJSON(item));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (json_1_1 && !json_1_1.done && (_a = json_1.return)) _a.call(json_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return output;
        }
        else if (typeof json === 'object') {
            return RadixSerializer.fromJSONObject(json);
        }
        else if (typeof json === 'string') {
            // Advanced primitives
            var tag = json.slice(0, 5);
            if (tag === ':str:') {
                return json.slice(5);
            }
            // Cast to a primitve class
            if (this.primitives.has(tag)) {
                return this.primitives.get(tag).fromJSON(json.slice(5));
            }
            RadixLogger_1.logger.warn("No matching class for primitive string \"" + json + "\"");
        }
        else {
            return json;
        }
    };
    RadixSerializer.fromJSONObject = function (jsonObject) {
        var output = {};
        for (var key in jsonObject) {
            output[key] = (key === 'serializer' ? jsonObject[key] : RadixSerializer.fromJSON(jsonObject[key]));
        }
        if ('serializer' in output) {
            // tslint:disable-next-line:no-string-literal
            var type = output['serializer'];
            if (this.classes.has(type)) {
                return this.classes.get(type).fromJSON(output);
            }
            RadixLogger_1.logger.warn("Serializer \"" + type + "\" not implemented");
        }
        return output;
    };
    RadixSerializer.toDSON = function (data) {
        var enc = new cbor_1.default.Encoder();
        // Overide default object encoder to use stream encoding and lexicographical ordering of keys
        enc.addSemanticType(Object, function (encoder, obj) {
            var e_3, _a;
            var keys = Object.keys(obj);
            keys.sort();
            if (!encoder.push(Buffer.from([191]))) {
                return false;
            }
            try {
                for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                    var key = keys_1_1.value;
                    if (RadixUtil_1.isEmpty(obj[key])) {
                        continue;
                    }
                    if (!encoder.pushAny(key)) {
                        return false;
                    }
                    if (!encoder.pushAny(obj[key])) {
                        return false;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
            if (!encoder.push(Buffer.from([0xFF]))) {
                return false;
            }
            return true;
        });
        return enc._encodeAll([data]);
    };
    RadixSerializer.classes = new typescript_map_1.TSMap();
    RadixSerializer.primitives = new typescript_map_1.TSMap();
    return RadixSerializer;
}());
exports.RadixSerializer = RadixSerializer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhTZXJpYWxpemVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvYXRvbW1vZGVsL3NlcmlhbGl6ZXIvUmFkaXhTZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHNEQUF1QjtBQUV2QixpREFBc0M7QUFFdEMsd0RBQWlEO0FBR2pELDRCQUF5QjtBQUN6QixvREFBaUQ7QUFFcEMsUUFBQSxtQkFBbUIsR0FBRywrQkFBK0IsQ0FBQTtBQUNyRCxRQUFBLG1CQUFtQixHQUFHLCtCQUErQixDQUFBO0FBRWxFOzs7OztHQUtHO0FBQ0gsU0FBZ0IsV0FBVyxDQUFDLE1BQStCLEVBQUUsWUFBb0I7SUFDN0UsZ0NBQWdDLENBQUMsTUFBTSxFQUFFLFlBQVksRUFBRSwyQkFBbUIsQ0FBQyxDQUFBO0FBQy9FLENBQUM7QUFGRCxrQ0FFQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsV0FBVyxDQUFDLE1BQStCLEVBQUUsWUFBb0I7SUFDN0UsZ0NBQWdDLENBQUMsTUFBTSxFQUFFLFlBQVksRUFBRSwyQkFBbUIsQ0FBQyxDQUFBO0FBQy9FLENBQUM7QUFGRCxrQ0FFQztBQUVEOzs7Ozs7O0dBT0c7QUFDSCxTQUFTLGdDQUFnQyxDQUFDLE1BQStCLEVBQUUsWUFBb0IsRUFBRSxXQUFtQjtJQUNoSCxpREFBaUQ7SUFDakQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQzlDLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQTtRQUNkLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDMUMsd0JBQXdCO1lBQ3hCLEtBQUssR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDNUQ7UUFDRCxPQUFPLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUE7S0FDckQ7SUFDRCxPQUFPLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDM0QsT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7QUFDbkQsQ0FBQztBQUVEO0lBQUE7SUEwSUEsQ0FBQztJQXJJRzs7OztPQUlHO0lBQ1csNkJBQWEsR0FBM0IsVUFBNEIsVUFBa0I7UUFBOUMsaUJBTUM7UUFMRyxPQUFPLFVBQUMsV0FBMkM7WUFDL0MsV0FBVyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUE7WUFFbkMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFBO1FBQzdDLENBQUMsQ0FBQTtJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ1csaUNBQWlCLEdBQS9CLFVBQWdDLEdBQVc7UUFBM0MsaUJBSUM7UUFIRyxPQUFPLFVBQUMsV0FBMkQ7WUFDL0QsS0FBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFBO1FBQ3pDLENBQUMsQ0FBQTtJQUNMLENBQUM7SUFFYSxzQkFBTSxHQUFwQixVQUFxQixJQUFTOztRQUMxQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDckIsSUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFBOztnQkFDakIsS0FBbUIsSUFBQSxTQUFBLGlCQUFBLElBQUksQ0FBQSwwQkFBQSw0Q0FBRTtvQkFBcEIsSUFBTSxJQUFJLGlCQUFBO29CQUNYLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO2lCQUM1Qzs7Ozs7Ozs7O1lBQ0QsT0FBTyxNQUFNLENBQUE7U0FDaEI7YUFBTSxJQUNILE9BQU8sSUFBSSxLQUFLLFFBQVE7WUFDeEIsT0FBTyxJQUFJLEtBQUssU0FBUyxFQUMzQjtZQUNFLE9BQU8sSUFBSSxDQUFBO1NBQ2Q7YUFBTSxJQUNILE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFDMUI7WUFDRSxPQUFPLFVBQVEsSUFBTSxDQUFBO1NBQ3hCO2FBQU0sSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUNsRCxJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sS0FBSyxVQUFVLEVBQUU7Z0JBQ25DLE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFBO2FBQ3ZCO2lCQUFNO2dCQUNILElBQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQTtnQkFDakIsS0FBSyxJQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUU7b0JBQ3BCLElBQU0sVUFBVSxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7b0JBQ3BELElBQUksQ0FBQyxtQkFBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO3dCQUN0QixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsVUFBVSxDQUFBO3FCQUMzQjtpQkFDSjtnQkFFRCxPQUFPLE1BQU0sQ0FBQTthQUNoQjtTQUNKO0lBQ0wsQ0FBQztJQUVhLHdCQUFRLEdBQXRCLFVBQXVCLElBQVM7O1FBQzVCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNyQixJQUFNLE1BQU0sR0FBRyxFQUFFLENBQUE7O2dCQUNqQixLQUFtQixJQUFBLFNBQUEsaUJBQUEsSUFBSSxDQUFBLDBCQUFBLDRDQUFFO29CQUFwQixJQUFNLElBQUksaUJBQUE7b0JBQ1gsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7aUJBQzlDOzs7Ozs7Ozs7WUFDRCxPQUFPLE1BQU0sQ0FBQTtTQUNoQjthQUFNLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQ2pDLE9BQU8sZUFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUM5QzthQUFNLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQ2pDLHNCQUFzQjtZQUN0QixJQUFNLEdBQUcsR0FBSSxJQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtZQUV4QyxJQUFJLEdBQUcsS0FBSyxPQUFPLEVBQUU7Z0JBQ2pCLE9BQVEsSUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUNuQztZQUVELDJCQUEyQjtZQUMzQixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUMxQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBRSxJQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7YUFDdEU7WUFFRCxvQkFBTSxDQUFDLElBQUksQ0FBQyw4Q0FBMkMsSUFBSSxPQUFHLENBQUMsQ0FBQTtTQUNsRTthQUFNO1lBQ0gsT0FBTyxJQUFJLENBQUE7U0FDZDtJQUNMLENBQUM7SUFFYSw4QkFBYyxHQUE1QixVQUE2QixVQUFrQjtRQUMzQyxJQUFNLE1BQU0sR0FBRyxFQUFFLENBQUE7UUFFakIsS0FBSyxJQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUU7WUFDMUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLFlBQVksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDckc7UUFFRCxJQUFJLFlBQVksSUFBSSxNQUFNLEVBQUU7WUFDeEIsNkNBQTZDO1lBQzdDLElBQU0sSUFBSSxHQUFXLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQTtZQUV6QyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN4QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQTthQUNqRDtZQUVELG9CQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFlLElBQUksdUJBQW1CLENBQUMsQ0FBQTtTQUN0RDtRQUVELE9BQU8sTUFBTSxDQUFBO0lBQ2pCLENBQUM7SUFFYSxzQkFBTSxHQUFwQixVQUFxQixJQUFTO1FBQzFCLElBQU0sR0FBRyxHQUFHLElBQUksY0FBSSxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBRTlCLDZGQUE2RjtRQUM3RixHQUFHLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxVQUFDLE9BQU8sRUFBRSxHQUFHOztZQUNyQyxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBRTdCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtZQUVYLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQUUsT0FBTyxLQUFLLENBQUE7YUFBRTs7Z0JBRS9ELEtBQWtCLElBQUEsU0FBQSxpQkFBQSxJQUFJLENBQUEsMEJBQUEsNENBQUU7b0JBQW5CLElBQU0sR0FBRyxpQkFBQTtvQkFDVixJQUFJLG1CQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7d0JBQ25CLFNBQVE7cUJBQ1g7b0JBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7d0JBQUUsT0FBTyxLQUFLLENBQUE7cUJBQUU7b0JBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO3dCQUFFLE9BQU8sS0FBSyxDQUFBO3FCQUFFO2lCQUNuRDs7Ozs7Ozs7O1lBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFBRSxPQUFPLEtBQUssQ0FBQTthQUFFO1lBRXhELE9BQU8sSUFBSSxDQUFBO1FBQ2YsQ0FBQyxDQUFDLENBQUE7UUFFRixPQUFPLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0lBQ2pDLENBQUM7SUF2SWMsdUJBQU8sR0FBa0QsSUFBSSxzQkFBSyxFQUFFLENBQUE7SUFDcEUsMEJBQVUsR0FBa0UsSUFBSSxzQkFBSyxFQUFFLENBQUE7SUF1STFHLHNCQUFDO0NBQUEsQUExSUQsSUEwSUM7QUExSVksMENBQWUifQ==