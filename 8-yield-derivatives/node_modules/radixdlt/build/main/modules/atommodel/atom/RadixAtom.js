"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var __1 = require("..");
var StringifySet_1 = require("../../common/StringifySet");
var RadixAtom = /** @class */ (function (_super) {
    tslib_1.__extends(RadixAtom, _super);
    function RadixAtom() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.particleGroups = [];
        _this.metaData = {};
        return _this;
    }
    RadixAtom_1 = RadixAtom;
    RadixAtom.prototype.getParticles = function () {
        var e_1, _a, e_2, _b;
        var particles = [];
        try {
            for (var _c = tslib_1.__values(this.particleGroups), _d = _c.next(); !_d.done; _d = _c.next()) {
                var particleGroup = _d.value;
                try {
                    for (var _e = (e_2 = void 0, tslib_1.__values(particleGroup.particles)), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var particle = _f.value;
                        particles.push(particle);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return particles;
    };
    RadixAtom.prototype.getAddresses = function () {
        var e_3, _a, e_4, _b, e_5, _c;
        var addressSet = new StringifySet_1.StringifySet();
        try {
            for (var _d = tslib_1.__values(this.particleGroups), _e = _d.next(); !_e.done; _e = _d.next()) {
                var particleGroup = _e.value;
                try {
                    for (var _f = (e_4 = void 0, tslib_1.__values(particleGroup.particles)), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var particle = _g.value;
                        var addresses = particle.particle.getAddresses();
                        try {
                            for (var addresses_1 = (e_5 = void 0, tslib_1.__values(addresses)), addresses_1_1 = addresses_1.next(); !addresses_1_1.done; addresses_1_1 = addresses_1.next()) {
                                var address = addresses_1_1.value;
                                addressSet.add(address);
                            }
                        }
                        catch (e_5_1) { e_5 = { error: e_5_1 }; }
                        finally {
                            try {
                                if (addresses_1_1 && !addresses_1_1.done && (_c = addresses_1.return)) _c.call(addresses_1);
                            }
                            finally { if (e_5) throw e_5.error; }
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return addressSet.values();
    };
    RadixAtom.prototype.getShards = function () {
        var e_6, _a, e_7, _b, e_8, _c;
        var shardSet = new StringifySet_1.StringifySet();
        try {
            for (var _d = tslib_1.__values(this.particleGroups), _e = _d.next(); !_e.done; _e = _d.next()) {
                var particleGroup = _e.value;
                try {
                    for (var _f = (e_7 = void 0, tslib_1.__values(particleGroup.particles)), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var particle = _g.value;
                        var addresses = particle.particle.getAddresses();
                        try {
                            for (var addresses_2 = (e_8 = void 0, tslib_1.__values(addresses)), addresses_2_1 = addresses_2.next(); !addresses_2_1.done; addresses_2_1 = addresses_2.next()) {
                                var address = addresses_2_1.value;
                                var shard = address.getShard();
                                shardSet.add(shard);
                            }
                        }
                        catch (e_8_1) { e_8 = { error: e_8_1 }; }
                        finally {
                            try {
                                if (addresses_2_1 && !addresses_2_1.done && (_c = addresses_2.return)) _c.call(addresses_2);
                            }
                            finally { if (e_8) throw e_8.error; }
                        }
                    }
                }
                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                    }
                    finally { if (e_7) throw e_7.error; }
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_6) throw e_6.error; }
        }
        return shardSet.values();
    };
    RadixAtom.prototype.getTimestamp = function () {
        var timestamp = parseInt(this.metaData[RadixAtom_1.METADATA_TIMESTAMP_KEY], 10);
        if (Number.isNaN(timestamp)) {
            throw new Error('Timestamp is not set or not a valid number');
        }
        else {
            return timestamp;
        }
    };
    RadixAtom.prototype.setTimestamp = function (timestamp) {
        this.metaData[RadixAtom_1.METADATA_TIMESTAMP_KEY] = '' + timestamp;
    };
    RadixAtom.prototype.setPowNonce = function (nonce) {
        this.metaData[RadixAtom_1.METADATA_POW_NONCE_KEY] = nonce.toString();
    };
    RadixAtom.prototype.clearPowNonce = function () {
        delete this.metaData[RadixAtom_1.METADATA_POW_NONCE_KEY];
    };
    RadixAtom.prototype.getSpunParticlesOfType = function () {
        var types = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            types[_i] = arguments[_i];
        }
        return this.getParticles()
            .filter(function (s) {
            var e_9, _a;
            try {
                for (var types_1 = tslib_1.__values(types), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {
                    var type = types_1_1.value;
                    if (s.particle instanceof type) {
                        return true;
                    }
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (types_1_1 && !types_1_1.done && (_a = types_1.return)) _a.call(types_1);
                }
                finally { if (e_9) throw e_9.error; }
            }
        });
    };
    RadixAtom.prototype.getParticlesOfSpin = function (spin) {
        return this.getParticles()
            .filter(function (spunParticle) { return spunParticle.spin === spin; })
            .map(function (spunParticle) { return spunParticle.particle; });
    };
    RadixAtom.prototype.getParticlesOfType = function (type, spin) {
        var particles = this.getParticles()
            .filter(function (spunParticle) { return spunParticle.particle instanceof type; });
        if (spin) {
            particles = particles.filter(function (spunParticle) { return spunParticle.spin === spin; });
        }
        return particles.map(function (spunParticle) { return spunParticle.particle; });
    };
    RadixAtom.prototype.getFirstParticleOfType = function (type) {
        return this.getParticles()
            .find(function (spunParticle) { return spunParticle.particle instanceof type; }).particle;
    };
    RadixAtom.prototype.containsParticle = function () {
        var e_10, _a, e_11, _b;
        var types = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            types[_i] = arguments[_i];
        }
        try {
            for (var _c = tslib_1.__values(this.getParticles()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var spunParticle = _d.value;
                try {
                    for (var types_2 = (e_11 = void 0, tslib_1.__values(types)), types_2_1 = types_2.next(); !types_2_1.done; types_2_1 = types_2.next()) {
                        var type = types_2_1.value;
                        if (spunParticle.particle instanceof type) {
                            return true;
                        }
                    }
                }
                catch (e_11_1) { e_11 = { error: e_11_1 }; }
                finally {
                    try {
                        if (types_2_1 && !types_2_1.done && (_b = types_2.return)) _b.call(types_2);
                    }
                    finally { if (e_11) throw e_11.error; }
                }
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_10) throw e_10.error; }
        }
        return false;
    };
    RadixAtom.prototype.getParticleGroups = function () {
        return this.particleGroups;
    };
    RadixAtom.prototype.getAid = function () {
        return __1.RadixAID.from(this.getHash(), this.getShards());
    };
    RadixAtom.prototype.getAidString = function () {
        return this.getAid().toString();
    };
    var RadixAtom_1;
    RadixAtom.METADATA_TIMESTAMP_KEY = 'timestamp';
    RadixAtom.METADATA_POW_NONCE_KEY = 'powNonce';
    tslib_1.__decorate([
        __1.includeJSON,
        __1.includeDSON,
        tslib_1.__metadata("design:type", Array)
    ], RadixAtom.prototype, "particleGroups", void 0);
    tslib_1.__decorate([
        __1.includeJSON,
        tslib_1.__metadata("design:type", Object)
    ], RadixAtom.prototype, "signatures", void 0);
    tslib_1.__decorate([
        __1.includeDSON,
        __1.includeJSON,
        tslib_1.__metadata("design:type", Object)
    ], RadixAtom.prototype, "metaData", void 0);
    RadixAtom = RadixAtom_1 = tslib_1.__decorate([
        __1.RadixSerializer.registerClass('radix.atom')
    ], RadixAtom);
    return RadixAtom;
}(__1.RadixSerializableObject));
exports.RadixAtom = RadixAtom;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhBdG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvYXRvbW1vZGVsL2F0b20vUmFkaXhBdG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdCQVlXO0FBRVgsMERBQXdEO0FBR3hEO0lBQStCLHFDQUF1QjtJQUR0RDtRQUFBLHFFQXlJQztRQWxJVSxvQkFBYyxHQUF5QixFQUFFLENBQUE7UUFPekMsY0FBUSxHQUEwQixFQUFFLENBQUE7O0lBMkgvQyxDQUFDO2tCQXhJWSxTQUFTO0lBZVgsZ0NBQVksR0FBbkI7O1FBQ0ksSUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFBOztZQUVwQixLQUE0QixJQUFBLEtBQUEsaUJBQUEsSUFBSSxDQUFDLGNBQWMsQ0FBQSxnQkFBQSw0QkFBRTtnQkFBNUMsSUFBTSxhQUFhLFdBQUE7O29CQUNwQixLQUF1QixJQUFBLG9CQUFBLGlCQUFBLGFBQWEsQ0FBQyxTQUFTLENBQUEsQ0FBQSxnQkFBQSw0QkFBRTt3QkFBM0MsSUFBTSxRQUFRLFdBQUE7d0JBQ2YsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtxQkFDM0I7Ozs7Ozs7OzthQUNKOzs7Ozs7Ozs7UUFFRCxPQUFPLFNBQVMsQ0FBQTtJQUNwQixDQUFDO0lBRU0sZ0NBQVksR0FBbkI7O1FBQ0ksSUFBTSxVQUFVLEdBQUcsSUFBSSwyQkFBWSxFQUFnQixDQUFBOztZQUVuRCxLQUE0QixJQUFBLEtBQUEsaUJBQUEsSUFBSSxDQUFDLGNBQWMsQ0FBQSxnQkFBQSw0QkFBRTtnQkFBNUMsSUFBTSxhQUFhLFdBQUE7O29CQUNwQixLQUF1QixJQUFBLG9CQUFBLGlCQUFBLGFBQWEsQ0FBQyxTQUFTLENBQUEsQ0FBQSxnQkFBQSw0QkFBRTt3QkFBM0MsSUFBTSxRQUFRLFdBQUE7d0JBQ2YsSUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQTs7NEJB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