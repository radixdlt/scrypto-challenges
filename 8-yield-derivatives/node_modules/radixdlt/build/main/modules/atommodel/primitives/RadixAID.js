"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var long_1 = tslib_1.__importDefault(require("long"));
var __1 = require("..");
var id = ':aid:';
var RadixAID = /** @class */ (function () {
    function RadixAID(bytes) {
        if (bytes.length !== RadixAID_1.BYTES) {
            throw new Error("Bytest lenght must be " + RadixAID_1.BYTES + " but is " + bytes.length);
        }
        this.bytes = Buffer.from(bytes);
    }
    RadixAID_1 = RadixAID;
    RadixAID.from = function (hash, shards) {
        if (shards.length === 0) {
            throw new Error('Shards array cannot be empty');
        }
        var shardIndex = hash[0] % shards.length;
        var selectedShard = shards
            .map(function (s) { return s.toUnsigned(); })
            .sort(function (a, b) { return a.compare(b); })
            .map(function (s) { return s.toSigned(); })[shardIndex];
        var bytes = Buffer.alloc(this.BYTES);
        hash.copy(bytes, 0, 0, this.HASH_BYTES);
        Buffer.from(selectedShard.toBytes()).copy(bytes, this.HASH_BYTES);
        return new this(bytes);
    };
    RadixAID.fromJSON = function (data) {
        return new this(Buffer.from(data, 'hex'));
    };
    RadixAID.prototype.toJSON = function () {
        return "" + id + this.bytes.toString('hex');
    };
    RadixAID.prototype.toDSON = function () {
        return __1.RadixSerializer.toDSON(this);
    };
    RadixAID.prototype.encodeCBOR = function (encoder) {
        var output = Buffer.alloc(this.bytes.length + 1);
        output.writeInt8(0x08, 0);
        this.bytes.copy(output, 1);
        return encoder.pushAny(output);
    };
    RadixAID.prototype.equals = function (aid) {
        return this.bytes.compare(aid.bytes) === 0;
    };
    RadixAID.prototype.toString = function () {
        return this.bytes.toString('hex');
    };
    RadixAID.prototype.getShard = function () {
        return long_1.default.fromBytes(Array.from(this.bytes.subarray(RadixAID_1.HASH_BYTES)));
    };
    var RadixAID_1;
    RadixAID.BYTES = 32;
    RadixAID.HASH_BYTES = 24;
    RadixAID.SHARD_BYTES = 8;
    RadixAID = RadixAID_1 = tslib_1.__decorate([
        __1.RadixSerializer.registerPrimitive(id),
        tslib_1.__metadata("design:paramtypes", [Buffer])
    ], RadixAID);
    return RadixAID;
}());
exports.RadixAID = RadixAID;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhBSUQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy9hdG9tbW9kZWwvcHJpbWl0aXZlcy9SYWRpeEFJRC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxzREFBdUI7QUFDdkIsd0JBQXFEO0FBRXJELElBQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQTtBQUVsQjtJQVNJLGtCQUFtQixLQUFhO1FBQzVCLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxVQUFRLENBQUMsS0FBSyxFQUFFO1lBQ2pDLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQXlCLFVBQVEsQ0FBQyxLQUFLLGdCQUFXLEtBQUssQ0FBQyxNQUFRLENBQUMsQ0FBQTtTQUNwRjtRQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNuQyxDQUFDO2lCQWZRLFFBQVE7SUFrQkgsYUFBSSxHQUFsQixVQUFtQixJQUFZLEVBQUUsTUFBYztRQUMzQyxJQUFHLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQTtTQUNsRDtRQUVELElBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFBO1FBRTFDLElBQU0sYUFBYSxHQUFHLE1BQU07YUFDdkIsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFkLENBQWMsQ0FBQzthQUN4QixJQUFJLENBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBWixDQUFZLENBQUM7YUFDNUIsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFaLENBQVksQ0FBQyxDQUN0QixVQUFVLENBQUMsQ0FBQTtRQUVoQixJQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUN0QyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUN2QyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBRWpFLE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDMUIsQ0FBQztJQUdhLGlCQUFRLEdBQXRCLFVBQXVCLElBQVk7UUFDL0IsT0FBTyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQzdDLENBQUM7SUFFTSx5QkFBTSxHQUFiO1FBQ0ksT0FBTyxLQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUcsQ0FBQTtJQUMvQyxDQUFDO0lBRU0seUJBQU0sR0FBYjtRQUNJLE9BQU8sbUJBQWUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDdkMsQ0FBQztJQUVNLDZCQUFVLEdBQWpCLFVBQWtCLE9BQU87UUFDckIsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQTtRQUNsRCxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUN6QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFFMUIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ2xDLENBQUM7SUFHTSx5QkFBTSxHQUFiLFVBQWMsR0FBYTtRQUN2QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDOUMsQ0FBQztJQUVNLDJCQUFRLEdBQWY7UUFDSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3JDLENBQUM7SUFFTSwyQkFBUSxHQUFmO1FBQ0ksT0FBTyxjQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMvRSxDQUFDOztJQXBFYSxjQUFLLEdBQUcsRUFBRSxDQUFBO0lBQ1YsbUJBQVUsR0FBRyxFQUFFLENBQUE7SUFDZixvQkFBVyxHQUFHLENBQUMsQ0FBQTtJQUpwQixRQUFRO1FBRHBCLG1CQUFlLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDO2lEQVVSLE1BQU07T0FUdkIsUUFBUSxDQXVFcEI7SUFBRCxlQUFDO0NBQUEsQUF2RUQsSUF1RUM7QUF2RVksNEJBQVEifQ==