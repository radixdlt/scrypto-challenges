"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var __1 = require("..");
var elliptic_1 = tslib_1.__importDefault(require("elliptic"));
var bs58_1 = tslib_1.__importDefault(require("bs58"));
var __2 = require("../../..");
var ec = new elliptic_1.default.ec('secp256k1');
var id = ':adr:';
var RadixAddress = /** @class */ (function () {
    function RadixAddress(magicByte) {
        if (magicByte) {
            this.magicByte = magicByte;
        }
    }
    RadixAddress_1 = RadixAddress;
    RadixAddress.generateNew = function () {
        var radixKeyPair = new RadixAddress_1();
        radixKeyPair.keyPair = ec.genKeyPair();
        return radixKeyPair;
    };
    RadixAddress.fromAddress = function (address) {
        var raw = Array.prototype.slice.call(bs58_1.default.decode(address), 0);
        // Universe check
        if (__2.radixUniverse && __2.radixUniverse.initialized && __2.radixUniverse.getMagicByte() !== raw[0]) {
            throw new Error('Address is from a different universe');
        }
        // Checksum
        var check = __2.radixHash(raw.splice(0, raw.length - 4), 0, raw.length - 4);
        for (var i = 0; i < 4; i++) {
            if (check[i] !== raw[raw.length - 4 + i]) {
                throw new Error('Invalid address');
            }
        }
        raw = Array.prototype.slice.call(bs58_1.default.decode(address), 0);
        var radixAddress = new this(raw[0]);
        radixAddress.keyPair = ec.keyFromPublic(raw.splice(1, raw.length - 5));
        return radixAddress;
    };
    RadixAddress.fromPublic = function (publicKey, magicByte) {
        if (!publicKey) {
            throw new Error('Missing public key');
        }
        if (publicKey.length !== 33) {
            throw new Error('Public key must be 33 bytes, but was ' + publicKey.length);
        }
        var radixAddress = new this(magicByte);
        radixAddress.keyPair = ec.keyFromPublic(publicKey);
        return radixAddress;
    };
    RadixAddress.fromPrivate = function (privateKey, magicByte) {
        var radixAddress = new this(magicByte);
        radixAddress.keyPair = ec.keyFromPrivate(privateKey);
        return radixAddress;
    };
    RadixAddress.prototype.getAddressBytes = function () {
        var publicKey = this.keyPair.getPublic().encode('array', true);
        var addressBytes = [];
        addressBytes[0] = this.magicByte ? this.magicByte : __2.radixUniverse.getMagicByte();
        for (var i = 0; i < publicKey.length; i++) {
            addressBytes[i + 1] = publicKey[i];
        }
        var check = __2.radixHash(addressBytes, 0, publicKey.length + 1);
        for (var i = 0; i < 4; i++) {
            addressBytes[publicKey.length + 1 + i] = check[i];
        }
        return Buffer.from(addressBytes);
    };
    RadixAddress.prototype.getAddress = function () {
        return bs58_1.default.encode(this.getAddressBytes());
    };
    RadixAddress.prototype.getHash = function () {
        return __2.radixHash(this.getPublic(), 0, this.getPublic().length);
    };
    RadixAddress.prototype.getUID = function () {
        var hash = this.getHash();
        return new __1.RadixEUID(hash.slice(0, 16));
    };
    RadixAddress.prototype.getShard = function () {
        return this.getUID().getShard();
    };
    RadixAddress.prototype.getPublic = function () {
        return Buffer.from(this.keyPair.getPublic(true, 'array'));
    };
    RadixAddress.prototype.getPrivate = function () {
        return this.keyPair.getPrivate().toArrayLike(Buffer);
    };
    RadixAddress.prototype.sign = function (data) {
        var signature = this.keyPair.sign(data);
        return __1.RadixECSignature.fromEllasticSignature(signature);
    };
    RadixAddress.prototype.verify = function (data, signature) {
        return this.keyPair.verify(data, { r: signature.r.bytes, s: signature.s.bytes });
    };
    RadixAddress.prototype.equals = function (otherAddress) {
        return this.getAddress() === otherAddress.getAddress();
    };
    RadixAddress.prototype.toString = function () {
        return this.getAddress();
    };
    RadixAddress.fromJSON = function (address) {
        return this.fromAddress(address);
    };
    RadixAddress.prototype.toJSON = function () {
        return "" + id + this.getAddress();
    };
    RadixAddress.prototype.toDSON = function () {
        return __1.RadixSerializer.toDSON(this);
    };
    RadixAddress.prototype.encodeCBOR = function (encoder) {
        var addressBuffer = this.getAddressBytes();
        var output = Buffer.alloc(addressBuffer.length + 1);
        output.writeInt8(0x04, 0);
        addressBuffer.copy(output, 1);
        return encoder.pushAny(output);
    };
    var RadixAddress_1;
    RadixAddress = RadixAddress_1 = tslib_1.__decorate([
        __1.RadixSerializer.registerPrimitive(id),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], RadixAddress);
    return RadixAddress;
}());
exports.RadixAddress = RadixAddress;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhBZGRyZXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvYXRvbW1vZGVsL3ByaW1pdGl2ZXMvUmFkaXhBZGRyZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdCQUFpRjtBQUVqRiw4REFBeUI7QUFDekIsc0RBQXVCO0FBRXZCLDhCQUFtRDtBQUVuRCxJQUFNLEVBQUUsR0FBRyxJQUFJLGtCQUFFLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBRWpDLElBQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQTtBQUVsQjtJQUtJLHNCQUFZLFNBQWtCO1FBQzFCLElBQUksU0FBUyxFQUFFO1lBQ1gsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUE7U0FDN0I7SUFDTCxDQUFDO3FCQVRRLFlBQVk7SUFXUCx3QkFBVyxHQUF6QjtRQUNJLElBQU0sWUFBWSxHQUFHLElBQUksY0FBWSxFQUFFLENBQUE7UUFDdkMsWUFBWSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUE7UUFFdEMsT0FBTyxZQUFZLENBQUE7SUFDdkIsQ0FBQztJQUVhLHdCQUFXLEdBQXpCLFVBQTBCLE9BQWU7UUFDckMsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFFN0QsaUJBQWlCO1FBQ2pCLElBQUksaUJBQWEsSUFBSSxpQkFBYSxDQUFDLFdBQVcsSUFBSSxpQkFBYSxDQUFDLFlBQVksRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN2RixNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUE7U0FDMUQ7UUFFRCxXQUFXO1FBQ1gsSUFBTSxLQUFLLEdBQUcsYUFBUyxDQUNuQixHQUFHLENBQUMsTUFBTSxD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