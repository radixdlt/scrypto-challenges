"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var __1 = require("..");
var long_1 = tslib_1.__importDefault(require("long"));
var id = ':uid:';
var RadixEUID = /** @class */ (function () {
    function RadixEUID(value) {
        if (typeof value === 'number') {
            this.bytes = Buffer.alloc(16);
            this.bytes.writeUInt32BE(value, 12);
        }
        else if (Buffer.isBuffer(value) || Array.isArray(value)) {
            if (value.length === 0) {
                throw new Error('EUID must not be 0 bytes');
            }
            this.bytes = Buffer.from(value);
        }
        else if (typeof value === 'string') {
            this.bytes = Buffer.from(value, 'hex');
        }
        else {
            throw new Error('Unsupported EUID value');
        }
        this.shard = long_1.default.fromBytes(tslib_1.__spread(this.bytes.slice(0, this.bytes.length - 8)));
    }
    RadixEUID.fromJSON = function (data) {
        return new this(data);
    };
    RadixEUID.prototype.toJSON = function () {
        return "" + id + this.bytes.toString('hex');
    };
    RadixEUID.prototype.toDSON = function () {
        return __1.RadixSerializer.toDSON(this);
    };
    RadixEUID.prototype.encodeCBOR = function (encoder) {
        var output = Buffer.alloc(this.bytes.length + 1);
        output.writeInt8(0x02, 0);
        this.bytes.copy(output, 1);
        return encoder.pushAny(output);
    };
    RadixEUID.prototype.equals = function (euid) {
        return this.bytes.compare(euid.bytes) === 0;
    };
    RadixEUID.prototype.toString = function () {
        return this.bytes.toString('hex');
    };
    RadixEUID.prototype.getShard = function () {
        return this.shard;
    };
    RadixEUID = tslib_1.__decorate([
        __1.RadixSerializer.registerPrimitive(id),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], RadixEUID);
    return RadixEUID;
}());
exports.RadixEUID = RadixEUID;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhFVUlELmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvYXRvbW1vZGVsL3ByaW1pdGl2ZXMvUmFkaXhFVUlELnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdCQUFxRDtBQUNyRCxzREFBdUI7QUFHdkIsSUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFBO0FBRWxCO0lBS0ksbUJBQVksS0FBMEM7UUFFbEQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDM0IsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQzdCLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQTtTQUN0QzthQUFNLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3ZELElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQTthQUM5QztZQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFlLENBQUMsQ0FBQTtTQUM1QzthQUFNLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUE7U0FDekM7YUFBTTtZQUNILE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQTtTQUM1QztRQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsY0FBSSxDQUFDLFNBQVMsa0JBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUE7SUFDaEYsQ0FBQztJQUVhLGtCQUFRLEdBQXRCLFVBQXVCLElBQVk7UUFDL0IsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN6QixDQUFDO0lBRU0sMEJBQU0sR0FBYjtRQUNJLE9BQU8sS0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFHLENBQUE7SUFDL0MsQ0FBQztJQUVNLDBCQUFNLEdBQWI7UUFDSSxPQUFPLG1CQUFlLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3ZDLENBQUM7SUFFTSw4QkFBVSxHQUFqQixVQUFrQixPQUFPO1FBQ3JCLElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDbEQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDekIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBRTFCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUNsQyxDQUFDO0lBR00sMEJBQU0sR0FBYixVQUFjLElBQWU7UUFDekIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQy9DLENBQUM7SUFFTSw0QkFBUSxHQUFmO1FBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNyQyxDQUFDO0lBRU0sNEJBQVEsR0FBZjtRQUNJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNyQixDQUFDO0lBeERRLFNBQVM7UUFEckIsbUJBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7O09BQ3pCLFNBQVMsQ0EwRHJCO0lBQUQsZ0JBQUM7Q0FBQSxBQTFERCxJQTBEQztBQTFEWSw4QkFBUyJ9