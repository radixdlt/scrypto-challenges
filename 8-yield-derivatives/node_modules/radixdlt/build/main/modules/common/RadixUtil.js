"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var long_1 = tslib_1.__importDefault(require("long"));
var bn_js_1 = tslib_1.__importDefault(require("bn.js"));
var crypto_1 = tslib_1.__importDefault(require("crypto"));
function radixHash(data, offset, len) {
    if (offset) {
        data = data.slice(offset, len);
    }
    if (!Buffer.isBuffer(data)) {
        data = Buffer.from(data);
    }
    // Double hash to protect against length extension attacks
    var hash1 = crypto_1.default.createHash('sha256');
    hash1.update(data);
    var hash2 = crypto_1.default.createHash('sha256');
    hash2.update(hash1.digest());
    return hash2.digest();
}
exports.radixHash = radixHash;
function bigIntFromByteArray(bytes) {
    return new bn_js_1.default(bytes).fromTwos(bytes.length * 8);
}
exports.bigIntFromByteArray = bigIntFromByteArray;
function byteArrayFromBigInt(num) {
    // Compatibility with Java BigInteger.toByteArray() https://stackoverflow.com/a/24158695
    var byteLength = Math.ceil((num.bitLength() + 1) / 8);
    var result = num.toTwos(8 * byteLength).toArrayLike(Buffer);
    if (result.length !== byteLength) {
        var newResult = Buffer.alloc(byteLength, 0);
        result.copy(newResult, byteLength - result.length);
        return newResult;
    }
    return result;
}
exports.byteArrayFromBigInt = byteArrayFromBigInt;
function longFromBigInt(num) {
    // Emulate Java BigInteger.longValue(), following the spec at 5.1.3 https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html
    var byteLength = Math.max(8, num.byteLength());
    var bytes = num.toTwos(8 * byteLength).toArray('be', byteLength);
    var truncatedBytes = bytes.slice(bytes.length - 8, bytes.length);
    return long_1.default.fromBytesBE(truncatedBytes);
}
exports.longFromBigInt = longFromBigInt;
function bigIntFromLong(num) {
    return new bn_js_1.default(num.toBytesBE(), 'be').fromTwos(64);
}
exports.bigIntFromLong = bigIntFromLong;
function powTargetFromAtomSize(size) {
    var target = Buffer.alloc(32, 0xff);
    var leadingBits = Math.ceil(Math.log(size * 8));
    var leadingBytes = Math.floor(leadingBits / 8);
    var leftOverBits = leadingBits % 8;
    target.fill(0, 0, leadingBytes);
    var middleByte = ~(0xff << (8 - leftOverBits)) & 0xff;
    target.writeUInt8(middleByte, leadingBytes);
    return target;
}
exports.powTargetFromAtomSize = powTargetFromAtomSize;
function shuffleArray(arr) {
    return arr
        .map(function (a) { return [Math.random(), a]; })
        .sort(function (a, b) { return a[0] - b[0]; })
        .map(function (a) { return a[1]; });
}
exports.shuffleArray = shuffleArray;
function isEmpty(val) {
    return val === undefined
        || val === null
        || val.length === 0
        || (Object.keys(val).length === 0 && val.constructor === Object);
}
exports.isEmpty = isEmpty;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhVdGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvY29tbW9uL1JhZGl4VXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxzREFBdUI7QUFDdkIsd0RBQXNCO0FBQ3RCLDBEQUEyQjtBQUczQixTQUFnQixTQUFTLENBQUMsSUFBdUIsRUFBRSxNQUFlLEVBQUUsR0FBWTtJQUM1RSxJQUFJLE1BQU0sRUFBRTtRQUNSLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQTtLQUNqQztJQUVELElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3hCLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0tBQzNCO0lBRUQsMERBQTBEO0lBQzFELElBQU0sS0FBSyxHQUFHLGdCQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3pDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFbEIsSUFBTSxLQUFLLEdBQUcsZ0JBQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDekMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQTtJQUU1QixPQUFPLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQTtBQUN6QixDQUFDO0FBakJELDhCQWlCQztBQUVELFNBQWdCLG1CQUFtQixDQUFDLEtBQWE7SUFDN0MsT0FBTyxJQUFJLGVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUNuRCxDQUFDO0FBRkQsa0RBRUM7QUFFRCxTQUFnQixtQkFBbUIsQ0FBQyxHQUFPO0lBQ3ZDLHdGQUF3RjtJQUN4RixJQUFNLFVBQVUsR0FBRyxJQUFJ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