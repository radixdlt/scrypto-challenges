"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var nedb_1 = tslib_1.__importDefault(require("nedb"));
var atommodel_1 = require("../atommodel");
var RadixLogger_1 = require("../common/RadixLogger");
var RadixNEDBAtomCache = /** @class */ (function () {
    /**
     * Creates an instance of radix nedbatom cache.
     * @param filename File path on disk in Node, path in localStorage in the browser
     */
    function RadixNEDBAtomCache(filename) {
        var _this = this;
        this.storeAtom = function (atom) {
            return _this.notExists({ _id: atom.getAidString() })
                .then(function () {
                // Serialize
                var serializedAtom = atom.toJSON();
                serializedAtom['_id'] = atom.getAidString();
                // Store
                return _this.insert(serializedAtom);
            })
                .then(function (newDoc) {
                return atom;
            })
                .catch(function (error) {
                RadixLogger_1.logger.trace('Atom already in DB');
            });
        };
        this.getAtoms = function (queryAddress) {
            // Find
            var query = {};
            // logger.info(query)
            return _this.find(query).then(function (atoms) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var deserialized, atoms_1, atoms_1_1, atom, deserializedAtom, atomAddresses, atomAddresses_1, atomAddresses_1_1, address, e_1_1;
                var e_1, _a, e_2, _b;
                return tslib_1.__generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            deserialized = [];
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 6, 7, 8]);
                            atoms_1 = tslib_1.__values(atoms), atoms_1_1 = atoms_1.next();
                            _c.label = 2;
                        case 2:
                            if (!!atoms_1_1.done) return [3 /*break*/, 5];
                            atom = atoms_1_1.value;
                            return [4 /*yield*/, this.asyncDeserialize(atom)];
                        case 3:
                            deserializedAtom = _c.sent();
                            atomAddresses = deserializedAtom.getAddresses();
                            try {
                                for (atomAddresses_1 = (e_2 = void 0, tslib_1.__values(atomAddresses)), atomAddresses_1_1 = atomAddresses_1.next(); !atomAddresses_1_1.done; atomAddresses_1_1 = atomAddresses_1.next()) {
                                    address = atomAddresses_1_1.value;
                                    if (address.equals(queryAddress)) {
                                        deserialized.push(deserializedAtom);
                                        break;
                                    }
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (atomAddresses_1_1 && !atomAddresses_1_1.done && (_b = atomAddresses_1.return)) _b.call(atomAddresses_1);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                            _c.label = 4;
                        case 4:
                            atoms_1_1 = atoms_1.next();
                            return [3 /*break*/, 2];
                        case 5: return [3 /*break*/, 8];
                        case 6:
                            e_1_1 = _c.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 8];
                        case 7:
                            try {
                                if (atoms_1_1 && !atoms_1_1.done && (_a = atoms_1.return)) _a.call(atoms_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                            return [7 /*endfinally*/];
                        case 8: return [2 /*return*/, deserialized];
                    }
                });
            }); });
        };
        // Promise wrappers for nedb
        this.findOne = function (opt) {
            return new Promise(function (resolve, reject) {
                _this.db.findOne(opt, function (error, doc) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.notExists = function (opt) {
            return new Promise(function (resolve, reject) {
                _this.db.findOne(opt, function (error, doc) {
                    if (error) {
                        reject(error);
                    }
                    else if (!doc) {
                        resolve(true);
                    }
                    reject('Atom already in db');
                });
            });
        };
        this.find = function (opt) {
            return new Promise(function (resolve, reject) {
                _this.db.find(opt, function (error, doc) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.insert = function (opt) {
            return new Promise(function (resolve, reject) {
                _this.db.insert(opt, function (error, doc) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.remove = function (opt) {
            return new Promise(function (resolve, reject) {
                _this.db.remove(opt, function (error, doc) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.db = new nedb_1.default({
            filename: filename,
            autoload: true,
        });
    }
    /**
     * Clears all atoms from the cache
     */
    RadixNEDBAtomCache.prototype.reset = function () {
        this.db.remove({}, { multi: true }, function (error, numRemoved) {
            // Do nothing
        });
    };
    RadixNEDBAtomCache.prototype.asyncDeserialize = function (atom) {
        return new Promise(function (resolve, reject) {
            setTimeout(function () {
                delete atom['_id'];
                resolve(atommodel_1.RadixSerializer.fromJSON(atom));
            }, 0);
        });
    };
    RadixNEDBAtomCache.prototype.deleteAtom = function (atom) {
        return this.remove({ _id: atom.getAidString() });
    };
    return RadixNEDBAtomCache;
}());
exports.default = RadixNEDBAtomCache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhORURCQXRvbUNhY2hlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvY2FjaGUvUmFkaXhORURCQXRvbUNhY2hlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHNEQUE0QjtBQUk1QiwwQ0FBd0U7QUFDeEUscURBQStDO0FBRS9DO0lBR0k7OztPQUdHO0lBQ0gsNEJBQVksUUFBZ0I7UUFBNUIsaUJBS0M7UUFXTSxjQUFTLEdBQUcsVUFBQyxJQUFlO1lBQy9CLE9BQU8sS0FBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQztpQkFDOUMsSUFBSSxDQUFDO2dCQUNGLFlBQVk7Z0JBQ1osSUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFBO2dCQUNwQyxjQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFBO2dCQUUzQyxRQUFRO2dCQUNSLE9BQU8sS0FBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQTtZQUN0QyxDQUFDLENBQUM7aUJBQ0QsSUFBSSxDQUFDLFVBQUMsTUFBVztnQkFDZCxPQUFPLElBQUksQ0FBQTtZQUNmLENBQUMsQ0FBQztpQkFDRCxLQUFLLENBQUMsVUFBQSxLQUFLO2dCQUNSLG9CQUFNLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUE7WUFDdEMsQ0FBQyxDQUFDLENBQUE7UUFDVixDQUFDLENBQUE7UUFFTSxhQUFRLEdBQUcsVUFBQyxZQUEyQjtZQUMxQyxPQUFPO1lBQ1AsSUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFBO1lBRWhCLHFCQUFxQjtZQUNyQixPQUFPLEtBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQU8sS0FBWTs7Ozs7OzRCQUl0QyxZQUFZLEdBQWdCLEVBQUUsQ0FBQTs7Ozs0QkFDakIs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