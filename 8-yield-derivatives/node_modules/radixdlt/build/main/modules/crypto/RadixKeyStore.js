"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var atommodel_1 = require("../atommodel");
var crypto_1 = tslib_1.__importDefault(require("crypto"));
var RadixUtil_1 = require("../common/RadixUtil");
var RadixKeyStore = /** @class */ (function () {
    function RadixKeyStore() {
    }
    /**
     * Encrypt a private key
     * @param address
     * @param password
     * @returns
     */
    RadixKeyStore.encryptKey = function (address, password) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var privateKey = address.keyPair.getPrivate('hex');
            // Derrive key
            var salt = crypto_1.default.randomBytes(32).toString('hex');
            var iterations = 100000;
            var keylen = 32;
            var digest = 'sha512';
            crypto_1.default.pbkdf2(password, salt, iterations, keylen, digest, function (error, derivedKey) {
                if (error) {
                    reject(error);
                }
                // Encrypt private keys with derrived key
                var algorithm = 'aes-256-ctr';
                var iv = crypto_1.default.randomBytes(16);
                var cipher = crypto_1.default.createCipheriv(algorithm, derivedKey, iv);
                var ciphertext = Buffer.concat([
                    cipher.update(privateKey),
                    cipher.final(),
                ]);
                // Compute MAC
                var mac = _this.calculateMac(derivedKey, ciphertext);
                var fileContents = {
                    crypto: {
                        cipher: algorithm,
                        cipherparams: {
                            iv: iv.toString('hex'),
                        },
                        ciphertext: ciphertext.toString('hex'),
                        pbkdfparams: {
                            iterations: iterations,
                            keylen: keylen,
                            digest: digest,
                            salt: salt,
                        },
                        mac: mac.toString('hex'),
                    },
                    id: address.getUID().toString(),
                };
                resolve(fileContents);
            });
        });
    };
    /**
     * Decrypts an encrypted private key
     * @param fileContents
     * @param password
     * @returns key
     */
    RadixKeyStore.decryptKey = function (fileContents, password) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            // Derrive key
            var salt = fileContents.crypto.pbkdfparams.salt;
            var iterations = fileContents.crypto.pbkdfparams.iterations;
            var keylen = fileContents.crypto.pbkdfparams.keylen;
            var digest = fileContents.crypto.pbkdfparams.digest;
            crypto_1.default.pbkdf2(password, salt, iterations, keylen, digest, function (error, derivedKey) {
                if (error) {
                    return reject(error);
                }
                // Decrypt ciphertext
                var algorithm = fileContents.crypto.cipher;
                var iv = Buffer.from(fileContents.crypto.cipherparams.iv, 'hex');
                var ciphertext = Buffer.from(fileContents.crypto.ciphertext, 'hex');
                // Check MAC
                var MAC = Buffer.from(fileContents.crypto.mac, 'hex');
                var computedMAC = _this.calculateMac(derivedKey, ciphertext);
                if (!computedMAC.equals(MAC)) {
                    return reject('MAC mismatch');
                }
                var decipher = crypto_1.default.createDecipheriv(algorithm, derivedKey, iv);
                var privateKey = Buffer.concat([
                    decipher.update(ciphertext),
                    decipher.final(),
                ]).toString();
                // Create wallet
                var keyPair = atommodel_1.RadixAddress.fromPrivate(privateKey);
                return resolve(keyPair);
            });
        });
    };
    RadixKeyStore.calculateMac = function (derivedKey, ciphertext) {
        var dataToMac = Buffer.concat([derivedKey, ciphertext]);
        return RadixUtil_1.radixHash(dataToMac);
    };
    return RadixKeyStore;
}());
exports.default = RadixKeyStore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhLZXlTdG9yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2NyeXB0by9SYWRpeEtleVN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBDQUEyQztBQUMzQywwREFBMkI7QUFDM0IsaURBQWdEO0FBcUJoRDtJQUFBO0lBOElBLENBQUM7SUE1SUc7Ozs7O09BS0c7SUFDVyx3QkFBVSxHQUF4QixVQUF5QixPQUFxQixFQUFFLFFBQWdCO1FBQWhFLGlCQTREQztRQTNERyxPQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFDL0IsSUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUE7WUFFcEQsY0FBYztZQUNkLElBQU0sSUFBSSxHQUFHLGdCQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUNuRCxJQUFNLFVBQVUsR0FBRyxNQUFNLENBQUE7WUFDekIsSUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFBO1lBQ2pCLElBQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQTtZQUV2QixnQkFBTSxDQUFDLE1BQU0sQ0FDVCxRQUFRLEVBQ1IsSUFBSSxFQUNKLFVBQVUsRUFDVixNQUFNLEVBQ04sTUFBTSxFQUNOLFVBQUMsS0FBSyxFQUFFLFVBQVU7Z0JBQ2QsSUFBSSxLQUFLLEVBQUU7b0JBQ1AsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO2lCQUNoQjtnQkFFRCx5Q0FBeUM7Z0JBQ3pDLElBQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQTtnQkFDL0IsSUFBTSxFQUFFLEdBQUcsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUE7Z0JBQ2pDLElBQU0sTUFBTSxHQUFHLGdCQUFNLENBQUMsY0FBYyxDQUNoQyxTQUFTLEVBQ1QsVUFBVSxFQUNWLEVBQUUsQ0FD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