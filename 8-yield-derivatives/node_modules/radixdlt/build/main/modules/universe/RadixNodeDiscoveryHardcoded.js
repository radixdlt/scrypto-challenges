"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var axios_1 = tslib_1.__importDefault(require("axios"));
var atommodel_1 = require("../atommodel");
var __1 = require("../..");
/**
 * Radix node discovery from a fixed list
 */
var RadixNodeDiscoveryHardcoded = /** @class */ (function () {
    /**
     * Creates an instance of radix node discovery from seed.
     * @param bootstrapNode Full address to the rpc endpoint of a Radix node in the universe
     */
    function RadixNodeDiscoveryHardcoded(bootstrapNodes) {
        this.bootstrapNodes = bootstrapNodes;
    }
    RadixNodeDiscoveryHardcoded.prototype.loadNodes = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, Promise.all(this.bootstrapNodes.map(function (address) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                        var response, nodeInfo, node, error_1;
                        return tslib_1.__generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, axios_1.default.get("http://" + address + "/api/system")];
                                case 1:
                                    response = _a.sent();
                                    nodeInfo = atommodel_1.RadixSerializer.fromJSON(response.data);
                                    node = new __1.RadixNode(nodeInfo, "ws://" + address + "/rpc", "http://" + address + "/rpc");
                                    return [2 /*return*/, node];
                                case 2:
                                    error_1 = _a.sent();
                                    throw error_1;
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); }))];
            });
        });
    };
    return RadixNodeDiscoveryHardcoded;
}());
exports.default = RadixNodeDiscoveryHardcoded;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhOb2RlRGlzY292ZXJ5SGFyZGNvZGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvdW5pdmVyc2UvUmFkaXhOb2RlRGlzY292ZXJ5SGFyZGNvZGVkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdEQUF5QjtBQUl6QiwwQ0FBOEM7QUFDOUMsMkJBQWtEO0FBRWxEOztHQUVHO0FBQ0g7SUFFSTs7O09BR0c7SUFDSCxxQ0FDYSxjQUF3QjtRQUF4QixtQkFBYyxHQUFkLGNBQWMsQ0FBVTtJQUM5QixDQUFDO0lBRUssK0NBQVMsR0FBdEI7Ozs7Z0JBQ0ksc0JBQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxVQUFPLE9BQU87Ozs7OztvQ0FFaEMscUJBQU0sZUFBSyxDQUFDLEdBQUcsQ0FBQyxZQUFVLE9BQU8sZ0JBQWEsQ0FBQyxFQUFBOztvQ0FBMUQsUUFBUSxHQUFHLFNBQStDO29DQUMxRCxRQUFRLEdBQW9CLDJCQUFlLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtvQ0FDbkUsSUFBSSxHQUFHLElBQUksYUFBUyxDQUFDLFFBQVEsRUFBRSxVQUFRLE9BQU8sU0FBTSxFQUFFLFlBQVUsT0FBTyxTQUFNLENBQUMsQ0FBQTtvQ0FDcEYsc0JBQU8sSUFBSSxFQUFBOzs7b0NBRVgsTUFBTSxPQUFLLENBQUE7Ozs7eUJBRWxCLENBQUMsQ0FBQyxFQUFBOzs7S0FDTjtJQUNMLGtDQUFDO0FBQUQsQ0FBQyxBQXRCRCxJQXNCQyJ9