"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Rx_1 = require("rxjs/Rx");
var rpc_websockets_1 = require("rpc-websockets");
var atommodel_1 = require("../atommodel");
var RadixLogger_1 = require("../common/RadixLogger");
var events_1 = tslib_1.__importDefault(require("events"));
var RadixNodeConnection = /** @class */ (function (_super) {
    tslib_1.__extends(RadixNodeConnection, _super);
    function RadixNodeConnection(node) {
        var _this = _super.call(this) || this;
        _this.node = node;
        _this._subscriptions = {};
        _this._atomUpdateSubjects = {};
        _this._addressSubscriptions = {};
        _this.lastSubscriberId = 1;
        _this.ping = function () {
            if (_this.isReady()) {
                _this._socket
                    .call('Ping', { id: 0 }).then(function (response) {
                    RadixLogger_1.logger.debug("Ping", response);
                }).catch(function (error) {
                    RadixLogger_1.logger.warn("Error sending ping", error);
                });
            }
        };
        _this.close = function () {
            _this._socket.close();
            clearInterval(_this.pingInterval);
        };
        _this._onClosed = function () {
            RadixLogger_1.logger.info('Socket closed');
            clearInterval(_this.pingInterval);
            // Close subject
            for (var subscriberId in _this._subscriptions) {
                var subscription = _this._subscriptions[subscriberId];
                if (!subscription.closed) {
                    subscription.error('Socket closed');
                }
            }
            for (var subscriberId in _this._atomUpdateSubjects) {
                var subject = _this._atomUpdateSubjects[subscriberId];
                if (!subject.closed) {
                    subject.error('Socket closed');
                }
            }
            _this.emit('closed');
        };
        _this._onAtomStatusNotification = function (notification) {
            RadixLogger_1.logger.info('Atom Status notification', notification);
            // Handle atom state update
            var subscriberId = notification.subscriberId;
            var value = notification.status;
            var message = JSON.stringify(notification.data);
            var subject = _this._atomUpdateSubjects[subscriberId];
            switch (value) {
                case 'STORED':
                    subject.next(value);
                    subject.complete();
                    break;
                case 'EVICTED_CONFLICT_LOSER':
                case 'EVICTED_FAILED_CM_VERIFICATION':
                case 'MISSING_DEPEPENDENCY':
                case 'CONFLICT_LOSER':
                    subject.error(value + ': ' + message);
                    break;
            }
        };
        _this._onAtomSubmissionStateUpdate = function (notification) {
            RadixLogger_1.logger.info('Atom Submission state update', notification);
            // Handle atom state update
            var subscriberId = notification.subscriberId;
            var value = notification.value;
            var message = JSON.stringify(notification.data);
            var subject = _this._atomUpdateSubjects[subscriberId];
            switch (value) {
                case 'SUBMITTING':
                case 'SUBMITTED':
                    subject.next(value);
                    break;
                case 'STORED':
                    subject.next(value);
                    subject.complete();
                    break;
                case 'COLLISION':
                case 'ILLEGAL_STATE':
                case 'UNSUITABLE_PEER':
                case 'VALIDATION_ERROR':
                    subject.error(value + ': ' + message);
                    break;
            }
        };
        _this._onAtomReceivedNotification = function (notification) {
            var e_1, _a;
            RadixLogger_1.logger.debug('Atoms notification', notification);
            // Store atom for testing
            // const jsonPath = `./atomNotification-${Math.random().toString(36).substring(6)}.json`
            // // let jsonPath = path.join(__dirname, '..', '..', '..', '..', 'atomNotification.json')
            // logger.info(jsonPath)
            // fs.writeFile(jsonPath, JSON.stringify(notification), (error) => {
            //    // Throws an error, you could also catch it here
            //    if (error) { throw error }
            //    // Success case, the file was saved
            //    logger.info('Atoms saved!')
            // })
            var deserializedAtomEvents = atommodel_1.RadixSerializer.fromJSON(notification.atomEvents);
            RadixLogger_1.logger.debug('Recieved atom AIDs, subscriberId: ' + notification.subscriberId, deserializedAtomEvents.map(function (event) {
                return { aid: event.atom.getAidString(), type: event.type };
            }));
            // logger.debug('AtomEvents', deserializedAtomEvents)
            // Forward atoms to correct wallets
            var subscription = _this._subscriptions[notification.subscriberId];
            try {
                for (var deserializedAtomEvents_1 = tslib_1.__values(deserializedAtomEvents), deserializedAtomEvents_1_1 = deserializedAtomEvents_1.next(); !deserializedAtomEvents_1_1.done; deserializedAtomEvents_1_1 = deserializedAtomEvents_1.next()) {
                    var event_1 = deserializedAtomEvents_1_1.value;
                    subscription.next({
                        action: event_1.type.toUpperCase(),
                        atom: event_1.atom,
                        processedData: {},
                        // Only set to head if it is the last atom of an update
                        isHead: event_1 === deserializedAtomEvents[deserializedAtomEvents.length - 1],
                    });
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (deserializedAtomEvents_1_1 && !deserializedAtomEvents_1_1.done && (_a = deserializedAtomEvents_1.return)) _a.call(deserializedAtomEvents_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        _this.node = node;
        return _this;
    }
    RadixNodeConnection.prototype.getSubscriberId = function () {
        this.lastSubscriberId++;
        return this.lastSubscriberId + '';
    };
    /**
     * Check whether the node connection is ready for requests
     * @returns true if ready
     */
    RadixNodeConnection.prototype.isReady = function () {
        return this._socket && this._socket.ready;
    };
    /**
     * Opens connection
     * @returns a promise that resolves once the connection is ready, or rejects on error or timeout
     */
    RadixNodeConnection.prototype.openConnection = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.address = _this.node.wsAddress;
                        // For testing atom queueing during connection issues
                        // if (Math.random() > 0.1) {
                        //    this.address += 'garbage'
                        // }
                        RadixLogger_1.logger.info("Connecting to " + _this.address);
                        _this._socket = new rpc_websockets_1.Client(_this.address, { reconnect: false });
                        _this._socket.on('close', _this._onClosed);
                        _this._socket.on('error', function (error) {
                            RadixLogger_1.logger.error(error);
                            reject(error);
                        });
                        setTimeout(function () {
                            if (!_this._socket.ready) {
                                RadixLogger_1.logger.debug('Socket timeout');
                                _this._socket.close();
                                _this.emit('closed');
                                reject('Timeout');
                            }
                        }, 5000);
                        _this._socket.on('open', function () {
                            RadixLogger_1.logger.info("Connected to " + _this.address);
                            _this.pingInterval = setInterval(_this.ping, 10000);
                            _this.emit('open');
                            _this._socket.on('Atoms.subscribeUpdate', _this._onAtomReceivedNotification);
                            _this._socket.on('AtomSubmissionState.onNext', _this._onAtomSubmissionStateUpdate);
                            _this._socket.on('Atoms.nextStatusEvent', _this._onAtomStatusNotification);
                            resolve();
                        });
                    })];
            });
        });
    };
    /**
     * Subscribe for all existing and future atoms for a given address
     *
     * @param address Base58 formatted address
     * @returns A stream of atoms
     */
    RadixNodeConnection.prototype.subscribe = function (address) {
        var _this = this;
        var subscriberId = this.getSubscriberId();
        this._addressSubscriptions[address] = subscriberId;
        this._subscriptions[subscriberId] = new Rx_1.Subject();
        this._socket
            .call('Atoms.subscribe', {
            subscriberId: subscriberId,
            query: {
                address: address,
            },
            debug: true,
        })
            .then(function (response) {
            RadixLogger_1.logger.info("Subscribed for address " + address, response);
        })
            .catch(function (error) {
            RadixLogger_1.logger.error("Error subscribing for address " + address, error);
            _this._subscriptions[subscriberId].error(error);
        });
        return this._subscriptions[subscriberId];
    };
    /**
     * Unsubscribe for all existing and future atoms for a given address
     *
     * @param address - Base58 formatted address
     * @returns A promise with the result of the unsubscription call
     */
    RadixNodeConnection.prototype.unsubscribe = function (address) {
        var _this = this;
        var subscriberId = this._addressSubscriptions[address];
        return new Promise(function (resolve, reject) {
            _this._socket
                .call('Atoms.cancel', {
                subscriberId: subscriberId,
            })
                .then(function (response) {
                RadixLogger_1.logger.info("Unsubscribed for address " + address);
                _this._subscriptions[_this._addressSubscriptions[address]].complete();
                delete _this._addressSubscriptions[address];
                resolve(response);
            })
                .catch(function (error) {
                reject(error);
            });
        });
    };
    /**
     * Unsubscribes to all the addresses this node is subscribed to
     *
     * @returns An array with the result of each unsubscription
     */
    RadixNodeConnection.prototype.unsubscribeAll = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var unsubscriptions = new Array();
            for (var address in _this._addressSubscriptions) {
                unsubscriptions.push(_this.unsubscribe(address));
            }
            Promise.all(unsubscriptions)
                .then(function (values) {
                resolve(values);
            })
                .catch(function (error) {
                reject(error);
            });
        });
    };
    /**
     * Submit an atom to the ledger
     *
     * @param atom - The atom to be submitted
     * @returns A stream of the status of the atom submission
     */
    RadixNodeConnection.prototype.submitAtom = function (atom) {
        // // Store atom for testing
        // let jsonPath = path.join('./submitAtom.json')
        // logger.info(jsonPath)
        // fs.writeFile(jsonPath, JSON.stringify(atom.toJSON()), (error) => {
        //    // Throws an error, you could also catch it here
        //    if (error) { throw error }
        var _this = this;
        //    // Success case, the file was saved
        //    logger.info('Atom saved!')
        // })
        var subscriberId = this.getSubscriberId();
        var atomStateSubject = new Rx_1.BehaviorSubject('CREATED');
        this._atomUpdateSubjects[subscriberId] = atomStateSubject;
        var timeout = setTimeout(function () {
            _this._socket.close();
            atomStateSubject.error('Socket timeout');
        }, 5000);
        this._socket
            .call('Atoms.getAtomStatusNotifications', {
            subscriberId: subscriberId,
            aid: atom.getAidString(),
        })
            .then(function (response) {
            var atomJSON = atommodel_1.RadixSerializer.toJSON(atom);
            return _this._socket.call('Atoms.submitAtom', atomJSON);
        })
            .then(function (response) {
            if (response.aid !== atom.getAidString()) {
                throw new Error("Local AID \"" + atom.getAidString() + "\" does not match that computed on the node \"" + response.aid + "\".\nThis is a radixdlt-js issue, please report this at https://github.com/radixdlt/radixdlt-js/issues . \nThe atom may or may not have been accepted by the node.\n                    ");
            }
            clearTimeout(timeout);
            atomStateSubject.next('SUBMITTED');
        })
            .catch(function (error) {
            clearTimeout(timeout);
            atomStateSubject.error(error);
        });
        return atomStateSubject;
    };
    /**
     * NOT IMPLEMENTED
     * Query the ledger for an atom by its id
     * @param id
     * @returns The atom
     */
    RadixNodeConnection.prototype.getAtomById = function (id) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                // TODO: everything
                return [2 /*return*/, this._socket
                        .call('Atoms.getAtomInfo', { id: id.toJSON() })
                        .then(function (response) {
                        return atommodel_1.RadixSerializer.fromJSON(response.result);
                    })];
            });
        });
    };
    return RadixNodeConnection;
}(events_1.default.EventEmitter));
exports.RadixNodeConnection = RadixNodeConnection;
exports.default = RadixNodeConnection;
//# sourceMappingURL=data:application/json;base64,