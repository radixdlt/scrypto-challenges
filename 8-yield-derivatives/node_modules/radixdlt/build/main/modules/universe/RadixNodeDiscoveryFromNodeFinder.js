"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var axios_1 = tslib_1.__importDefault(require("axios"));
var atommodel_1 = require("../atommodel");
var __1 = require("../..");
/**
 * Node discovery from the Radix bootstrap service
 */
var RadixNodeDiscoveryFromNodeFinder = /** @class */ (function () {
    /**
     * Creates an instance of radix node discovery from node finder.
     * @param bootstrapService The full address to the node finder service for the universe
     */
    function RadixNodeDiscoveryFromNodeFinder(bootstrapService, wsAddress, httpAddress) {
        this.bootstrapService = bootstrapService;
        this.wsAddress = wsAddress;
        this.httpAddress = httpAddress;
    }
    RadixNodeDiscoveryFromNodeFinder.prototype.loadNodes = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var bootstrapNodeIP, bootstrapNode, getPeersRequestData, nodeListResponse, nodeList;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1.default.get(this.bootstrapService)];
                    case 1:
                        bootstrapNodeIP = (_a.sent()).data;
                        if (bootstrapNodeIP.length < 2) {
                            throw new Error('Failed to get node list from bootstrap service');
                        }
                        bootstrapNode = this.httpAddress(bootstrapNodeIP, 0);
                        getPeersRequestData = {
                            id: 0,
                            method: 'Network.getLivePeers',
                            params: [],
                        };
                        return [4 /*yield*/, axios_1.default.post(bootstrapNode, getPeersRequestData)];
                    case 2:
                        nodeListResponse = _a.sent();
                        nodeList = atommodel_1.RadixSerializer.fromJSON(nodeListResponse.data.result);
                        if (nodeList.length === 0) {
                            throw new Error('Bootstrap node has no connections');
                        }
                        return [2 /*return*/, nodeList.map(function (peerInfo) {
                                return new __1.RadixNode(peerInfo.system, _this.wsAddress(peerInfo.host.ip, peerInfo.host.port), _this.httpAddress(peerInfo.host.ip, peerInfo.host.port));
                            })];
                }
            });
        });
    };
    return RadixNodeDiscoveryFromNodeFinder;
}());
exports.default = RadixNodeDiscoveryFromNodeFinder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhOb2RlRGlzY292ZXJ5RnJvbU5vZGVGaW5kZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy91bml2ZXJzZS9SYWRpeE5vZGVEaXNjb3ZlcnlGcm9tTm9kZUZpbmRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3REFBeUI7QUFJekIsMENBQThDO0FBQzlDLDJCQUE2QztBQUU3Qzs7R0FFRztBQUNIO0lBRUk7OztPQUdHO0lBQ0gsMENBQ2EsZ0JBQXdCLEVBQ3hCLFNBQWlELEVBQ2pELFdBQW1EO1FBRm5ELHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBUTtRQUN4QixjQUFTLEdBQVQsU0FBUyxDQUF3QztRQUNqRCxnQkFBVyxHQUFYLFdBQVcsQ0FBd0M7SUFBRyxDQUFDO0lBRXZELG9EQUFTLEdBQXRCOzs7Ozs7NEJBQzZCLHFCQUFNLGVBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUE7O3dCQUF6RCxlQUFlLEdBQUcsQ0FBQyxTQUFzQyxDQUFDLENBQUMsSUFBSTt3QkFDckUsSUFBSSxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs0QkFDNUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFBO3lCQUNwRTt3QkFDSyxhQUFhLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUE7d0JBRXBELG1CQUFtQixHQUFHOzRCQUN4QixFQUFFLEVBQUUsQ0FBQzs0QkFDTCxNQUFNLEVBQUUsc0JBQXNCOzRCQUM5QixNQUFNLEVBQUUsRUFBRTt5QkFDYixDQUFBO3dCQUN3QixxQkFBTSxlQUFLLENBQUMsSUFBSSxDQUNyQyxhQUFhLEVBQ2IsbUJBQW1CLENBQ3RCLEVBQUE7O3dCQUhLLGdCQUFnQixHQUFHLFNBR3hCO3dCQUVLLFFBQVEsR0FBZ0IsMkJBQWUsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO3dCQUVwRixJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFOzRCQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUE7eUJBQ3ZEO3dCQUVELHNCQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBQyxRQUFRO2dDQUN6QixPQUFPLElBQUksYUFBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQ2hDLEtBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFDcEQsS0FBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7NEJBQy9ELENBQUMsQ0FBQyxFQUFBOzs7O0tBQ0w7SUFDTCx1Q0FBQztBQUFELENBQUMsQUF4Q0QsSUF3Q0MifQ==