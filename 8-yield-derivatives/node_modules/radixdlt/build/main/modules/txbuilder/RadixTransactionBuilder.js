"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var typescript_map_1 = require("typescript-map");
var decimal_js_1 = tslib_1.__importDefault(require("decimal.js"));
var bn_js_1 = tslib_1.__importDefault(require("bn.js"));
var __1 = require("../..");
var atommodel_1 = require("../atommodel");
var RadixLogger_1 = require("../common/RadixLogger");
var RadixTokenDefinition_1 = require("../token/RadixTokenDefinition");
var RadixTransactionBuilder = /** @class */ (function () {
    function RadixTransactionBuilder() {
        this.BNZERO = new bn_js_1.default(0);
        this.DCZERO = new decimal_js_1.default(0);
        this.participants = new typescript_map_1.TSMap();
        this.particleGroups = [];
    }
    RadixTransactionBuilder.prototype.getSubUnitsQuantity = function (decimalQuantity) {
        if (typeof decimalQuantity !== 'number' && typeof decimalQuantity !== 'string' && !decimal_js_1.default.isDecimal(decimalQuantity)) {
            throw new Error('quantity is not a valid number');
        }
        var unitsQuantity = new decimal_js_1.default(decimalQuantity);
        var subunitsQuantity = RadixTokenDefinition_1.RadixTokenDefinition.fromDecimalToSubunits(unitsQuantity);
        return subunitsQuantity;
    };
    /**
     * Creates transfer atom
     * @param from Sender account, needs to have RadixAccountTransferSystem
     * @param to Receiver account
     * @param tokenReference TokenClassReference string
     * @param decimalQuantity
     * @param [message] Optional reference message
     */
    RadixTransactionBuilder.createTransferAtom = function (from, to, tokenReference, decimalQuantity, message) {
        return new RadixTransactionBuilder().addTransfer(from, to, tokenReference, decimalQuantity, message);
    };
    /**
     * Creates transfer atom
     * @param from Sender account, needs to have RadixAccountTransferSystem
     * @param to Receiver account
     * @param tokenReferenceURI TokenClassReference string
     * @param decimalQuantity
     * @param [message] Optional reference message
     */
    RadixTransactionBuilder.prototype.addTransfer = function (from, to, tokenReference, decimalQuantity, message) {
        var e_1, _a;
        tokenReference = (tokenReference instanceof atommodel_1.RRI)
            ? tokenReference
            : atommodel_1.RRI.fromString(tokenReference);
        var subunitsQuantity = this.getSubUnitsQuantity(decimalQuantity);
        if (subunitsQuantity.lt(this.BNZERO)) {
            throw new Error('Negative quantity is not allowed');
        }
        else if (subunitsQuantity.eq(this.BNZERO)) {
            throw new Error("Quantity 0 is not valid");
        }
        var transferSytem = from.transferSystem;
        if (subunitsQuantity.gt(transferSytem.balance[tokenReference.toString()])) {
            throw new Error('Insufficient funds');
        }
        var unspentConsumables = transferSytem.getUnspentConsumables();
        var createTransferAtomParticleGroup = new __1.RadixParticleGroup();
        var consumerQuantity = new bn_js_1.default(0);
        var granularity = new bn_js_1.default(1);
        var tokenPermissions;
        try {
            for (var unspentConsumables_1 = tslib_1.__values(unspentConsumables), unspentConsumables_1_1 = unspentConsumables_1.next(); !unspentConsumables_1_1.done; unspentConsumables_1_1 = unspentConsumables_1.next()) {
                var consumable = unspentConsumables_1_1.value;
                if (!consumable.getTokenDefinitionReference().equals(tokenReference)) {
                    continue;
                }
                // Assumes all consumables of a token have the same granularity and permissions(enforced by core)
                granularity = consumable.getGranularity();
                tokenPermissions = consumable.getTokenPermissions();
                createTransferAtomParticleGroup.particles.push(atommodel_1.RadixSpunParticle.down(consumable));
                consumerQuantity.iadd(consumable.getAmount());
                if (consumerQuantity.gte(subunitsQuantity)) {
                    break;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (unspentConsumables_1_1 && !unspentConsumables_1_1.done && (_a = unspentConsumables_1.return)) _a.call(unspentConsumables_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        createTransferAtomParticleGroup.particles.push(atommodel_1.RadixSpunParticle.up(new atommodel_1.RadixTransferrableTokensParticle(subunitsQuantity, granularity, to.address, Date.now(), tokenReference, tokenPermissions)));
        // Remainder to myself
        if (consumerQuantity.sub(subunitsQuantity).gtn(0)) {
            createTransferAtomParticleGroup.particles.push(atommodel_1.RadixSpunParticle.up(new atommodel_1.RadixTransferrableTokensParticle(consumerQuantity.sub(subunitsQuantity), granularity, from.address, Date.now(), tokenReference, tokenPermissions)));
        }
        if (!subunitsQuantity.mod(granularity).eq(this.BNZERO)) {
            throw new Error("This token requires that any tranferred amount is a multiple of it's granularity = \n                " + RadixTokenDefinition_1.RadixTokenDefinition.fromSubunitsToDecimal(granularity));
        }
        this.participants.set(from.getAddress(), from);
        this.participants.set(to.getAddress(), to);
        if (message) {
            this.addEncryptedMessage(from, 'transfer', message, [to, from]);
        }
        this.particleGroups.push(createTransferAtomParticleGroup);
        return this;
    };
    /**
     * Create an atom to burn a specified amount of tokens
     * ownerAccount must be the owner and the holder of the tokens to be burned
     *
     * @param  {RadixAccount} ownerAccount
     * @param  {string|RRI} tokenReference
     * @param  {string|number|Decimal} decimalQuantity
     */
    RadixTransactionBuilder.createBurnAtom = function (ownerAccount, tokenReference, decimalQuantity) {
        return new this().burnTokens(ownerAccount, tokenReference, decimalQuantity);
    };
    /**
     * Create an atom to burn a specified amount of tokens
     * The token must be multi-issuance
     *
     * @param  {RadixAccount} ownerAccount must be the owner and the holder of the tokens to be burned
     * @param  {string|RRI} tokenReference
     * @param  {string|number|Decimal} decimalQuantity
     */
    RadixTransactionBuilder.prototype.burnTokens = function (ownerAccount, tokenReference, decimalQuantity) {
        var e_2, _a;
        tokenReference = (tokenReference instanceof atommodel_1.RRI)
            ? tokenReference
            : atommodel_1.RRI.fromString(tokenReference);
        var tokenClass = ownerAccount.tokenDefinitionSystem.getTokenDefinition(tokenReference.getName());
        var subunitsQuantity = this.getSubUnitsQuantity(decimalQuantity);
        if (subunitsQuantity.lt(this.BNZERO)) {
            throw new Error('Negative quantity is not allowed');
        }
        else if (subunitsQuantity.eq(this.BNZERO)) {
            throw new Error("Quantity 0 is not valid");
        }
        var transferSytem = ownerAccount.transferSystem;
        if (tokenClass.tokenSupplyType !== RadixTokenDefinition_1.RadixTokenSupplyType.MUTABLE) {
            throw new Error('This token is fixed supply');
        }
        if (subunitsQuantity.gt(transferSytem.balance[tokenReference.toString()])) {
            throw new Error('Insufficient funds');
        }
        if (!subunitsQuantity.mod(tokenClass.getGranularity()).eq(this.BNZERO)) {
            throw new Error("This token requires that any tranferred amount is a multiple of it's granularity = \n                " + RadixTokenDefinition_1.RadixTokenDefinition.fromSubunitsToDecimal(tokenClass.getGranularity()));
        }
        var unspentConsumables = transferSytem.getUnspentConsumables();
        var burnParticleGroup = new __1.RadixParticleGroup();
        var consumerQuantity = new bn_js_1.default(0);
        var tokenPermissions;
        try {
            for (var unspentConsumables_2 = tslib_1.__values(unspentConsumables), unspentConsumables_2_1 = unspentConsumables_2.next(); !unspentConsumables_2_1.done; unspentConsumables_2_1 = unspentConsumables_2.next()) {
                var consumable = unspentConsumables_2_1.value;
                if (!consumable.getTokenDefinitionReference().equals(tokenReference)) {
                    continue;
                }
                burnParticleGroup.particles.push(atommodel_1.RadixSpunParticle.down(consumable));
                tokenPermissions = consumable.getTokenPermissions();
                consumerQuantity.iadd(consumable.getAmount());
                if (consumerQuantity.gte(subunitsQuantity)) {
                    break;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (unspentConsumables_2_1 && !unspentConsumables_2_1.done && (_a = unspentConsumables_2.return)) _a.call(unspentConsumables_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        burnParticleGroup.particles.push(atommodel_1.RadixSpunParticle.up(new atommodel_1.RadixUnallocatedTokensParticle(subunitsQuantity, tokenClass.getGranularity(), Date.now(), tokenReference, tokenPermissions)));
        // Remainder to myself
        if (consumerQuantity.sub(subunitsQuantity).gtn(0)) {
            burnParticleGroup.particles.push(atommodel_1.RadixSpunParticle.up(new atommodel_1.RadixTransferrableTokensParticle(consumerQuantity.sub(subunitsQuantity), tokenClass.getGranularity(), ownerAccount.address, Date.now(), tokenReference, tokenPermissions)));
        }
        this.particleGroups.push(burnParticleGroup);
        this.participants.set(ownerAccount.getAddress(), ownerAccount);
        return this;
    };
    /**
     * Create an atom to mint a specified amount of tokens
     * The token must be multi-issuance
     *
     * @param  {RadixAccount} ownerAccount must be the owner of the token
     * @param  {string|RRI} tokenReference
     * @param  {string|number|Decimal} decimalQuantity
     */
    RadixTransactionBuilder.createMintAtom = function (ownerAccount, tokenReference, decimalQuantity) {
        return new this().mintTokens(ownerAccount, tokenReference, decimalQuantity);
    };
    /**
     * Create an atom to mint a specified amount of tokens
     * The token must be multi-issuance
     *
     * @param  {RadixAccount} ownerAccount must be the owner of the token
     * @param  {string|RRI} tokenReference
     * @param  {string|number|Decimal} decimalQuantity
     */
    RadixTransactionBuilder.prototype.mintTokens = function (ownerAccount, tokenReference, decimalQuantity) {
        var e_3, _a;
        tokenReference = (tokenReference instanceof atommodel_1.RRI)
            ? tokenReference
            : atommodel_1.RRI.fromString(tokenReference);
        var tokenClass = ownerAccount.tokenDefinitionSystem.getTokenDefinition(tokenReference.getName());
        var subunitsQuantity = this.getSubUnitsQuantity(decimalQuantity);
        if (subunitsQuantity.lt(this.BNZERO)) {
            throw new Error('Negative quantity is not allowed');
        }
        else if (subunitsQuantity.eq(this.BNZERO)) {
            throw new Error("Quantity 0 is not valid");
        }
        if (tokenClass.tokenSupplyType !== RadixTokenDefinition_1.RadixTokenSupplyType.MUTABLE) {
            throw new Error('This token is fixed supply');
        }
        if (subunitsQuantity.gte(tokenClass.getUnallocatedSupply())) {
            throw new Error('Total supply would exceed 2^256');
        }
        if (!subunitsQuantity.mod(tokenClass.getGranularity()).eq(this.BNZERO)) {
            throw new Error("This token requires that any tranferred amount is a multiple of it's granularity = \n                " + RadixTokenDefinition_1.RadixTokenDefinition.fromSubunitsToDecimal(tokenClass.getGranularity()));
        }
        this.participants.set(ownerAccount.getAddress(), ownerAccount);
        var unallocatedTokens = tokenClass.getUnallocatedTokens();
        var tokenPermissions = unallocatedTokens[0].getTokenPermissions();
        var particleGroup = new __1.RadixParticleGroup();
        var consumerQuantity = new bn_js_1.default(0);
        try {
            for (var unallocatedTokens_1 = tslib_1.__values(unallocatedTokens), unallocatedTokens_1_1 = unallocatedTokens_1.next(); !unallocatedTokens_1_1.done; unallocatedTokens_1_1 = unallocatedTokens_1.next()) {
                var consumable = unallocatedTokens_1_1.value;
                particleGroup.particles.push(atommodel_1.RadixSpunParticle.down(consumable));
                consumerQuantity.iadd(consumable.getAmount());
                if (consumerQuantity.gte(subunitsQuantity)) {
                    break;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (unallocatedTokens_1_1 && !unallocatedTokens_1_1.done && (_a = unallocatedTokens_1.return)) _a.call(unallocatedTokens_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        // Remainder
        if (consumerQuantity.sub(subunitsQuantity).gtn(0)) {
            particleGroup.particles.push(atommodel_1.RadixSpunParticle.up(new atommodel_1.RadixUnallocatedTokensParticle(consumerQuantity.sub(subunitsQuantity), tokenClass.getGranularity(), Date.now(), tokenReference, tokenPermissions)));
        }
        var particle = new atommodel_1.RadixTransferrableTokensParticle(subunitsQuantity, tokenClass.getGranularity(), ownerAccount.address, Date.now(), tokenReference, tokenPermissions);
        particleGroup.particles.push(atommodel_1.RadixSpunParticle.up(particle));
        this.particleGroups.push(particleGroup);
        return this;
    };
    RadixTransactionBuilder.prototype.createToken = function (owner, name, symbol, description, granularity, decimalQuantity, iconUrl, permissions) {
        var tokenAmount = this.getSubUnitsQuantity(decimalQuantity);
        var tokenGranularity = this.getSubUnitsQuantity(granularity);
        if (tokenAmount.lt(this.BNZERO)) {
            throw new Error('Negative quantity is not allowed');
        }
        this.participants.set(owner.getAddress(), owner);
        var tokenClassParticle = new atommodel_1.RadixTokenDefinitionParticle(owner.address, name, symbol, description, tokenGranularity, iconUrl, permissions);
        var rriParticle = new atommodel_1.RadixRRIParticle(tokenClassParticle.getRRI());
        var initialSupplyParticle = new atommodel_1.RadixUnallocatedTokensParticle(new bn_js_1.default(2).pow(new bn_js_1.default(256)).subn(1), tokenGranularity, Date.now(), tokenClassParticle.getTokenDefinitionReference(), permissions);
        var createTokenParticleGroup = new __1.RadixParticleGroup([
            atommodel_1.RadixSpunParticle.down(rriParticle),
            atommodel_1.RadixSpunParticle.up(tokenClassParticle),
            atommodel_1.RadixSpunParticle.up(initialSupplyParticle),
        ]);
        this.particleGroups.push(createTokenParticleGroup);
        if (tokenAmount.gtn(0)) {
            var mintParticle = new atommodel_1.RadixTransferrableTokensParticle(tokenAmount, tokenGranularity, owner.address, Date.now(), tokenClassParticle.getTokenDefinitionReference(), permissions);
            var mintParticleGroup = new __1.RadixParticleGroup([
                atommodel_1.RadixSpunParticle.down(initialSupplyParticle),
                atommodel_1.RadixSpunParticle.up(mintParticle),
            ]);
            var remainder = initialSupplyParticle.getAmount().sub(mintParticle.getAmount());
            if (remainder.gten(0)) {
                // Remainder
                var remainingSupplyParticle = new atommodel_1.RadixUnallocatedTokensParticle(remainder, tokenGranularity, Date.now(), tokenClassParticle.getTokenDefinitionReference(), permissions);
                mintParticleGroup.particles.push(atommodel_1.RadixSpunParticle.up(remainingSupplyParticle));
            }
            this.particleGroups.push(mintParticleGroup);
        }
        return this;
    };
    RadixTransactionBuilder.prototype.createTokenSingleIssuance = function (owner, name, symbol, description, granularity, amount, iconUrl) {
        if (granularity === void 0) { granularity = new decimal_js_1.default('1e-18'); }
        var permissions = {
            mint: atommodel_1.RadixTokenPermissionsValues.TOKEN_CREATION_ONLY,
            burn: atommodel_1.RadixTokenPermissionsValues.TOKEN_CREATION_ONLY,
        };
        if (new decimal_js_1.default(amount).eq(0)) {
            throw new Error('Single-issuance tokens cannot have an amount of 0');
        }
        return this.createToken(owner, name, symbol, description, granularity, amount, iconUrl, permissions);
    };
    RadixTransactionBuilder.prototype.createTokenMultiIssuance = function (owner, name, symbol, description, granularity, amount, iconUrl) {
        if (granularity === void 0) { granularity = new decimal_js_1.default('1e-18'); }
        var permissions = {
            mint: atommodel_1.RadixTokenPermissionsValues.TOKEN_OWNER_ONLY,
            burn: atommodel_1.RadixTokenPermissionsValues.TOKEN_OWNER_ONLY,
        };
        return this.createToken(owner, name, symbol, description, granularity, amount, iconUrl, permissions);
    };
    /**
     * Creates payload atom
     * @param from
     * @param recipients Everyone who will receive and be able to decrypt the message
     * @param applicationId
     * @param payload
     * @param [encrypted] Sets if the message should be encrypted using ECIES
     */
    RadixTransactionBuilder.createPayloadAtom = function (from, recipients, applicationId, payload, encrypted) {
        if (encrypted === void 0) { encrypted = true; }
        if (encrypted) {
            return new RadixTransactionBuilder().addEncryptedMessage(from, applicationId, payload, recipients);
        }
        else {
            return new RadixTransactionBuilder().addUnencryptedMessage(from, applicationId, payload, recipients);
        }
    };
    /**
     * Creates radix messaging application payload atom
     * @param from
     * @param to
     * @param message
     */
    RadixTransactionBuilder.createRadixMessageAtom = function (from, to, message) {
        return new RadixTransactionBuilder().addEncryptedMessage(from, 'message', message, [from, to]);
    };
    RadixTransactionBuilder.prototype.addEncryptedMessage = function (from, applicationId, message, recipients) {
        var recipientPubKeys = recipients.map(function (r) { return r.address.getPublic(); });
        var _a = __1.RadixECIES.encryptForMultiple(recipientPubKeys, Buffer.from(message)), protectors = _a.protectors, ciphertext = _a.ciphertext;
        this.addMessageParticle(from, ciphertext, {
            application: applicationId,
        }, recipients);
        this.addMessageParticle(from, JSON.stringify(protectors.map(function (p) { return p.toString('base64'); })), {
            application: 'encryptor',
            contentType: 'application/json',
        }, recipients);
        return this;
    };
    RadixTransactionBuilder.prototype.addUnencryptedMessage = function (from, applicationId, message, recipients) {
        this.addMessageParticle(from, message, {
            application: applicationId,
        }, recipients);
        return this;
    };
    RadixTransactionBuilder.prototype.addMessageParticle = function (from, data, metadata, recipients) {
        var e_4, _a;
        try {
            for (var recipients_1 = tslib_1.__values(recipients), recipients_1_1 = recipients_1.next(); !recipients_1_1.done; recipients_1_1 = recipients_1.next()) {
                var recipient = recipients_1_1.value;
                this.participants.set(recipient.getAddress(), recipient);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (recipients_1_1 && !recipients_1_1.done && (_a = recipients_1.return)) _a.call(recipients_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        var particle = new atommodel_1.RadixMessageParticle(from.address, (recipients.length === 1) ? recipients[0].address : recipients[1].address, data, metadata);
        var particleParticleGroup = new __1.RadixParticleGroup([atommodel_1.RadixSpunParticle.up(particle)]);
        this.particleGroups.push(particleParticleGroup);
        return this;
    };
    /**
     * Add a particle which enforces that only one such particle can exists per account,
     * enforced on the ledger level
     *
     * @param  {RadixAccount} account Scope of the uniqueness constraint
     * @param  {string} unique The unique id
     */
    RadixTransactionBuilder.prototype.addUniqueParticle = function (account, unique) {
        var uniqueParticle = new atommodel_1.RadixUniqueParticle(account.address, unique);
        var rriParticle = new atommodel_1.RadixRRIParticle(uniqueParticle.getRRI());
        var uniqueParticleGroup = new __1.RadixParticleGroup([
            atommodel_1.RadixSpunParticle.down(rriParticle),
            atommodel_1.RadixSpunParticle.up(uniqueParticle),
        ]);
        this.particleGroups.push(uniqueParticleGroup);
        return this;
    };
    /**
     * Builds the atom, finds a node to submit to, adds network fee, signs the atom and submits
     * @param signer
     * @returns a BehaviourSubject that streams the atom status updates
     */
    RadixTransactionBuilder.prototype.signAndSubmit = function (signer) {
        var _this = this;
        var atom = this.buildAtom();
        var stateSubject = new rxjs_1.BehaviorSubject('FINDING_NODE');
        // Find a shard, any of the participant shards is ok
        var shard = atom.getShards()[0];
        // Get node from universe
        __1.radixUniverse.getNodeConnection(shard)
            .then(function (connection) {
            RadixTransactionBuilder.signAndSubmitAtom(atom, connection, signer, _this.participants.values())
                .subscribe(stateSubject);
        });
        return stateSubject;
    };
    RadixTransactionBuilder.prototype.buildAtom = function () {
        if (this.particleGroups.length === 0) {
            throw new Error('No particle groups specified');
        }
        var atom = new atommodel_1.RadixAtom();
        atom.particleGroups = this.particleGroups;
        // Add timestamp
        atom.setTimestamp(Date.now());
        return atom;
    };
    RadixTransactionBuilder.signAndSubmitAtom = function (atom, connection, signer, participants) {
        var signedAtom = null;
        // Add POW fee
        var stateSubject = new rxjs_1.BehaviorSubject('GENERATING_POW');
        atom.clearPowNonce();
        __1.RadixFeeProvider.generatePOWFee(__1.radixUniverse.universeConfig.getMagic(), atom).then(function (pow) {
            atom.setPowNonce(pow.nonce);
            // Sign atom
            stateSubject.next('SIGNING');
            return signer.signAtom(atom);
        }).then(function (_signedAtom) {
            var e_5, _a;
            signedAtom = _signedAtom;
            try {
                // Push atom into participant accounts to minimize delay
                for (var participants_1 = tslib_1.__values(participants), participants_1_1 = participants_1.next(); !participants_1_1.done; participants_1_1 = participants_1.next()) {
                    var participant = participants_1_1.value;
                    participant._onAtomReceived({
                        action: 'STORE',
                        atom: signedAtom,
                        processedData: {},
                        isHead: true,
                    });
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (participants_1_1 && !participants_1_1.done && (_a = participants_1.return)) _a.call(participants_1);
                }
                finally { if (e_5) throw e_5.error; }
            }
            var submissionSubject = connection.submitAtom(signedAtom);
            submissionSubject.subscribe(stateSubject);
            submissionSubject.subscribe({
                error: function (error) {
                    var e_6, _a;
                    RadixLogger_1.logger.info('Problem submitting atom, deleting', error);
                    try {
                        // Delete atom from participant accounts
                        for (var participants_2 = tslib_1.__values(participants), participants_2_1 = participants_2.next(); !participants_2_1.done; participants_2_1 = participants_2.next()) {
                            var participant = participants_2_1.value;
                            participant._onAtomReceived({
                                action: 'DELETE',
                                atom: signedAtom,
                                processedData: {},
                                isHead: true,
                            });
                        }
                    }
                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
                    finally {
                        try {
                            if (participants_2_1 && !participants_2_1.done && (_a = participants_2.return)) _a.call(participants_2);
                        }
                        finally { if (e_6) throw e_6.error; }
                    }
                }
            });
        }).catch(function (error) {
            stateSubject.error(error);
        });
        return stateSubject;
    };
    return RadixTransactionBuilder;
}());
exports.default = RadixTransactionBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhUcmFuc2FjdGlvbkJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy90eGJ1aWxkZXIvUmFkaXhUcmFuc2FjdGlvbkJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkJBQXNDO0FBQ3RDLGlEQUFzQztBQUd0QyxrRUFBZ0M7QUFDaEMsd0RBQXNCO0FBRXRCLDJCQVVjO0FBRWQsMENBY3FCO0FBRXJCLHFEQUE4QztBQUM5QyxzRUFBMEY7QUFFMUY7SUFBQTtRQUNZLFdBQU0sR0FBTyxJQUFJLGVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN0QixXQUFNLEdBQVksSUFBSSxvQkFBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRWhDLGlCQUFZLEdBQWdDLElBQUksc0JBQUssRUFBRSxDQUFBO1FBRXZELG1CQUFjLEdBQXlCLEVBQUUsQ0FBQTtJQTJxQnJELENBQUM7SUF6cUJXLHFEQUFtQixHQUEzQixVQUE0QixlQUE4QjtRQUN0RCxJQUFJLE9BQU8sZUFBZSxLQUFLLFFBQVEsSUFBSSxPQUFPLGVBQWUsS0FBSyxRQUFRLElBQUksQ0FBQyxvQkFBTyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsRUFBRTtZQUNuSCxNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUE7U0FDcEQ7UUFFRCxJQUFNLGFBQWEsR0FBRyxJQUFJLG9CQUFPLENBQUMsZUFBZSxDQUFDLENBQUE7UUFFbEQsSUFBTSxnQkFBZ0IsR0FBRywyQ0FBb0IsQ0FBQyxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsQ0FBQTtRQUVsRixPQUFPLGdCQUFnQixDQUFBO0lBQzNCLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ1csMENBQWtCLEdBQWhDLFVBQ0ksSUFBa0IsRUFDbEIsRUFBZ0IsRUFDaEIsY0FBNEIsRUFDNUIsZUFBMEMsRUFDMUMsT0FBZ0I7UUFFaEIsT0FBTyxJQUFJLHVCQUF1QixFQUFF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