import { Subject, Observable } from 'rxjs';
import { TSMap } from 'typescript-map';
import { RadixDecryptionState } from '../account/RadixDecryptionAccountSystem';
export default class RadixMessagingAccountSystem {
    constructor(address) {
        this.address = address;
        this.name = 'RADIX-MESSAGING';
        this.messageSubject = new Subject();
        this.chats = new TSMap();
        this.messages = new TSMap();
    }
    async processAtomUpdate(atomUpdate) {
        if (!('decryptedData' in atomUpdate.processedData) ||
            atomUpdate.processedData.decryptedData.application !== 'message' ||
            atomUpdate.processedData.decryptedData.decryptionState === RadixDecryptionState.CANNOT_DECRYPT) {
            return;
        }
        if (atomUpdate.action === 'STORE') {
            this.processStoreAtom(atomUpdate);
        }
        else if (atomUpdate.action === 'DELETE') {
            this.processDeleteAtom(atomUpdate);
        }
    }
    startNewChat(to) {
        // Create new chat
        const chatId = to.getAddress();
        if (this.chats.has(chatId)) {
            return;
        }
        const chatDescription = {
            address: to.getAddress(),
            chat_id: chatId,
            title: chatId,
            last_message_timestamp: Date.now(),
            messages: new TSMap(),
        };
        // Add at the top
        this.chats.set(chatId, chatDescription);
    }
    processStoreAtom(atomUpdate) {
        const atom = atomUpdate.atom;
        const aid = atom.getAidString();
        const signatures = atom.signatures;
        const decryptedData = atomUpdate.processedData.decryptedData;
        // Skip existing atoms
        if (this.messages.has(aid)) {
            return;
        }
        const from = decryptedData.from;
        const to = decryptedData.to.find(a => !a.equals(from));
        if (!to) {
            throw new Error('A message needs to have at least one other recipient');
        }
        // Chat id
        let address = null;
        let isMine = false;
        if (from.equals(this.address)) {
            address = to;
            isMine = true;
        }
        else {
            address = from;
        }
        if (address === null) {
            throw new Error('Error processing a radix-message atom: neither of addresses is owned by this account');
        }
        const chatId = address.toString();
        const message = {
            aid,
            chat_id: chatId,
            to,
            from,
            content: decryptedData.data,
            timestamp: atom.getTimestamp(),
            is_mine: isMine,
            encryptionState: decryptedData.decryptionState,
        };
        // Find existing chat
        // Otherwise create new chat
        if (!this.chats.has(chatId)) {
            const newChatDescription = {
                address: address.getAddress(),
                chat_id: chatId,
                title: chatId,
                last_message_timestamp: message.timestamp,
                messages: new TSMap(),
            };
            this.chats.set(chatId, newChatDescription);
        }
        const chatDescription = this.chats.get(chatId);
        if (message.timestamp > chatDescription.last_message_timestamp) {
            chatDescription.last_message_timestamp = message.timestamp;
        }
        chatDescription.messages.set(aid, message);
        // Move chat to the top
        this.chats.delete(chatId);
        this.chats.set(chatId, chatDescription);
        this.messages.set(aid, message);
        const messageUpdate = {
            action: 'STORE',
            aid,
            message,
        };
        this.messageSubject.next(messageUpdate);
    }
    processDeleteAtom(atomUpdate) {
        const atom = atomUpdate.atom;
        const aid = atom.getAidString();
        // Skip nonexisting atoms
        if (!this.messages.has(aid)) {
            return;
        }
        const message = this.messages.get(aid);
        this.chats.get(message.chat_id).messages.delete(aid);
        this.messages.delete(aid);
        const messageUpdate = {
            action: 'DELETE',
            aid,
            message,
        };
        this.messageSubject.next(messageUpdate);
    }
    getAllMessages() {
        return Observable.create((observer) => {
            // Send all old transactions
            for (const message of this.messages.values()) {
                const messageUpdate = {
                    action: 'STORE',
                    aid: message.aid,
                    message,
                };
                observer.next(messageUpdate);
            }
            // Subscribe for new ones
            this.messageSubject.subscribe(observer);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhNZXNzYWdpbmdBY2NvdW50U3lzdGVtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvbWVzc2FnaW5nL1JhZGl4TWVzc2FnaW5nQWNjb3VudFN5c3RlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBWSxNQUFNLE1BQU0sQ0FBQTtBQUNwRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFNdEMsT0FBTyxFQUFzQixvQkFBb0IsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBR25HLE1BQU0sQ0FBQyxPQUFPLE9BQU8sMkJBQTJCO0lBTzVDLFlBQXFCLE9BQXFCO1FBQXJCLFlBQU8sR0FBUCxPQUFPLENBQWM7UUFObkMsU0FBSSxHQUFHLGlCQUFpQixDQUFBO1FBQ3hCLG1CQUFjLEdBQWdDLElBQUksT0FBTyxFQUFFLENBQUE7UUFFM0QsVUFBSyxHQUE2QixJQUFJLEtBQUssRUFBRSxDQUFBO1FBQzdDLGFBQVEsR0FBZ0MsSUFBSSxLQUFLLEVBQUUsQ0FBQTtJQUViLENBQUM7SUFFdkMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLFVBQTJCO1FBQ3RELElBQUksQ0FBQyxDQUFDLGVBQWUsSUFBSSxVQUFVLENBQUMsYUFBYSxDQUFDO1lBQzlDLFVBQVUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFdBQVcsS0FBSyxTQUFTO1lBQ2hFLFVBQVUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLGVBQWUsS0FBSyxvQkFBb0IsQ0FBQyxjQUFjLEVBQUU7WUFDaEcsT0FBTTtTQUNUO1FBRUQsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLE9BQU8sRUFBRTtZQUMvQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUE7U0FDcEM7YUFBTSxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssUUFBUSxFQUFFO1lBQ3ZDLElBQUksQ0FB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