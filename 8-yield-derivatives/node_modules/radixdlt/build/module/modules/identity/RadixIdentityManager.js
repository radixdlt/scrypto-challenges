import { TSMap } from 'typescript-map';
import RadixSimpleIdentity from './RadixSimpleIdentity';
import RadixRemoteIdentity from './RadixRemoteIdentity';
import { RadixAddress } from '../atommodel';
import { radixHash } from '../common/RadixUtil';
export default class RadixIdentityManager {
    constructor() {
        this.identities = new TSMap();
    }
    /**
     * Generates a new random RadixSimpleIdentity
     *
     * @returns An instance of a RadixSimpleIdentity
     */
    generateSimpleIdentity() {
        const address = RadixAddress.generateNew();
        const identity = new RadixSimpleIdentity(address);
        this.identities.set(address.getAddress(), identity);
        return identity;
    }
    /**
     * Generates a new RadixSimpleIdentity from an arbitrary byte buffer.
     *
     * @param seed Buffer seed for the address of the identity
     * @returns An instance of a RadixSimpleIdentity
     */
    generateSimpleIdentityFromSeed(seed) {
        const hash = radixHash(seed);
        const address = RadixAddress.fromPrivate(hash);
        const identity = new RadixSimpleIdentity(address);
        this.identities.set(address.getAddress(), identity);
        return identity;
    }
    /**
     * Adds a new RadixSimpleIdentity
     *
     * @param address - The key pair of the identity(must have a private key)
     * @returns An instance of a RadixSimpleIdentity
     */
    addSimpleIdentity(address) {
        const identity = new RadixSimpleIdentity(address);
        this.identities.set(address.getAddress(), identity);
        return identity;
    }
    /**
     * Generates a new RadixRemoteIdentity
     *
     * @param name - The name of the application that wants to use the remote identity
     * @param description - The description of the application that wants to use the remote identity
     * @param [host] - The host of the wallet
     * @param [port] - The port in which the wallet server is being exposed
     * @returns A promise with an instance of a RadixRemoteIdentity
     */
    async generateRemoteIdentity(name, description, permissions, host, port) {
        try {
            return await RadixRemoteIdentity.createNew(name, description, permissions, host, port);
        }
        catch (error) {
            throw error;
        }
    }
    /**
     * Adds a new RadixIdentity to the set of available identities
     *
     * @returns A RadixIdentity
     */
    addIdentity(identity) {
        this.identities.set(identity.account.getAddress(), identity);
        return identity;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhJZGVudGl0eU1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy9pZGVudGl0eS9SYWRpeElkZW50aXR5TWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFHdEMsT0FBTyxtQkFBbUIsTUFBTSx1QkFBdUIsQ0FBQTtBQUN2RCxPQUFPLG1CQUFtQixNQUFNLHVCQUF1QixDQUFBO0FBQ3ZELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDNUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWhELE1BQU0sQ0FBQyxPQUFPLE9BQU8sb0JBQW9CO0lBQXpDO1FBQ1csZUFBVSxHQUFpQyxJQUFJLEtBQUssRUFBRSxDQUFBO0lBOEVqRSxDQUFDO0lBNUVHOzs7O09BSUc7SUFDSSxzQkFBc0I7UUFDekIsTUFBTSxPQUFPLEdBQUcsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQzFDLE1BQU0sUUFBUSxHQUFHLElBQUksbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFakQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBRW5ELE9BQU8sUUFBUSxDQUFBO0lBQ25CLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLDhCQUE4QixDQUFDLElBQVk7UUFDOUMsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzVCLE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDOUMsTUFBTSxRQUFRLEdBQUcsSUFBSSxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUVqRCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUE7UUFFbkQsT0FBTyxRQUFRLENBQUE7SUFDbkIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksaUJBQWlCLENBQUMsT0FBcUI7UUFDMUMsTUFBTSxRQUFRLEdBQUcsSUFBSSxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUVqRCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUE7UUFFbkQsT0FBTyxRQUFRLENBQUE7SUFDbkIsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0ksS0FBSyxDQUFDLHNCQUFzQixDQUMvQixJQUFZLEVBQ1osV0FBbUIsRUFDbkIsV0FBcUIsRUFDckIsSUFBWSxFQUNaLElBQVk7UUFDWixJQUFJO1lBQ0EsT0FBTyxNQUFNLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7U0FDekY7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNaLE1BQU0sS0FBSyxDQUFBO1NBQ2Q7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLFdBQVcsQ0FBQyxRQUF1QjtRQUN0QyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBRTVELE9BQU8sUUFBUSxDQUFBO0lBQ25CLENBQUM7Q0FDSiJ9