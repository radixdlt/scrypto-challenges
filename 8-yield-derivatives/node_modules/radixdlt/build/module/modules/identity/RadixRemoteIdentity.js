import RadixIdentity from './RadixIdentity';
import { RadixAddress, RadixSerializer } from '../atommodel';
import { logger } from '../common/RadixLogger';
import { Client } from 'rpc-websockets';
export default class RadixRemoteIdentity extends RadixIdentity {
    constructor(address, token, remoteUrl) {
        super(address);
        this.address = address;
        this.token = token;
        this.remoteUrl = remoteUrl;
    }
    /**
     * Checks if a given web socket connection is still alive, otherwise creates a new one
     *
     * @returns A WebSocket connection
     */
    getSocketConnection() {
        this.socket = new Client(this.remoteUrl);
        this.socket.on('error', (error) => logger.error(error));
        this.socket.on('close', () => logger.info('Socket closed'));
        return this.socket;
    }
    /**
     * Signs an atom with the wallet using the remote identity
     *
     * @param atom - The atom to be signed
     * @returns A promise with the signed atom
     */
    signAtom(atom) {
        return new Promise((resolve, reject) => {
            const socket = this.getSocketConnection();
            socket.on('open', () => {
                socket.call('sign_atom', {
                    token: this.token,
                    atom: RadixSerializer.toJSON(atom),
                }).then((response) => {
                    atom.signatures = RadixSerializer.fromJSON(response);
                    resolve(atom);
                }).catch((error) => {
                    reject(error);
                }).finally(() => {
                    socket.close();
                });
            });
        });
    }
    /**
     * Decrypt the payload of an atom
     *
     * @param payload - The payload of the atom to be decrypted
     * @returns A promise with the decrypted payload
     */
    async decryptECIESPayload(payload) {
        return new Promise((resolve, reject) => {
            const socket = this.getSocketConnection();
            socket.on('open', () => {
                socket.call('decrypt_ecies_payload', {
                    token: this.token,
                    payload,
                })
                    .then((response) => {
                    resolve(Buffer.from(response.data));
                })
                    .catch((error) => {
                    reject(error);
                }).finally(() => {
                    socket.close();
                });
            });
        });
    }
    async decryptECIESPayloadWithProtectors(protectors, payload) {
        return new Promise((resolve, reject) => {
            const socket = this.getSocketConnection();
            socket.on('open', () => {
                socket.call('decrypt_ecies_payload_with_protectors', {
                    token: this.token,
                    protectors,
                    payload,
                })
                    .then((response) => {
                    resolve(Buffer.from(response.data));
                })
                    .catch((error) => {
                    reject(error);
                }).finally(() => {
                    socket.close();
                });
            });
        });
    }
    /**
     * Returns the public key of this identity synchronously
     *
     * @returns The public key of the identity
     */
    getPublicKey() {
        return this.address.getPublic();
    }
    /**
     * Creates a new instance of a RadixRemoteIdentity
     *
     * @param name - The name of the application that wants to use the remote identity
     * @param description - The description of the application that wants to use the remote identity
     * @param [host] - The host of the wallet
     * @param [port] - The port in which the wallet server is being exposed
     * @returns A promise with an instance of a RadixRemoteIdentity
     */
    static async createNew(name, description, permissions = ['sign_atom', 'decrypt_ecies_payload', 'get_public_key'], host = 'localhost', port = '54345') {
        try {
            const token = await RadixRemoteIdentity.register(name, description, permissions, host, port);
            const publicKey = await RadixRemoteIdentity.getRemotePublicKey(token, host, port);
            return new RadixRemoteIdentity(RadixAddress.fromPublic(publicKey), token, `ws://${host}:${port}`);
        }
        catch (error) {
            throw error;
        }
    }
    /**
     * Registers a RadixRemoteIdentity to the wallet
     *
     * @param name - The name of the application that wants to use the remote identity
     * @param description - The description of the application that wants to use the remote identity
     * @param [host] - The host of the wallet
     * @param [port] - The port in which the wallet server is being exposed
     * @returns A promise with a valid token to interact with the wallet
     */
    static register(name, description, permissions, host = 'localhost', port = '54345') {
        return new Promise((resolve, reject) => {
            // This is an independant websocket because 'register' is a static method
            const socket = new Client(`ws://${host}:${port}`);
            socket.on('open', () => {
                socket.call('register', {
                    name,
                    description,
                    permissions,
                }).then((response) => {
                    resolve(response.token);
                }).catch((error) => {
                    reject(error);
                });
            });
        });
    }
    /**
     * Returns the public key of this identity asynchronously
     *
     * @param [host] - The host of the wallet
     * @param [port] - The port in which the wallet server is being exposed
     * @returns A promise with the public key of the identity
     */
    static getRemotePublicKey(token, host = 'localhost', port = '54345') {
        return new Promise((resolve, reject) => {
            // This is an independant websocket because 'getRemotePublicKey' is a static method
            const socket = new Client(`ws://${host}:${port}`);
            socket.on('open', () => {
                socket.call('get_public_key', {
                    token,
                }).then((response) => {
                    resolve(response.data);
                }).catch((error) => {
                    reject(error);
                }).finally(() => {
                    socket.close();
                });
            });
        });
    }
    /**
     * Determines whether the server is up or down
     *
     * @param [host] - The host of the wallet
     * @param [port] - The port in which the wallet server is being exposed
     * @returns A promise with true or false whether the server is up or down
     */
    static isServerUp(host = 'localhost', port = '54345') {
        return new Promise((resolve, reject) => {
            const socket = new Client(`ws://${host}:${port}`);
            socket.on('open', () => resolve(true));
            setTimeout(() => {
                if (socket && socket.ready) {
                    socket.close();
                    resolve(true);
                }
                else {
                    socket.close();
                    resolve(false);
                }
            }, 2000);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhSZW1vdGVJZGVudGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2lkZW50aXR5L1JhZGl4UmVtb3RlSWRlbnRpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxhQUFhLE1BQU0saUJBQWlCLENBQUE7QUFHM0MsT0FBTyxFQUFhLFlBQVksRUFBRSxlQUFlLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFFdkUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHVCQUF1QixDQUFBO0FBRTlDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUV2QyxNQUFNLENBQUMsT0FBTyxPQUFPLG1CQUFvQixTQUFRLGFBQWE7SUFLMUQsWUFBNkIsT0FBcUIsRUFBRSxLQUFhLEVBQUUsU0FBaUI7UUFDaEYsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRFcsWUFBTyxHQUFQLE9BQU8sQ0FBYztRQUc5QyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtRQUNsQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQTtJQUM5QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLG1CQUFtQjtRQUN2QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUV4QyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtRQUN2RCxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFBO1FBRTNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQTtJQUN0QixDQUFDO0lBRUQ7Ozs7O09B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