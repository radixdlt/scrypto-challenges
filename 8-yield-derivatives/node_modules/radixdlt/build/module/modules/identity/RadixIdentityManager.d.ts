/// <reference types="node" />
import { TSMap } from 'typescript-map';
import RadixIdentity from './RadixIdentity';
import { RadixAddress } from '../atommodel';
export default class RadixIdentityManager {
    identities: TSMap<string, RadixIdentity>;
    /**
     * Generates a new random RadixSimpleIdentity
     *
     * @returns An instance of a RadixSimpleIdentity
     */
    generateSimpleIdentity(): RadixIdentity;
    /**
     * Generates a new RadixSimpleIdentity from an arbitrary byte buffer.
     *
     * @param seed Buffer seed for the address of the identity
     * @returns An instance of a RadixSimpleIdentity
     */
    generateSimpleIdentityFromSeed(seed: Buffer): RadixIdentity;
    /**
     * Adds a new RadixSimpleIdentity
     *
     * @param address - The key pair of the identity(must have a private key)
     * @returns An instance of a RadixSimpleIdentity
     */
    addSimpleIdentity(address: RadixAddress): RadixIdentity;
    /**
     * Generates a new RadixRemoteIdentity
     *
     * @param name - The name of the application that wants to use the remote identity
     * @param description - The description of the application that wants to use the remote identity
     * @param [host] - The host of the wallet
     * @param [port] - The port in which the wallet server is being exposed
     * @returns A promise with an instance of a RadixRemoteIdentity
     */
    generateRemoteIdentity(name: string, description: string, permissions: string[], host: string, port: string): Promise<RadixIdentity>;
    /**
     * Adds a new RadixIdentity to the set of available identities
     *
     * @returns A RadixIdentity
     */
    addIdentity(identity: RadixIdentity): RadixIdentity;
}
