/// <reference types="node" />
import RadixIdentity from './RadixIdentity';
import { RadixAtom, RadixAddress } from '../atommodel';
export default class RadixRemoteIdentity extends RadixIdentity {
    readonly address: RadixAddress;
    private token;
    private remoteUrl;
    private socket;
    private constructor();
    /**
     * Checks if a given web socket connection is still alive, otherwise creates a new one
     *
     * @returns A WebSocket connection
     */
    private getSocketConnection;
    /**
     * Signs an atom with the wallet using the remote identity
     *
     * @param atom - The atom to be signed
     * @returns A promise with the signed atom
     */
    signAtom(atom: RadixAtom): Promise<RadixAtom>;
    /**
     * Decrypt the payload of an atom
     *
     * @param payload - The payload of the atom to be decrypted
     * @returns A promise with the decrypted payload
     */
    decryptECIESPayload(payload: Buffer): Promise<Buffer>;
    decryptECIESPayloadWithProtectors(protectors: Buffer[], payload: Buffer): Promise<Buffer>;
    /**
     * Returns the public key of this identity synchronously
     *
     * @returns The public key of the identity
     */
    getPublicKey(): Buffer;
    /**
     * Creates a new instance of a RadixRemoteIdentity
     *
     * @param name - The name of the application that wants to use the remote identity
     * @param description - The description of the application that wants to use the remote identity
     * @param [host] - The host of the wallet
     * @param [port] - The port in which the wallet server is being exposed
     * @returns A promise with an instance of a RadixRemoteIdentity
     */
    static createNew(name: string, description: string, permissions?: string[], host?: string, port?: string): Promise<RadixRemoteIdentity>;
    /**
     * Registers a RadixRemoteIdentity to the wallet
     *
     * @param name - The name of the application that wants to use the remote identity
     * @param description - The description of the application that wants to use the remote identity
     * @param [host] - The host of the wallet
     * @param [port] - The port in which the wallet server is being exposed
     * @returns A promise with a valid token to interact with the wallet
     */
    static register(name: string, description: string, permissions: string[], host?: string, port?: string): Promise<string>;
    /**
     * Returns the public key of this identity asynchronously
     *
     * @param [host] - The host of the wallet
     * @param [port] - The port in which the wallet server is being exposed
     * @returns A promise with the public key of the identity
     */
    static getRemotePublicKey(token: any, host?: string, port?: string): Promise<Buffer>;
    /**
     * Determines whether the server is up or down
     *
     * @param [host] - The host of the wallet
     * @param [port] - The port in which the wallet server is being exposed
     * @returns A promise with true or false whether the server is up or down
     */
    static isServerUp(host?: string, port?: string): Promise<boolean>;
}
