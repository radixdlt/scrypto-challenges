import { RadixAddress } from '../atommodel';
import crypto from 'crypto';
import { radixHash } from '../common/RadixUtil';
export default class RadixKeyStore {
    /**
     * Encrypt a private key
     * @param address
     * @param password
     * @returns
     */
    static encryptKey(address, password) {
        return new Promise((resolve, reject) => {
            const privateKey = address.keyPair.getPrivate('hex');
            // Derrive key
            const salt = crypto.randomBytes(32).toString('hex');
            const iterations = 100000;
            const keylen = 32;
            const digest = 'sha512';
            crypto.pbkdf2(password, salt, iterations, keylen, digest, (error, derivedKey) => {
                if (error) {
                    reject(error);
                }
                // Encrypt private keys with derrived key
                const algorithm = 'aes-256-ctr';
                const iv = crypto.randomBytes(16);
                const cipher = crypto.createCipheriv(algorithm, derivedKey, iv);
                const ciphertext = Buffer.concat([
                    cipher.update(privateKey),
                    cipher.final(),
                ]);
                // Compute MAC
                const mac = this.calculateMac(derivedKey, ciphertext);
                const fileContents = {
                    crypto: {
                        cipher: algorithm,
                        cipherparams: {
                            iv: iv.toString('hex'),
                        },
                        ciphertext: ciphertext.toString('hex'),
                        pbkdfparams: {
                            iterations,
                            keylen,
                            digest,
                            salt,
                        },
                        mac: mac.toString('hex'),
                    },
                    id: address.getUID().toString(),
                };
                resolve(fileContents);
            });
        });
    }
    /**
     * Decrypts an encrypted private key
     * @param fileContents
     * @param password
     * @returns key
     */
    static decryptKey(fileContents, password) {
        return new Promise((resolve, reject) => {
            // Derrive key
            const salt = fileContents.crypto.pbkdfparams.salt;
            const iterations = fileContents.crypto.pbkdfparams.iterations;
            const keylen = fileContents.crypto.pbkdfparams.keylen;
            const digest = fileContents.crypto.pbkdfparams.digest;
            crypto.pbkdf2(password, salt, iterations, keylen, digest, (error, derivedKey) => {
                if (error) {
                    return reject(error);
                }
                // Decrypt ciphertext
                const algorithm = fileContents.crypto.cipher;
                const iv = Buffer.from(fileContents.crypto.cipherparams.iv, 'hex');
                const ciphertext = Buffer.from(fileContents.crypto.ciphertext, 'hex');
                // Check MAC
                const MAC = Buffer.from(fileContents.crypto.mac, 'hex');
                const computedMAC = this.calculateMac(derivedKey, ciphertext);
                if (!computedMAC.equals(MAC)) {
                    return reject('MAC mismatch');
                }
                const decipher = crypto.createDecipheriv(algorithm, derivedKey, iv);
                const privateKey = Buffer.concat([
                    decipher.update(ciphertext),
                    decipher.final(),
                ]).toString();
                // Create wallet
                const keyPair = RadixAddress.fromPrivate(privateKey);
                return resolve(keyPair);
            });
        });
    }
    static calculateMac(derivedKey, ciphertext) {
        const dataToMac = Buffer.concat([derivedKey, ciphertext]);
        return radixHash(dataToMac);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhLZXlTdG9yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2NyeXB0by9SYWRpeEtleVN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDM0MsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFBO0FBQzNCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQXFCaEQsTUFBTSxDQUFDLE9BQU8sT0FBTyxhQUFhO0lBRTlCOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFxQixFQUFFLFFBQWdCO1FBQzVELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDbkMsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUE7WUFFcEQsY0FBYztZQUNkLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ25ELE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQTtZQUN6QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUE7WUFDakIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFBO1lBRXZCLE1BQU0sQ0FBQyxNQUFNLENBQ1QsUUFBUSxFQUNSLElBQUksRUFDSixVQUFVLEVBQ1YsTUFBTSxFQUNOLE1BQU0sRUFDTixDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsRUFBRTtnQkFDbEIsSUFBSSxLQUFLLEVBQUU7b0JBQ1AsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO2lCQUNoQjtnQkFFRCx5Q0FBeUM7Z0JBQ3pDLE1BQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQTtnQkFDL0IsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FB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