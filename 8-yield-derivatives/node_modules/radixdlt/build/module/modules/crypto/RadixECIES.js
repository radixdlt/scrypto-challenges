import BufferReader from 'buffer-reader';
import EC from 'elliptic';
import crypto from 'crypto';
const ec = new EC.ec('secp256k1');
export default class RadixECIES {
    static decrypt(privKey, encrypted) {
        let reader = new BufferReader(encrypted);
        const iv = reader.nextBuffer(16);
        const ephemPubKeyEncoded = reader.nextBuffer(reader.nextUInt8());
        const ciphertext = reader.nextBuffer(reader.nextUInt32BE());
        const MAC = reader.nextBuffer(32);
        const ephemPubKey = ec.keyFromPublic(ephemPubKeyEncoded).getPublic();
        const px = ec.keyFromPrivate(privKey).derive(ephemPubKey);
        // Double hash to prevent length extension attacks
        const hash = crypto
            .createHash('sha512')
            .update(crypto
            .createHash('sha512')
            .update(px.toArrayLike(Buffer))
            .digest())
            .digest();
        const encryptionKey = hash.slice(0, 32);
        const MACKey = hash.slice(32);
        const computedMAC = this.calculateMAC(MACKey, iv, ephemPubKeyEncoded, ciphertext);
        // Verify MAC
        if (!computedMAC.equals(MAC)) {
            throw new Error('MAC mismatch');
        }
        const plaintext = this.AES256CbcDecrypt(iv, encryptionKey, ciphertext);
        return plaintext;
    }
    static encrypt(pubKeyTo, plaintext) {
        const ephemPrivKey = ec.keyFromPrivate(crypto.randomBytes(32));
        const ephemPubKey = ephemPrivKey.getPublic();
        const ephemPubKeyEncoded = Buffer.from(ephemPubKey.encode('array', true));
        // Every EC public key begins with the 0x04 prefix before giving the location of the two point on the curve
        // const px = ephemPrivKey.derive(ec.keyFromPublic(Buffer.concat([Buffer.from([0x04]), pubKeyTo])).getPublic())
        const px = ephemPrivKey.derive(ec.keyFromPublic(pubKeyTo).getPublic());
        // Double hash to preven lenght extension attacks
        const hash = crypto
            .createHash('sha512')
            .update(crypto
            .createHash('sha512')
            .update(px.toArrayLike(Buffer))
            .digest())
            .digest();
        const iv = crypto.randomBytes(16);
        const encryptionKey = hash.slice(0, 32);
        const MACKey = hash.slice(32);
        const ciphertext = this.AES256CbcEncrypt(iv, encryptionKey, plaintext);
        const MAC = this.calculateMAC(MACKey, iv, ephemPubKeyEncoded, ciphertext);
        let offset = 0;
        const serializedCiphertext = Buffer.alloc(iv.length +
            1 +
            ephemPubKeyEncoded.length +
            4 +
            ciphertext.length +
            MAC.length);
        // IV
        iv.copy(serializedCiphertext, 0);
        offset += iv.length;
        // Ephemeral key
        serializedCiphertext.writeUInt8(ephemPubKeyEncoded.length, offset);
        offset++;
        ephemPubKeyEncoded.copy(serializedCiphertext, offset);
        offset += ephemPubKeyEncoded.length;
        // Ciphertext
        serializedCiphertext.writeUInt32BE(ciphertext.length, offset);
        offset += 4;
        ciphertext.copy(serializedCiphertext, offset);
        offset += ciphertext.length;
        // MAC
        MAC.copy(serializedCiphertext, offset);
        return serializedCiphertext;
    }
    static calculateMAC(MACKey, iv, ephemPubKeyEncoded, ciphertext) {
        const dataToMAC = Buffer.concat([iv, ephemPubKeyEncoded, ciphertext]);
        return crypto
            .createHmac('sha256', MACKey)
            .update(dataToMAC)
            .digest();
    }
    static encryptForMultiple(recipientsPublicKeys, plaintext) {
        // Generate key pair        
        const ephemeral = ec.genKeyPair();
        const ephemeralPriv = Buffer.from(ephemeral.getPrivate('hex'), 'hex');
        // Encrypt protectors
        const protectors = recipientsPublicKeys.map((recipient) => {
            return this.encrypt(recipient, ephemeralPriv);
        });
        // Encrypt message
        const ciphertext = RadixECIES.encrypt(Buffer.from(ephemeral.getPublic(true, 'array')), plaintext);
        return {
            protectors,
            ciphertext,
        };
    }
    static decryptWithProtectors(privKey, protectors, ciphertext) {
        for (const protector of protectors) {
            try {
                const ephemPrivKey = this.decrypt(privKey, protector);
                try {
                    return this.decrypt(ephemPrivKey, ciphertext);
                }
                catch (error) {
                    throw new Error('Decrypted a protector, but unable to decrypt ciphertext with acquired private key');
                }
            }
            catch (error) {
                // Do nothing, another protector might work
            }
        }
        throw new Error('Unable to decrypt any protectors');
    }
}
/**
 * AES-256 CBC encrypt
 * @param {Buffer} iv
 * @param {Buffer} key
 * @param {Buffer} plaintext
 * @returns {Buffer} ciphertext
 */
RadixECIES.AES256CbcEncrypt = (iv, key, plaintext) => {
    const cipher = crypto.createCipheriv('aes-256-cbc', key, iv);
    const firstChunk = cipher.update(plaintext);
    const secondChunk = cipher.final();
    return Buffer.concat([firstChunk, secondChunk]);
};
/**
 * AES-256 CBC decrypt
 * @param {Buffer} iv
 * @param {Buffer} key
 * @param {Buffer} ciphertext
 * @returns {Buffer} plaintext
 */
RadixECIES.AES256CbcDecrypt = (iv, key, ciphertext) => {
    const cipher = crypto.createDecipheriv('aes-256-cbc', key, iv);
    const firstChunk = cipher.update(ciphertext);
    const secondChunk = cipher.final();
    return Buffer.concat([firstChunk, secondChunk]);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhFQ0lFUy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2NyeXB0by9SYWRpeEVDSUVTLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sWUFBWSxNQUFNLGVBQWUsQ0FBQTtBQUN4QyxPQUFPLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDekIsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFBO0FBRzNCLE1BQU0sRUFBRSxHQUFHLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUVqQyxNQUFNLENBQUMsT0FBTyxPQUFPLFVBQVU7SUFDcEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFlLEVBQUUsU0FBaUI7UUFDcEQsSUFBSSxNQUFNLEdBQUcsSUFBSSxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUE7UUFFeEMsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUNoQyxNQUFNLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUE7UUFDaEUsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQTtRQUMzRCxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBRWpDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQTtRQUVwRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUN6RCxrREFBa0Q7UUFDbEQsTUFBTSxJQUFJLEdBQUcsTUFBTTthQUNkLFVBQVUsQ0FBQyxRQUFRLENBQUM7YUFDcEIsTUFBTSxDQUNI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