import BN from 'bn.js';
import { Decimal } from 'decimal.js';
import { RadixUInt256 } from '../..';
import { RadixAddress, RadixUnallocatedTokensParticle } from '../atommodel';
import { TSMap } from 'typescript-map';
export declare enum RadixTokenSupplyType {
    FIXED = "fixed",
    MUTABLE = "mutable"
}
export declare class RadixTokenDefinition {
    static SUBUNITS: Decimal;
    address: RadixAddress;
    symbol: string;
    name: string;
    description: string;
    totalSupply: BN;
    tokenSupplyType: RadixTokenSupplyType;
    granularity: RadixUInt256;
    unallocatedTokens: TSMap<string, RadixUnallocatedTokensParticle>;
    iconUrl: string;
    constructor(address: RadixAddress, symbol: string, name?: string, description?: string, granularity?: BN, tokenSupplyType?: RadixTokenSupplyType, totalSupply?: BN, unallocatedTokens?: TSMap<string, RadixUnallocatedTokensParticle>, iconUrl?: string);
    /**
     * Convert actual decimal token amount to integer subunits stored on the ledger
     * @param amount
     * @returns subunits
     */
    static fromDecimalToSubunits(amount: string | number | Decimal): BN;
    /**
     * Convert subunits token amount to actual decimal token amount
     * @param amount
     * @returns token units
     */
    static fromSubunitsToDecimal(amount: BN): Decimal;
    addTotalSupply(difference: number | BN): void;
    getTotalSupply(): BN;
    getTokenUnitsTotalSupply(): Decimal;
    getGranularity(): BN;
    getTokenUnitsGranularity(): Decimal;
    getUnallocatedTokens(): RadixUnallocatedTokensParticle[];
    getUnallocatedSupply(): BN;
}
