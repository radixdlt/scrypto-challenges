import { RadixAccount } from '../..';
import { RadixAtom, RRI } from '../atommodel';
import { Observable } from 'rxjs';
import { TSMap } from 'typescript-map';
import { RadixTokenDefinition } from './RadixTokenDefinition';
/**
 * A singleton class for loading information about tokens
 */
export declare class RadixTokenManager {
    tokens: {
        [id: string]: RadixTokenDefinition;
    };
    private tokenSubscriptions;
    accounts: TSMap<string, RadixAccount>;
    private allTokenUpdateSubject;
    nativeToken: RRI;
    private initialized;
    initialize(genesis: RadixAtom[], nativeToken: RRI): void;
    getTokenDefinitionObservable(referenceURI: string): Promise<Observable<RadixTokenDefinition>>;
    private addTokenDefinitionSubscription;
    getTokenDefinition(referenceURI: string): Promise<RadixTokenDefinition>;
    getTokenDefinitionNoLoad(referenceURI: string): RadixTokenDefinition;
    private getAccount;
    private checkInitialized;
    getAllTokenDefinitionUpdates(): Observable<RadixTokenDefinition>;
    /**
     * Return a list of the current tokens in the manager.
     *
     * @returns
     * @memberof RadixToken
     */
    getCurrentTokens(): {
        [id: string]: RadixTokenDefinition;
    };
}
export declare let radixTokenManager: RadixTokenManager;
