import BN from 'bn.js';
import { Decimal } from 'decimal.js';
import { RadixUInt256 } from '../..';
import { TSMap } from 'typescript-map';
export var RadixTokenSupplyType;
(function (RadixTokenSupplyType) {
    RadixTokenSupplyType["FIXED"] = "fixed";
    RadixTokenSupplyType["MUTABLE"] = "mutable";
})(RadixTokenSupplyType || (RadixTokenSupplyType = {}));
const NonExpDecimal = Decimal.clone({ toExpPos: 9e15, toExpNeg: -9e15 });
export class RadixTokenDefinition {
    constructor(address, symbol, name, description, granularity = new BN(1), tokenSupplyType, totalSupply, unallocatedTokens, iconUrl) {
        this.totalSupply = new BN(0);
        this.unallocatedTokens = new TSMap();
        this.address = address;
        this.symbol = symbol;
        if (name) {
            this.name = name;
        }
        if (description) {
            this.description = description;
        }
        if (tokenSupplyType) {
            this.tokenSupplyType = tokenSupplyType;
        }
        if (totalSupply) {
            this.totalSupply = totalSupply;
        }
        if (granularity) {
            this.granularity = new RadixUInt256(granularity);
        }
        if (unallocatedTokens) {
            this.unallocatedTokens = unallocatedTokens;
        }
        if (iconUrl) {
            this.iconUrl = iconUrl;
        }
    }
    /**
     * Convert actual decimal token amount to integer subunits stored on the ledger
     * @param amount
     * @returns subunits
     */
    static fromDecimalToSubunits(amount) {
        const inUnits = new NonExpDecimal(amount);
        return new BN(inUnits
            .times(this.SUBUNITS)
            .truncated()
            .toString(), 10);
    }
    /**
     * Convert subunits token amount to actual decimal token amount
     * @param amount
     * @returns token units
     */
    static fromSubunitsToDecimal(amount) {
        const inSubunits = new NonExpDecimal(amount.toString(10));
        return new Decimal(inSubunits.dividedBy(this.SUBUNITS));
    }
    addTotalSupply(difference) {
        this.totalSupply.iadd(new BN(difference));
    }
    getTotalSupply() {
        return this.totalSupply;
    }
    getTokenUnitsTotalSupply() {
        return RadixTokenDefinition.fromSubunitsToDecimal(this.getTotalSupply());
    }
    getGranularity() {
        return this.granularity.value;
    }
    getTokenUnitsGranularity() {
        return RadixTokenDefinition.fromSubunitsToDecimal(this.getGranularity());
    }
    getUnallocatedTokens() {
        return this.unallocatedTokens.values();
    }
    getUnallocatedSupply() {
        const supply = new BN(0);
        for (const unallocatedTokens of this.getUnallocatedTokens()) {
            supply.iadd(unallocatedTokens.getAmount());
        }
        return supply;
    }
}
// All radix tokens are store with 18 subunits
RadixTokenDefinition.SUBUNITS = new Decimal(10).pow(18);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhUb2tlbkRlZmluaXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy90b2tlbi9SYWRpeFRva2VuRGVmaW5pdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxPQUFPLENBQUE7QUFDdEIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUVwQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sT0FBTyxDQUFBO0FBRXBDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV2QyxNQUFNLENBQU4sSUFBWSxvQkFHWDtBQUhELFdBQVksb0JBQW9CO0lBQzVCLHVDQUFlLENBQUE7SUFDZiwyQ0FBbUIsQ0FBQTtBQUN2QixDQUFDLEVBSFcsb0JBQW9CLEtBQXBCLG9CQUFvQixRQUcvQjtBQUVELE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7QUFFeEUsTUFBTSxPQUFPLG9CQUFvQjtJQWU3QixZQUNJLE9BQXFCLEVBQ3JCLE1BQWMsRUFDZCxJQUFhLEVBQ2IsV0FBb0IsRUFDcEIsV0FBVyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUN2QixlQUFzQyxFQUN0QyxXQUFnQixFQUNoQixpQkFBaUUsRUFDakUsT0FBZ0I7UUFmYixnQkFBVyxHQUFPLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRzNCLHNCQUFpQixHQUFrRCxJQUFJLEtBQUssRUFBRSxDQUFBO1FBY2pGLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO1FBRXBCLElBQUksSUFBSSxFQUFFO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7U0FBRTtRQUM5QixJQUFJLFdBQVcsRUFBRTtZQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFBO1NBQUU7UUFDbkQsSUFBSSxlQUFlLEVBQUU7WUFBRSxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQTtTQUFFO1FBQy9ELElBQUksV0FBVyxFQUFFO1lBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUE7U0FBRTtRQUNuRCxJQUFJLFdBQVcsRUFBRTtZQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUE7U0FBRTtRQUNyRSxJQUFJLGlCQUFpQixFQUFFO1lBQUUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFBO1NBQUU7UUFDckUsSUFBSSxPQUFPLEVBQUU7WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtTQUFFO0lBQzNDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLHFCQUFxQixDQUFDLE1BQWlDO1FBQ2pFLE1BQU0sT0FBTyxHQUFHLElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBRXpDLE9BQU8sSUFBSSxFQUFFLENBQUMsT0FBTzthQUNoQixLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQzthQUNwQixTQUFTLEVBQUU7YUFDWCxRQUFRLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUN4QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxNQUFVO1FBQzFDLE1BQU0sVUFBVSxHQUFHLElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUV6RCxPQUFPLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7SUFDM0QsQ0FBQztJQUVNLGNBQWMsQ0FBQyxVQUF1QjtRQUN6QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO0lBQzdDLENBQUM7SUFFTSxjQUFjO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQTtJQUMzQixDQUFDO0lBRU0sd0JBQXdCO1FBQzNCLE9BQU8sb0JBQW9CLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUE7SUFDNUUsQ0FBQztJQUVNLGNBQWM7UUFDakIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQTtJQUNqQyxDQUFDO0lBRU0sd0JBQXdCO1FBQzNCLE9BQU8sb0JBQW9CLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUE7SUFDNUUsQ0FBQztJQUVNLG9CQUFvQjtRQUN2QixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUMxQyxDQUFDO0lBRU0sb0JBQW9CO1FBQ3ZCLE1BQU0sTUFBTSxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3hCLEtBQUssTUFBTSxpQkFBaUIsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsRUFBRTtZQUN6RCxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUE7U0FDN0M7UUFDRCxPQUFPLE1BQU0sQ0FBQTtJQUNqQixDQUFDOztBQTNGRCw4Q0FBOEM7QUFDaEMsNkJBQVEsR0FBRyxJQUFJLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUEifQ==