import { RadixAccount } from '../..';
import { RRI } from '../atommodel';
import { BehaviorSubject, Subject } from 'rxjs';
import { TSMap } from 'typescript-map';
import { filter, timeout, take } from 'rxjs/operators';
import { RadixTokenDefinition } from './RadixTokenDefinition';
/**
 * A singleton class for loading information about tokens
 */
export class RadixTokenManager {
    constructor() {
        this.tokens = {};
        this.tokenSubscriptions = new TSMap();
        this.accounts = new TSMap();
        this.allTokenUpdateSubject = new Subject();
        this.initialized = false;
    }
    initialize(genesis, nativeToken) {
        this.nativeToken = nativeToken;
        const systemAccount = new RadixAccount(nativeToken.address);
        for (const atom of genesis) {
            systemAccount._onAtomReceived({
                action: 'STORE',
                atom,
                processedData: {},
                isHead: false,
            });
        }
        this.accounts.set(systemAccount.getAddress(), systemAccount);
        this.addTokenDefinitionSubscription(nativeToken.toString());
        this.initialized = true;
    }
    async getTokenDefinitionObservable(referenceURI) {
        this.checkInitialized();
        if (!this.tokenSubscriptions.has(referenceURI)) {
            await this.addTokenDefinitionSubscription(referenceURI);
        }
        return this.tokenSubscriptions.get(referenceURI).share();
    }
    async addTokenDefinitionSubscription(referenceURI) {
        const reference = RRI.fromString(referenceURI);
        const account = await this.getAccount(reference.getAddress());
        const placeholderTokenDefinition = new RadixTokenDefinition(reference.getAddress(), reference.getName());
        const bs = new BehaviorSubject(placeholderTokenDefinition);
        account.tokenDefinitionSystem.getTokenDefinitionObservable(reference.getName()).subscribe(bs);
        this.tokenSubscriptions.set(referenceURI, bs);
        bs.subscribe(tokenDefinition => {
            this.tokens[referenceURI] = tokenDefinition;
        });
        bs.subscribe(this.allTokenUpdateSubject);
    }
    getTokenDefinition(referenceURI) {
        this.checkInitialized();
        return new Promise((resolve, reject) => {
            const reference = RRI.fromString(referenceURI);
            this.getAccount(reference.getAddress()).then((account) => {
                account.isSynced().pipe(filter(val => val === true), take(1), timeout(5000)).subscribe(null, error => { reject(new Error('Timeout tying to fetch token information from network')); }, () => {
                    // Account is synced
                    const tokenDefinition = account.tokenDefinitionSystem.getTokenDefinition(reference.getName());
                    if (tokenDefinition) {
                        resolve(tokenDefinition);
                    }
                    else {
                        reject(new Error('Token definition does not exist in the account'));
                    }
                });
            });
        });
    }
    getTokenDefinitionNoLoad(referenceURI) {
        return this.tokens[referenceURI];
    }
    async getAccount(address) {
        if (this.accounts.has(address.toString())) {
            return this.accounts.get(address.toString());
        }
        else {
            const account = new RadixAccount(address);
            await account.openNodeConnection();
            this.accounts.set(address.toString(), account);
            return account;
        }
    }
    checkInitialized() {
        if (!this.initialized) {
            throw new Error('Token Manager not initialized');
        }
    }
    getAllTokenDefinitionUpdates() {
        return this.allTokenUpdateSubject.share();
    }
    /**
     * Return a list of the current tokens in the manager.
     *
     * @returns
     * @memberof RadixToken
     */
    getCurrentTokens() {
        this.checkInitialized();
        return this.tokens;
    }
}
export let radixTokenManager = new RadixTokenManager();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhUb2tlbk1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy90b2tlbi9SYWRpeFRva2VuTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sT0FBTyxDQUFBO0FBQ3BDLE9BQU8sRUFBMkIsR0FBRyxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBQzNELE9BQU8sRUFBYyxlQUFlLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFBO0FBQzNELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUN0QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBYyxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU5RDs7R0FFRztBQUNILE1BQU0sT0FBTyxpQkFBaUI7SUFBOUI7UUFDVyxXQUFNLEdBQTJDLEVBQUUsQ0FBQTtRQUVsRCx1QkFBa0IsR0FBeUQsSUFBSSxLQUFLLEVBQUUsQ0FBQTtRQUN2RixhQUFRLEdBQWdDLElBQUksS0FBSyxFQUFFLENBQUE7UUFDbEQsMEJBQXFCLEdBQWtDLElBQUksT0FBTyxFQUFFLENBQUE7UUFJcEUsZ0JBQVcsR0FBRyxLQUFLLENBQUE7SUFxSC9CLENBQUM7SUFuSFUsVUFBVSxDQUFDLE9BQW9CLEVBQUUsV0FBZ0I7UUFDcEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUE7UUFFOUIsTUFBTSxhQUFhLEdBQUcsSUFBSSxZQUFZLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRTNELEtBQUssTUFBTSxJQUFJLElBQUksT0FBTyxFQUFFO1lBQ3hCLGFBQWEsQ0FBQyxlQUFlLENBQUM7Z0JBQzFCLE1BQU0sRUFBRSxPQUFPO2dCQUNmLElBQUk7Z0JBQ0osYUFBYSxFQUFFLEVBQUU7Z0JB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