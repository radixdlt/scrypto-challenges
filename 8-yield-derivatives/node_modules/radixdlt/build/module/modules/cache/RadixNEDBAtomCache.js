import Datastore from 'nedb';
import { RadixSerializer } from '../atommodel';
import { logger } from '../common/RadixLogger';
export default class RadixNEDBAtomCache {
    /**
     * Creates an instance of radix nedbatom cache.
     * @param filename File path on disk in Node, path in localStorage in the browser
     */
    constructor(filename) {
        this.storeAtom = (atom) => {
            return this.notExists({ _id: atom.getAidString() })
                .then(() => {
                // Serialize
                const serializedAtom = atom.toJSON();
                serializedAtom['_id'] = atom.getAidString();
                // Store
                return this.insert(serializedAtom);
            })
                .then((newDoc) => {
                return atom;
            })
                .catch(error => {
                logger.trace('Atom already in DB');
            });
        };
        this.getAtoms = (queryAddress) => {
            // Find
            const query = {};
            // logger.info(query)
            return this.find(query).then(async (atoms) => {
                // logger.info(atoms)
                // Deserialize
                const deserialized = [];
                for (const atom of atoms) {
                    const deserializedAtom = await this.asyncDeserialize(atom);
                    const atomAddresses = deserializedAtom.getAddresses();
                    for (const address of atomAddresses) {
                        if (address.equals(queryAddress)) {
                            deserialized.push(deserializedAtom);
                            break;
                        }
                    }
                }
                return deserialized;
            });
        };
        // Promise wrappers for nedb
        this.findOne = (opt) => {
            return new Promise((resolve, reject) => {
                this.db.findOne(opt, (error, doc) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.notExists = (opt) => {
            return new Promise((resolve, reject) => {
                this.db.findOne(opt, (error, doc) => {
                    if (error) {
                        reject(error);
                    }
                    else if (!doc) {
                        resolve(true);
                    }
                    reject('Atom already in db');
                });
            });
        };
        this.find = (opt) => {
            return new Promise((resolve, reject) => {
                this.db.find(opt, (error, doc) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.insert = (opt) => {
            return new Promise((resolve, reject) => {
                this.db.insert(opt, (error, doc) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.remove = (opt) => {
            return new Promise((resolve, reject) => {
                this.db.remove(opt, (error, doc) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(doc);
                    }
                });
            });
        };
        this.db = new Datastore({
            filename,
            autoload: true,
        });
    }
    /**
     * Clears all atoms from the cache
     */
    reset() {
        this.db.remove({}, { multi: true }, (error, numRemoved) => {
            // Do nothing
        });
    }
    asyncDeserialize(atom) {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                delete atom['_id'];
                resolve(RadixSerializer.fromJSON(atom));
            }, 0);
        });
    }
    deleteAtom(atom) {
        return this.remove({ _id: atom.getAidString() });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhORURCQXRvbUNhY2hlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvY2FjaGUvUmFkaXhORURCQXRvbUNhY2hlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sU0FBUyxNQUFNLE1BQU0sQ0FBQTtBQUk1QixPQUFPLEVBQTJCLGVBQWUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFL0MsTUFBTSxDQUFDLE9BQU8sT0FBTyxrQkFBa0I7SUFHbkM7OztPQUdHO0lBQ0gsWUFBWSxRQUFnQjtRQWdCckIsY0FBUyxHQUFHLENBQUMsSUFBZSxFQUFFLEVBQUU7WUFDbkMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDO2lCQUM5QyxJQUFJLENBQUMsR0FBRyxFQUFFO2dCQUNQLFlBQVk7Z0JBQ1osTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFBO2dCQUNwQyxjQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFBO2dCQUUzQyxRQUFRO2dCQUNSLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQTtZQUN0QyxDQUFDLENBQUM7aUJBQ0QsSUFBSSxDQUFDLENBQUMsTUFBVyxFQUFFLEVBQUU7Z0JBQ2xCLE9BQU8sSUFBSSxDQUFBO1lBQ2YsQ0FBQyxDQUFDO2lCQUNELEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDWCxNQUFNLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUE7WUFDdEMsQ0FBQyxDQUFDLENBQUE7UUFDVixDQUFDLENBQUE7UUFFTSxhQUFRLEdBQUcsQ0FBQyxZQUEyQixFQUFFLEVBQUU7WUFDOUMsT0FBTztZQUNQLE1BQU0sS0FBSyxH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