import { TSMap } from 'typescript-map';
import { Subject, Observable } from 'rxjs';
import { filter } from 'rxjs/operators';
import { RadixTokenDefinition, RadixTokenSupplyType } from '../token/RadixTokenDefinition';
import { RadixSpin, RadixTokenPermissionsValues, RadixUnallocatedTokensParticle, RadixTokenDefinitionParticle, RadixTransferrableTokensParticle, } from '../atommodel';
export class RadixTokenDefinitionAccountSystem {
    constructor(address) {
        this.address = address;
        this.name = 'TOKENS';
        this.tokenDefinitions = new TSMap();
        this.tokenDefinitionSubject = new Subject();
        this.processedAtomHIDs = new TSMap();
        // Empty constructor
    }
    processAtomUpdate(atomUpdate) {
        if (!atomUpdate.atom.containsParticle(RadixTokenDefinitionParticle, RadixUnallocatedTokensParticle)) {
            return;
        }
        if (atomUpdate.action === 'STORE') {
            this.processStoreAtom(atomUpdate);
        }
        else if (atomUpdate.action === 'DELETE') {
            this.processDeleteAtom(atomUpdate);
        }
    }
    processStoreAtom(atomUpdate) {
        const atom = atomUpdate.atom;
        if (this.processedAtomHIDs.has(atom.getAidString())) {
            return;
        }
        this.processedAtomHIDs.set(atom.getAidString(), true);
        for (const particleGroup of atom.getParticleGroups()) {
            let tokenDefinition;
            if (particleGroup.containsParticle(RadixTokenDefinitionParticle)) {
                // Token definition
                for (const spunParticle of particleGroup.getParticles()) {
                    if (spunParticle.particle instanceof RadixTokenDefinitionParticle && spunParticle.spin === RadixSpin.UP) {
                        this.createOrUpdateTokenDefinition(spunParticle.particle);
                    }
                    else if (spunParticle.particle instanceof RadixUnallocatedTokensParticle) {
                        const particle = spunParticle.particle;
                        tokenDefinition = this.getOrCreateTokenDefinition(particle.getTokenDefinitionReference());
                        if (spunParticle.spin === RadixSpin.UP) {
                            tokenDefinition.unallocatedTokens.set(particle.getHidString(), particle);
                        }
                        else {
                            tokenDefinition.unallocatedTokens.delete(particle.getHidString());
                        }
                    }
                }
            }
            else if (particleGroup.containsParticle(RadixUnallocatedTokensParticle)
                && particleGroup.containsParticle(RadixTransferrableTokensParticle)) {
                // Mint or burn
                for (const spunParticle of particleGroup.getParticles()) {
                    if (spunParticle.particle instanceof RadixUnallocatedTokensParticle) {
                        const particle = spunParticle.particle;
                        tokenDefinition = this.getOrCreateTokenDefinition(particle.getTokenDefinitionReference());
                        if (spunParticle.spin === RadixSpin.UP) {
                            tokenDefinition.unallocatedTokens.set(particle.getHidString(), particle);
                            tokenDefinition.addTotalSupply(particle.getAmount().neg());
                        }
                        else {
                            tokenDefinition.unallocatedTokens.delete(particle.getHidString());
                            tokenDefinition.addTotalSupply(particle.getAmount());
                        }
                    }
                }
            }
            if (tokenDefinition) {
                this.tokenDefinitionSubject.next(tokenDefinition);
            }
        }
    }
    processDeleteAtom(atomUpdate) {
        const atom = atomUpdate.atom;
        if (!this.processedAtomHIDs.has(atom.getAidString())) {
            return;
        }
        this.processedAtomHIDs.delete(atom.getAidString());
        for (const particleGroup of atom.getParticleGroups()) {
            let tokenDefinition;
            if (particleGroup.containsParticle(RadixTokenDefinitionParticle)) {
                // Token definition
                for (const spunParticle of particleGroup.getParticles()) {
                    if (spunParticle.particle instanceof RadixTokenDefinitionParticle && spunParticle.spin === RadixSpin.DOWN) {
                        this.createOrUpdateTokenDefinition(spunParticle.particle);
                    }
                    else if (spunParticle.particle instanceof RadixUnallocatedTokensParticle) {
                        const particle = spunParticle.particle;
                        tokenDefinition = this.getOrCreateTokenDefinition(particle.getTokenDefinitionReference());
                        if (spunParticle.spin === RadixSpin.DOWN) {
                            tokenDefinition.unallocatedTokens.set(particle.getHidString(), particle);
                        }
                        else {
                            tokenDefinition.unallocatedTokens.delete(particle.getHidString());
                        }
                    }
                }
            }
            else if (particleGroup.containsParticle(RadixUnallocatedTokensParticle)
                && particleGroup.containsParticle(RadixTransferrableTokensParticle)) {
                // Mint or burn
                for (const spunParticle of particleGroup.getParticles()) {
                    if (spunParticle.particle instanceof RadixUnallocatedTokensParticle) {
                        const particle = spunParticle.particle;
                        tokenDefinition = this.getOrCreateTokenDefinition(particle.getTokenDefinitionReference());
                        if (spunParticle.spin === RadixSpin.DOWN) {
                            tokenDefinition.unallocatedTokens.set(particle.getHidString(), particle);
                            tokenDefinition.addTotalSupply(particle.getAmount().neg());
                        }
                        else {
                            tokenDefinition.unallocatedTokens.delete(particle.getHidString());
                            tokenDefinition.addTotalSupply(particle.getAmount());
                        }
                    }
                }
            }
            if (tokenDefinition) {
                this.tokenDefinitionSubject.next(tokenDefinition);
            }
        }
    }
    createOrUpdateTokenDefinition(particle) {
        const reference = particle.getTokenDefinitionReference();
        const tokenDefinition = this.getOrCreateTokenDefinition(reference);
        tokenDefinition.symbol = reference.getName();
        tokenDefinition.name = particle.name;
        tokenDefinition.description = particle.description;
        tokenDefinition.granularity = particle.granularity;
        tokenDefinition.iconUrl = particle.iconUrl;
        const mintPermissions = particle.permissions.mint;
        if (mintPermissions === RadixTokenPermissionsValues.TOKEN_CREATION_ONLY || mintPermissions === RadixTokenPermissionsValues.NONE) {
            tokenDefinition.tokenSupplyType = RadixTokenSupplyType.FIXED;
        }
        else if (mintPermissions === RadixTokenPermissionsValues.TOKEN_OWNER_ONLY || mintPermissions === RadixTokenPermissionsValues.ALL) {
            tokenDefinition.tokenSupplyType = RadixTokenSupplyType.MUTABLE;
        }
        else {
            throw new Error(`Token particle with MINT permissions ${mintPermissions} not supported`);
        }
        this.tokenDefinitionSubject.next(tokenDefinition);
    }
    getOrCreateTokenDefinition(reference) {
        if (!this.tokenDefinitions.has(reference.getName())) {
            this.tokenDefinitions.set(reference.getName(), new RadixTokenDefinition(reference.address, reference.getName()));
        }
        return this.tokenDefinitions.get(reference.getName());
    }
    getTokenDefinition(symbol) {
        if (this.tokenDefinitions.has(symbol)) {
            return this.tokenDefinitions.get(symbol);
        }
        return null;
    }
    // Subscribe for symbol
    getTokenDefinitionObservable(symbol) {
        return Observable.create((observer) => {
            if (this.tokenDefinitions.has(symbol)) {
                observer.next(this.tokenDefinitions.get(symbol));
            }
            this.tokenDefinitionSubject
                .pipe(filter(x => x.symbol === symbol))
                .subscribe(observer);
        });
    }
    getAllTokenDefinitionObservable() {
        return this.tokenDefinitionSubject.share();
    }
}
//# sourceMappingURL=data:application/json;base64,