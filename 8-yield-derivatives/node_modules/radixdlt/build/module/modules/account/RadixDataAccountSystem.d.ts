import { Subject, Observable } from 'rxjs';
import { TSMap } from 'typescript-map';
import RadixAccountSystem from './RadixAccountSystem';
import RadixApplicationDataUpdate from './RadixApplicationDataUpdate';
import RadixApplicationData from './RadixApplicationData';
import { RadixAtomUpdate, RadixAddress } from '../atommodel';
export default class RadixDataAccountSystem implements RadixAccountSystem {
    readonly address: RadixAddress;
    name: string;
    applicationDataSubject: Subject<RadixApplicationDataUpdate>;
    applicationData: TSMap<string, TSMap<string, RadixApplicationData>>;
    constructor(address: RadixAddress);
    processAtomUpdate(atomUpdate: RadixAtomUpdate): Promise<void>;
    private processStoreAtom;
    private processDeleteAtom;
    /**
     * Gets application data messages by application id and optionally by signer
     *
     * @param applicationId - Application id of the payload atoms
     * @param [addresses] - List of account addreses to filter application messages by signer
     * @returns An observable subscribed to old and new application messages that met the filter requirements
     */
    getApplicationData(applicationId: string, addresses?: string[]): Observable<RadixApplicationDataUpdate>;
}
