import { BehaviorSubject } from 'rxjs';
import { TSMap } from 'typescript-map';
import { RadixTransferAccountSystem, RadixMessagingAccountSystem, RadixDecryptionAccountSystem, RadixDataAccountSystem, RadixCacheAccountSystem, radixUniverse, RadixTokenDefinitionAccountSystem, } from '../..';
import { logger } from '../common/RadixLogger';
import { RadixAddress } from '../atommodel';
import { radixHash } from '../common/RadixUtil';
export default class RadixAccount {
    /**
     * Creates an instance of radix account.
     * @param address Address of the account
     * @param [plain] If set to false, will not create default account systems.
     * Use this for accounts that will not be connected to the network
     */
    constructor(address, plain = false) {
        this.address = address;
        this.accountSystems = new TSMap();
        this.synced = new BehaviorSubject(false);
        this.connectionStatus = new BehaviorSubject('STARTING');
        this.openNodeConnection = async () => {
            this.connectionStatus.next('CONNECTING');
            try {
                this.nodeConnection = await radixUniverse.getNodeConnection(this.address.getShard());
                this.nodeConnection.on('closed', this._onConnectionClosed);
                // Subscribe to events
                this.atomSubscription = this.nodeConnection.subscribe(this.address.toString());
                this.atomSubscription.subscribe({
                    next: this._onAtomReceived,
                    error: error => logger.error('Subscription error:', error),
                });
                this.connectionStatus.next('CONNECTED');
            }
            catch (error) {
                logger.error(error);
                setTimeout(this._onConnectionClosed, 1000);
            }
        };
        /**
         * Unsubscribes the node connection to the stream of past and future atoms associated with this address account
         *
         * @returns A promise with the result of the unsubscription call
         */
        this.closeNodeConnection = async () => {
            this.connectionStatus.next('DISCONNECTED');
            if (this.nodeConnection) {
                this.nodeConnection.removeListener('closed', this._onConnectionClosed);
                return this.nodeConnection.unsubscribe(this.getAddress());
            }
        };
        this._onAtomReceived = async (atomUpdate) => {
            for (const system of this.accountSystems.values()) {
                await system.processAtomUpdate(atomUpdate);
            }
            this.synced.next(atomUpdate.isHead);
        };
        this._onConnectionClosed = () => {
            // Get a new one
            this.openNodeConnection();
        };
        if (!plain) {
            this.cacheSystem = new RadixCacheAccountSystem(address);
            this.addAccountSystem(this.cacheSystem);
            this.decryptionSystem = new RadixDecryptionAccountSystem();
            this.addAccountSystem(this.decryptionSystem);
            this.tokenDefinitionSystem = new RadixTokenDefinitionAccountSystem(address);
            this.addAccountSystem(this.tokenDefinitionSystem);
            this.transferSystem = new RadixTransferAccountSystem(address);
            this.addAccountSystem(this.transferSystem);
            this.dataSystem = new RadixDataAccountSystem(address);
            this.addAccountSystem(this.dataSystem);
            this.messagingSystem = new RadixMessagingAccountSystem(address);
            this.addAccountSystem(this.messagingSystem);
        }
    }
    /**
     * Create an instance of radix account from an address
     * @param address string address
     * @param [plain] If set to false, will not create default account systems.
     * Use this for accounts that will not be connected to the network
     * @returns
     */
    static fromAddress(address, plain = false) {
        return new RadixAccount(RadixAddress.fromAddress(address), plain);
    }
    /**
     * Create an instance of a Radix account from an arbitrary byte buffer. This
     * could e.g. be a friendly name of an account, in which case it would be
     * created as <code>Buffer.from('friendly name')</code>.
     *
     * @param seed Buffer seed for the address
     * @param [plain] If set to true, will not create default account systems.
     * Use this for accounts that will not be connected to the network.
     * @returns a new Radix account.
     */
    static fromSeed(seed, plain = false) {
        const hash = radixHash(seed);
        return new RadixAccount(RadixAddress.fromPrivate(hash), plain);
    }
    enableDecryption(decryptionProvider) {
        this.decryptionSystem.decryptionProvider = decryptionProvider;
    }
    enableCache(cacheProvider) {
        this.cacheSystem.atomCache = cacheProvider;
        // Load atoms from cache
        return this.cacheSystem.loadAtoms().then((atoms) => {
            for (const atom of atoms) {
                this._onAtomReceived({
                    action: 'STORE',
                    atom,
                    processedData: {},
                    isHead: false,
                });
            }
        });
    }
    getAddress() {
        return this.address.getAddress();
    }
    addAccountSystem(system) {
        if (this.accountSystems.has(system.name)) {
            throw new Error(`System "${system.name}" already exists in account, you can only have one of each system per account`);
        }
        this.accountSystems.set(system.name, system);
        return system;
    }
    removeAccountSystem(name) {
        if (this.accountSystems.has(name)) {
            this.accountSystems.delete(name);
        }
    }
    getSystem(name) {
        if (this.accountSystems.has(name)) {
            return this.accountSystems.get(name);
        }
        throw new Error(`System "${name}" doesn't exist in account`);
    }
    /**
     * An observable that tells you when the account is in sync with the network
     *
     * @returns An observable which sends 'true' whenever the account has received and processed new information form the network
     */
    isSynced() {
        return this.synced.share();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhBY2NvdW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvYWNjb3VudC9SYWRpeEFjY291bnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBdUIsTUFBTSxNQUFNLENBQUE7QUFDM0QsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBRXRDLE9BQU8sRUFDSCwwQkFBMEIsRUFDMUIsMkJBQTJCLEVBQzNCLDRCQUE0QixFQUM1QixzQkFBc0IsRUFFdEIsdUJBQXVCLEVBQ3ZCLGFBQWEsRUFHYixpQ0FBaUMsR0FDbkMsTUFBTSxPQUFPLENBQUE7QUFHZixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUJBQXVCLENBQUE7QUFDOUMsT0FBTyxFQUFtQixZQUFZLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDN0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWhELE1BQU0sQ0FBQyxPQUFPLE9BQU8sWUFBWTtJQWdCN0I7Ozs7O09BS0c7SUFDSCxZQUFxQixPQUFxQixFQUFFLEtBQUssR0FBRyxLQUFLO1FBQXBDLFlBQU8sR0FBUCxPQUFPLENBQWM7UUFwQmxDLG1CQUFjLEdBQXNDLElBQUksS0FBSyxFQUFFLENBQUE7UUFFL0QsV0FBTSxHQUE2QixJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUU5RCxxQkFBZ0IsR0FBNEIsSUFBSSxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUE7UUEySDNFLHVCQUFrQixHQUFHLEtBQUssSUFBSSxFQUFFO1lBQ25DLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUE7WUFFeEMsSUFBSTtnQkFDQSxJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sYUFBYSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMs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