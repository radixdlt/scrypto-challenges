import { RadixMessageParticle } from '../atommodel';
export var RadixDecryptionState;
(function (RadixDecryptionState) {
    RadixDecryptionState["DECRYPTED"] = "DECRYPTED";
    RadixDecryptionState["NOT_ENCRYPTED"] = "NOT_ENCRYPTED";
    RadixDecryptionState["CANNOT_DECRYPT"] = "CANNOT_DECRYPT";
})(RadixDecryptionState || (RadixDecryptionState = {}));
export class RadixDecryptionAccountSystem {
    constructor(decryptionProvider) {
        this.name = 'DECRYPTION';
        if (decryptionProvider) {
            this.decryptionProvider = decryptionProvider;
        }
    }
    async processAtomUpdate(atomUpdate) {
        const atom = atomUpdate.atom;
        const messageParticles = atom.getParticlesOfType(RadixMessageParticle);
        const dataParticle = messageParticles.find(p => {
            return p.getMetaData('application') !== 'encryptor';
        });
        const encryptorParticle = messageParticles.find(p => {
            return p.getMetaData('application') === 'encryptor';
        });
        if (!(dataParticle)) {
            return;
        }
        let decryptedData;
        if (encryptorParticle) {
            const protectors = encryptorParticle.getData().asJSON().map(p => Buffer.from(p, 'base64'));
            const payload = dataParticle.getData().bytes;
            try {
                const decrypted = await this.decryptionProvider.decryptECIESPayloadWithProtectors(protectors, payload);
                decryptedData = {
                    data: decrypted.toString(),
                    decryptionState: RadixDecryptionState.DECRYPTED,
                    application: dataParticle.getMetaData('application'),
                    from: dataParticle.from,
                    to: dataParticle.getAddresses(),
                };
            }
            catch (error) {
                decryptedData = {
                    data: dataParticle.getData().toString(),
                    decryptionState: RadixDecryptionState.CANNOT_DECRYPT,
                    application: dataParticle.getMetaData('application'),
                    from: dataParticle.from,
                    to: dataParticle.getAddresses(),
                };
            }
        }
        else {
            decryptedData = {
                data: dataParticle.getData().bytes.toString(),
                decryptionState: RadixDecryptionState.NOT_ENCRYPTED,
                application: dataParticle.getMetaData('application'),
                from: dataParticle.from,
                to: dataParticle.getAddresses(),
            };
        }
        atomUpdate.processedData.decryptedData = decryptedData;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhEZWNyeXB0aW9uQWNjb3VudFN5c3RlbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2FjY291bnQvUmFkaXhEZWNyeXB0aW9uQWNjb3VudFN5c3RlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxPQUFPLEVBQThCLG9CQUFvQixFQUFnQixNQUFNLGNBQWMsQ0FBQTtBQUc3RixNQUFNLENBQU4sSUFBWSxvQkFJWDtBQUpELFdBQVksb0JBQW9CO0lBQzVCLCtDQUF1QixDQUFBO0lBQ3ZCLHVEQUErQixDQUFBO0lBQy9CLHlEQUFpQyxDQUFBO0FBQ3JDLENBQUMsRUFKVyxvQkFBb0IsS0FBcEIsb0JBQW9CLFFBSS9CO0FBVUQsTUFBTSxPQUFPLDRCQUE0QjtJQUlyQyxZQUFZLGtCQUE0QztRQUhqRCxTQUFJLEdBQUcsWUFBWSxDQUFBO1FBSXRCLElBQUksa0JBQWtCLEVBQUU7WUFDcEIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFBO1NBQy9DO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxVQUEyQjtRQUN0RCxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFBO1FBQzVCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLG9CQUFvQixDQUFDLENBQUE7UUFFdEUsTUFBTSxZQUFZLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzNDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsS0FBSyxXQUFXLENBQUE7UUFDdkQsQ0FBQyxDQUFDLENBQUE7UUFFRixNQUFNLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNoRCxPQUFPLENBQUMsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLEtBQUssV0FBVyxDQUFBO1FBQ3ZELENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDakIsT0FBTTtTQUNUO1FBR0QsSUFBSSxhQUFpQyxDQUFBO1FBRXJDLElBQUksaUJBQWlCLEVBQUU7WUFDbkIsTUFBTSxVQUFVLEdBQUksaUJBQWlCLENBQUMsT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQTtZQUN4RyxNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFBO1lBRTVDLElBQUk7Z0JBQ0EsTUFBTSxTQUFTLEdBQUcsTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsaUNBQWlDLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFBO2dCQUV0RyxhQUFhLEdBQUc7b0JBQ1osSUFBSSxFQUFFLFNBQVMsQ0FBQyxRQUFRLEVBQUU7b0JBQzFCLGVBQWUsRUFBRSxvQkFBb0IsQ0FBQyxTQUFTO29CQUMvQyxXQUFXLEVBQUUsWUFBWSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUM7b0JBQ3BELElBQUksRUFBRSxZQUFZLENBQUMsSUFBSTtvQkFDdkIsRUFBRSxFQUFFLFlBQVksQ0FBQyxZQUFZLEVBQUU7aUJBQ2xDLENBQUE7YUFDSjtZQUFDLE9BQU8sS0FBSyxFQUFFO2dCQUNaLGFBQWEsR0FBRztvQkFDWixJQUFJLEVBQUUsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRTtvQkFDdkMsZUFBZSxFQUFFLG9CQUFvQixDQUFDLGNBQWM7b0JBQ3BELFdBQVcsRUFBRSxZQUFZLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQztvQkFDcEQsSUFBSSxFQUFFLFlBQVksQ0FBQyxJQUFJO29CQUN2QixFQUFFLEVBQUUsWUFBWSxDQUFDLFlBQVksRUFBRTtpQkFDbEMsQ0FBQTthQUNKO1NBQ0o7YUFBTTtZQUNILGFBQWEsR0FBRztnQkFDWixJQUFJLEVBQUUsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7Z0JBQzdDLGVBQWUsRUFBRSxvQkFBb0IsQ0FBQyxhQUFhO2dCQUNuRCxXQUFXLEVBQUUsWUFBWSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUM7Z0JBQ3BELElBQUksRUFBRSxZQUFZLENBQUMsSUFBSTtnQkFDdkIsRUFBRSxFQUFFLFlBQVksQ0FBQyxZQUFZLEVBQUU7YUFDbEMsQ0FBQTtTQUNKO1FBRUQsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFBO0lBRTFELENBQUM7Q0FDSiJ9