import { Subject, Observable } from 'rxjs';
import { TSMap } from 'typescript-map';
import { filter } from 'rxjs/operators';
import { RadixAddress } from '../atommodel';
export default class RadixDataAccountSystem {
    constructor(address) {
        this.address = address;
        this.name = 'DATA';
        this.applicationDataSubject = new Subject();
        this.applicationData = new TSMap();
    }
    async processAtomUpdate(atomUpdate) {
        if (!('decryptedData' in atomUpdate.processedData)) {
            return;
        }
        if (atomUpdate.action === 'STORE') {
            this.processStoreAtom(atomUpdate);
        }
        else if (atomUpdate.action === 'DELETE') {
            this.processDeleteAtom(atomUpdate);
        }
    }
    processStoreAtom(atomUpdate) {
        const atom = atomUpdate.atom;
        const aid = atom.getAidString();
        const signatures = atom.signatures;
        const applicationId = atomUpdate.processedData.decryptedData.application;
        // Skip existing atoms
        if (this.applicationData.has(applicationId) &&
            this.applicationData.get(applicationId).has(aid)) {
            return;
        }
        const applicationData = {
            aid,
            payload: atomUpdate.processedData.decryptedData,
            timestamp: atom.getTimestamp(),
            signatures,
        };
        const applicationDataUpdate = {
            action: 'STORE',
            aid,
            applicationId,
            data: applicationData,
            signatures,
        };
        if (!this.applicationData.has(applicationId)) {
            this.applicationData.set(applicationId, new TSMap());
        }
        this.applicationData.get(applicationId).set(aid, applicationData);
        this.applicationDataSubject.next(applicationDataUpdate);
    }
    processDeleteAtom(atomUpdate) {
        const atom = atomUpdate.atom;
        const aid = atom.getAidString();
        const signatures = atom.signatures;
        const applicationId = atomUpdate.processedData.decryptedData.application;
        // Skip nonexisting atoms
        if (!this.applicationData.has(applicationId) ||
            !this.applicationData.get(applicationId).has(aid)) {
            return;
        }
        const applicationData = this.applicationData.get(applicationId).get(aid);
        const applicationDataUpdate = {
            action: 'DELETE',
            aid,
            applicationId,
            data: applicationData,
            signatures,
        };
        this.applicationData.get(applicationId).delete(aid);
        this.applicationDataSubject.next(applicationDataUpdate);
    }
    /**
     * Gets application data messages by application id and optionally by signer
     *
     * @param applicationId - Application id of the payload atoms
     * @param [addresses] - List of account addreses to filter application messages by signer
     * @returns An observable subscribed to old and new application messages that met the filter requirements
     */
    getApplicationData(applicationId, addresses) {
        // Pre-calculate signatureIds
        const signatureIds = !addresses ? undefined : addresses.map(a => RadixAddress.fromAddress(a).getUID().toString());
        return Observable.create((observer) => {
            // Send all old data
            if (this.applicationData.has(applicationId)) {
                for (const applicationData of this.applicationData
                    .get(applicationId)
                    .values()) {
                    if (!signatureIds
                        || signatureIds.length === 0
                        || signatureIds.some(s => Object.keys(applicationData.signatures).includes(s))) {
                        const applicationDataUpdate = {
                            action: 'STORE',
                            aid: applicationData.aid,
                            applicationId,
                            data: applicationData,
                            signatures: applicationData.signatures,
                        };
                        observer.next(applicationDataUpdate);
                    }
                }
            }
            // Subscribe for new ones
            this.applicationDataSubject
                .pipe(filter(update => {
                return update.applicationId === applicationId
                    && (!signatureIds
                        || signatureIds.length === 0
                        || signatureIds.some(s => Object.keys(update.signatures).includes(s)));
            }))
                .subscribe(observer);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhEYXRhQWNjb3VudFN5c3RlbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2FjY291bnQvUmFkaXhEYXRhQWNjb3VudFN5c3RlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBWSxNQUFNLE1BQU0sQ0FBQTtBQUNwRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFDdEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBTXZDLE9BQU8sRUFBOEIsWUFBWSxFQUFhLE1BQU0sY0FBYyxDQUFBO0FBRWxGLE1BQU0sQ0FBQyxPQUFPLE9BQU8sc0JBQXNCO0lBS3ZDLFlBQXFCLE9BQXFCO1FBQXJCLFlBQU8sR0FBUCxPQUFPLENBQWM7UUFKbkMsU0FBSSxHQUFHLE1BQU0sQ0FBQTtRQUNiLDJCQUFzQixHQUF3QyxJQUFJLE9BQU8sRUFBRSxDQUFBO1FBQzNFLG9CQUFlLEdBQXVELElBQUksS0FBSyxFQUFFLENBQUE7SUFFM0MsQ0FBQztJQUV2QyxLQUFLLENBQUMsaUJBQWlCLENBQUMsVUFBMkI7UUFDdEQsSUFBSSxDQUFDLENBQUMsZUFBZSxJQUFJLFVBQVUsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUNoRCxPQUFNO1NBQ1Q7UUFFRCxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssT0FBTyxFQUFFO1lBQy9CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQTtTQUNwQzthQUFNLElBQUksVUFBVSxDQUFDLE1BQU0sS0FBSyxRQUFRLEVBQUU7WUFDdkMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFBO1NBQ3JDO0lBQ0wsQ0FBQztJQUVPLGdCQUFnQixDQUFDLFVBQTJCO1FBQ2hELE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUE7UUFDNUIsTUFBTSxHQUFH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