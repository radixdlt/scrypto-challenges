import { Subject, Observable, BehaviorSubject } from 'rxjs';
import { TSMap } from 'typescript-map';
import { RadixSpin, RadixTransferrableTokensParticle, RadixUniqueParticle, } from '../atommodel';
import { RadixDecryptionState } from './RadixDecryptionAccountSystem';
import BN from 'bn.js';
import { radixTokenManager } from '../token/RadixTokenManager';
import Decimal from 'decimal.js';
import { RadixTokenDefinition } from '../token/RadixTokenDefinition';
export default class RadixTransferAccountSystem {
    constructor(address) {
        this.address = address;
        this.name = 'TRANSFER';
        this.transactions = new TSMap();
        this.balance = {};
        this.tokenUnitsBalance = {};
        this.transactionSubject = new Subject();
        this.unspentConsumables = new TSMap();
        this.spentConsumables = new TSMap();
        // Add default radix token to balance
        this.balance[radixTokenManager.nativeToken.toString()] = new BN(0);
        this.balanceSubject = new BehaviorSubject(this.balance);
        this.tokenUnitsBalance[radixTokenManager.nativeToken.toString()] = new Decimal(0);
        this.tokenUnitsBalanceSubject = new BehaviorSubject(this.tokenUnitsBalance);
    }
    async processAtomUpdate(atomUpdate) {
        const atom = atomUpdate.atom;
        if (!atom.containsParticle(RadixTransferrableTokensParticle)) {
            return;
        }
        if (atomUpdate.action === 'STORE') {
            await this.processStoreAtom(atomUpdate);
        }
        else if (atomUpdate.action === 'DELETE') {
            await this.processDeleteAtom(atomUpdate);
        }
    }
    async processStoreAtom(atomUpdate) {
        const atom = atomUpdate.atom;
        // Skip existing atoms
        if (this.transactions.has(atom.getAidString())) {
            return;
        }
        const transactionUpdate = {
            action: 'STORE',
            aid: atom.getAidString(),
            transaction: {
                aid: atom.getAidString(),
                balance: {},
                tokenUnitsBalance: {},
                fee: 0,
                participants: {},
                timestamp: atom.getTimestamp(),
                message: '',
                unique: atom.getParticlesOfType(RadixUniqueParticle).map(p => p.getRRI().toString()),
            },
        };
        const transaction = transactionUpdate.transaction;
        // Get transaction message
        if (atomUpdate.processedData.decryptedData
            && atomUpdate.processedData.decryptedData.decryptionState !== RadixDecryptionState.CANNOT_DECRYPT) {
            transaction.message = atomUpdate.processedData.decryptedData.data;
        }
        const consumables = atom.getSpunParticlesOfType(RadixTransferrableTokensParticle);
        // Get transaction details
        for (const consumable of consumables) {
            const spin = consumable.spin;
            const particle = consumable.particle;
            const tokenClassReference = particle.getTokenDefinitionReference();
            const ownedByMe = particle.getOwner().equals(this.address);
            // TODO: Implement Fees when they change to token fees
            // Assumes POW fee
            if (ownedByMe) {
                const quantity = new BN(0);
                const hid = particle.getHidString();
                if (spin === RadixSpin.DOWN) {
                    quantity.isub(particle.getAmount());
                    this.unspentConsumables.delete(hid);
                    this.spentConsumables.set(hid, particle);
                }
                else if (spin === RadixSpin.UP) {
                    quantity.iadd(particle.getAmount());
                    if (!this.spentConsumables.has(hid)) {
                        this.unspentConsumables.set(hid, particle);
                    }
                }
                if (!(tokenClassReference.toString() in transaction.balance)) {
                    transaction.balance[tokenClassReference.toString()] = new BN(0);
                }
                transaction.balance[tokenClassReference.toString()].iadd(quantity);
            }
            else {
                transaction.participants[particle.getOwner().toString()] = particle.getOwner();
            }
        }
        // Not a transfer
        if (Object.keys(transaction.balance).length === 0) {
            return;
        }
        const numberOfParticipants = Object.keys(transaction.participants).length;
        if (numberOfParticipants > 2) {
            throw new Error(`Invalid number of transaction participants = ${numberOfParticipants}`);
        }
        // Update balance
        for (const tokenId in transaction.balance) {
            // Load tokenclass from network
            // const tokenClass = await radixTokenManager.getTokenClass(tokenId)
            if (!(tokenId in this.balance) || !this.balance[tokenId]) {
                this.balance[tokenId] = new BN(0);
            }
            this.balance[tokenId].iadd(transaction.balance[tokenId]);
            // Token units
            transaction.tokenUnitsBalance[tokenId] = RadixTokenDefinition.fromSubunitsToDecimal(transaction.balance[tokenId]);
            if (!(tokenId in this.tokenUnitsBalance) || !this.balance[tokenId]) {
                this.tokenUnitsBalance[tokenId] = new Decimal(0);
            }
            this.tokenUnitsBalance[tokenId] = this.tokenUnitsBalance[tokenId].add(transaction.tokenUnitsBalance[tokenId]);
        }
        this.transactions.set(transactionUpdate.aid, transaction);
        this.balanceSubject.next(this.balance);
        this.tokenUnitsBalanceSubject.next(this.tokenUnitsBalance);
        this.transactionSubject.next(transactionUpdate);
    }
    async processDeleteAtom(atomUpdate) {
        const atom = atomUpdate.atom;
        // Skip nonexisting atoms
        if (!this.transactions.has(atom.getAidString())) {
            return;
        }
        const id = atom.getAidString();
        const transaction = this.transactions.get(id);
        const transactionUpdate = {
            action: 'DELETE',
            aid: id,
            transaction,
        };
        // Update balance
        for (const tokenId in transaction.balance) {
            // Load tokenclass from network
            // const tokenClass = await radixTokenManager.getTokenClass(tokenId)
            if (!(tokenId in this.balance) || !this.balance[tokenId]) {
                this.balance[tokenId] = new BN(0);
            }
            this.balance[tokenId].isub(transaction.balance[tokenId]);
            // Token units
            transaction.tokenUnitsBalance[tokenId] = RadixTokenDefinition.fromSubunitsToDecimal(transaction.balance[tokenId]);
            if (!(tokenId in this.tokenUnitsBalance) || !this.balance[tokenId]) {
                this.tokenUnitsBalance[tokenId] = new Decimal(0);
            }
            this.tokenUnitsBalance[tokenId] = this.tokenUnitsBalance[tokenId].sub(transaction.tokenUnitsBalance[tokenId]);
        }
        this.transactions.delete(transactionUpdate.aid);
        this.balanceSubject.next(this.balance);
        this.tokenUnitsBalanceSubject.next(this.tokenUnitsBalance);
        this.transactionSubject.next(transactionUpdate);
    }
    getAllTransactions() {
        return Observable.create((observer) => {
            // Send all old transactions
            for (const transaction of this.transactions.values()) {
                const transactionUpdate = {
                    action: 'STORE',
                    aid: transaction.aid,
                    transaction,
                };
                observer.next(transactionUpdate);
            }
            // Subscribe for new ones
            this.transactionSubject.subscribe(observer);
        });
    }
    getUnspentConsumables() {
        return this.unspentConsumables.values();
    }
    getTokenUnitsBalanceUpdates() {
        return this.tokenUnitsBalanceSubject.share();
    }
}
//# sourceMappingURL=data:application/json;base64,