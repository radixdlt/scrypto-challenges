/// <reference types="node" />
import { BehaviorSubject, Observable } from 'rxjs';
import { RadixAccountSystem, RadixTransferAccountSystem, RadixMessagingAccountSystem, RadixDecryptionAccountSystem, RadixDataAccountSystem, RadixAtomCacheProvider, RadixCacheAccountSystem, RadixDecryptionProvider, RadixTokenDefinitionAccountSystem } from '../..';
import { RadixAtomUpdate, RadixAddress } from '../atommodel';
export default class RadixAccount {
    readonly address: RadixAddress;
    private nodeConnection;
    private accountSystems;
    private atomSubscription;
    private synced;
    connectionStatus: BehaviorSubject<string>;
    cacheSystem: RadixCacheAccountSystem;
    decryptionSystem: RadixDecryptionAccountSystem;
    transferSystem: RadixTransferAccountSystem;
    dataSystem: RadixDataAccountSystem;
    messagingSystem: RadixMessagingAccountSystem;
    tokenDefinitionSystem: RadixTokenDefinitionAccountSystem;
    /**
     * Creates an instance of radix account.
     * @param address Address of the account
     * @param [plain] If set to false, will not create default account systems.
     * Use this for accounts that will not be connected to the network
     */
    constructor(address: RadixAddress, plain?: boolean);
    /**
     * Create an instance of radix account from an address
     * @param address string address
     * @param [plain] If set to false, will not create default account systems.
     * Use this for accounts that will not be connected to the network
     * @returns
     */
    static fromAddress(address: string, plain?: boolean): RadixAccount;
    /**
     * Create an instance of a Radix account from an arbitrary byte buffer. This
     * could e.g. be a friendly name of an account, in which case it would be
     * created as <code>Buffer.from('friendly name')</code>.
     *
     * @param seed Buffer seed for the address
     * @param [plain] If set to true, will not create default account systems.
     * Use this for accounts that will not be connected to the network.
     * @returns a new Radix account.
     */
    static fromSeed(seed: Buffer, plain?: boolean): RadixAccount;
    enableDecryption(decryptionProvider: RadixDecryptionProvider): void;
    enableCache(cacheProvider: RadixAtomCacheProvider): Promise<void>;
    getAddress(): string;
    addAccountSystem(system: RadixAccountSystem): RadixAccountSystem;
    removeAccountSystem(name: string): void;
    getSystem(name: string): RadixAccountSystem;
    /**
     * An observable that tells you when the account is in sync with the network
     *
     * @returns An observable which sends 'true' whenever the account has received and processed new information form the network
     */
    isSynced(): Observable<boolean>;
    openNodeConnection: () => Promise<void>;
    /**
     * Unsubscribes the node connection to the stream of past and future atoms associated with this address account
     *
     * @returns A promise with the result of the unsubscription call
     */
    closeNodeConnection: () => Promise<any>;
    _onAtomReceived: (atomUpdate: RadixAtomUpdate) => Promise<void>;
    private _onConnectionClosed;
}
