import * as tslib_1 from "tslib";
import { RadixSerializer, includeJSON, includeDSON, RadixParticle, RadixAddress, RadixBytes } from '../..';
/**
 * Particle which can hold arbitrary data
 */
let RadixMessageParticle = class RadixMessageParticle extends RadixParticle {
    constructor(from, to, data, metaData, nonce) {
        super();
        this.from = from;
        this.to = to;
        this.bytes = new RadixBytes(data);
        this.metaData = metaData;
        this.nonce = nonce ? nonce : Date.now();
    }
    getAddresses() {
        return [this.from, this.to];
    }
    getData() {
        return this.bytes;
    }
    getMetaData(key) {
        const metaData = this.metaData;
        if (metaData && key in metaData) {
            return metaData[key];
        }
        return null;
    }
    getNonce() {
        return this.nonce;
    }
};
tslib_1.__decorate([
    includeJSON,
    includeDSON,
    tslib_1.__metadata("design:type", RadixAddress)
], RadixMessageParticle.prototype, "from", void 0);
tslib_1.__decorate([
    includeJSON,
    includeDSON,
    tslib_1.__metadata("design:type", RadixAddress)
], RadixMessageParticle.prototype, "to", void 0);
tslib_1.__decorate([
    includeDSON,
    includeJSON,
    tslib_1.__metadata("design:type", Object)
], RadixMessageParticle.prototype, "metaData", void 0);
tslib_1.__decorate([
    includeDSON,
    includeJSON,
    tslib_1.__metadata("design:type", RadixBytes)
], RadixMessageParticle.prototype, "bytes", void 0);
tslib_1.__decorate([
    includeDSON,
    includeJSON,
    tslib_1.__metadata("design:type", Number)
], RadixMessageParticle.prototype, "nonce", void 0);
RadixMessageParticle = tslib_1.__decorate([
    RadixSerializer.registerClass('radix.particles.message'),
    tslib_1.__metadata("design:paramtypes", [RadixAddress, RadixAddress, Object, Object, Number])
], RadixMessageParticle);
export { RadixMessageParticle };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhNZXNzYWdlUGFydGljbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy9hdG9tbW9kZWwvcGFydGljbGVzL2RhdGEvUmFkaXhNZXNzYWdlUGFydGljbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxNQUFNLE9BQU8sQ0FBQTtBQUUxRzs7R0FFRztBQUVILElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQXFCLFNBQVEsYUFBYTtJQXNCbkQsWUFBWSxJQUFrQixFQUFFLEVBQWdCLEVBQUUsSUFBUyxFQUFFLFFBQWlDLEVBQUUsS0FBYztRQUMxRyxLQUFLLEVBQUUsQ0FBQTtRQUNQLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBO1FBQ2hCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFBO1FBQ1osSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQTtRQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7SUFDM0MsQ0FBQztJQUVNLFlBQVk7UUFDZixPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0IsQ0FBQztJQUVNLE9BQU87UUFDVixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDckIsQ0FBQztJQUVNLFdBQVcsQ0FBQyxHQUFXO1FBQzFCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUE7UUFFOUIsSUFBSSxRQUFRLElBQUksR0FBRyxJQUFJLFFBQVEsRUFBRTtZQUM3QixPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtTQUN2QjtRQUVELE9BQU8sSUFBSSxDQUFBO0lBQ2YsQ0FBQztJQUVNLFFBQVE7UUFDWCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDckIsQ0FBQztDQUVKLENBQUE7QUFqREc7SUFGQyxXQUFXO0lBQ1gsV0FBVztzQ0FDQyxZQUFZO2tEQUFBO0FBSXpCO0lBRkMsV0FBVztJQUNYLFdBQVc7c0NBQ0QsWUFBWTtnREFBQTtBQUl2QjtJQUZDLFdBQVc7SUFDWCxXQUFXOztzREFDMEI7QUFJdEM7SUFGQyxXQUFXO0lBQ1gsV0FBVztzQ0FDRSxVQUFVO21EQUFBO0FBSXhCO0lBRkMsV0FBVztJQUNYLFdBQVc7O21EQUNRO0FBcEJYLG9CQUFvQjtJQURoQyxlQUFlLENBQUMsYUFBYSxDQUFDLHlCQUF5QixDQUFDOzZDQXVCbkMsWUFBWSxFQUFNLFlBQVk7R0F0QnZDLG9CQUFvQixDQXFEaEM7U0FyRFksb0JBQW9CIn0=