import * as tslib_1 from "tslib";
import { includeDSON, includeJSON, RadixSerializer, RadixParticle, RadixAddress, RadixFungibleType, RadixUInt256, RRI, } from '../..';
import BN from 'bn.js';
/**
 *  A particle which represents an amount of consumable and consuming, tranferable fungible tokens
 *  owned by some key owner and stored in an account.
 */
let RadixTransferrableTokensParticle = class RadixTransferrableTokensParticle extends RadixParticle {
    constructor(amount, granularity, address, nonce, tokenReference, tokenPermissions, planck) {
        if (amount.isZero()) {
            throw new Error('Ammount cannot be zero');
        }
        planck = planck ? planck : Math.floor(Date.now() / 60000 + 60000);
        super();
        this.address = address;
        this.granularity = new RadixUInt256(granularity);
        this.tokenDefinitionReference = tokenReference;
        this.amount = new RadixUInt256(amount);
        this.planck = planck;
        this.nonce = nonce;
        this.permissions = tokenPermissions;
    }
    getAddress() {
        return this.address;
    }
    getAddresses() {
        return [this.address];
    }
    getType() {
        return RadixFungibleType.TRANSFER;
    }
    getPlanck() {
        return this.planck;
    }
    getNonce() {
        return this.nonce;
    }
    getTokenDefinitionReference() {
        return this.tokenDefinitionReference;
    }
    getOwner() {
        return this.address;
    }
    getAmount() {
        return this.amount.value;
    }
    getGranularity() {
        return this.granularity.value;
    }
    getTokenPermissions() {
        return this.permissions;
    }
};
tslib_1.__decorate([
    includeDSON,
    includeJSON,
    tslib_1.__metadata("design:type", RadixAddress)
], RadixTransferrableTokensParticle.prototype, "address", void 0);
tslib_1.__decorate([
    includeDSON,
    includeJSON,
    tslib_1.__metadata("design:type", RRI)
], RadixTransferrableTokensParticle.prototype, "tokenDefinitionReference", void 0);
tslib_1.__decorate([
    includeDSON,
    includeJSON,
    tslib_1.__metadata("design:type", RadixUInt256)
], RadixTransferrableTokensParticle.prototype, "granularity", void 0);
tslib_1.__decorate([
    includeDSON,
    includeJSON,
    tslib_1.__metadata("design:type", Number)
], RadixTransferrableTokensParticle.prototype, "planck", void 0);
tslib_1.__decorate([
    includeDSON,
    includeJSON,
    tslib_1.__metadata("design:type", Number)
], RadixTransferrableTokensParticle.prototype, "nonce", void 0);
tslib_1.__decorate([
    includeDSON,
    includeJSON,
    tslib_1.__metadata("design:type", RadixUInt256)
], RadixTransferrableTokensParticle.prototype, "amount", void 0);
tslib_1.__decorate([
    includeDSON,
    includeJSON,
    tslib_1.__metadata("design:type", Object)
], RadixTransferrableTokensParticle.prototype, "permissions", void 0);
RadixTransferrableTokensParticle = tslib_1.__decorate([
    RadixSerializer.registerClass('radix.particles.transferrable_tokens'),
    tslib_1.__metadata("design:paramtypes", [BN,
        BN,
        RadixAddress, Number, RRI, Object, Number])
], RadixTransferrableTokensParticle);
export { RadixTransferrableTokensParticle };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhUcmFuc2ZlcnJhYmxlVG9rZW5zUGFydGljbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy9hdG9tbW9kZWwvcGFydGljbGVzL3Rva2Vucy9SYWRpeFRyYW5zZmVycmFibGVUb2tlbnNQYXJ0aWNsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILFdBQVcsRUFDWCxXQUFXLEVBQ1gsZUFBZSxFQUNmLGFBQWEsRUFDYixZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLFlBQVksRUFDWixHQUFHLEdBS04sTUFBTSxPQUFPLENBQUE7QUFFZCxPQUFPLEVBQUUsTUFBTSxPQUFPLENBQUE7QUFFdEI7OztHQUdHO0FBRUgsSUFBYSxnQ0FBZ0MsR0FBN0MsTUFBYSxnQ0FBaUMsU0FBUSxhQUFhO0lBOEIvRCxZQUNJLE1BQVUsRUFDVixXQUFlLEVBQ2YsT0FBcUIsRUFDckIsS0FBYSxFQUNiLGNBQW1CLEVBQ25CLGdCQUF1QyxFQUN2QyxNQUFlO1FBRWYsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO1NBQzVDO1FBRUQsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUE7UUFFakUsS0FBSyxFQUFFLENBQUE7UUFFUCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtRQUN0QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ2hELElBQUksQ0FBQyx3QkFBd0IsR0FBRyxjQUFjLENBQUE7UUFDOUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUN0QyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtRQUNwQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtRQUNsQixJQUFJLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFBO0lBQ3ZDLENBQUM7SUFFTSxVQUFVO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFBO0lBQ3ZCLENBQUM7SUFFTSxZQUFZO1FBQ2YsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUN6QixDQUFDO0lBRU0sT0FBTztRQUNWLE9BQU8saUJBQWlCLENBQUMsUUFBUSxDQUFBO0lBQ3JDLENBQUM7SUFFTSxTQUFTO1FBQ1osT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFBO0lBQ3RCLENBQUM7SUFFTSxRQUFRO1FBQ1gsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFBO0lBQ3JCLENBQUM7SUFFTSwyQkFBMkI7UUFDOUIsT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUE7SUFDeEMsQ0FBQztJQUVNLFFBQVE7UUFDWCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUE7SUFDdkIsQ0FBQztJQUVNLFNBQVM7UUFDWixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFBO0lBQzVCLENBQUM7SUFFTSxjQUFjO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUE7SUFDakMsQ0FBQztJQUVNLG1CQUFtQjtRQUN0QixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUE7SUFDM0IsQ0FBQztDQUNKLENBQUE7QUEzRkc7SUFGQyxXQUFXO0lBQ1gsV0FBVztzQ0FDSSxZQUFZO2lFQUFBO0FBSTVCO0lBRkMsV0FBVztJQUNYLFdBQVc7c0NBQ3FCLEdBQUc7a0ZBQUE7QUFJcEM7SUFGQyxXQUFXO0lBQ1gsV0FBVztzQ0FDUSxZQUFZO3FFQUFBO0FBSWhDO0lBRkMsV0FBVztJQUNYLFdBQVc7O2dFQUNTO0FBSXJCO0lBRkMsV0FBVztJQUNYLFdBQVc7OytEQUNRO0FBSXBCO0lBRkMsV0FBVztJQUNYLFdBQVc7c0NBQ0csWUFBWTtnRUFBQTtBQUkzQjtJQUZDLFdBQVc7SUFDWCxXQUFXOztxRUFDNkI7QUE1QmhDLGdDQUFnQztJQUQ1QyxlQUFlLENBQUMsYUFBYSxDQUFDLHNDQUFzQyxDQUFDOzZDQWdDdEQsRUFBRTtRQUNHLEVBQUU7UUFDTixZQUFZLFVBRUwsR0FBRztHQW5DZCxnQ0FBZ0MsQ0ErRjVDO1NBL0ZZLGdDQUFnQyJ9