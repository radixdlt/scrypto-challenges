var RadixAID_1;
import * as tslib_1 from "tslib";
import long from 'long';
import { RadixSerializer } from '..';
const id = ':aid:';
let RadixAID = RadixAID_1 = class RadixAID {
    constructor(bytes) {
        if (bytes.length !== RadixAID_1.BYTES) {
            throw new Error(`Bytest lenght must be ${RadixAID_1.BYTES} but is ${bytes.length}`);
        }
        this.bytes = Buffer.from(bytes);
    }
    static from(hash, shards) {
        if (shards.length === 0) {
            throw new Error('Shards array cannot be empty');
        }
        const shardIndex = hash[0] % shards.length;
        const selectedShard = shards
            .map(s => s.toUnsigned())
            .sort((a, b) => a.compare(b))
            .map(s => s.toSigned())[shardIndex];
        const bytes = Buffer.alloc(this.BYTES);
        hash.copy(bytes, 0, 0, this.HASH_BYTES);
        Buffer.from(selectedShard.toBytes()).copy(bytes, this.HASH_BYTES);
        return new this(bytes);
    }
    static fromJSON(data) {
        return new this(Buffer.from(data, 'hex'));
    }
    toJSON() {
        return `${id}${this.bytes.toString('hex')}`;
    }
    toDSON() {
        return RadixSerializer.toDSON(this);
    }
    encodeCBOR(encoder) {
        const output = Buffer.alloc(this.bytes.length + 1);
        output.writeInt8(0x08, 0);
        this.bytes.copy(output, 1);
        return encoder.pushAny(output);
    }
    equals(aid) {
        return this.bytes.compare(aid.bytes) === 0;
    }
    toString() {
        return this.bytes.toString('hex');
    }
    getShard() {
        return long.fromBytes(Array.from(this.bytes.subarray(RadixAID_1.HASH_BYTES)));
    }
};
RadixAID.BYTES = 32;
RadixAID.HASH_BYTES = 24;
RadixAID.SHARD_BYTES = 8;
RadixAID = RadixAID_1 = tslib_1.__decorate([
    RadixSerializer.registerPrimitive(id),
    tslib_1.__metadata("design:paramtypes", [Buffer])
], RadixAID);
export { RadixAID };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhBSUQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy9hdG9tbW9kZWwvcHJpbWl0aXZlcy9SYWRpeEFJRC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQTtBQUN2QixPQUFPLEVBQUUsZUFBZSxFQUFrQixNQUFNLElBQUksQ0FBQztBQUVyRCxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUE7QUFFbEIsSUFBYSxRQUFRLGdCQUFyQixNQUFhLFFBQVE7SUFTakIsWUFBbUIsS0FBYTtRQUM1QixJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssVUFBUSxDQUFDLEtBQUssRUFBRTtZQUNqQyxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixVQUFRLENBQUMsS0FBSyxXQUFXLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO1NBQ3BGO1FBRUQsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFHTSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQVksRUFBRSxNQUFjO1FBQzNDLElBQUcsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDcEIsTUFBTSxJQUFJLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFBO1NBQ2xEO1FBRUQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUE7UUFFMUMsTUFBTSxhQUFhLEdBQUcsTUFBTTthQUN2QixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7YUFDeEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM1QixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FDdEIsVUFBVSxDQUFDLENBQUE7UUFFaEIsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDdEMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDdkMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUVqRSxPQUFPLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzFCLENBQUM7SUFHTSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQVk7UUFDL0IsT0FBTyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQzdDLENBQUM7SUFFTSxNQUFNO1FBQ1QsT0FBTyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFBO0lBQy9DLENBQUM7SUFFTSxNQUFNO1FBQ1QsT0FBTyxlQUFlLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3ZDLENBQUM7SUFFTSxVQUFVLENBQUMsT0FBTztRQUNyQixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQ2xELE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ3pCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUUxQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDbEMsQ0FBQztJQUdNLE1BQU0sQ0FBQyxHQUFhO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUM5QyxDQUFDO0lBRU0sUUFBUTtRQUNYLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDckMsQ0FBQztJQUVNLFFBQVE7UUFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxVQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQy9FLENBQUM7Q0FDSixDQUFBO0FBckVpQixjQUFLLEdBQUcsRUFBRSxDQUFBO0FBQ1YsbUJBQVUsR0FBRyxFQUFFLENBQUE7QUFDZixvQkFBVyxHQUFHLENBQUMsQ0FBQTtBQUpwQixRQUFRO0lBRHBCLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7NkNBVVIsTUFBTTtHQVR2QixRQUFRLENBdUVwQjtTQXZFWSxRQUFRIn0=