/// <reference types="node" />
import { RadixEUID, RadixECSignature, RadixPrimitive } from '..';
import EC from 'elliptic';
import long from 'long';
export declare class RadixAddress implements RadixPrimitive {
    keyPair: EC.ec.KeyPair;
    private magicByte;
    constructor(magicByte?: number);
    static generateNew(): RadixAddress;
    static fromAddress(address: string): RadixAddress;
    static fromPublic(publicKey: Buffer, magicByte?: number): RadixAddress;
    static fromPrivate(privateKey: Buffer | string, magicByte?: number): RadixAddress;
    getAddressBytes(): Buffer;
    getAddress(): string;
    getHash(): Buffer;
    getUID(): RadixEUID;
    getShard(): long;
    getPublic(): Buffer;
    getPrivate(): Buffer;
    sign(data: Buffer): RadixECSignature;
    verify(data: Buffer, signature: RadixECSignature): boolean;
    equals(otherAddress: this): boolean;
    toString(): string;
    static fromJSON(address: string): RadixAddress;
    toJSON(): string;
    toDSON(): Buffer;
    encodeCBOR(encoder: any): any;
}
