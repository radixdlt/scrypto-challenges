var RadixAddress_1;
import * as tslib_1 from "tslib";
import { RadixSerializer, RadixEUID, RadixECSignature } from '..';
import EC from 'elliptic';
import bs58 from 'bs58';
import { radixUniverse, radixHash } from '../../..';
const ec = new EC.ec('secp256k1');
const id = ':adr:';
let RadixAddress = RadixAddress_1 = class RadixAddress {
    constructor(magicByte) {
        if (magicByte) {
            this.magicByte = magicByte;
        }
    }
    static generateNew() {
        const radixKeyPair = new RadixAddress_1();
        radixKeyPair.keyPair = ec.genKeyPair();
        return radixKeyPair;
    }
    static fromAddress(address) {
        let raw = Array.prototype.slice.call(bs58.decode(address), 0);
        // Universe check
        if (radixUniverse && radixUniverse.initialized && radixUniverse.getMagicByte() !== raw[0]) {
            throw new Error('Address is from a different universe');
        }
        // Checksum
        const check = radixHash(raw.splice(0, raw.length - 4), 0, raw.length - 4);
        for (let i = 0; i < 4; i++) {
            if (check[i] !== raw[raw.length - 4 + i]) {
                throw new Error('Invalid address');
            }
        }
        raw = Array.prototype.slice.call(bs58.decode(address), 0);
        const radixAddress = new this(raw[0]);
        radixAddress.keyPair = ec.keyFromPublic(raw.splice(1, raw.length - 5));
        return radixAddress;
    }
    static fromPublic(publicKey, magicByte) {
        if (!publicKey) {
            throw new Error('Missing public key');
        }
        if (publicKey.length !== 33) {
            throw new Error('Public key must be 33 bytes, but was ' + publicKey.length);
        }
        const radixAddress = new this(magicByte);
        radixAddress.keyPair = ec.keyFromPublic(publicKey);
        return radixAddress;
    }
    static fromPrivate(privateKey, magicByte) {
        const radixAddress = new this(magicByte);
        radixAddress.keyPair = ec.keyFromPrivate(privateKey);
        return radixAddress;
    }
    getAddressBytes() {
        const publicKey = this.keyPair.getPublic().encode('array', true);
        const addressBytes = [];
        addressBytes[0] = this.magicByte ? this.magicByte : radixUniverse.getMagicByte();
        for (let i = 0; i < publicKey.length; i++) {
            addressBytes[i + 1] = publicKey[i];
        }
        const check = radixHash(addressBytes, 0, publicKey.length + 1);
        for (let i = 0; i < 4; i++) {
            addressBytes[publicKey.length + 1 + i] = check[i];
        }
        return Buffer.from(addressBytes);
    }
    getAddress() {
        return bs58.encode(this.getAddressBytes());
    }
    getHash() {
        return radixHash(this.getPublic(), 0, this.getPublic().length);
    }
    getUID() {
        const hash = this.getHash();
        return new RadixEUID(hash.slice(0, 16));
    }
    getShard() {
        return this.getUID().getShard();
    }
    getPublic() {
        return Buffer.from(this.keyPair.getPublic(true, 'array'));
    }
    getPrivate() {
        return this.keyPair.getPrivate().toArrayLike(Buffer);
    }
    sign(data) {
        const signature = this.keyPair.sign(data);
        return RadixECSignature.fromEllasticSignature(signature);
    }
    verify(data, signature) {
        return this.keyPair.verify(data, { r: signature.r.bytes, s: signature.s.bytes });
    }
    equals(otherAddress) {
        return this.getAddress() === otherAddress.getAddress();
    }
    toString() {
        return this.getAddress();
    }
    static fromJSON(address) {
        return this.fromAddress(address);
    }
    toJSON() {
        return `${id}${this.getAddress()}`;
    }
    toDSON() {
        return RadixSerializer.toDSON(this);
    }
    encodeCBOR(encoder) {
        const addressBuffer = this.getAddressBytes();
        const output = Buffer.alloc(addressBuffer.length + 1);
        output.writeInt8(0x04, 0);
        addressBuffer.copy(output, 1);
        return encoder.pushAny(output);
    }
};
RadixAddress = RadixAddress_1 = tslib_1.__decorate([
    RadixSerializer.registerPrimitive(id),
    tslib_1.__metadata("design:paramtypes", [Number])
], RadixAddress);
export { RadixAddress };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhBZGRyZXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvYXRvbW1vZGVsL3ByaW1pdGl2ZXMvUmFkaXhBZGRyZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQWtCLE1BQU0sSUFBSSxDQUFBO0FBRWpGLE9BQU8sRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUN6QixPQUFPLElBQUksTUFBTSxNQUFNLENBQUE7QUFFdkIsT0FBTyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFFbkQsTUFBTSxFQUFFLEdBQUcsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBRWpDLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQTtBQUVsQixJQUFhLFlBQVksb0JBQXpCLE1BQWEsWUFBWTtJQUtyQixZQUFZLFNBQWtCO1FBQzFCLElBQUksU0FBUyxFQUFFO1lBQ1gsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUE7U0FDN0I7SUFDTCxDQUFDO0lBRU0sTUFBTSxDQUFDLFdBQVc7UUFDckIsTUFBTSxZQUFZLEdBQUcsSUFBSSxjQUFZLEVBQUUsQ0FBQTtRQUN2QyxZQUFZLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtRQUV0QyxPQUFPLFlBQVksQ0FBQTtJQUN2QixDQUFDO0lBRU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFlO1FBQ3JDLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBRTdELGlCQUFpQjtRQUNqQixJQUFJLGFBQWEsSUFBSSxhQUFhLENBQUMsV0FBVyxJQUFJLGFBQWEsQ0FBQyxZQUFZ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