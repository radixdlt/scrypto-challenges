var RadixAtom_1;
import * as tslib_1 from "tslib";
import { includeJSON, includeDSON, RadixSerializableObject, RadixSerializer, RadixAID, } from '..';
import { StringifySet } from '../../common/StringifySet';
let RadixAtom = RadixAtom_1 = class RadixAtom extends RadixSerializableObject {
    constructor() {
        super(...arguments);
        this.particleGroups = [];
        this.metaData = {};
    }
    getParticles() {
        const particles = [];
        for (const particleGroup of this.particleGroups) {
            for (const particle of particleGroup.particles) {
                particles.push(particle);
            }
        }
        return particles;
    }
    getAddresses() {
        const addressSet = new StringifySet();
        for (const particleGroup of this.particleGroups) {
            for (const particle of particleGroup.particles) {
                const addresses = particle.particle.getAddresses();
                for (const address of addresses) {
                    addressSet.add(address);
                }
            }
        }
        return addressSet.values();
    }
    getShards() {
        const shardSet = new StringifySet();
        for (const particleGroup of this.particleGroups) {
            for (const particle of particleGroup.particles) {
                const addresses = particle.particle.getAddresses();
                for (const address of addresses) {
                    const shard = address.getShard();
                    shardSet.add(shard);
                }
            }
        }
        return shardSet.values();
    }
    getTimestamp() {
        const timestamp = parseInt(this.metaData[RadixAtom_1.METADATA_TIMESTAMP_KEY], 10);
        if (Number.isNaN(timestamp)) {
            throw new Error('Timestamp is not set or not a valid number');
        }
        else {
            return timestamp;
        }
    }
    setTimestamp(timestamp) {
        this.metaData[RadixAtom_1.METADATA_TIMESTAMP_KEY] = '' + timestamp;
    }
    setPowNonce(nonce) {
        this.metaData[RadixAtom_1.METADATA_POW_NONCE_KEY] = nonce.toString();
    }
    clearPowNonce() {
        delete this.metaData[RadixAtom_1.METADATA_POW_NONCE_KEY];
    }
    getSpunParticlesOfType(...types) {
        return this.getParticles()
            .filter(s => {
            for (const type of types) {
                if (s.particle instanceof type) {
                    return true;
                }
            }
        });
    }
    getParticlesOfSpin(spin) {
        return this.getParticles()
            .filter(spunParticle => spunParticle.spin === spin)
            .map(spunParticle => spunParticle.particle);
    }
    getParticlesOfType(type, spin) {
        let particles = this.getParticles()
            .filter(spunParticle => spunParticle.particle instanceof type);
        if (spin) {
            particles = particles.filter(spunParticle => spunParticle.spin === spin);
        }
        return particles.map(spunParticle => spunParticle.particle);
    }
    getFirstParticleOfType(type) {
        return this.getParticles()
            .find(spunParticle => spunParticle.particle instanceof type).particle;
    }
    containsParticle(...types) {
        for (const spunParticle of this.getParticles()) {
            for (const type of types) {
                if (spunParticle.particle instanceof type) {
                    return true;
                }
            }
        }
        return false;
    }
    getParticleGroups() {
        return this.particleGroups;
    }
    getAid() {
        return RadixAID.from(this.getHash(), this.getShards());
    }
    getAidString() {
        return this.getAid().toString();
    }
};
RadixAtom.METADATA_TIMESTAMP_KEY = 'timestamp';
RadixAtom.METADATA_POW_NONCE_KEY = 'powNonce';
tslib_1.__decorate([
    includeJSON,
    includeDSON,
    tslib_1.__metadata("design:type", Array)
], RadixAtom.prototype, "particleGroups", void 0);
tslib_1.__decorate([
    includeJSON,
    tslib_1.__metadata("design:type", Object)
], RadixAtom.prototype, "signatures", void 0);
tslib_1.__decorate([
    includeDSON,
    includeJSON,
    tslib_1.__metadata("design:type", Object)
], RadixAtom.prototype, "metaData", void 0);
RadixAtom = RadixAtom_1 = tslib_1.__decorate([
    RadixSerializer.registerClass('radix.atom')
], RadixAtom);
export { RadixAtom };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhBdG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvYXRvbW1vZGVsL2F0b20vUmFkaXhBdG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUNILFdBQVcsRUFDWCxXQUFXLEVBQ1gsdUJBQXVCLEVBR3ZCLGVBQWUsRUFLZixRQUFRLEdBQ1gsTUFBTSxJQUFJLENBQUE7QUFFWCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUE7QUFHeEQsSUFBYSxTQUFTLGlCQUF0QixNQUFhLFNBQVUsU0FBUSx1QkFBdUI7SUFEdEQ7O1FBT1csbUJBQWMsR0FBeUIsRUFBRSxDQUFBO1FBT3pDLGFBQVEsR0FBMEIsRUFBRSxDQUFBO0lBMkgvQyxDQUFDO0lBekhVLFlBQVk7UUFDZixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUE7UUFFcEIsS0FBSyxNQUFNLGFBQWEsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQzdDLEtBQUssTUFBTSxRQUFRLElBQUksYUFBYSxDQUFDLFNBQVMsRUFBRTtnQkFDNUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTthQUMzQjtTQUNKO1FBRUQsT0FBTyxTQUFTLENBQUE7SUFDcEIsQ0FBQztJQUVNLFlBQVk7UUFDZixNQUFNLFVBQVUsR0FBRyxJQUFJLFlBQVksRUFBZ0IsQ0FBQTtRQUVuRCxLQUFLLE1BQU0sYUFBYSxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDN0MsS0FBSyxNQUFNLFFBQVEsSUFBSSxhQUFhLENBQUMsU0FBUyxFQUFFO2dCQUM1QyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFBO2dCQUNsRCxLQUFLLE1BQU0sT0FBTyxJQUFJLFNBQVMsRUFBRTtvQkFDN0IsVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtpQkFDMUI7YUFDSjtTQUNK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