import cbor from 'cbor';
import { TSMap } from 'typescript-map';
import { logger } from '../../common/RadixLogger';
import 'reflect-metadata';
import { isEmpty } from '../../common/RadixUtil';
export const JSON_PROPERTIES_KEY = 'JSON_SERIALIZATION_PROPERTIES';
export const DSON_PROPERTIES_KEY = 'DSON_SERIALIZATION_PROPERTIES';
/**
 * Decorator to register a property for JSON serialization.
 *   Stores property names in the prototype metadata
 * @param target
 * @param propertyName
 */
export function includeJSON(target, propertyName) {
    registerPropertyForSerialization(target, propertyName, JSON_PROPERTIES_KEY);
}
/**
 * Decorator to register a property for DSON serialization.
 *   Stores property names in the prototype metadata
 * @param target
 * @param propertyName
 */
export function includeDSON(target, propertyName) {
    registerPropertyForSerialization(target, propertyName, DSON_PROPERTIES_KEY);
}
/**
 * Registers property for serialization.
 *   Stores an array of property names in the prototype metadata.
 *   Inherits from the object prototype chain.
 * @param target
 * @param propertyName
 * @param metadataKey
 */
function registerPropertyForSerialization(target, propertyName, metadataKey) {
    // Avoid modifying parent metadata, clone instead
    if (!Reflect.hasOwnMetadata(metadataKey, target)) {
        let props = [];
        if (Reflect.hasMetadata(metadataKey, target)) {
            // Clone parent metadata
            props = Reflect.getMetadata(metadataKey, target).slice(0);
        }
        Reflect.defineMetadata(metadataKey, props, target);
    }
    Reflect.getMetadata(metadataKey, target).push(propertyName);
    Reflect.getMetadata(metadataKey, target).sort();
}
export class RadixSerializer {
    /**
     * Decorator to register a class for serialization
     * @param serializer serializer id
     * @returns
     */
    static registerClass(serializer) {
        return (constructor) => {
            constructor.SERIALIZER = serializer;
            this.classes.set(serializer, constructor);
        };
    }
    /**
     * Registers advanced 'primitive' types for serialization
     * @param tag
     * @returns
     */
    static registerPrimitive(tag) {
        return (constructor) => {
            this.primitives.set(tag, constructor);
        };
    }
    static toJSON(data) {
        if (Array.isArray(data)) {
            const output = [];
            for (const item of data) {
                output.push(RadixSerializer.toJSON(item));
            }
            return output;
        }
        else if (typeof data === 'number' ||
            typeof data === 'boolean') {
            return data;
        }
        else if (typeof data === 'string') {
            return `:str:${data}`;
        }
        else if (data !== null && typeof data === 'object') {
            if (typeof data.toJSON === 'function') {
                return data.toJSON();
            }
            else {
                const output = {};
                for (const key in data) {
                    const serialized = RadixSerializer.toJSON(data[key]);
                    if (!isEmpty(serialized)) {
                        output[key] = serialized;
                    }
                }
                return output;
            }
        }
    }
    static fromJSON(json) {
        if (Array.isArray(json)) {
            const output = [];
            for (const item of json) {
                output.push(RadixSerializer.fromJSON(item));
            }
            return output;
        }
        else if (typeof json === 'object') {
            return RadixSerializer.fromJSONObject(json);
        }
        else if (typeof json === 'string') {
            // Advanced primitives
            const tag = json.slice(0, 5);
            if (tag === ':str:') {
                return json.slice(5);
            }
            // Cast to a primitve class
            if (this.primitives.has(tag)) {
                return this.primitives.get(tag).fromJSON(json.slice(5));
            }
            logger.warn(`No matching class for primitive string "${json}"`);
        }
        else {
            return json;
        }
    }
    static fromJSONObject(jsonObject) {
        const output = {};
        for (const key in jsonObject) {
            output[key] = (key === 'serializer' ? jsonObject[key] : RadixSerializer.fromJSON(jsonObject[key]));
        }
        if ('serializer' in output) {
            // tslint:disable-next-line:no-string-literal
            const type = output['serializer'];
            if (this.classes.has(type)) {
                return this.classes.get(type).fromJSON(output);
            }
            logger.warn(`Serializer "${type}" not implemented`);
        }
        return output;
    }
    static toDSON(data) {
        const enc = new cbor.Encoder();
        // Overide default object encoder to use stream encoding and lexicographical ordering of keys
        enc.addSemanticType(Object, (encoder, obj) => {
            const keys = Object.keys(obj);
            keys.sort();
            if (!encoder.push(Buffer.from([191]))) {
                return false;
            }
            for (const key of keys) {
                if (isEmpty(obj[key])) {
                    continue;
                }
                if (!encoder.pushAny(key)) {
                    return false;
                }
                if (!encoder.pushAny(obj[key])) {
                    return false;
                }
            }
            if (!encoder.push(Buffer.from([0xFF]))) {
                return false;
            }
            return true;
        });
        return enc._encodeAll([data]);
    }
}
RadixSerializer.classes = new TSMap();
RadixSerializer.primitives = new TSMap();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhTZXJpYWxpemVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvYXRvbW1vZGVsL3NlcmlhbGl6ZXIvUmFkaXhTZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQTtBQUV2QixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFFdEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBR2pELE9BQU8sa0JBQWtCLENBQUE7QUFDekIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRWpELE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLCtCQUErQixDQUFBO0FBQ2xFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLCtCQUErQixDQUFBO0FBRWxFOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLFdBQVcsQ0FBQyxNQUErQixFQUFFLFlBQW9CO0lBQzdFLGdDQUFnQyxDQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUUsbUJBQW1CLENBQUMsQ0FBQTtBQUMvRSxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsV0FBVyxDQUFDLE1BQStCLEVBQUUsWUFBb0I7SUFDN0UsZ0NBQWdDLENBQUMsTUFBTSxFQUFFLFlBQVksRUFBRSxtQkFBbUIsQ0FBQyxDQUFBO0FBQy9FLENBQUM7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsU0FBUyxnQ0FBZ0MsQ0FBQyxNQUErQixFQUFFLFlBQW9CLEVBQUUsV0FBbUI7SUFDaEgsaURBQWlEO0lBQ2pELElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUM5QyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUE7UUFDZCxJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxF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