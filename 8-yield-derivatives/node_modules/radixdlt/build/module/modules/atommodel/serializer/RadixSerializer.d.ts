/// <reference types="node" />
import { RadixSerializableObject } from '..';
import 'reflect-metadata';
export declare const JSON_PROPERTIES_KEY = "JSON_SERIALIZATION_PROPERTIES";
export declare const DSON_PROPERTIES_KEY = "DSON_SERIALIZATION_PROPERTIES";
/**
 * Decorator to register a property for JSON serialization.
 *   Stores property names in the prototype metadata
 * @param target
 * @param propertyName
 */
export declare function includeJSON(target: RadixSerializableObject, propertyName: string): void;
/**
 * Decorator to register a property for DSON serialization.
 *   Stores property names in the prototype metadata
 * @param target
 * @param propertyName
 */
export declare function includeDSON(target: RadixSerializableObject, propertyName: string): void;
export declare class RadixSerializer {
    private static classes;
    private static primitives;
    /**
     * Decorator to register a class for serialization
     * @param serializer serializer id
     * @returns
     */
    static registerClass(serializer: string): (constructor: typeof RadixSerializableObject) => void;
    /**
     * Registers advanced 'primitive' types for serialization
     * @param tag
     * @returns
     */
    static registerPrimitive(tag: string): (constructor: Object & {
        fromJSON: (input: string) => void;
    }) => void;
    static toJSON(data: any): any;
    static fromJSON(json: any): any;
    static fromJSONObject(jsonObject: object): any;
    static toDSON(data: any): Buffer;
}
