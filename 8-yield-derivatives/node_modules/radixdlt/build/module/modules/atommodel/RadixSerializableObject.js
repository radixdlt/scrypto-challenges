import * as tslib_1 from "tslib";
import { RadixSerializer, includeJSON, includeDSON, JSON_PROPERTIES_KEY, DSON_PROPERTIES_KEY } from '.';
import { radixHash, isEmpty } from '../common/RadixUtil';
export class RadixSerializableObject {
    constructor(...args) {
        this.version = 100;
        // Empty constructor
    }
    static fromJSON(json) {
        // So that we can have constructors for the different classes
        const obj = Object.create(this.prototype);
        if (json) {
            for (const key in json) {
                if (key === 'constructor' || key === 'serializationProperties') {
                    continue;
                }
                obj[key] = json[key];
            }
        }
        return obj;
    }
    get serializer() {
        return this.constructor.SERIALIZER;
    }
    set serializer(_) {
        // Do nothing
    }
    toJSON() {
        const constructor = this.constructor;
        const output = { serializer: constructor.SERIALIZER };
        const serializationProps = Reflect.getMetadata(JSON_PROPERTIES_KEY, this);
        for (const key of serializationProps) {
            const serialized = RadixSerializer.toJSON(this[key]);
            if (!isEmpty(serialized)) {
                output[key] = serialized;
            }
        }
        return output;
    }
    toDSON() {
        return RadixSerializer.toDSON(this);
    }
    encodeCBOR(encoder) {
        // Streaming encoding for maps
        const serializationProps = Reflect.getMetadata(DSON_PROPERTIES_KEY, this);
        if (!encoder.push(Buffer.from([191]))) {
            return false;
        }
        for (const prop of serializationProps) {
            if (isEmpty(this[prop])) {
                continue;
            }
            if (!encoder.pushAny(prop)) {
                return false;
            }
            if (!encoder.pushAny(this[prop])) {
                return false;
            }
        }
        if (!encoder.push(Buffer.from([0xFF]))) {
            return false;
        }
        return true;
    }
    getHash() {
        return radixHash(this.toDSON());
    }
    getSize() {
        return this.toDSON().length;
    }
}
RadixSerializableObject.SERIALIZER = '';
tslib_1.__decorate([
    includeJSON,
    includeDSON,
    tslib_1.__metadata("design:type", Object)
], RadixSerializableObject.prototype, "version", void 0);
tslib_1.__decorate([
    includeDSON,
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], RadixSerializableObject.prototype, "serializer", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhTZXJpYWxpemFibGVPYmplY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy9hdG9tbW9kZWwvUmFkaXhTZXJpYWxpemFibGVPYmplY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxtQkFBbUIsRUFBYSxNQUFNLEdBQUcsQ0FBQztBQUNuSCxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXpELE1BQU0sT0FBTyx1QkFBdUI7SUFPaEMsWUFBWSxHQUFHLElBQVc7UUFGbkIsWUFBTyxHQUFHLEdBQUcsQ0FBQTtRQUdoQixvQkFBb0I7SUFDeEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBYTtRQUNoQyw2REFBNkQ7UUFDN0QsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7UUFFekMsSUFBSSxJQUFJLEVBQUU7WUFDTixLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtnQkFDcEIsSUFBSSxHQUFHLEtBQUssYUFBYSxJQUFJLEdBQUcsS0FBSyx5QkFBeUIsRUFBRTtvQkFDNUQsU0FBUTtpQkFDWDtnQkFFRCxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO2FBQ3ZCO1NBQ0o7UUFFRCxPQUFPLEdBQUcsQ0FBQTtJQUNkLENBQUM7SUFHRCxJQUFJLFVBQVU7UUFDVixPQUFRLElBQUksQ0FBQyxXQUE4QyxDQUFDLFVBQVUsQ0FBQTtJQUMxRSxDQUFDO0lBRUQsSUFBSSxVQUFVLENBQUMsQ0FBQztRQUNaLGFBQWE7SUFDakIsQ0FBQztJQUVNLE1BQU07UUFDVCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBNkMsQ0FBQTtRQUN0RSxNQUFNLE1BQU0sR0FBRyxFQUFFLFVBQVUsRUFBRSxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUE7UUFFckQsTUFBTSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxDQUFBO1FBRXpFLEtBQUssTUFBTSxHQUFHLElBQUksa0JBQWtCLEVBQUU7WUFDbEMsTUFBTSxVQUFVLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtZQUNwRCxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUN0QixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsVUFBVSxDQUFBO2FBQzNCO1NBQ0o7UUFFRCxPQUFPLE1BQU0sQ0FBQTtJQUNqQixDQUFDO0lBRU0sTUFBTTtRQUNULE9BQU8sZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN2QyxDQUFDO0lBRU0sVUFBVSxDQUFDLE9BQU87UUFDckIsOEJBQThCO1FBQzlCLE1BQU0sa0JBQWtCLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUV6RSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQUMsT0FBTyxLQUFLLENBQUE7U0FBQztRQUU3RCxLQUFLLE1BQU0sSUFBSSxJQUFJLGtCQUFrQixFQUFFO1lBQ25DLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO2dCQUNyQixTQUFRO2FBQ1g7WUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFBQyxPQUFPLEtBQUssQ0FBQTthQUFDO1lBQzFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO2dCQUFDLE9BQU8sS0FBSyxDQUFBO2FBQUM7U0FDbkQ7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQUMsT0FBTyxLQUFLLENBQUE7U0FBQztRQUV0RCxPQUFPLElBQUksQ0FBQTtJQUNmLENBQUM7SUFFTSxPQUFPO1FBQ1YsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7SUFDbkMsQ0FBQztJQUVNLE9BQU87UUFDVixPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUE7SUFDL0IsQ0FBQzs7QUFsRmEsa0NBQVUsR0FBRyxFQUFFLENBQUE7QUFJN0I7SUFGQyxXQUFXO0lBQ1gsV0FBVzs7d0RBQ1E7QUF3QnBCO0lBREMsV0FBVzs7O3lEQUdYIn0=