import axios from 'axios';
import { RadixSerializer } from '../atommodel';
import { RadixNode } from '../..';
/**
 * Node discovery from the Radix bootstrap service
 */
export default class RadixNodeDiscoveryFromNodeFinder {
    /**
     * Creates an instance of radix node discovery from node finder.
     * @param bootstrapService The full address to the node finder service for the universe
     */
    constructor(bootstrapService, wsAddress, httpAddress) {
        this.bootstrapService = bootstrapService;
        this.wsAddress = wsAddress;
        this.httpAddress = httpAddress;
    }
    async loadNodes() {
        const bootstrapNodeIP = (await axios.get(this.bootstrapService)).data;
        if (bootstrapNodeIP.length < 2) {
            throw new Error('Failed to get node list from bootstrap service');
        }
        const bootstrapNode = this.httpAddress(bootstrapNodeIP, 0);
        const getPeersRequestData = {
            id: 0,
            method: 'Network.getLivePeers',
            params: [],
        };
        const nodeListResponse = await axios.post(bootstrapNode, getPeersRequestData);
        const nodeList = RadixSerializer.fromJSON(nodeListResponse.data.result);
        if (nodeList.length === 0) {
            throw new Error('Bootstrap node has no connections');
        }
        return nodeList.map((peerInfo) => {
            return new RadixNode(peerInfo.system, this.wsAddress(peerInfo.host.ip, peerInfo.host.port), this.httpAddress(peerInfo.host.ip, peerInfo.host.port));
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhOb2RlRGlzY292ZXJ5RnJvbU5vZGVGaW5kZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy91bml2ZXJzZS9SYWRpeE5vZGVEaXNjb3ZlcnlGcm9tTm9kZUZpbmRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUE7QUFJekIsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGNBQWMsQ0FBQTtBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFhLE1BQU0sT0FBTyxDQUFDO0FBRTdDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sT0FBTyxnQ0FBZ0M7SUFFakQ7OztPQUdHO0lBQ0gsWUFDYSxnQkFBd0IsRUFDeEIsU0FBaUQsRUFDakQsV0FBbUQ7UUFGbkQscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFRO1FBQ3hCLGNBQVMsR0FBVCxTQUFTLENBQXdDO1FBQ2pELGdCQUFXLEdBQVgsV0FBVyxDQUF3QztJQUFHLENBQUM7SUFFN0QsS0FBSyxDQUFDLFNBQVM7UUFDbEIsTUFBTSxlQUFlLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7UUFDckUsSUFBSSxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLGdEQUFnRCxDQUFDLENBQUE7U0FDcEU7UUFDRCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUUxRCxNQUFNLG1CQUFtQixHQUFHO1lBQ3hCLEVBQUUsRUFBRSxDQUFDO1lBQ0wsTUFBTSxFQUFFLHNCQUFzQjtZQUM5QixNQUFNLEVBQUUsRUFBRTtTQUNiLENBQUE7UUFDRCxNQUFNLGdCQUFnQixHQUFHLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FDckMsYUFBYSxFQUNiLG1CQUFtQixDQUN0QixDQUFBO1FBRUQsTUFBTSxRQUFRLEdBQWdCLGVBQWUsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBRXBGLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFBO1NBQ3ZEO1FBRUQsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDN0IsT0FBTyxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUNoQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ3BELElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQy9ELENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztDQUNKIn0=