import { BehaviorSubject, Subject } from 'rxjs/Rx';
import { Client } from 'rpc-websockets';
import { RadixSerializer } from '../atommodel';
import { logger } from '../common/RadixLogger';
import events from 'events';
export class RadixNodeConnection extends events.EventEmitter {
    constructor(node) {
        super();
        this.node = node;
        this._subscriptions = {};
        this._atomUpdateSubjects = {};
        this._addressSubscriptions = {};
        this.lastSubscriberId = 1;
        this.ping = () => {
            if (this.isReady()) {
                this._socket
                    .call('Ping', { id: 0 }).then((response) => {
                    logger.debug(`Ping`, response);
                }).catch((error) => {
                    logger.warn(`Error sending ping`, error);
                });
            }
        };
        this.close = () => {
            this._socket.close();
            clearInterval(this.pingInterval);
        };
        this._onClosed = () => {
            logger.info('Socket closed');
            clearInterval(this.pingInterval);
            // Close subject
            for (const subscriberId in this._subscriptions) {
                const subscription = this._subscriptions[subscriberId];
                if (!subscription.closed) {
                    subscription.error('Socket closed');
                }
            }
            for (const subscriberId in this._atomUpdateSubjects) {
                const subject = this._atomUpdateSubjects[subscriberId];
                if (!subject.closed) {
                    subject.error('Socket closed');
                }
            }
            this.emit('closed');
        };
        this._onAtomStatusNotification = (notification) => {
            logger.info('Atom Status notification', notification);
            // Handle atom state update
            const subscriberId = notification.subscriberId;
            const value = notification.status;
            const message = JSON.stringify(notification.data);
            const subject = this._atomUpdateSubjects[subscriberId];
            switch (value) {
                case 'STORED':
                    subject.next(value);
                    subject.complete();
                    break;
                case 'EVICTED_CONFLICT_LOSER':
                case 'EVICTED_FAILED_CM_VERIFICATION':
                case 'MISSING_DEPEPENDENCY':
                case 'CONFLICT_LOSER':
                    subject.error(value + ': ' + message);
                    break;
            }
        };
        this._onAtomSubmissionStateUpdate = (notification) => {
            logger.info('Atom Submission state update', notification);
            // Handle atom state update
            const subscriberId = notification.subscriberId;
            const value = notification.value;
            const message = JSON.stringify(notification.data);
            const subject = this._atomUpdateSubjects[subscriberId];
            switch (value) {
                case 'SUBMITTING':
                case 'SUBMITTED':
                    subject.next(value);
                    break;
                case 'STORED':
                    subject.next(value);
                    subject.complete();
                    break;
                case 'COLLISION':
                case 'ILLEGAL_STATE':
                case 'UNSUITABLE_PEER':
                case 'VALIDATION_ERROR':
                    subject.error(value + ': ' + message);
                    break;
            }
        };
        this._onAtomReceivedNotification = (notification) => {
            logger.debug('Atoms notification', notification);
            // Store atom for testing
            // const jsonPath = `./atomNotification-${Math.random().toString(36).substring(6)}.json`
            // // let jsonPath = path.join(__dirname, '..', '..', '..', '..', 'atomNotification.json')
            // logger.info(jsonPath)
            // fs.writeFile(jsonPath, JSON.stringify(notification), (error) => {
            //    // Throws an error, you could also catch it here
            //    if (error) { throw error }
            //    // Success case, the file was saved
            //    logger.info('Atoms saved!')
            // })
            const deserializedAtomEvents = RadixSerializer.fromJSON(notification.atomEvents);
            logger.debug('Recieved atom AIDs, subscriberId: ' + notification.subscriberId, deserializedAtomEvents.map(event => {
                return { aid: event.atom.getAidString(), type: event.type };
            }));
            // logger.debug('AtomEvents', deserializedAtomEvents)
            // Forward atoms to correct wallets
            const subscription = this._subscriptions[notification.subscriberId];
            for (const event of deserializedAtomEvents) {
                subscription.next({
                    action: event.type.toUpperCase(),
                    atom: event.atom,
                    processedData: {},
                    // Only set to head if it is the last atom of an update
                    isHead: event === deserializedAtomEvents[deserializedAtomEvents.length - 1],
                });
            }
        };
        this.node = node;
    }
    getSubscriberId() {
        this.lastSubscriberId++;
        return this.lastSubscriberId + '';
    }
    /**
     * Check whether the node connection is ready for requests
     * @returns true if ready
     */
    isReady() {
        return this._socket && this._socket.ready;
    }
    /**
     * Opens connection
     * @returns a promise that resolves once the connection is ready, or rejects on error or timeout
     */
    async openConnection() {
        return new Promise((resolve, reject) => {
            this.address = this.node.wsAddress;
            // For testing atom queueing during connection issues
            // if (Math.random() > 0.1) {
            //    this.address += 'garbage'
            // }
            logger.info(`Connecting to ${this.address}`);
            this._socket = new Client(this.address, { reconnect: false });
            this._socket.on('close', this._onClosed);
            this._socket.on('error', error => {
                logger.error(error);
                reject(error);
            });
            setTimeout(() => {
                if (!this._socket.ready) {
                    logger.debug('Socket timeout');
                    this._socket.close();
                    this.emit('closed');
                    reject('Timeout');
                }
            }, 5000);
            this._socket.on('open', () => {
                logger.info(`Connected to ${this.address}`);
                this.pingInterval = setInterval(this.ping, 10000);
                this.emit('open');
                this._socket.on('Atoms.subscribeUpdate', this._onAtomReceivedNotification);
                this._socket.on('AtomSubmissionState.onNext', this._onAtomSubmissionStateUpdate);
                this._socket.on('Atoms.nextStatusEvent', this._onAtomStatusNotification);
                resolve();
            });
        });
    }
    /**
     * Subscribe for all existing and future atoms for a given address
     *
     * @param address Base58 formatted address
     * @returns A stream of atoms
     */
    subscribe(address) {
        const subscriberId = this.getSubscriberId();
        this._addressSubscriptions[address] = subscriberId;
        this._subscriptions[subscriberId] = new Subject();
        this._socket
            .call('Atoms.subscribe', {
            subscriberId,
            query: {
                address,
            },
            debug: true,
        })
            .then((response) => {
            logger.info(`Subscribed for address ${address}`, response);
        })
            .catch((error) => {
            logger.error(`Error subscribing for address ${address}`, error);
            this._subscriptions[subscriberId].error(error);
        });
        return this._subscriptions[subscriberId];
    }
    /**
     * Unsubscribe for all existing and future atoms for a given address
     *
     * @param address - Base58 formatted address
     * @returns A promise with the result of the unsubscription call
     */
    unsubscribe(address) {
        const subscriberId = this._addressSubscriptions[address];
        return new Promise((resolve, reject) => {
            this._socket
                .call('Atoms.cancel', {
                subscriberId,
            })
                .then((response) => {
                logger.info(`Unsubscribed for address ${address}`);
                this._subscriptions[this._addressSubscriptions[address]].complete();
                delete this._addressSubscriptions[address];
                resolve(response);
            })
                .catch((error) => {
                reject(error);
            });
        });
    }
    /**
     * Unsubscribes to all the addresses this node is subscribed to
     *
     * @returns An array with the result of each unsubscription
     */
    unsubscribeAll() {
        return new Promise((resolve, reject) => {
            const unsubscriptions = new Array();
            for (const address in this._addressSubscriptions) {
                unsubscriptions.push(this.unsubscribe(address));
            }
            Promise.all(unsubscriptions)
                .then((values) => {
                resolve(values);
            })
                .catch((error) => {
                reject(error);
            });
        });
    }
    /**
     * Submit an atom to the ledger
     *
     * @param atom - The atom to be submitted
     * @returns A stream of the status of the atom submission
     */
    submitAtom(atom) {
        // // Store atom for testing
        // let jsonPath = path.join('./submitAtom.json')
        // logger.info(jsonPath)
        // fs.writeFile(jsonPath, JSON.stringify(atom.toJSON()), (error) => {
        //    // Throws an error, you could also catch it here
        //    if (error) { throw error }
        //    // Success case, the file was saved
        //    logger.info('Atom saved!')
        // })
        const subscriberId = this.getSubscriberId();
        const atomStateSubject = new BehaviorSubject('CREATED');
        this._atomUpdateSubjects[subscriberId] = atomStateSubject;
        const timeout = setTimeout(() => {
            this._socket.close();
            atomStateSubject.error('Socket timeout');
        }, 5000);
        this._socket
            .call('Atoms.getAtomStatusNotifications', {
            subscriberId,
            aid: atom.getAidString(),
        })
            .then((response) => {
            let atomJSON = RadixSerializer.toJSON(atom);
            return this._socket.call('Atoms.submitAtom', atomJSON);
        })
            .then((response) => {
            if (response.aid !== atom.getAidString()) {
                throw new Error(`Local AID "${atom.getAidString()}" does not match that computed on the node "${response.aid}".
This is a radixdlt-js issue, please report this at https://github.com/radixdlt/radixdlt-js/issues . 
The atom may or may not have been accepted by the node.
                    `);
            }
            clearTimeout(timeout);
            atomStateSubject.next('SUBMITTED');
        })
            .catch((error) => {
            clearTimeout(timeout);
            atomStateSubject.error(error);
        });
        return atomStateSubject;
    }
    /**
     * NOT IMPLEMENTED
     * Query the ledger for an atom by its id
     * @param id
     * @returns The atom
     */
    async getAtomById(id) {
        // TODO: everything
        return this._socket
            .call('Atoms.getAtomInfo', { id: id.toJSON() })
            .then((response) => {
            return RadixSerializer.fromJSON(response.result);
        });
    }
}
export default RadixNodeConnection;
//# sourceMappingURL=data:application/json;base64,