/// <reference types="node" />
import { BehaviorSubject, Subject } from 'rxjs/Rx';
import { RadixAtom, RadixEUID, RadixAtomUpdate } from '../atommodel';
import events from 'events';
import { RadixNode } from '../..';
export declare interface RadixNodeConnection {
    on(event: 'closed' | 'open', listener: () => void): this;
}
export declare class RadixNodeConnection extends events.EventEmitter {
    readonly node: RadixNode;
    private pingInterval;
    private _socket;
    private _subscriptions;
    private _atomUpdateSubjects;
    private _addressSubscriptions;
    private lastSubscriberId;
    address: string;
    constructor(node: RadixNode);
    private getSubscriberId;
    /**
     * Check whether the node connection is ready for requests
     * @returns true if ready
     */
    isReady(): boolean;
    private ping;
    /**
     * Opens connection
     * @returns a promise that resolves once the connection is ready, or rejects on error or timeout
     */
    openConnection(): Promise<any>;
    /**
     * Subscribe for all existing and future atoms for a given address
     *
     * @param address Base58 formatted address
     * @returns A stream of atoms
     */
    subscribe(address: string): Subject<RadixAtomUpdate>;
    /**
     * Unsubscribe for all existing and future atoms for a given address
     *
     * @param address - Base58 formatted address
     * @returns A promise with the result of the unsubscription call
     */
    unsubscribe(address: string): Promise<any>;
    /**
     * Unsubscribes to all the addresses this node is subscribed to
     *
     * @returns An array with the result of each unsubscription
     */
    unsubscribeAll(): Promise<any>;
    /**
     * Submit an atom to the ledger
     *
     * @param atom - The atom to be submitted
     * @returns A stream of the status of the atom submission
     */
    submitAtom(atom: RadixAtom): BehaviorSubject<string>;
    /**
     * NOT IMPLEMENTED
     * Query the ledger for an atom by its id
     * @param id
     * @returns The atom
     */
    getAtomById(id: RadixEUID): Promise<any>;
    close: () => void;
    private _onClosed;
    private _onAtomStatusNotification;
    private _onAtomSubmissionStateUpdate;
    private _onAtomReceivedNotification;
}
export default RadixNodeConnection;
