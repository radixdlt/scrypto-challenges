import { logger } from '../common/RadixLogger';
import promiseRetry from 'promise-retry';
import { radixTokenManager, shuffleArray, RadixUniverseConfig, RadixNodeDiscoveryFromNodeFinder, RadixNodeDiscoveryHardcoded, RadixNodeDiscoveryHardcodedSecure, RadixNodeConnection } from '../..';
import { RadixTokenDefinitionParticle } from '../atommodel';
import ipaddr from 'ipaddr.js';
export default class RadixUniverse {
    constructor() {
        this.initialized = false;
        this.liveNodes = [];
        this.connectedNodes = [];
        this.lastNetworkUpdate = 0;
        this.networkUpdateInterval = 1000 * 60 * 10;
        /**
         * Close all open connections
         * Recommended to call this before quitting the application, so that nodes can close the corresponding open connections as well
         */
        this.closeAllConnections = () => {
            for (const connection of this.connectedNodes) {
                connection.close();
            }
        };
    }
    /**
     * Bootstraps the universe with a specific configuration
     * Must be called before performing any operations
     * Use one of the predefined static configurations in this class
     * @param config
     */
    bootstrap(config) {
        this.universeConfig = config.universeConfig;
        this.nodeDiscovery = config.nodeDiscovery;
        // Deserialize config
        this.universeConfig.initialize();
        // Find native token
        for (const atom of this.universeConfig.genesis) {
            const tokenClasses = atom.getParticlesOfType(RadixTokenDefinitionParticle);
            if (tokenClasses.length === 0) {
                throw new Error(`Couldn't find native token in genesis`);
            }
            else {
                if (tokenClasses.length > 1) {
                    logger.warn('More than 1 tokens defined in genesis, using the first');
                }
                this.nativeToken = tokenClasses[0].getRRI();
            }
        }
        radixTokenManager.initialize(this.universeConfig.genesis, this.nativeToken);
        this.initialized = true;
    }
    /**
     * Gets the universe magic byte, used mainly for generating an address from a public key
     * @returns
     */
    getMagicByte() {
        this.isInitialized();
        return this.universeConfig.getMagicByte();
    }
    loadPeersFromBootstrap() {
        // const bootstrapNodesLenght = (this.nodeDiscovery as RadixNodeDiscoveryHardcoded).bootstrapNodes.length;
        // if(bootstrapNodesLenght > 1)
        //     throw new Error('not cool ' + bootstrapNodesLenght)
        return promiseRetry(async (retry, attempt) => {
            try {
                this.liveNodes = await this.nodeDiscovery.loadNodes();
                this.lastNetworkUpdate = Date.now();
                return this.liveNodes;
            }
            catch (error) {
                logger.error(error);
                retry();
            }
        }, {
            retries: 1000,
            maxtimeout: 60000,
        });
    }
    /**
     * Gets a RadixNodeConnection for a specified shard
     * Updates the node list if neccessary
     * @param shard
     * @returns node connection
     */
    getNodeConnection(shard) {
        this.isInitialized();
        return new Promise((resolve, reject) => {
            // Find active connection, return
            for (const node of this.connectedNodes) {
                if (node.isReady() && node.node.canServiceShard(shard)) {
                    logger.info('Got an active connection');
                    return resolve(node);
                }
            }
            // Failing that, find a pending node connection
            for (const nodeConnection of this.connectedNodes) {
                if (nodeConnection.node.canServiceShard(shard)) {
                    logger.info('Got a pending connection');
                    // Wait for ready or error
                    nodeConnection.on('open', () => {
                        resolve(nodeConnection);
                    });
                    nodeConnection.on('closed', () => {
                        resolve(this.getNodeConnection(shard));
                    });
                    return;
                }
            }
            // Open a new connection, return when ready
            logger.info('Opening a new connection');
            this.openNodeConnection(shard).then((connection) => {
                if (connection) {
                    resolve(connection);
                }
                else {
                    reject(`Coudln't find a node to connect to`);
                }
            });
        });
    }
    async openNodeConnection(shard) {
        if (Date.now() - this.lastNetworkUpdate > this.networkUpdateInterval) {
            await this.loadPeersFromBootstrap();
        }
        // Randomize node order every time
        this.liveNodes = shuffleArray(this.liveNodes);
        for (const node of this.liveNodes) {
            if (node.canServiceShard(shard)) {
                const connection = new RadixNodeConnection(node);
                this.connectedNodes.push(connection);
                connection.on('closed', () => {
                    // Remove connection from connected nodes 
                    const nodeIndex = this.connectedNodes.indexOf(connection);
                    if (nodeIndex > -1) {
                        this.connectedNodes.splice(nodeIndex, 1);
                    }
                });
                try {
                    await connection.openConnection();
                }
                catch (error) {
                    logger.error(error);
                    return null;
                }
                return connection;
            }
        }
        return null;
    }
    getLiveNodes() {
        return this.liveNodes;
    }
    isInitialized() {
        if (!this.initialized) {
            throw new Error('Universe needs to be initialized before using the library, please call "radixUniverse.bootstrap" with a universe configuration');
        }
    }
    /**
     * Given an IP address this function resolves a deterministic
     * DNS record in the radixnode.net domain.
     *
     * @param address IP address or hostname
     */
    static resolveNodeName(address) {
        try {
            const ipbytes = ipaddr.parse(address).toByteArray();
            if (ipbytes.length == 4) { // IPv4
                // trivial but safe left-shift function that does not overflow
                const shl = (base, exp) => base * Math.pow(2, exp);
                // use + instead of | (bitwise or) because it overflows
                let ip = ipbytes[3] + shl(ipbytes[2], 8) + shl(ipbytes[1], 16) + shl(ipbytes[0], 24);
                return `a${ip.toString(36)}.radixnode.net`;
            }
            logger.warn('No base36 encoder for IPv6 yet');
            return `[${address}]`;
        }
        catch (err) {
            // the address has neither IPv6 nor IPv4 format => hostname
        }
        return address;
    }
}
RadixUniverse.BETANET = {
    universeConfig: RadixUniverseConfig.BETANET,
    nodeDiscovery: new RadixNodeDiscoveryFromNodeFinder('https://betanet-staging.radixdlt.com/node-finder', (ip, port) => `wss://${RadixUniverse.resolveNodeName(ip)}/rpc`, (ip, port) => `https://${RadixUniverse.resolveNodeName(ip)}/rpc`),
};
RadixUniverse.SUNSTONE = {
    universeConfig: RadixUniverseConfig.SUNSTONE,
    nodeDiscovery: new RadixNodeDiscoveryFromNodeFinder('https://sunstone.radixdlt.com/node-finder', (ip, port) => `wss://${RadixUniverse.resolveNodeName(ip)}/rpc`, (ip, port) => `https://${RadixUniverse.resolveNodeName(ip)}/rpc`),
};
RadixUniverse.LOCALHOST = {
    universeConfig: RadixUniverseConfig.LOCAL,
    nodeDiscovery: new RadixNodeDiscoveryHardcoded(['localhost:8080', 'localhost:8081']),
};
RadixUniverse.LOCALHOST_SINGLENODE = {
    universeConfig: RadixUniverseConfig.LOCAL,
    nodeDiscovery: new RadixNodeDiscoveryHardcoded(['localhost:8080']),
};
RadixUniverse.BETANET_EMULATOR = {
    universeConfig: RadixUniverseConfig.BETANET,
    nodeDiscovery: new RadixNodeDiscoveryHardcodedSecure(['sunstone-emu.radixdlt.com:443']),
};
export const radixUniverse = new RadixUniverse();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmFkaXhVbml2ZXJzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL3VuaXZlcnNlL1JhZGl4VW5pdmVyc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHVCQUF1QixDQUFBO0FBRzlDLE9BQU8sWUFBWSxNQUFNLGVBQWUsQ0FBQTtBQUN4QyxPQUFPLEVBQ0gsaUJBQWlCLEVBQ2pCLFlBQVksRUFFWixtQkFBbUIsRUFDbkIsZ0NBQWdDLEVBQ2hDLDJCQUEyQixFQUMzQixpQ0FBaUMsRUFFakMsbUJBQW1CLEVBQUUsTUFBTSxPQUFPLENBQUE7QUFDdEMsT0FBTyxFQUFFLDRCQUE0QixFQUFPLE1BQU0sY0FBYyxDQUFDO0FBQ2pFLE9BQU8sTUFBTSxNQUFNLFdBQVcsQ0FBQztBQUUvQixNQUFNLENBQUMsT0FBTyxPQUFPLGFBQWE7SUFBbEM7UUFrQ1csZ0JBQVcsR0FBRyxLQUFLLENBQUE7UUFNbEIsY0FBUyxHQUFnQixFQUFFLENBQUE7UUFDM0IsbUJBQWMsR0FBMEIsRUFBRSxDQUFBO1FBQzFDLHNCQUFpQixHQUFHLENBQUMsQ0FBQTtRQUNyQiwwQkFBcUIsR0FBRyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQTtRQTBKOUM7OztXQUdHO1FBQ0ksd0JBQW1CLEdBQUcsR0FBRyxFQUFFO1lBQzlCLEtBQUssTUFBTSxVQUFVLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtnQkFDMUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFBO2FBQ3JCO1FBQ0wsQ0FBQyxDQUFBO0lBcUNMLENBQUM7SUFyTUc7Ozs7O09BS0c7SUFDSSxTQUFTLENBQUMsTUFHaEI7UUFDRyxJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUE7UUFDM0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFBO1FBRXpDLHFCQUFxQjtRQUNyQixJ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