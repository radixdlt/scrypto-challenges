import * as L from "./index";
export { Node, List, list } from "./index";
export declare const prepend: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(value: any, l: L.List<any>) => L.List<any>>;
export declare const isList: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(l: any) => l is L.List<unknown>>;
export declare const append: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(value: any, l: L.List<any>) => L.List<any>>;
export declare const of: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(a: any) => L.List<any>>;
export declare const pair: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(first: any, second: any) => L.List<any>>;
export declare const empty: import("ts-toolbelt/out/types/src/Function/Curry").Curry<() => L.List<any>>;
export declare const repeat: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(value: any, times: number) => L.List<any>>;
export declare const times: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(func: (index: number) => unknown, times: number) => L.List<unknown>>;
export declare const length: import("ts-toolbelt/out/types/src/Function/Curry").Curry<typeof L.length>;
export declare const first: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(l: L.List<unknown>) => unknown>;
export declare const head: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(l: L.List<unknown>) => unknown>;
export declare const last: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(l: L.List<unknown>) => unknown>;
export declare const nth: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(index: number, l: L.List<unknown>) => unknown>;
export declare const map: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(f: (a: unknown) => unknown, l: L.List<unknown>) => L.List<unknown>>;
export declare const forEach: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(callback: (a: unknown) => void, l: L.List<unknown>) => void>;
export declare const pluck: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(key: string, l: L.List<unknown>) => unknown>;
export declare const range: import("ts-toolbelt/out/types/src/Function/Curry").Curry<typeof L.range>;
export declare const foldl: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(f: (acc: any, value: unknown) => any, initial: any, l: L.List<unknown>) => any>;
export declare const reduce: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(f: (acc: any, value: unknown) => any, initial: any, l: L.List<unknown>) => any>;
export declare const filter: import("ts-toolbelt/out/types/src/Function/Curry").Curry<typeof L.filter>;
export declare const reject: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(predicate: (a: unknown) => boolean, l: L.List<unknown>) => L.List<unknown>>;
export declare const partition: import("ts-toolbelt/out/types/src/Function/Curry").Curry<typeof L.partition>;
export declare const join: import("ts-toolbelt/out/types/src/Function/Curry").Curry<typeof L.join>;
export declare const foldr: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(f: (value: unknown, acc: any) => any, initial: any, l: L.List<unknown>) => any>;
export declare const reduceRight: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(f: (value: unknown, acc: any) => any, initial: any, l: L.List<unknown>) => any>;
export declare const ap: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(listF: L.List<(a: unknown) => unknown>, l: L.List<unknown>) => L.List<unknown>>;
export declare const chain: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(f: (a: unknown) => L.List<unknown>, l: L.List<unknown>) => L.List<unknown>>;
export declare const flatten: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(nested: L.List<L.List<unknown>>) => L.List<unknown>>;
export declare const every: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(predicate: (a: unknown) => boolean, l: L.List<unknown>) => boolean>;
export declare const all: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(predicate: (a: unknown) => boolean, l: L.List<unknown>) => boolean>;
export declare const some: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(predicate: (a: unknown) => boolean, l: L.List<unknown>) => boolean>;
export declare const any: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(predicate: (a: unknown) => boolean, l: L.List<unknown>) => boolean>;
export declare const none: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(predicate: (a: unknown) => boolean, l: L.List<unknown>) => boolean>;
export declare const find: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(predicate: (a: unknown) => boolean, l: L.List<unknown>) => unknown>;
export declare const indexOf: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(element: any, l: L.List<any>) => number>;
export declare const findIndex: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(predicate: (a: unknown) => boolean, l: L.List<unknown>) => number>;
export declare const includes: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(element: any, l: L.List<any>) => boolean>;
export declare const contains: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(element: any, l: L.List<any>) => boolean>;
export declare const equals: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(l1: L.List<unknown>, l2: L.List<unknown>) => boolean>;
export declare const concat: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(left: L.List<unknown>, right: L.List<unknown>) => L.List<unknown>>;
export declare const update: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(index: number, a: any, l: L.List<any>) => L.List<any>>;
export declare const adjust: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(index: number, f: (a: unknown) => unknown, l: L.List<unknown>) => L.List<unknown>>;
export declare const slice: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(from: number, to: number, l: L.List<unknown>) => L.List<unknown>>;
export declare const take: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(n: number, l: L.List<unknown>) => L.List<unknown>>;
export declare const takeWhile: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(predicate: (a: unknown) => boolean, l: L.List<unknown>) => L.List<unknown>>;
export declare const dropWhile: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(predicate: (a: unknown) => boolean, l: L.List<unknown>) => L.List<unknown>>;
export declare const takeLast: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(n: number, l: L.List<unknown>) => L.List<unknown>>;
export declare const splitAt: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(index: number, l: L.List<unknown>) => [L.List<unknown>, L.List<unknown>]>;
export declare const remove: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(from: number, amount: number, l: L.List<unknown>) => L.List<unknown>>;
export declare const reverse: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(l: L.List<unknown>) => L.List<unknown>>;
export declare const drop: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(n: number, l: L.List<unknown>) => L.List<unknown>>;
export declare const dropLast: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(n: number, l: L.List<unknown>) => L.List<unknown>>;
export declare const pop: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(l: L.List<unknown>) => L.List<unknown>>;
export declare const init: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(l: L.List<unknown>) => L.List<unknown>>;
export declare const tail: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(l: L.List<unknown>) => L.List<unknown>>;
export declare const toArray: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(l: L.List<unknown>) => unknown[]>;
export declare const from: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(sequence: unknown[] | ArrayLike<unknown> | Iterable<unknown>) => L.List<unknown>>;
export declare const insert: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(index: number, element: any, l: L.List<any>) => L.List<any>>;
export declare const insertAll: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(index: number, elements: L.List<unknown>, l: L.List<unknown>) => L.List<unknown>>;
export declare const zip: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(as: L.List<unknown>, bs: L.List<unknown>) => L.List<[unknown, unknown]>>;
export declare const zipWith: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(f: (a: unknown, b: unknown) => unknown, as: L.List<unknown>, bs: L.List<unknown>) => L.List<unknown>>;
export declare const sort: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(l: L.List<L.Comparable>) => L.List<L.Comparable>>;
export declare const sortWith: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(comparator: (a: unknown, b: unknown) => L.Ordering, l: L.List<unknown>) => L.List<unknown>>;
export declare const sortBy: import("ts-toolbelt/out/types/src/Function/Curry").Curry<(f: (a: unknown) => L.Comparable, l: L.List<unknown>) => L.List<unknown>>;
