"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ramda_1 = require("ramda");
var L = require("./index");
var index_1 = require("./index");
exports.Node = index_1.Node;
exports.List = index_1.List;
exports.list = index_1.list;
exports.prepend = ramda_1.curry(L.prepend);
exports.isList = ramda_1.curry(L.isList);
exports.append = ramda_1.curry(L.append);
exports.of = ramda_1.curry(L.of);
exports.pair = ramda_1.curry(L.pair);
exports.empty = ramda_1.curry(L.empty);
exports.repeat = ramda_1.curry(L.repeat);
exports.times = ramda_1.curry(L.times);
exports.length = ramda_1.curry(L.length);
exports.first = ramda_1.curry(L.first);
exports.head = exports.first;
exports.last = ramda_1.curry(L.last);
exports.nth = ramda_1.curry(L.nth);
exports.map = ramda_1.curry(L.map);
exports.forEach = ramda_1.curry(L.forEach);
exports.pluck = ramda_1.curry(L.pluck);
exports.range = ramda_1.curry(L.range);
exports.foldl = ramda_1.curry(L.foldl);
exports.reduce = exports.foldl;
exports.filter = ramda_1.curry(L.filter);
exports.reject = ramda_1.curry(L.reject);
exports.partition = ramda_1.curry(L.partition);
exports.join = ramda_1.curry(L.join);
exports.foldr = ramda_1.curry(L.foldr);
exports.reduceRight = exports.foldr;
exports.ap = ramda_1.curry(L.ap);
exports.chain = ramda_1.curry(L.chain);
exports.flatten = ramda_1.curry(L.flatten);
exports.every = ramda_1.curry(L.every);
exports.all = exports.every;
exports.some = ramda_1.curry(L.some);
exports.any = exports.some;
exports.none = ramda_1.curry(L.none);
exports.find = ramda_1.curry(L.find);
exports.indexOf = ramda_1.curry(L.indexOf);
exports.findIndex = ramda_1.curry(L.findIndex);
exports.includes = ramda_1.curry(L.includes);
exports.contains = exports.includes;
exports.equals = ramda_1.curry(L.equals);
exports.concat = ramda_1.curry(L.concat);
exports.update = ramda_1.curry(L.update);
exports.adjust = ramda_1.curry(L.adjust);
exports.slice = ramda_1.curry(L.slice);
exports.take = ramda_1.curry(L.take);
exports.takeWhile = ramda_1.curry(L.takeWhile);
exports.dropWhile = ramda_1.curry(L.dropWhile);
exports.takeLast = ramda_1.curry(L.takeLast);
exports.splitAt = ramda_1.curry(L.splitAt);
exports.remove = ramda_1.curry(L.remove);
exports.reverse = ramda_1.curry(L.reverse);
exports.drop = ramda_1.curry(L.drop);
exports.dropLast = ramda_1.curry(L.dropLast);
exports.pop = ramda_1.curry(L.pop);
exports.init = exports.pop;
exports.tail = ramda_1.curry(L.tail);
exports.toArray = ramda_1.curry(L.toArray);
exports.from = ramda_1.curry(L.from);
exports.insert = ramda_1.curry(L.insert);
exports.insertAll = ramda_1.curry(L.insertAll);
exports.zip = ramda_1.curry(L.zip);
exports.zipWith = ramda_1.curry(L.zipWith);
exports.sort = ramda_1.curry(L.sort);
exports.sortWith = ramda_1.curry(L.sortWith);
exports.sortBy = ramda_1.curry(L.sortBy);
