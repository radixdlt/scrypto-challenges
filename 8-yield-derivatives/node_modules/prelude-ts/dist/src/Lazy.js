"use strict";
exports.__esModule = true;
var Value_1 = require("./Value");
var SeqHelpers_1 = require("./SeqHelpers");
/**
 * Represent a lazily evaluated value. You give a function which
 * will return a value; that function is only called when the value
 * is requested from Lazy, but it will be computed at most once.
 * If the value is requested again, the previously computed result
 * will be returned: Lazy is memoizing.
 */
var Lazy = /** @class */ (function () {
    function Lazy(thunk) {
        this.thunk = thunk;
    }
    /**
     * Build a Lazy from a computation returning a value.
     * The computation will be called at most once.
     */
    Lazy.of = function (thunk) {
        return new Lazy(thunk);
    };
    /**
     * Evaluate the value, cache its value, and return it, or return the
     * previously computed value.
     */
    Lazy.prototype.get = function () {
        if (this.thunk) {
            this.value = this.thunk();
            this.thunk = undefined;
        }
        return this.value;
    };
    /**
     * Returns true if the computation underlying this Lazy was already
     * performed, false otherwise.
     */
    Lazy.prototype.isEvaluated = function () {
        return this.thunk === undefined;
    };
    /**
     * Return a new lazy where the element was transformed
     * by the mapper function you give.
     */
    Lazy.prototype.map = function (mapper) {
        var _this = this;
        return new Lazy(function () { return mapper(_this.get()); });
    };
    /**
     * Get a human-friendly string representation of that value.
     */
    Lazy.prototype.toString = function () {
        return this.isEvaluated() ?
            "Lazy(" + SeqHelpers_1.toStringHelper(this.get()) + ")" :
            "Lazy(?)";
    };
    /**
     * Used by the node REPL to display values.
     * Most of the time should be the same as toString()
     */
    Lazy.prototype[Value_1.inspect] = function () {
        return this.toString();
    };
    return Lazy;
}());
exports.Lazy = Lazy;
//# sourceMappingURL=Lazy.js.map